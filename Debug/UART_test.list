
UART_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096e0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  080097a0  080097a0  0000a7a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c18  08009c18  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009c18  08009c18  0000ac18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c20  08009c20  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c20  08009c20  0000ac20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c24  08009c24  0000ac24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009c28  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  200001d8  08009e00  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08009e00  0000b440  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009cc8  00000000  00000000  0000b200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a2d  00000000  00000000  00014ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  000168f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006a1  00000000  00000000  000171a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016085  00000000  00000000  00017849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bcb3  00000000  00000000  0002d8ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f1f  00000000  00000000  00039581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd4a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031e8  00000000  00000000  000bd4e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000c06cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009788 	.word	0x08009788

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	08009788 	.word	0x08009788

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f8b1 	bl	80015a4 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fff5 	bl	800143c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f8a3 	bl	80015a4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f899 	bl	80015a4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f81f 	bl	80014c4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f815 	bl	80014c4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	@ (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f806 	bl	80004e8 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			@ (mov r8, r8)

080004e8 <__udivmoddi4>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	4657      	mov	r7, sl
 80004ec:	464e      	mov	r6, r9
 80004ee:	4645      	mov	r5, r8
 80004f0:	46de      	mov	lr, fp
 80004f2:	b5e0      	push	{r5, r6, r7, lr}
 80004f4:	0004      	movs	r4, r0
 80004f6:	000d      	movs	r5, r1
 80004f8:	4692      	mov	sl, r2
 80004fa:	4699      	mov	r9, r3
 80004fc:	b083      	sub	sp, #12
 80004fe:	428b      	cmp	r3, r1
 8000500:	d830      	bhi.n	8000564 <__udivmoddi4+0x7c>
 8000502:	d02d      	beq.n	8000560 <__udivmoddi4+0x78>
 8000504:	4649      	mov	r1, r9
 8000506:	4650      	mov	r0, sl
 8000508:	f002 f942 	bl	8002790 <__clzdi2>
 800050c:	0029      	movs	r1, r5
 800050e:	0006      	movs	r6, r0
 8000510:	0020      	movs	r0, r4
 8000512:	f002 f93d 	bl	8002790 <__clzdi2>
 8000516:	1a33      	subs	r3, r6, r0
 8000518:	4698      	mov	r8, r3
 800051a:	3b20      	subs	r3, #32
 800051c:	d434      	bmi.n	8000588 <__udivmoddi4+0xa0>
 800051e:	469b      	mov	fp, r3
 8000520:	4653      	mov	r3, sl
 8000522:	465a      	mov	r2, fp
 8000524:	4093      	lsls	r3, r2
 8000526:	4642      	mov	r2, r8
 8000528:	001f      	movs	r7, r3
 800052a:	4653      	mov	r3, sl
 800052c:	4093      	lsls	r3, r2
 800052e:	001e      	movs	r6, r3
 8000530:	42af      	cmp	r7, r5
 8000532:	d83b      	bhi.n	80005ac <__udivmoddi4+0xc4>
 8000534:	42af      	cmp	r7, r5
 8000536:	d100      	bne.n	800053a <__udivmoddi4+0x52>
 8000538:	e079      	b.n	800062e <__udivmoddi4+0x146>
 800053a:	465b      	mov	r3, fp
 800053c:	1ba4      	subs	r4, r4, r6
 800053e:	41bd      	sbcs	r5, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	da00      	bge.n	8000546 <__udivmoddi4+0x5e>
 8000544:	e076      	b.n	8000634 <__udivmoddi4+0x14c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	465a      	mov	r2, fp
 8000552:	4093      	lsls	r3, r2
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	4642      	mov	r2, r8
 800055a:	4093      	lsls	r3, r2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	e029      	b.n	80005b4 <__udivmoddi4+0xcc>
 8000560:	4282      	cmp	r2, r0
 8000562:	d9cf      	bls.n	8000504 <__udivmoddi4+0x1c>
 8000564:	2200      	movs	r2, #0
 8000566:	2300      	movs	r3, #0
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <__udivmoddi4+0x8e>
 8000572:	601c      	str	r4, [r3, #0]
 8000574:	605d      	str	r5, [r3, #4]
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	b003      	add	sp, #12
 800057c:	bcf0      	pop	{r4, r5, r6, r7}
 800057e:	46bb      	mov	fp, r7
 8000580:	46b2      	mov	sl, r6
 8000582:	46a9      	mov	r9, r5
 8000584:	46a0      	mov	r8, r4
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000588:	4642      	mov	r2, r8
 800058a:	469b      	mov	fp, r3
 800058c:	2320      	movs	r3, #32
 800058e:	1a9b      	subs	r3, r3, r2
 8000590:	4652      	mov	r2, sl
 8000592:	40da      	lsrs	r2, r3
 8000594:	4641      	mov	r1, r8
 8000596:	0013      	movs	r3, r2
 8000598:	464a      	mov	r2, r9
 800059a:	408a      	lsls	r2, r1
 800059c:	0017      	movs	r7, r2
 800059e:	4642      	mov	r2, r8
 80005a0:	431f      	orrs	r7, r3
 80005a2:	4653      	mov	r3, sl
 80005a4:	4093      	lsls	r3, r2
 80005a6:	001e      	movs	r6, r3
 80005a8:	42af      	cmp	r7, r5
 80005aa:	d9c3      	bls.n	8000534 <__udivmoddi4+0x4c>
 80005ac:	2200      	movs	r2, #0
 80005ae:	2300      	movs	r3, #0
 80005b0:	9200      	str	r2, [sp, #0]
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	4643      	mov	r3, r8
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0d8      	beq.n	800056c <__udivmoddi4+0x84>
 80005ba:	07fb      	lsls	r3, r7, #31
 80005bc:	0872      	lsrs	r2, r6, #1
 80005be:	431a      	orrs	r2, r3
 80005c0:	4646      	mov	r6, r8
 80005c2:	087b      	lsrs	r3, r7, #1
 80005c4:	e00e      	b.n	80005e4 <__udivmoddi4+0xfc>
 80005c6:	42ab      	cmp	r3, r5
 80005c8:	d101      	bne.n	80005ce <__udivmoddi4+0xe6>
 80005ca:	42a2      	cmp	r2, r4
 80005cc:	d80c      	bhi.n	80005e8 <__udivmoddi4+0x100>
 80005ce:	1aa4      	subs	r4, r4, r2
 80005d0:	419d      	sbcs	r5, r3
 80005d2:	2001      	movs	r0, #1
 80005d4:	1924      	adds	r4, r4, r4
 80005d6:	416d      	adcs	r5, r5
 80005d8:	2100      	movs	r1, #0
 80005da:	3e01      	subs	r6, #1
 80005dc:	1824      	adds	r4, r4, r0
 80005de:	414d      	adcs	r5, r1
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d006      	beq.n	80005f2 <__udivmoddi4+0x10a>
 80005e4:	42ab      	cmp	r3, r5
 80005e6:	d9ee      	bls.n	80005c6 <__udivmoddi4+0xde>
 80005e8:	3e01      	subs	r6, #1
 80005ea:	1924      	adds	r4, r4, r4
 80005ec:	416d      	adcs	r5, r5
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	d1f8      	bne.n	80005e4 <__udivmoddi4+0xfc>
 80005f2:	9800      	ldr	r0, [sp, #0]
 80005f4:	9901      	ldr	r1, [sp, #4]
 80005f6:	465b      	mov	r3, fp
 80005f8:	1900      	adds	r0, r0, r4
 80005fa:	4169      	adcs	r1, r5
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db24      	blt.n	800064a <__udivmoddi4+0x162>
 8000600:	002b      	movs	r3, r5
 8000602:	465a      	mov	r2, fp
 8000604:	4644      	mov	r4, r8
 8000606:	40d3      	lsrs	r3, r2
 8000608:	002a      	movs	r2, r5
 800060a:	40e2      	lsrs	r2, r4
 800060c:	001c      	movs	r4, r3
 800060e:	465b      	mov	r3, fp
 8000610:	0015      	movs	r5, r2
 8000612:	2b00      	cmp	r3, #0
 8000614:	db2a      	blt.n	800066c <__udivmoddi4+0x184>
 8000616:	0026      	movs	r6, r4
 8000618:	409e      	lsls	r6, r3
 800061a:	0033      	movs	r3, r6
 800061c:	0026      	movs	r6, r4
 800061e:	4647      	mov	r7, r8
 8000620:	40be      	lsls	r6, r7
 8000622:	0032      	movs	r2, r6
 8000624:	1a80      	subs	r0, r0, r2
 8000626:	4199      	sbcs	r1, r3
 8000628:	9000      	str	r0, [sp, #0]
 800062a:	9101      	str	r1, [sp, #4]
 800062c:	e79e      	b.n	800056c <__udivmoddi4+0x84>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d8bc      	bhi.n	80005ac <__udivmoddi4+0xc4>
 8000632:	e782      	b.n	800053a <__udivmoddi4+0x52>
 8000634:	4642      	mov	r2, r8
 8000636:	2320      	movs	r3, #32
 8000638:	2100      	movs	r1, #0
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	2200      	movs	r2, #0
 800063e:	9100      	str	r1, [sp, #0]
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	2201      	movs	r2, #1
 8000644:	40da      	lsrs	r2, r3
 8000646:	9201      	str	r2, [sp, #4]
 8000648:	e785      	b.n	8000556 <__udivmoddi4+0x6e>
 800064a:	4642      	mov	r2, r8
 800064c:	2320      	movs	r3, #32
 800064e:	1a9b      	subs	r3, r3, r2
 8000650:	002a      	movs	r2, r5
 8000652:	4646      	mov	r6, r8
 8000654:	409a      	lsls	r2, r3
 8000656:	0023      	movs	r3, r4
 8000658:	40f3      	lsrs	r3, r6
 800065a:	4644      	mov	r4, r8
 800065c:	4313      	orrs	r3, r2
 800065e:	002a      	movs	r2, r5
 8000660:	40e2      	lsrs	r2, r4
 8000662:	001c      	movs	r4, r3
 8000664:	465b      	mov	r3, fp
 8000666:	0015      	movs	r5, r2
 8000668:	2b00      	cmp	r3, #0
 800066a:	dad4      	bge.n	8000616 <__udivmoddi4+0x12e>
 800066c:	4642      	mov	r2, r8
 800066e:	002f      	movs	r7, r5
 8000670:	2320      	movs	r3, #32
 8000672:	0026      	movs	r6, r4
 8000674:	4097      	lsls	r7, r2
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	40de      	lsrs	r6, r3
 800067a:	003b      	movs	r3, r7
 800067c:	4333      	orrs	r3, r6
 800067e:	e7cd      	b.n	800061c <__udivmoddi4+0x134>

08000680 <__aeabi_dadd>:
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	464f      	mov	r7, r9
 8000684:	4646      	mov	r6, r8
 8000686:	46d6      	mov	lr, sl
 8000688:	b5c0      	push	{r6, r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	9000      	str	r0, [sp, #0]
 800068e:	9101      	str	r1, [sp, #4]
 8000690:	030e      	lsls	r6, r1, #12
 8000692:	004c      	lsls	r4, r1, #1
 8000694:	0fcd      	lsrs	r5, r1, #31
 8000696:	0a71      	lsrs	r1, r6, #9
 8000698:	9e00      	ldr	r6, [sp, #0]
 800069a:	005f      	lsls	r7, r3, #1
 800069c:	0f76      	lsrs	r6, r6, #29
 800069e:	430e      	orrs	r6, r1
 80006a0:	9900      	ldr	r1, [sp, #0]
 80006a2:	9200      	str	r2, [sp, #0]
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	00c9      	lsls	r1, r1, #3
 80006a8:	4689      	mov	r9, r1
 80006aa:	0319      	lsls	r1, r3, #12
 80006ac:	0d7b      	lsrs	r3, r7, #21
 80006ae:	4698      	mov	r8, r3
 80006b0:	9b01      	ldr	r3, [sp, #4]
 80006b2:	0a49      	lsrs	r1, r1, #9
 80006b4:	0fdb      	lsrs	r3, r3, #31
 80006b6:	469c      	mov	ip, r3
 80006b8:	9b00      	ldr	r3, [sp, #0]
 80006ba:	9a00      	ldr	r2, [sp, #0]
 80006bc:	0f5b      	lsrs	r3, r3, #29
 80006be:	430b      	orrs	r3, r1
 80006c0:	4641      	mov	r1, r8
 80006c2:	0d64      	lsrs	r4, r4, #21
 80006c4:	00d2      	lsls	r2, r2, #3
 80006c6:	1a61      	subs	r1, r4, r1
 80006c8:	4565      	cmp	r5, ip
 80006ca:	d100      	bne.n	80006ce <__aeabi_dadd+0x4e>
 80006cc:	e0a6      	b.n	800081c <__aeabi_dadd+0x19c>
 80006ce:	2900      	cmp	r1, #0
 80006d0:	dd72      	ble.n	80007b8 <__aeabi_dadd+0x138>
 80006d2:	4647      	mov	r7, r8
 80006d4:	2f00      	cmp	r7, #0
 80006d6:	d100      	bne.n	80006da <__aeabi_dadd+0x5a>
 80006d8:	e0dd      	b.n	8000896 <__aeabi_dadd+0x216>
 80006da:	4fcc      	ldr	r7, [pc, #816]	@ (8000a0c <__aeabi_dadd+0x38c>)
 80006dc:	42bc      	cmp	r4, r7
 80006de:	d100      	bne.n	80006e2 <__aeabi_dadd+0x62>
 80006e0:	e19a      	b.n	8000a18 <__aeabi_dadd+0x398>
 80006e2:	2701      	movs	r7, #1
 80006e4:	2938      	cmp	r1, #56	@ 0x38
 80006e6:	dc17      	bgt.n	8000718 <__aeabi_dadd+0x98>
 80006e8:	2780      	movs	r7, #128	@ 0x80
 80006ea:	043f      	lsls	r7, r7, #16
 80006ec:	433b      	orrs	r3, r7
 80006ee:	291f      	cmp	r1, #31
 80006f0:	dd00      	ble.n	80006f4 <__aeabi_dadd+0x74>
 80006f2:	e1dd      	b.n	8000ab0 <__aeabi_dadd+0x430>
 80006f4:	2720      	movs	r7, #32
 80006f6:	1a78      	subs	r0, r7, r1
 80006f8:	001f      	movs	r7, r3
 80006fa:	4087      	lsls	r7, r0
 80006fc:	46ba      	mov	sl, r7
 80006fe:	0017      	movs	r7, r2
 8000700:	40cf      	lsrs	r7, r1
 8000702:	4684      	mov	ip, r0
 8000704:	0038      	movs	r0, r7
 8000706:	4657      	mov	r7, sl
 8000708:	4307      	orrs	r7, r0
 800070a:	4660      	mov	r0, ip
 800070c:	4082      	lsls	r2, r0
 800070e:	40cb      	lsrs	r3, r1
 8000710:	1e50      	subs	r0, r2, #1
 8000712:	4182      	sbcs	r2, r0
 8000714:	1af6      	subs	r6, r6, r3
 8000716:	4317      	orrs	r7, r2
 8000718:	464b      	mov	r3, r9
 800071a:	1bdf      	subs	r7, r3, r7
 800071c:	45b9      	cmp	r9, r7
 800071e:	4180      	sbcs	r0, r0
 8000720:	4240      	negs	r0, r0
 8000722:	1a36      	subs	r6, r6, r0
 8000724:	0233      	lsls	r3, r6, #8
 8000726:	d400      	bmi.n	800072a <__aeabi_dadd+0xaa>
 8000728:	e0ff      	b.n	800092a <__aeabi_dadd+0x2aa>
 800072a:	0276      	lsls	r6, r6, #9
 800072c:	0a76      	lsrs	r6, r6, #9
 800072e:	2e00      	cmp	r6, #0
 8000730:	d100      	bne.n	8000734 <__aeabi_dadd+0xb4>
 8000732:	e13c      	b.n	80009ae <__aeabi_dadd+0x32e>
 8000734:	0030      	movs	r0, r6
 8000736:	f002 f80d 	bl	8002754 <__clzsi2>
 800073a:	0003      	movs	r3, r0
 800073c:	3b08      	subs	r3, #8
 800073e:	2120      	movs	r1, #32
 8000740:	0038      	movs	r0, r7
 8000742:	1aca      	subs	r2, r1, r3
 8000744:	40d0      	lsrs	r0, r2
 8000746:	409e      	lsls	r6, r3
 8000748:	0002      	movs	r2, r0
 800074a:	409f      	lsls	r7, r3
 800074c:	4332      	orrs	r2, r6
 800074e:	429c      	cmp	r4, r3
 8000750:	dd00      	ble.n	8000754 <__aeabi_dadd+0xd4>
 8000752:	e1a6      	b.n	8000aa2 <__aeabi_dadd+0x422>
 8000754:	1b18      	subs	r0, r3, r4
 8000756:	3001      	adds	r0, #1
 8000758:	1a09      	subs	r1, r1, r0
 800075a:	003e      	movs	r6, r7
 800075c:	408f      	lsls	r7, r1
 800075e:	40c6      	lsrs	r6, r0
 8000760:	1e7b      	subs	r3, r7, #1
 8000762:	419f      	sbcs	r7, r3
 8000764:	0013      	movs	r3, r2
 8000766:	408b      	lsls	r3, r1
 8000768:	4337      	orrs	r7, r6
 800076a:	431f      	orrs	r7, r3
 800076c:	40c2      	lsrs	r2, r0
 800076e:	003b      	movs	r3, r7
 8000770:	0016      	movs	r6, r2
 8000772:	2400      	movs	r4, #0
 8000774:	4313      	orrs	r3, r2
 8000776:	d100      	bne.n	800077a <__aeabi_dadd+0xfa>
 8000778:	e1df      	b.n	8000b3a <__aeabi_dadd+0x4ba>
 800077a:	077b      	lsls	r3, r7, #29
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0x100>
 800077e:	e332      	b.n	8000de6 <__aeabi_dadd+0x766>
 8000780:	230f      	movs	r3, #15
 8000782:	003a      	movs	r2, r7
 8000784:	403b      	ands	r3, r7
 8000786:	2b04      	cmp	r3, #4
 8000788:	d004      	beq.n	8000794 <__aeabi_dadd+0x114>
 800078a:	1d3a      	adds	r2, r7, #4
 800078c:	42ba      	cmp	r2, r7
 800078e:	41bf      	sbcs	r7, r7
 8000790:	427f      	negs	r7, r7
 8000792:	19f6      	adds	r6, r6, r7
 8000794:	0233      	lsls	r3, r6, #8
 8000796:	d400      	bmi.n	800079a <__aeabi_dadd+0x11a>
 8000798:	e323      	b.n	8000de2 <__aeabi_dadd+0x762>
 800079a:	4b9c      	ldr	r3, [pc, #624]	@ (8000a0c <__aeabi_dadd+0x38c>)
 800079c:	3401      	adds	r4, #1
 800079e:	429c      	cmp	r4, r3
 80007a0:	d100      	bne.n	80007a4 <__aeabi_dadd+0x124>
 80007a2:	e0b4      	b.n	800090e <__aeabi_dadd+0x28e>
 80007a4:	4b9a      	ldr	r3, [pc, #616]	@ (8000a10 <__aeabi_dadd+0x390>)
 80007a6:	0564      	lsls	r4, r4, #21
 80007a8:	401e      	ands	r6, r3
 80007aa:	0d64      	lsrs	r4, r4, #21
 80007ac:	0777      	lsls	r7, r6, #29
 80007ae:	08d2      	lsrs	r2, r2, #3
 80007b0:	0276      	lsls	r6, r6, #9
 80007b2:	4317      	orrs	r7, r2
 80007b4:	0b36      	lsrs	r6, r6, #12
 80007b6:	e0ac      	b.n	8000912 <__aeabi_dadd+0x292>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	d100      	bne.n	80007be <__aeabi_dadd+0x13e>
 80007bc:	e07e      	b.n	80008bc <__aeabi_dadd+0x23c>
 80007be:	4641      	mov	r1, r8
 80007c0:	1b09      	subs	r1, r1, r4
 80007c2:	2c00      	cmp	r4, #0
 80007c4:	d000      	beq.n	80007c8 <__aeabi_dadd+0x148>
 80007c6:	e160      	b.n	8000a8a <__aeabi_dadd+0x40a>
 80007c8:	0034      	movs	r4, r6
 80007ca:	4648      	mov	r0, r9
 80007cc:	4304      	orrs	r4, r0
 80007ce:	d100      	bne.n	80007d2 <__aeabi_dadd+0x152>
 80007d0:	e1c9      	b.n	8000b66 <__aeabi_dadd+0x4e6>
 80007d2:	1e4c      	subs	r4, r1, #1
 80007d4:	2901      	cmp	r1, #1
 80007d6:	d100      	bne.n	80007da <__aeabi_dadd+0x15a>
 80007d8:	e22e      	b.n	8000c38 <__aeabi_dadd+0x5b8>
 80007da:	4d8c      	ldr	r5, [pc, #560]	@ (8000a0c <__aeabi_dadd+0x38c>)
 80007dc:	42a9      	cmp	r1, r5
 80007de:	d100      	bne.n	80007e2 <__aeabi_dadd+0x162>
 80007e0:	e224      	b.n	8000c2c <__aeabi_dadd+0x5ac>
 80007e2:	2701      	movs	r7, #1
 80007e4:	2c38      	cmp	r4, #56	@ 0x38
 80007e6:	dc11      	bgt.n	800080c <__aeabi_dadd+0x18c>
 80007e8:	0021      	movs	r1, r4
 80007ea:	291f      	cmp	r1, #31
 80007ec:	dd00      	ble.n	80007f0 <__aeabi_dadd+0x170>
 80007ee:	e20b      	b.n	8000c08 <__aeabi_dadd+0x588>
 80007f0:	2420      	movs	r4, #32
 80007f2:	0037      	movs	r7, r6
 80007f4:	4648      	mov	r0, r9
 80007f6:	1a64      	subs	r4, r4, r1
 80007f8:	40a7      	lsls	r7, r4
 80007fa:	40c8      	lsrs	r0, r1
 80007fc:	4307      	orrs	r7, r0
 80007fe:	4648      	mov	r0, r9
 8000800:	40a0      	lsls	r0, r4
 8000802:	40ce      	lsrs	r6, r1
 8000804:	1e44      	subs	r4, r0, #1
 8000806:	41a0      	sbcs	r0, r4
 8000808:	1b9b      	subs	r3, r3, r6
 800080a:	4307      	orrs	r7, r0
 800080c:	1bd7      	subs	r7, r2, r7
 800080e:	42ba      	cmp	r2, r7
 8000810:	4192      	sbcs	r2, r2
 8000812:	4252      	negs	r2, r2
 8000814:	4665      	mov	r5, ip
 8000816:	4644      	mov	r4, r8
 8000818:	1a9e      	subs	r6, r3, r2
 800081a:	e783      	b.n	8000724 <__aeabi_dadd+0xa4>
 800081c:	2900      	cmp	r1, #0
 800081e:	dc00      	bgt.n	8000822 <__aeabi_dadd+0x1a2>
 8000820:	e09c      	b.n	800095c <__aeabi_dadd+0x2dc>
 8000822:	4647      	mov	r7, r8
 8000824:	2f00      	cmp	r7, #0
 8000826:	d167      	bne.n	80008f8 <__aeabi_dadd+0x278>
 8000828:	001f      	movs	r7, r3
 800082a:	4317      	orrs	r7, r2
 800082c:	d100      	bne.n	8000830 <__aeabi_dadd+0x1b0>
 800082e:	e0e4      	b.n	80009fa <__aeabi_dadd+0x37a>
 8000830:	1e48      	subs	r0, r1, #1
 8000832:	2901      	cmp	r1, #1
 8000834:	d100      	bne.n	8000838 <__aeabi_dadd+0x1b8>
 8000836:	e19b      	b.n	8000b70 <__aeabi_dadd+0x4f0>
 8000838:	4f74      	ldr	r7, [pc, #464]	@ (8000a0c <__aeabi_dadd+0x38c>)
 800083a:	42b9      	cmp	r1, r7
 800083c:	d100      	bne.n	8000840 <__aeabi_dadd+0x1c0>
 800083e:	e0eb      	b.n	8000a18 <__aeabi_dadd+0x398>
 8000840:	2701      	movs	r7, #1
 8000842:	0001      	movs	r1, r0
 8000844:	2838      	cmp	r0, #56	@ 0x38
 8000846:	dc11      	bgt.n	800086c <__aeabi_dadd+0x1ec>
 8000848:	291f      	cmp	r1, #31
 800084a:	dd00      	ble.n	800084e <__aeabi_dadd+0x1ce>
 800084c:	e1c7      	b.n	8000bde <__aeabi_dadd+0x55e>
 800084e:	2720      	movs	r7, #32
 8000850:	1a78      	subs	r0, r7, r1
 8000852:	001f      	movs	r7, r3
 8000854:	4684      	mov	ip, r0
 8000856:	4087      	lsls	r7, r0
 8000858:	0010      	movs	r0, r2
 800085a:	40c8      	lsrs	r0, r1
 800085c:	4307      	orrs	r7, r0
 800085e:	4660      	mov	r0, ip
 8000860:	4082      	lsls	r2, r0
 8000862:	40cb      	lsrs	r3, r1
 8000864:	1e50      	subs	r0, r2, #1
 8000866:	4182      	sbcs	r2, r0
 8000868:	18f6      	adds	r6, r6, r3
 800086a:	4317      	orrs	r7, r2
 800086c:	444f      	add	r7, r9
 800086e:	454f      	cmp	r7, r9
 8000870:	4180      	sbcs	r0, r0
 8000872:	4240      	negs	r0, r0
 8000874:	1836      	adds	r6, r6, r0
 8000876:	0233      	lsls	r3, r6, #8
 8000878:	d557      	bpl.n	800092a <__aeabi_dadd+0x2aa>
 800087a:	4b64      	ldr	r3, [pc, #400]	@ (8000a0c <__aeabi_dadd+0x38c>)
 800087c:	3401      	adds	r4, #1
 800087e:	429c      	cmp	r4, r3
 8000880:	d045      	beq.n	800090e <__aeabi_dadd+0x28e>
 8000882:	2101      	movs	r1, #1
 8000884:	4b62      	ldr	r3, [pc, #392]	@ (8000a10 <__aeabi_dadd+0x390>)
 8000886:	087a      	lsrs	r2, r7, #1
 8000888:	401e      	ands	r6, r3
 800088a:	4039      	ands	r1, r7
 800088c:	430a      	orrs	r2, r1
 800088e:	07f7      	lsls	r7, r6, #31
 8000890:	4317      	orrs	r7, r2
 8000892:	0876      	lsrs	r6, r6, #1
 8000894:	e771      	b.n	800077a <__aeabi_dadd+0xfa>
 8000896:	001f      	movs	r7, r3
 8000898:	4317      	orrs	r7, r2
 800089a:	d100      	bne.n	800089e <__aeabi_dadd+0x21e>
 800089c:	e0ad      	b.n	80009fa <__aeabi_dadd+0x37a>
 800089e:	1e4f      	subs	r7, r1, #1
 80008a0:	46bc      	mov	ip, r7
 80008a2:	2901      	cmp	r1, #1
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dadd+0x228>
 80008a6:	e182      	b.n	8000bae <__aeabi_dadd+0x52e>
 80008a8:	4f58      	ldr	r7, [pc, #352]	@ (8000a0c <__aeabi_dadd+0x38c>)
 80008aa:	42b9      	cmp	r1, r7
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dadd+0x230>
 80008ae:	e190      	b.n	8000bd2 <__aeabi_dadd+0x552>
 80008b0:	4661      	mov	r1, ip
 80008b2:	2701      	movs	r7, #1
 80008b4:	2938      	cmp	r1, #56	@ 0x38
 80008b6:	dd00      	ble.n	80008ba <__aeabi_dadd+0x23a>
 80008b8:	e72e      	b.n	8000718 <__aeabi_dadd+0x98>
 80008ba:	e718      	b.n	80006ee <__aeabi_dadd+0x6e>
 80008bc:	4f55      	ldr	r7, [pc, #340]	@ (8000a14 <__aeabi_dadd+0x394>)
 80008be:	1c61      	adds	r1, r4, #1
 80008c0:	4239      	tst	r1, r7
 80008c2:	d000      	beq.n	80008c6 <__aeabi_dadd+0x246>
 80008c4:	e0d0      	b.n	8000a68 <__aeabi_dadd+0x3e8>
 80008c6:	0031      	movs	r1, r6
 80008c8:	4648      	mov	r0, r9
 80008ca:	001f      	movs	r7, r3
 80008cc:	4301      	orrs	r1, r0
 80008ce:	4317      	orrs	r7, r2
 80008d0:	2c00      	cmp	r4, #0
 80008d2:	d000      	beq.n	80008d6 <__aeabi_dadd+0x256>
 80008d4:	e13d      	b.n	8000b52 <__aeabi_dadd+0x4d2>
 80008d6:	2900      	cmp	r1, #0
 80008d8:	d100      	bne.n	80008dc <__aeabi_dadd+0x25c>
 80008da:	e1bc      	b.n	8000c56 <__aeabi_dadd+0x5d6>
 80008dc:	2f00      	cmp	r7, #0
 80008de:	d000      	beq.n	80008e2 <__aeabi_dadd+0x262>
 80008e0:	e1bf      	b.n	8000c62 <__aeabi_dadd+0x5e2>
 80008e2:	464b      	mov	r3, r9
 80008e4:	2100      	movs	r1, #0
 80008e6:	08d8      	lsrs	r0, r3, #3
 80008e8:	0777      	lsls	r7, r6, #29
 80008ea:	4307      	orrs	r7, r0
 80008ec:	08f0      	lsrs	r0, r6, #3
 80008ee:	0306      	lsls	r6, r0, #12
 80008f0:	054c      	lsls	r4, r1, #21
 80008f2:	0b36      	lsrs	r6, r6, #12
 80008f4:	0d64      	lsrs	r4, r4, #21
 80008f6:	e00c      	b.n	8000912 <__aeabi_dadd+0x292>
 80008f8:	4f44      	ldr	r7, [pc, #272]	@ (8000a0c <__aeabi_dadd+0x38c>)
 80008fa:	42bc      	cmp	r4, r7
 80008fc:	d100      	bne.n	8000900 <__aeabi_dadd+0x280>
 80008fe:	e08b      	b.n	8000a18 <__aeabi_dadd+0x398>
 8000900:	2701      	movs	r7, #1
 8000902:	2938      	cmp	r1, #56	@ 0x38
 8000904:	dcb2      	bgt.n	800086c <__aeabi_dadd+0x1ec>
 8000906:	2780      	movs	r7, #128	@ 0x80
 8000908:	043f      	lsls	r7, r7, #16
 800090a:	433b      	orrs	r3, r7
 800090c:	e79c      	b.n	8000848 <__aeabi_dadd+0x1c8>
 800090e:	2600      	movs	r6, #0
 8000910:	2700      	movs	r7, #0
 8000912:	0524      	lsls	r4, r4, #20
 8000914:	4334      	orrs	r4, r6
 8000916:	07ed      	lsls	r5, r5, #31
 8000918:	432c      	orrs	r4, r5
 800091a:	0038      	movs	r0, r7
 800091c:	0021      	movs	r1, r4
 800091e:	b002      	add	sp, #8
 8000920:	bce0      	pop	{r5, r6, r7}
 8000922:	46ba      	mov	sl, r7
 8000924:	46b1      	mov	r9, r6
 8000926:	46a8      	mov	r8, r5
 8000928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800092a:	077b      	lsls	r3, r7, #29
 800092c:	d004      	beq.n	8000938 <__aeabi_dadd+0x2b8>
 800092e:	230f      	movs	r3, #15
 8000930:	403b      	ands	r3, r7
 8000932:	2b04      	cmp	r3, #4
 8000934:	d000      	beq.n	8000938 <__aeabi_dadd+0x2b8>
 8000936:	e728      	b.n	800078a <__aeabi_dadd+0x10a>
 8000938:	08f8      	lsrs	r0, r7, #3
 800093a:	4b34      	ldr	r3, [pc, #208]	@ (8000a0c <__aeabi_dadd+0x38c>)
 800093c:	0777      	lsls	r7, r6, #29
 800093e:	4307      	orrs	r7, r0
 8000940:	08f0      	lsrs	r0, r6, #3
 8000942:	429c      	cmp	r4, r3
 8000944:	d000      	beq.n	8000948 <__aeabi_dadd+0x2c8>
 8000946:	e24a      	b.n	8000dde <__aeabi_dadd+0x75e>
 8000948:	003b      	movs	r3, r7
 800094a:	4303      	orrs	r3, r0
 800094c:	d059      	beq.n	8000a02 <__aeabi_dadd+0x382>
 800094e:	2680      	movs	r6, #128	@ 0x80
 8000950:	0336      	lsls	r6, r6, #12
 8000952:	4306      	orrs	r6, r0
 8000954:	0336      	lsls	r6, r6, #12
 8000956:	4c2d      	ldr	r4, [pc, #180]	@ (8000a0c <__aeabi_dadd+0x38c>)
 8000958:	0b36      	lsrs	r6, r6, #12
 800095a:	e7da      	b.n	8000912 <__aeabi_dadd+0x292>
 800095c:	2900      	cmp	r1, #0
 800095e:	d061      	beq.n	8000a24 <__aeabi_dadd+0x3a4>
 8000960:	4641      	mov	r1, r8
 8000962:	1b09      	subs	r1, r1, r4
 8000964:	2c00      	cmp	r4, #0
 8000966:	d100      	bne.n	800096a <__aeabi_dadd+0x2ea>
 8000968:	e0b9      	b.n	8000ade <__aeabi_dadd+0x45e>
 800096a:	4c28      	ldr	r4, [pc, #160]	@ (8000a0c <__aeabi_dadd+0x38c>)
 800096c:	45a0      	cmp	r8, r4
 800096e:	d100      	bne.n	8000972 <__aeabi_dadd+0x2f2>
 8000970:	e1a5      	b.n	8000cbe <__aeabi_dadd+0x63e>
 8000972:	2701      	movs	r7, #1
 8000974:	2938      	cmp	r1, #56	@ 0x38
 8000976:	dc13      	bgt.n	80009a0 <__aeabi_dadd+0x320>
 8000978:	2480      	movs	r4, #128	@ 0x80
 800097a:	0424      	lsls	r4, r4, #16
 800097c:	4326      	orrs	r6, r4
 800097e:	291f      	cmp	r1, #31
 8000980:	dd00      	ble.n	8000984 <__aeabi_dadd+0x304>
 8000982:	e1c8      	b.n	8000d16 <__aeabi_dadd+0x696>
 8000984:	2420      	movs	r4, #32
 8000986:	0037      	movs	r7, r6
 8000988:	4648      	mov	r0, r9
 800098a:	1a64      	subs	r4, r4, r1
 800098c:	40a7      	lsls	r7, r4
 800098e:	40c8      	lsrs	r0, r1
 8000990:	4307      	orrs	r7, r0
 8000992:	4648      	mov	r0, r9
 8000994:	40a0      	lsls	r0, r4
 8000996:	40ce      	lsrs	r6, r1
 8000998:	1e44      	subs	r4, r0, #1
 800099a:	41a0      	sbcs	r0, r4
 800099c:	199b      	adds	r3, r3, r6
 800099e:	4307      	orrs	r7, r0
 80009a0:	18bf      	adds	r7, r7, r2
 80009a2:	4297      	cmp	r7, r2
 80009a4:	4192      	sbcs	r2, r2
 80009a6:	4252      	negs	r2, r2
 80009a8:	4644      	mov	r4, r8
 80009aa:	18d6      	adds	r6, r2, r3
 80009ac:	e763      	b.n	8000876 <__aeabi_dadd+0x1f6>
 80009ae:	0038      	movs	r0, r7
 80009b0:	f001 fed0 	bl	8002754 <__clzsi2>
 80009b4:	0003      	movs	r3, r0
 80009b6:	3318      	adds	r3, #24
 80009b8:	2b1f      	cmp	r3, #31
 80009ba:	dc00      	bgt.n	80009be <__aeabi_dadd+0x33e>
 80009bc:	e6bf      	b.n	800073e <__aeabi_dadd+0xbe>
 80009be:	003a      	movs	r2, r7
 80009c0:	3808      	subs	r0, #8
 80009c2:	4082      	lsls	r2, r0
 80009c4:	429c      	cmp	r4, r3
 80009c6:	dd00      	ble.n	80009ca <__aeabi_dadd+0x34a>
 80009c8:	e083      	b.n	8000ad2 <__aeabi_dadd+0x452>
 80009ca:	1b1b      	subs	r3, r3, r4
 80009cc:	1c58      	adds	r0, r3, #1
 80009ce:	281f      	cmp	r0, #31
 80009d0:	dc00      	bgt.n	80009d4 <__aeabi_dadd+0x354>
 80009d2:	e1b4      	b.n	8000d3e <__aeabi_dadd+0x6be>
 80009d4:	0017      	movs	r7, r2
 80009d6:	3b1f      	subs	r3, #31
 80009d8:	40df      	lsrs	r7, r3
 80009da:	2820      	cmp	r0, #32
 80009dc:	d005      	beq.n	80009ea <__aeabi_dadd+0x36a>
 80009de:	2340      	movs	r3, #64	@ 0x40
 80009e0:	1a1b      	subs	r3, r3, r0
 80009e2:	409a      	lsls	r2, r3
 80009e4:	1e53      	subs	r3, r2, #1
 80009e6:	419a      	sbcs	r2, r3
 80009e8:	4317      	orrs	r7, r2
 80009ea:	2400      	movs	r4, #0
 80009ec:	2f00      	cmp	r7, #0
 80009ee:	d00a      	beq.n	8000a06 <__aeabi_dadd+0x386>
 80009f0:	077b      	lsls	r3, r7, #29
 80009f2:	d000      	beq.n	80009f6 <__aeabi_dadd+0x376>
 80009f4:	e6c4      	b.n	8000780 <__aeabi_dadd+0x100>
 80009f6:	0026      	movs	r6, r4
 80009f8:	e79e      	b.n	8000938 <__aeabi_dadd+0x2b8>
 80009fa:	464b      	mov	r3, r9
 80009fc:	000c      	movs	r4, r1
 80009fe:	08d8      	lsrs	r0, r3, #3
 8000a00:	e79b      	b.n	800093a <__aeabi_dadd+0x2ba>
 8000a02:	2700      	movs	r7, #0
 8000a04:	4c01      	ldr	r4, [pc, #4]	@ (8000a0c <__aeabi_dadd+0x38c>)
 8000a06:	2600      	movs	r6, #0
 8000a08:	e783      	b.n	8000912 <__aeabi_dadd+0x292>
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	000007ff 	.word	0x000007ff
 8000a10:	ff7fffff 	.word	0xff7fffff
 8000a14:	000007fe 	.word	0x000007fe
 8000a18:	464b      	mov	r3, r9
 8000a1a:	0777      	lsls	r7, r6, #29
 8000a1c:	08d8      	lsrs	r0, r3, #3
 8000a1e:	4307      	orrs	r7, r0
 8000a20:	08f0      	lsrs	r0, r6, #3
 8000a22:	e791      	b.n	8000948 <__aeabi_dadd+0x2c8>
 8000a24:	4fcd      	ldr	r7, [pc, #820]	@ (8000d5c <__aeabi_dadd+0x6dc>)
 8000a26:	1c61      	adds	r1, r4, #1
 8000a28:	4239      	tst	r1, r7
 8000a2a:	d16b      	bne.n	8000b04 <__aeabi_dadd+0x484>
 8000a2c:	0031      	movs	r1, r6
 8000a2e:	4648      	mov	r0, r9
 8000a30:	4301      	orrs	r1, r0
 8000a32:	2c00      	cmp	r4, #0
 8000a34:	d000      	beq.n	8000a38 <__aeabi_dadd+0x3b8>
 8000a36:	e14b      	b.n	8000cd0 <__aeabi_dadd+0x650>
 8000a38:	001f      	movs	r7, r3
 8000a3a:	4317      	orrs	r7, r2
 8000a3c:	2900      	cmp	r1, #0
 8000a3e:	d100      	bne.n	8000a42 <__aeabi_dadd+0x3c2>
 8000a40:	e181      	b.n	8000d46 <__aeabi_dadd+0x6c6>
 8000a42:	2f00      	cmp	r7, #0
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dadd+0x3c8>
 8000a46:	e74c      	b.n	80008e2 <__aeabi_dadd+0x262>
 8000a48:	444a      	add	r2, r9
 8000a4a:	454a      	cmp	r2, r9
 8000a4c:	4180      	sbcs	r0, r0
 8000a4e:	18f6      	adds	r6, r6, r3
 8000a50:	4240      	negs	r0, r0
 8000a52:	1836      	adds	r6, r6, r0
 8000a54:	0233      	lsls	r3, r6, #8
 8000a56:	d500      	bpl.n	8000a5a <__aeabi_dadd+0x3da>
 8000a58:	e1b0      	b.n	8000dbc <__aeabi_dadd+0x73c>
 8000a5a:	0017      	movs	r7, r2
 8000a5c:	4691      	mov	r9, r2
 8000a5e:	4337      	orrs	r7, r6
 8000a60:	d000      	beq.n	8000a64 <__aeabi_dadd+0x3e4>
 8000a62:	e73e      	b.n	80008e2 <__aeabi_dadd+0x262>
 8000a64:	2600      	movs	r6, #0
 8000a66:	e754      	b.n	8000912 <__aeabi_dadd+0x292>
 8000a68:	4649      	mov	r1, r9
 8000a6a:	1a89      	subs	r1, r1, r2
 8000a6c:	4688      	mov	r8, r1
 8000a6e:	45c1      	cmp	r9, r8
 8000a70:	41bf      	sbcs	r7, r7
 8000a72:	1af1      	subs	r1, r6, r3
 8000a74:	427f      	negs	r7, r7
 8000a76:	1bc9      	subs	r1, r1, r7
 8000a78:	020f      	lsls	r7, r1, #8
 8000a7a:	d461      	bmi.n	8000b40 <__aeabi_dadd+0x4c0>
 8000a7c:	4647      	mov	r7, r8
 8000a7e:	430f      	orrs	r7, r1
 8000a80:	d100      	bne.n	8000a84 <__aeabi_dadd+0x404>
 8000a82:	e0bd      	b.n	8000c00 <__aeabi_dadd+0x580>
 8000a84:	000e      	movs	r6, r1
 8000a86:	4647      	mov	r7, r8
 8000a88:	e651      	b.n	800072e <__aeabi_dadd+0xae>
 8000a8a:	4cb5      	ldr	r4, [pc, #724]	@ (8000d60 <__aeabi_dadd+0x6e0>)
 8000a8c:	45a0      	cmp	r8, r4
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x412>
 8000a90:	e100      	b.n	8000c94 <__aeabi_dadd+0x614>
 8000a92:	2701      	movs	r7, #1
 8000a94:	2938      	cmp	r1, #56	@ 0x38
 8000a96:	dd00      	ble.n	8000a9a <__aeabi_dadd+0x41a>
 8000a98:	e6b8      	b.n	800080c <__aeabi_dadd+0x18c>
 8000a9a:	2480      	movs	r4, #128	@ 0x80
 8000a9c:	0424      	lsls	r4, r4, #16
 8000a9e:	4326      	orrs	r6, r4
 8000aa0:	e6a3      	b.n	80007ea <__aeabi_dadd+0x16a>
 8000aa2:	4eb0      	ldr	r6, [pc, #704]	@ (8000d64 <__aeabi_dadd+0x6e4>)
 8000aa4:	1ae4      	subs	r4, r4, r3
 8000aa6:	4016      	ands	r6, r2
 8000aa8:	077b      	lsls	r3, r7, #29
 8000aaa:	d000      	beq.n	8000aae <__aeabi_dadd+0x42e>
 8000aac:	e73f      	b.n	800092e <__aeabi_dadd+0x2ae>
 8000aae:	e743      	b.n	8000938 <__aeabi_dadd+0x2b8>
 8000ab0:	000f      	movs	r7, r1
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	3f20      	subs	r7, #32
 8000ab6:	40f8      	lsrs	r0, r7
 8000ab8:	4684      	mov	ip, r0
 8000aba:	2920      	cmp	r1, #32
 8000abc:	d003      	beq.n	8000ac6 <__aeabi_dadd+0x446>
 8000abe:	2740      	movs	r7, #64	@ 0x40
 8000ac0:	1a79      	subs	r1, r7, r1
 8000ac2:	408b      	lsls	r3, r1
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	1e53      	subs	r3, r2, #1
 8000ac8:	419a      	sbcs	r2, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	0017      	movs	r7, r2
 8000ace:	431f      	orrs	r7, r3
 8000ad0:	e622      	b.n	8000718 <__aeabi_dadd+0x98>
 8000ad2:	48a4      	ldr	r0, [pc, #656]	@ (8000d64 <__aeabi_dadd+0x6e4>)
 8000ad4:	1ae1      	subs	r1, r4, r3
 8000ad6:	4010      	ands	r0, r2
 8000ad8:	0747      	lsls	r7, r0, #29
 8000ada:	08c0      	lsrs	r0, r0, #3
 8000adc:	e707      	b.n	80008ee <__aeabi_dadd+0x26e>
 8000ade:	0034      	movs	r4, r6
 8000ae0:	4648      	mov	r0, r9
 8000ae2:	4304      	orrs	r4, r0
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_dadd+0x468>
 8000ae6:	e0fa      	b.n	8000cde <__aeabi_dadd+0x65e>
 8000ae8:	1e4c      	subs	r4, r1, #1
 8000aea:	2901      	cmp	r1, #1
 8000aec:	d100      	bne.n	8000af0 <__aeabi_dadd+0x470>
 8000aee:	e0d7      	b.n	8000ca0 <__aeabi_dadd+0x620>
 8000af0:	4f9b      	ldr	r7, [pc, #620]	@ (8000d60 <__aeabi_dadd+0x6e0>)
 8000af2:	42b9      	cmp	r1, r7
 8000af4:	d100      	bne.n	8000af8 <__aeabi_dadd+0x478>
 8000af6:	e0e2      	b.n	8000cbe <__aeabi_dadd+0x63e>
 8000af8:	2701      	movs	r7, #1
 8000afa:	2c38      	cmp	r4, #56	@ 0x38
 8000afc:	dd00      	ble.n	8000b00 <__aeabi_dadd+0x480>
 8000afe:	e74f      	b.n	80009a0 <__aeabi_dadd+0x320>
 8000b00:	0021      	movs	r1, r4
 8000b02:	e73c      	b.n	800097e <__aeabi_dadd+0x2fe>
 8000b04:	4c96      	ldr	r4, [pc, #600]	@ (8000d60 <__aeabi_dadd+0x6e0>)
 8000b06:	42a1      	cmp	r1, r4
 8000b08:	d100      	bne.n	8000b0c <__aeabi_dadd+0x48c>
 8000b0a:	e0dd      	b.n	8000cc8 <__aeabi_dadd+0x648>
 8000b0c:	444a      	add	r2, r9
 8000b0e:	454a      	cmp	r2, r9
 8000b10:	4180      	sbcs	r0, r0
 8000b12:	18f3      	adds	r3, r6, r3
 8000b14:	4240      	negs	r0, r0
 8000b16:	1818      	adds	r0, r3, r0
 8000b18:	07c7      	lsls	r7, r0, #31
 8000b1a:	0852      	lsrs	r2, r2, #1
 8000b1c:	4317      	orrs	r7, r2
 8000b1e:	0846      	lsrs	r6, r0, #1
 8000b20:	0752      	lsls	r2, r2, #29
 8000b22:	d005      	beq.n	8000b30 <__aeabi_dadd+0x4b0>
 8000b24:	220f      	movs	r2, #15
 8000b26:	000c      	movs	r4, r1
 8000b28:	403a      	ands	r2, r7
 8000b2a:	2a04      	cmp	r2, #4
 8000b2c:	d000      	beq.n	8000b30 <__aeabi_dadd+0x4b0>
 8000b2e:	e62c      	b.n	800078a <__aeabi_dadd+0x10a>
 8000b30:	0776      	lsls	r6, r6, #29
 8000b32:	08ff      	lsrs	r7, r7, #3
 8000b34:	4337      	orrs	r7, r6
 8000b36:	0900      	lsrs	r0, r0, #4
 8000b38:	e6d9      	b.n	80008ee <__aeabi_dadd+0x26e>
 8000b3a:	2700      	movs	r7, #0
 8000b3c:	2600      	movs	r6, #0
 8000b3e:	e6e8      	b.n	8000912 <__aeabi_dadd+0x292>
 8000b40:	4649      	mov	r1, r9
 8000b42:	1a57      	subs	r7, r2, r1
 8000b44:	42ba      	cmp	r2, r7
 8000b46:	4192      	sbcs	r2, r2
 8000b48:	1b9e      	subs	r6, r3, r6
 8000b4a:	4252      	negs	r2, r2
 8000b4c:	4665      	mov	r5, ip
 8000b4e:	1ab6      	subs	r6, r6, r2
 8000b50:	e5ed      	b.n	800072e <__aeabi_dadd+0xae>
 8000b52:	2900      	cmp	r1, #0
 8000b54:	d000      	beq.n	8000b58 <__aeabi_dadd+0x4d8>
 8000b56:	e0c6      	b.n	8000ce6 <__aeabi_dadd+0x666>
 8000b58:	2f00      	cmp	r7, #0
 8000b5a:	d167      	bne.n	8000c2c <__aeabi_dadd+0x5ac>
 8000b5c:	2680      	movs	r6, #128	@ 0x80
 8000b5e:	2500      	movs	r5, #0
 8000b60:	4c7f      	ldr	r4, [pc, #508]	@ (8000d60 <__aeabi_dadd+0x6e0>)
 8000b62:	0336      	lsls	r6, r6, #12
 8000b64:	e6d5      	b.n	8000912 <__aeabi_dadd+0x292>
 8000b66:	4665      	mov	r5, ip
 8000b68:	000c      	movs	r4, r1
 8000b6a:	001e      	movs	r6, r3
 8000b6c:	08d0      	lsrs	r0, r2, #3
 8000b6e:	e6e4      	b.n	800093a <__aeabi_dadd+0x2ba>
 8000b70:	444a      	add	r2, r9
 8000b72:	454a      	cmp	r2, r9
 8000b74:	4180      	sbcs	r0, r0
 8000b76:	18f3      	adds	r3, r6, r3
 8000b78:	4240      	negs	r0, r0
 8000b7a:	1818      	adds	r0, r3, r0
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	0203      	lsls	r3, r0, #8
 8000b80:	d400      	bmi.n	8000b84 <__aeabi_dadd+0x504>
 8000b82:	e096      	b.n	8000cb2 <__aeabi_dadd+0x632>
 8000b84:	4b77      	ldr	r3, [pc, #476]	@ (8000d64 <__aeabi_dadd+0x6e4>)
 8000b86:	0849      	lsrs	r1, r1, #1
 8000b88:	4018      	ands	r0, r3
 8000b8a:	07c3      	lsls	r3, r0, #31
 8000b8c:	430b      	orrs	r3, r1
 8000b8e:	0844      	lsrs	r4, r0, #1
 8000b90:	0749      	lsls	r1, r1, #29
 8000b92:	d100      	bne.n	8000b96 <__aeabi_dadd+0x516>
 8000b94:	e129      	b.n	8000dea <__aeabi_dadd+0x76a>
 8000b96:	220f      	movs	r2, #15
 8000b98:	401a      	ands	r2, r3
 8000b9a:	2a04      	cmp	r2, #4
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_dadd+0x520>
 8000b9e:	e0ea      	b.n	8000d76 <__aeabi_dadd+0x6f6>
 8000ba0:	1d1f      	adds	r7, r3, #4
 8000ba2:	429f      	cmp	r7, r3
 8000ba4:	41b6      	sbcs	r6, r6
 8000ba6:	4276      	negs	r6, r6
 8000ba8:	1936      	adds	r6, r6, r4
 8000baa:	2402      	movs	r4, #2
 8000bac:	e6c4      	b.n	8000938 <__aeabi_dadd+0x2b8>
 8000bae:	4649      	mov	r1, r9
 8000bb0:	1a8f      	subs	r7, r1, r2
 8000bb2:	45b9      	cmp	r9, r7
 8000bb4:	4180      	sbcs	r0, r0
 8000bb6:	1af6      	subs	r6, r6, r3
 8000bb8:	4240      	negs	r0, r0
 8000bba:	1a36      	subs	r6, r6, r0
 8000bbc:	0233      	lsls	r3, r6, #8
 8000bbe:	d406      	bmi.n	8000bce <__aeabi_dadd+0x54e>
 8000bc0:	0773      	lsls	r3, r6, #29
 8000bc2:	08ff      	lsrs	r7, r7, #3
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	431f      	orrs	r7, r3
 8000bc8:	08f0      	lsrs	r0, r6, #3
 8000bca:	e690      	b.n	80008ee <__aeabi_dadd+0x26e>
 8000bcc:	4665      	mov	r5, ip
 8000bce:	2401      	movs	r4, #1
 8000bd0:	e5ab      	b.n	800072a <__aeabi_dadd+0xaa>
 8000bd2:	464b      	mov	r3, r9
 8000bd4:	0777      	lsls	r7, r6, #29
 8000bd6:	08d8      	lsrs	r0, r3, #3
 8000bd8:	4307      	orrs	r7, r0
 8000bda:	08f0      	lsrs	r0, r6, #3
 8000bdc:	e6b4      	b.n	8000948 <__aeabi_dadd+0x2c8>
 8000bde:	000f      	movs	r7, r1
 8000be0:	0018      	movs	r0, r3
 8000be2:	3f20      	subs	r7, #32
 8000be4:	40f8      	lsrs	r0, r7
 8000be6:	4684      	mov	ip, r0
 8000be8:	2920      	cmp	r1, #32
 8000bea:	d003      	beq.n	8000bf4 <__aeabi_dadd+0x574>
 8000bec:	2740      	movs	r7, #64	@ 0x40
 8000bee:	1a79      	subs	r1, r7, r1
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	1e53      	subs	r3, r2, #1
 8000bf6:	419a      	sbcs	r2, r3
 8000bf8:	4663      	mov	r3, ip
 8000bfa:	0017      	movs	r7, r2
 8000bfc:	431f      	orrs	r7, r3
 8000bfe:	e635      	b.n	800086c <__aeabi_dadd+0x1ec>
 8000c00:	2500      	movs	r5, #0
 8000c02:	2400      	movs	r4, #0
 8000c04:	2600      	movs	r6, #0
 8000c06:	e684      	b.n	8000912 <__aeabi_dadd+0x292>
 8000c08:	000c      	movs	r4, r1
 8000c0a:	0035      	movs	r5, r6
 8000c0c:	3c20      	subs	r4, #32
 8000c0e:	40e5      	lsrs	r5, r4
 8000c10:	2920      	cmp	r1, #32
 8000c12:	d005      	beq.n	8000c20 <__aeabi_dadd+0x5a0>
 8000c14:	2440      	movs	r4, #64	@ 0x40
 8000c16:	1a61      	subs	r1, r4, r1
 8000c18:	408e      	lsls	r6, r1
 8000c1a:	4649      	mov	r1, r9
 8000c1c:	4331      	orrs	r1, r6
 8000c1e:	4689      	mov	r9, r1
 8000c20:	4648      	mov	r0, r9
 8000c22:	1e41      	subs	r1, r0, #1
 8000c24:	4188      	sbcs	r0, r1
 8000c26:	0007      	movs	r7, r0
 8000c28:	432f      	orrs	r7, r5
 8000c2a:	e5ef      	b.n	800080c <__aeabi_dadd+0x18c>
 8000c2c:	08d2      	lsrs	r2, r2, #3
 8000c2e:	075f      	lsls	r7, r3, #29
 8000c30:	4665      	mov	r5, ip
 8000c32:	4317      	orrs	r7, r2
 8000c34:	08d8      	lsrs	r0, r3, #3
 8000c36:	e687      	b.n	8000948 <__aeabi_dadd+0x2c8>
 8000c38:	1a17      	subs	r7, r2, r0
 8000c3a:	42ba      	cmp	r2, r7
 8000c3c:	4192      	sbcs	r2, r2
 8000c3e:	1b9e      	subs	r6, r3, r6
 8000c40:	4252      	negs	r2, r2
 8000c42:	1ab6      	subs	r6, r6, r2
 8000c44:	0233      	lsls	r3, r6, #8
 8000c46:	d4c1      	bmi.n	8000bcc <__aeabi_dadd+0x54c>
 8000c48:	0773      	lsls	r3, r6, #29
 8000c4a:	08ff      	lsrs	r7, r7, #3
 8000c4c:	4665      	mov	r5, ip
 8000c4e:	2101      	movs	r1, #1
 8000c50:	431f      	orrs	r7, r3
 8000c52:	08f0      	lsrs	r0, r6, #3
 8000c54:	e64b      	b.n	80008ee <__aeabi_dadd+0x26e>
 8000c56:	2f00      	cmp	r7, #0
 8000c58:	d07b      	beq.n	8000d52 <__aeabi_dadd+0x6d2>
 8000c5a:	4665      	mov	r5, ip
 8000c5c:	001e      	movs	r6, r3
 8000c5e:	4691      	mov	r9, r2
 8000c60:	e63f      	b.n	80008e2 <__aeabi_dadd+0x262>
 8000c62:	1a81      	subs	r1, r0, r2
 8000c64:	4688      	mov	r8, r1
 8000c66:	45c1      	cmp	r9, r8
 8000c68:	41a4      	sbcs	r4, r4
 8000c6a:	1af1      	subs	r1, r6, r3
 8000c6c:	4264      	negs	r4, r4
 8000c6e:	1b09      	subs	r1, r1, r4
 8000c70:	2480      	movs	r4, #128	@ 0x80
 8000c72:	0424      	lsls	r4, r4, #16
 8000c74:	4221      	tst	r1, r4
 8000c76:	d077      	beq.n	8000d68 <__aeabi_dadd+0x6e8>
 8000c78:	1a10      	subs	r0, r2, r0
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	4192      	sbcs	r2, r2
 8000c7e:	0007      	movs	r7, r0
 8000c80:	1b9e      	subs	r6, r3, r6
 8000c82:	4252      	negs	r2, r2
 8000c84:	1ab6      	subs	r6, r6, r2
 8000c86:	4337      	orrs	r7, r6
 8000c88:	d000      	beq.n	8000c8c <__aeabi_dadd+0x60c>
 8000c8a:	e0a0      	b.n	8000dce <__aeabi_dadd+0x74e>
 8000c8c:	4665      	mov	r5, ip
 8000c8e:	2400      	movs	r4, #0
 8000c90:	2600      	movs	r6, #0
 8000c92:	e63e      	b.n	8000912 <__aeabi_dadd+0x292>
 8000c94:	075f      	lsls	r7, r3, #29
 8000c96:	08d2      	lsrs	r2, r2, #3
 8000c98:	4665      	mov	r5, ip
 8000c9a:	4317      	orrs	r7, r2
 8000c9c:	08d8      	lsrs	r0, r3, #3
 8000c9e:	e653      	b.n	8000948 <__aeabi_dadd+0x2c8>
 8000ca0:	1881      	adds	r1, r0, r2
 8000ca2:	4291      	cmp	r1, r2
 8000ca4:	4192      	sbcs	r2, r2
 8000ca6:	18f0      	adds	r0, r6, r3
 8000ca8:	4252      	negs	r2, r2
 8000caa:	1880      	adds	r0, r0, r2
 8000cac:	0203      	lsls	r3, r0, #8
 8000cae:	d500      	bpl.n	8000cb2 <__aeabi_dadd+0x632>
 8000cb0:	e768      	b.n	8000b84 <__aeabi_dadd+0x504>
 8000cb2:	0747      	lsls	r7, r0, #29
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	430f      	orrs	r7, r1
 8000cb8:	08c0      	lsrs	r0, r0, #3
 8000cba:	2101      	movs	r1, #1
 8000cbc:	e617      	b.n	80008ee <__aeabi_dadd+0x26e>
 8000cbe:	08d2      	lsrs	r2, r2, #3
 8000cc0:	075f      	lsls	r7, r3, #29
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	08d8      	lsrs	r0, r3, #3
 8000cc6:	e63f      	b.n	8000948 <__aeabi_dadd+0x2c8>
 8000cc8:	000c      	movs	r4, r1
 8000cca:	2600      	movs	r6, #0
 8000ccc:	2700      	movs	r7, #0
 8000cce:	e620      	b.n	8000912 <__aeabi_dadd+0x292>
 8000cd0:	2900      	cmp	r1, #0
 8000cd2:	d156      	bne.n	8000d82 <__aeabi_dadd+0x702>
 8000cd4:	075f      	lsls	r7, r3, #29
 8000cd6:	08d2      	lsrs	r2, r2, #3
 8000cd8:	4317      	orrs	r7, r2
 8000cda:	08d8      	lsrs	r0, r3, #3
 8000cdc:	e634      	b.n	8000948 <__aeabi_dadd+0x2c8>
 8000cde:	000c      	movs	r4, r1
 8000ce0:	001e      	movs	r6, r3
 8000ce2:	08d0      	lsrs	r0, r2, #3
 8000ce4:	e629      	b.n	800093a <__aeabi_dadd+0x2ba>
 8000ce6:	08c1      	lsrs	r1, r0, #3
 8000ce8:	0770      	lsls	r0, r6, #29
 8000cea:	4301      	orrs	r1, r0
 8000cec:	08f0      	lsrs	r0, r6, #3
 8000cee:	2f00      	cmp	r7, #0
 8000cf0:	d062      	beq.n	8000db8 <__aeabi_dadd+0x738>
 8000cf2:	2480      	movs	r4, #128	@ 0x80
 8000cf4:	0324      	lsls	r4, r4, #12
 8000cf6:	4220      	tst	r0, r4
 8000cf8:	d007      	beq.n	8000d0a <__aeabi_dadd+0x68a>
 8000cfa:	08de      	lsrs	r6, r3, #3
 8000cfc:	4226      	tst	r6, r4
 8000cfe:	d104      	bne.n	8000d0a <__aeabi_dadd+0x68a>
 8000d00:	4665      	mov	r5, ip
 8000d02:	0030      	movs	r0, r6
 8000d04:	08d1      	lsrs	r1, r2, #3
 8000d06:	075b      	lsls	r3, r3, #29
 8000d08:	4319      	orrs	r1, r3
 8000d0a:	0f4f      	lsrs	r7, r1, #29
 8000d0c:	00c9      	lsls	r1, r1, #3
 8000d0e:	08c9      	lsrs	r1, r1, #3
 8000d10:	077f      	lsls	r7, r7, #29
 8000d12:	430f      	orrs	r7, r1
 8000d14:	e618      	b.n	8000948 <__aeabi_dadd+0x2c8>
 8000d16:	000c      	movs	r4, r1
 8000d18:	0030      	movs	r0, r6
 8000d1a:	3c20      	subs	r4, #32
 8000d1c:	40e0      	lsrs	r0, r4
 8000d1e:	4684      	mov	ip, r0
 8000d20:	2920      	cmp	r1, #32
 8000d22:	d005      	beq.n	8000d30 <__aeabi_dadd+0x6b0>
 8000d24:	2440      	movs	r4, #64	@ 0x40
 8000d26:	1a61      	subs	r1, r4, r1
 8000d28:	408e      	lsls	r6, r1
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	4331      	orrs	r1, r6
 8000d2e:	4689      	mov	r9, r1
 8000d30:	4648      	mov	r0, r9
 8000d32:	1e41      	subs	r1, r0, #1
 8000d34:	4188      	sbcs	r0, r1
 8000d36:	4661      	mov	r1, ip
 8000d38:	0007      	movs	r7, r0
 8000d3a:	430f      	orrs	r7, r1
 8000d3c:	e630      	b.n	80009a0 <__aeabi_dadd+0x320>
 8000d3e:	2120      	movs	r1, #32
 8000d40:	2700      	movs	r7, #0
 8000d42:	1a09      	subs	r1, r1, r0
 8000d44:	e50e      	b.n	8000764 <__aeabi_dadd+0xe4>
 8000d46:	001e      	movs	r6, r3
 8000d48:	2f00      	cmp	r7, #0
 8000d4a:	d000      	beq.n	8000d4e <__aeabi_dadd+0x6ce>
 8000d4c:	e522      	b.n	8000794 <__aeabi_dadd+0x114>
 8000d4e:	2400      	movs	r4, #0
 8000d50:	e758      	b.n	8000c04 <__aeabi_dadd+0x584>
 8000d52:	2500      	movs	r5, #0
 8000d54:	2400      	movs	r4, #0
 8000d56:	2600      	movs	r6, #0
 8000d58:	e5db      	b.n	8000912 <__aeabi_dadd+0x292>
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	000007fe 	.word	0x000007fe
 8000d60:	000007ff 	.word	0x000007ff
 8000d64:	ff7fffff 	.word	0xff7fffff
 8000d68:	4647      	mov	r7, r8
 8000d6a:	430f      	orrs	r7, r1
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_dadd+0x6f0>
 8000d6e:	e747      	b.n	8000c00 <__aeabi_dadd+0x580>
 8000d70:	000e      	movs	r6, r1
 8000d72:	46c1      	mov	r9, r8
 8000d74:	e5b5      	b.n	80008e2 <__aeabi_dadd+0x262>
 8000d76:	08df      	lsrs	r7, r3, #3
 8000d78:	0764      	lsls	r4, r4, #29
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	4327      	orrs	r7, r4
 8000d7e:	0900      	lsrs	r0, r0, #4
 8000d80:	e5b5      	b.n	80008ee <__aeabi_dadd+0x26e>
 8000d82:	0019      	movs	r1, r3
 8000d84:	08c0      	lsrs	r0, r0, #3
 8000d86:	0777      	lsls	r7, r6, #29
 8000d88:	4307      	orrs	r7, r0
 8000d8a:	4311      	orrs	r1, r2
 8000d8c:	08f0      	lsrs	r0, r6, #3
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d100      	bne.n	8000d94 <__aeabi_dadd+0x714>
 8000d92:	e5d9      	b.n	8000948 <__aeabi_dadd+0x2c8>
 8000d94:	2180      	movs	r1, #128	@ 0x80
 8000d96:	0309      	lsls	r1, r1, #12
 8000d98:	4208      	tst	r0, r1
 8000d9a:	d007      	beq.n	8000dac <__aeabi_dadd+0x72c>
 8000d9c:	08dc      	lsrs	r4, r3, #3
 8000d9e:	420c      	tst	r4, r1
 8000da0:	d104      	bne.n	8000dac <__aeabi_dadd+0x72c>
 8000da2:	08d2      	lsrs	r2, r2, #3
 8000da4:	075b      	lsls	r3, r3, #29
 8000da6:	431a      	orrs	r2, r3
 8000da8:	0017      	movs	r7, r2
 8000daa:	0020      	movs	r0, r4
 8000dac:	0f7b      	lsrs	r3, r7, #29
 8000dae:	00ff      	lsls	r7, r7, #3
 8000db0:	08ff      	lsrs	r7, r7, #3
 8000db2:	075b      	lsls	r3, r3, #29
 8000db4:	431f      	orrs	r7, r3
 8000db6:	e5c7      	b.n	8000948 <__aeabi_dadd+0x2c8>
 8000db8:	000f      	movs	r7, r1
 8000dba:	e5c5      	b.n	8000948 <__aeabi_dadd+0x2c8>
 8000dbc:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <__aeabi_dadd+0x788>)
 8000dbe:	08d2      	lsrs	r2, r2, #3
 8000dc0:	4033      	ands	r3, r6
 8000dc2:	075f      	lsls	r7, r3, #29
 8000dc4:	025b      	lsls	r3, r3, #9
 8000dc6:	2401      	movs	r4, #1
 8000dc8:	4317      	orrs	r7, r2
 8000dca:	0b1e      	lsrs	r6, r3, #12
 8000dcc:	e5a1      	b.n	8000912 <__aeabi_dadd+0x292>
 8000dce:	4226      	tst	r6, r4
 8000dd0:	d012      	beq.n	8000df8 <__aeabi_dadd+0x778>
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e08 <__aeabi_dadd+0x788>)
 8000dd4:	4665      	mov	r5, ip
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	2401      	movs	r4, #1
 8000dda:	401e      	ands	r6, r3
 8000ddc:	e4e6      	b.n	80007ac <__aeabi_dadd+0x12c>
 8000dde:	0021      	movs	r1, r4
 8000de0:	e585      	b.n	80008ee <__aeabi_dadd+0x26e>
 8000de2:	0017      	movs	r7, r2
 8000de4:	e5a8      	b.n	8000938 <__aeabi_dadd+0x2b8>
 8000de6:	003a      	movs	r2, r7
 8000de8:	e4d4      	b.n	8000794 <__aeabi_dadd+0x114>
 8000dea:	08db      	lsrs	r3, r3, #3
 8000dec:	0764      	lsls	r4, r4, #29
 8000dee:	431c      	orrs	r4, r3
 8000df0:	0027      	movs	r7, r4
 8000df2:	2102      	movs	r1, #2
 8000df4:	0900      	lsrs	r0, r0, #4
 8000df6:	e57a      	b.n	80008ee <__aeabi_dadd+0x26e>
 8000df8:	08c0      	lsrs	r0, r0, #3
 8000dfa:	0777      	lsls	r7, r6, #29
 8000dfc:	4307      	orrs	r7, r0
 8000dfe:	4665      	mov	r5, ip
 8000e00:	2100      	movs	r1, #0
 8000e02:	08f0      	lsrs	r0, r6, #3
 8000e04:	e573      	b.n	80008ee <__aeabi_dadd+0x26e>
 8000e06:	46c0      	nop			@ (mov r8, r8)
 8000e08:	ff7fffff 	.word	0xff7fffff

08000e0c <__aeabi_ddiv>:
 8000e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0e:	46de      	mov	lr, fp
 8000e10:	4645      	mov	r5, r8
 8000e12:	4657      	mov	r7, sl
 8000e14:	464e      	mov	r6, r9
 8000e16:	b5e0      	push	{r5, r6, r7, lr}
 8000e18:	b087      	sub	sp, #28
 8000e1a:	9200      	str	r2, [sp, #0]
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	030b      	lsls	r3, r1, #12
 8000e20:	0b1b      	lsrs	r3, r3, #12
 8000e22:	469b      	mov	fp, r3
 8000e24:	0fca      	lsrs	r2, r1, #31
 8000e26:	004b      	lsls	r3, r1, #1
 8000e28:	0004      	movs	r4, r0
 8000e2a:	4680      	mov	r8, r0
 8000e2c:	0d5b      	lsrs	r3, r3, #21
 8000e2e:	9202      	str	r2, [sp, #8]
 8000e30:	d100      	bne.n	8000e34 <__aeabi_ddiv+0x28>
 8000e32:	e098      	b.n	8000f66 <__aeabi_ddiv+0x15a>
 8000e34:	4a7c      	ldr	r2, [pc, #496]	@ (8001028 <__aeabi_ddiv+0x21c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d037      	beq.n	8000eaa <__aeabi_ddiv+0x9e>
 8000e3a:	4659      	mov	r1, fp
 8000e3c:	0f42      	lsrs	r2, r0, #29
 8000e3e:	00c9      	lsls	r1, r1, #3
 8000e40:	430a      	orrs	r2, r1
 8000e42:	2180      	movs	r1, #128	@ 0x80
 8000e44:	0409      	lsls	r1, r1, #16
 8000e46:	4311      	orrs	r1, r2
 8000e48:	00c2      	lsls	r2, r0, #3
 8000e4a:	4690      	mov	r8, r2
 8000e4c:	4a77      	ldr	r2, [pc, #476]	@ (800102c <__aeabi_ddiv+0x220>)
 8000e4e:	4689      	mov	r9, r1
 8000e50:	4692      	mov	sl, r2
 8000e52:	449a      	add	sl, r3
 8000e54:	2300      	movs	r3, #0
 8000e56:	2400      	movs	r4, #0
 8000e58:	9303      	str	r3, [sp, #12]
 8000e5a:	9e00      	ldr	r6, [sp, #0]
 8000e5c:	9f01      	ldr	r7, [sp, #4]
 8000e5e:	033b      	lsls	r3, r7, #12
 8000e60:	0b1b      	lsrs	r3, r3, #12
 8000e62:	469b      	mov	fp, r3
 8000e64:	007b      	lsls	r3, r7, #1
 8000e66:	0030      	movs	r0, r6
 8000e68:	0d5b      	lsrs	r3, r3, #21
 8000e6a:	0ffd      	lsrs	r5, r7, #31
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d059      	beq.n	8000f24 <__aeabi_ddiv+0x118>
 8000e70:	4a6d      	ldr	r2, [pc, #436]	@ (8001028 <__aeabi_ddiv+0x21c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d048      	beq.n	8000f08 <__aeabi_ddiv+0xfc>
 8000e76:	4659      	mov	r1, fp
 8000e78:	0f72      	lsrs	r2, r6, #29
 8000e7a:	00c9      	lsls	r1, r1, #3
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	2180      	movs	r1, #128	@ 0x80
 8000e80:	0409      	lsls	r1, r1, #16
 8000e82:	4311      	orrs	r1, r2
 8000e84:	468b      	mov	fp, r1
 8000e86:	4969      	ldr	r1, [pc, #420]	@ (800102c <__aeabi_ddiv+0x220>)
 8000e88:	00f2      	lsls	r2, r6, #3
 8000e8a:	468c      	mov	ip, r1
 8000e8c:	4651      	mov	r1, sl
 8000e8e:	4463      	add	r3, ip
 8000e90:	1acb      	subs	r3, r1, r3
 8000e92:	469a      	mov	sl, r3
 8000e94:	2100      	movs	r1, #0
 8000e96:	9e02      	ldr	r6, [sp, #8]
 8000e98:	406e      	eors	r6, r5
 8000e9a:	b2f6      	uxtb	r6, r6
 8000e9c:	2c0f      	cmp	r4, #15
 8000e9e:	d900      	bls.n	8000ea2 <__aeabi_ddiv+0x96>
 8000ea0:	e0ce      	b.n	8001040 <__aeabi_ddiv+0x234>
 8000ea2:	4b63      	ldr	r3, [pc, #396]	@ (8001030 <__aeabi_ddiv+0x224>)
 8000ea4:	00a4      	lsls	r4, r4, #2
 8000ea6:	591b      	ldr	r3, [r3, r4]
 8000ea8:	469f      	mov	pc, r3
 8000eaa:	465a      	mov	r2, fp
 8000eac:	4302      	orrs	r2, r0
 8000eae:	4691      	mov	r9, r2
 8000eb0:	d000      	beq.n	8000eb4 <__aeabi_ddiv+0xa8>
 8000eb2:	e090      	b.n	8000fd6 <__aeabi_ddiv+0x1ca>
 8000eb4:	469a      	mov	sl, r3
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	4690      	mov	r8, r2
 8000eba:	2408      	movs	r4, #8
 8000ebc:	9303      	str	r3, [sp, #12]
 8000ebe:	e7cc      	b.n	8000e5a <__aeabi_ddiv+0x4e>
 8000ec0:	46cb      	mov	fp, r9
 8000ec2:	4642      	mov	r2, r8
 8000ec4:	9d02      	ldr	r5, [sp, #8]
 8000ec6:	9903      	ldr	r1, [sp, #12]
 8000ec8:	2902      	cmp	r1, #2
 8000eca:	d100      	bne.n	8000ece <__aeabi_ddiv+0xc2>
 8000ecc:	e1de      	b.n	800128c <__aeabi_ddiv+0x480>
 8000ece:	2903      	cmp	r1, #3
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0xc8>
 8000ed2:	e08d      	b.n	8000ff0 <__aeabi_ddiv+0x1e4>
 8000ed4:	2901      	cmp	r1, #1
 8000ed6:	d000      	beq.n	8000eda <__aeabi_ddiv+0xce>
 8000ed8:	e179      	b.n	80011ce <__aeabi_ddiv+0x3c2>
 8000eda:	002e      	movs	r6, r5
 8000edc:	2200      	movs	r2, #0
 8000ede:	2300      	movs	r3, #0
 8000ee0:	2400      	movs	r4, #0
 8000ee2:	4690      	mov	r8, r2
 8000ee4:	051b      	lsls	r3, r3, #20
 8000ee6:	4323      	orrs	r3, r4
 8000ee8:	07f6      	lsls	r6, r6, #31
 8000eea:	4333      	orrs	r3, r6
 8000eec:	4640      	mov	r0, r8
 8000eee:	0019      	movs	r1, r3
 8000ef0:	b007      	add	sp, #28
 8000ef2:	bcf0      	pop	{r4, r5, r6, r7}
 8000ef4:	46bb      	mov	fp, r7
 8000ef6:	46b2      	mov	sl, r6
 8000ef8:	46a9      	mov	r9, r5
 8000efa:	46a0      	mov	r8, r4
 8000efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000efe:	2200      	movs	r2, #0
 8000f00:	2400      	movs	r4, #0
 8000f02:	4690      	mov	r8, r2
 8000f04:	4b48      	ldr	r3, [pc, #288]	@ (8001028 <__aeabi_ddiv+0x21c>)
 8000f06:	e7ed      	b.n	8000ee4 <__aeabi_ddiv+0xd8>
 8000f08:	465a      	mov	r2, fp
 8000f0a:	9b00      	ldr	r3, [sp, #0]
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	4b49      	ldr	r3, [pc, #292]	@ (8001034 <__aeabi_ddiv+0x228>)
 8000f10:	469c      	mov	ip, r3
 8000f12:	44e2      	add	sl, ip
 8000f14:	2a00      	cmp	r2, #0
 8000f16:	d159      	bne.n	8000fcc <__aeabi_ddiv+0x1c0>
 8000f18:	2302      	movs	r3, #2
 8000f1a:	431c      	orrs	r4, r3
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	2102      	movs	r1, #2
 8000f20:	469b      	mov	fp, r3
 8000f22:	e7b8      	b.n	8000e96 <__aeabi_ddiv+0x8a>
 8000f24:	465a      	mov	r2, fp
 8000f26:	9b00      	ldr	r3, [sp, #0]
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	d049      	beq.n	8000fc0 <__aeabi_ddiv+0x1b4>
 8000f2c:	465b      	mov	r3, fp
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d100      	bne.n	8000f34 <__aeabi_ddiv+0x128>
 8000f32:	e19c      	b.n	800126e <__aeabi_ddiv+0x462>
 8000f34:	4658      	mov	r0, fp
 8000f36:	f001 fc0d 	bl	8002754 <__clzsi2>
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	3a0b      	subs	r2, #11
 8000f40:	271d      	movs	r7, #29
 8000f42:	9e00      	ldr	r6, [sp, #0]
 8000f44:	1aba      	subs	r2, r7, r2
 8000f46:	0019      	movs	r1, r3
 8000f48:	4658      	mov	r0, fp
 8000f4a:	40d6      	lsrs	r6, r2
 8000f4c:	3908      	subs	r1, #8
 8000f4e:	4088      	lsls	r0, r1
 8000f50:	0032      	movs	r2, r6
 8000f52:	4302      	orrs	r2, r0
 8000f54:	4693      	mov	fp, r2
 8000f56:	9a00      	ldr	r2, [sp, #0]
 8000f58:	408a      	lsls	r2, r1
 8000f5a:	4937      	ldr	r1, [pc, #220]	@ (8001038 <__aeabi_ddiv+0x22c>)
 8000f5c:	4453      	add	r3, sl
 8000f5e:	468a      	mov	sl, r1
 8000f60:	2100      	movs	r1, #0
 8000f62:	449a      	add	sl, r3
 8000f64:	e797      	b.n	8000e96 <__aeabi_ddiv+0x8a>
 8000f66:	465b      	mov	r3, fp
 8000f68:	4303      	orrs	r3, r0
 8000f6a:	4699      	mov	r9, r3
 8000f6c:	d021      	beq.n	8000fb2 <__aeabi_ddiv+0x1a6>
 8000f6e:	465b      	mov	r3, fp
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d100      	bne.n	8000f76 <__aeabi_ddiv+0x16a>
 8000f74:	e169      	b.n	800124a <__aeabi_ddiv+0x43e>
 8000f76:	4658      	mov	r0, fp
 8000f78:	f001 fbec 	bl	8002754 <__clzsi2>
 8000f7c:	230b      	movs	r3, #11
 8000f7e:	425b      	negs	r3, r3
 8000f80:	469c      	mov	ip, r3
 8000f82:	0002      	movs	r2, r0
 8000f84:	4484      	add	ip, r0
 8000f86:	4666      	mov	r6, ip
 8000f88:	231d      	movs	r3, #29
 8000f8a:	1b9b      	subs	r3, r3, r6
 8000f8c:	0026      	movs	r6, r4
 8000f8e:	0011      	movs	r1, r2
 8000f90:	4658      	mov	r0, fp
 8000f92:	40de      	lsrs	r6, r3
 8000f94:	3908      	subs	r1, #8
 8000f96:	4088      	lsls	r0, r1
 8000f98:	0033      	movs	r3, r6
 8000f9a:	4303      	orrs	r3, r0
 8000f9c:	4699      	mov	r9, r3
 8000f9e:	0023      	movs	r3, r4
 8000fa0:	408b      	lsls	r3, r1
 8000fa2:	4698      	mov	r8, r3
 8000fa4:	4b25      	ldr	r3, [pc, #148]	@ (800103c <__aeabi_ddiv+0x230>)
 8000fa6:	2400      	movs	r4, #0
 8000fa8:	1a9b      	subs	r3, r3, r2
 8000faa:	469a      	mov	sl, r3
 8000fac:	2300      	movs	r3, #0
 8000fae:	9303      	str	r3, [sp, #12]
 8000fb0:	e753      	b.n	8000e5a <__aeabi_ddiv+0x4e>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	4698      	mov	r8, r3
 8000fb6:	469a      	mov	sl, r3
 8000fb8:	3301      	adds	r3, #1
 8000fba:	2404      	movs	r4, #4
 8000fbc:	9303      	str	r3, [sp, #12]
 8000fbe:	e74c      	b.n	8000e5a <__aeabi_ddiv+0x4e>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	431c      	orrs	r4, r3
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	469b      	mov	fp, r3
 8000fca:	e764      	b.n	8000e96 <__aeabi_ddiv+0x8a>
 8000fcc:	2303      	movs	r3, #3
 8000fce:	0032      	movs	r2, r6
 8000fd0:	2103      	movs	r1, #3
 8000fd2:	431c      	orrs	r4, r3
 8000fd4:	e75f      	b.n	8000e96 <__aeabi_ddiv+0x8a>
 8000fd6:	469a      	mov	sl, r3
 8000fd8:	2303      	movs	r3, #3
 8000fda:	46d9      	mov	r9, fp
 8000fdc:	240c      	movs	r4, #12
 8000fde:	9303      	str	r3, [sp, #12]
 8000fe0:	e73b      	b.n	8000e5a <__aeabi_ddiv+0x4e>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	2480      	movs	r4, #128	@ 0x80
 8000fe6:	4698      	mov	r8, r3
 8000fe8:	2600      	movs	r6, #0
 8000fea:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <__aeabi_ddiv+0x21c>)
 8000fec:	0324      	lsls	r4, r4, #12
 8000fee:	e779      	b.n	8000ee4 <__aeabi_ddiv+0xd8>
 8000ff0:	2480      	movs	r4, #128	@ 0x80
 8000ff2:	465b      	mov	r3, fp
 8000ff4:	0324      	lsls	r4, r4, #12
 8000ff6:	431c      	orrs	r4, r3
 8000ff8:	0324      	lsls	r4, r4, #12
 8000ffa:	002e      	movs	r6, r5
 8000ffc:	4690      	mov	r8, r2
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <__aeabi_ddiv+0x21c>)
 8001000:	0b24      	lsrs	r4, r4, #12
 8001002:	e76f      	b.n	8000ee4 <__aeabi_ddiv+0xd8>
 8001004:	2480      	movs	r4, #128	@ 0x80
 8001006:	464b      	mov	r3, r9
 8001008:	0324      	lsls	r4, r4, #12
 800100a:	4223      	tst	r3, r4
 800100c:	d002      	beq.n	8001014 <__aeabi_ddiv+0x208>
 800100e:	465b      	mov	r3, fp
 8001010:	4223      	tst	r3, r4
 8001012:	d0f0      	beq.n	8000ff6 <__aeabi_ddiv+0x1ea>
 8001014:	2480      	movs	r4, #128	@ 0x80
 8001016:	464b      	mov	r3, r9
 8001018:	0324      	lsls	r4, r4, #12
 800101a:	431c      	orrs	r4, r3
 800101c:	0324      	lsls	r4, r4, #12
 800101e:	9e02      	ldr	r6, [sp, #8]
 8001020:	4b01      	ldr	r3, [pc, #4]	@ (8001028 <__aeabi_ddiv+0x21c>)
 8001022:	0b24      	lsrs	r4, r4, #12
 8001024:	e75e      	b.n	8000ee4 <__aeabi_ddiv+0xd8>
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	000007ff 	.word	0x000007ff
 800102c:	fffffc01 	.word	0xfffffc01
 8001030:	080097b4 	.word	0x080097b4
 8001034:	fffff801 	.word	0xfffff801
 8001038:	000003f3 	.word	0x000003f3
 800103c:	fffffc0d 	.word	0xfffffc0d
 8001040:	45cb      	cmp	fp, r9
 8001042:	d200      	bcs.n	8001046 <__aeabi_ddiv+0x23a>
 8001044:	e0f8      	b.n	8001238 <__aeabi_ddiv+0x42c>
 8001046:	d100      	bne.n	800104a <__aeabi_ddiv+0x23e>
 8001048:	e0f3      	b.n	8001232 <__aeabi_ddiv+0x426>
 800104a:	2301      	movs	r3, #1
 800104c:	425b      	negs	r3, r3
 800104e:	469c      	mov	ip, r3
 8001050:	4644      	mov	r4, r8
 8001052:	4648      	mov	r0, r9
 8001054:	2500      	movs	r5, #0
 8001056:	44e2      	add	sl, ip
 8001058:	465b      	mov	r3, fp
 800105a:	0e17      	lsrs	r7, r2, #24
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	431f      	orrs	r7, r3
 8001060:	0c19      	lsrs	r1, r3, #16
 8001062:	043b      	lsls	r3, r7, #16
 8001064:	0212      	lsls	r2, r2, #8
 8001066:	9700      	str	r7, [sp, #0]
 8001068:	0c1f      	lsrs	r7, r3, #16
 800106a:	4691      	mov	r9, r2
 800106c:	9102      	str	r1, [sp, #8]
 800106e:	9703      	str	r7, [sp, #12]
 8001070:	f7ff f8ec 	bl	800024c <__aeabi_uidivmod>
 8001074:	0002      	movs	r2, r0
 8001076:	437a      	muls	r2, r7
 8001078:	040b      	lsls	r3, r1, #16
 800107a:	0c21      	lsrs	r1, r4, #16
 800107c:	4680      	mov	r8, r0
 800107e:	4319      	orrs	r1, r3
 8001080:	428a      	cmp	r2, r1
 8001082:	d909      	bls.n	8001098 <__aeabi_ddiv+0x28c>
 8001084:	9f00      	ldr	r7, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	46bc      	mov	ip, r7
 800108a:	425b      	negs	r3, r3
 800108c:	4461      	add	r1, ip
 800108e:	469c      	mov	ip, r3
 8001090:	44e0      	add	r8, ip
 8001092:	428f      	cmp	r7, r1
 8001094:	d800      	bhi.n	8001098 <__aeabi_ddiv+0x28c>
 8001096:	e15c      	b.n	8001352 <__aeabi_ddiv+0x546>
 8001098:	1a88      	subs	r0, r1, r2
 800109a:	9902      	ldr	r1, [sp, #8]
 800109c:	f7ff f8d6 	bl	800024c <__aeabi_uidivmod>
 80010a0:	9a03      	ldr	r2, [sp, #12]
 80010a2:	0424      	lsls	r4, r4, #16
 80010a4:	4342      	muls	r2, r0
 80010a6:	0409      	lsls	r1, r1, #16
 80010a8:	0c24      	lsrs	r4, r4, #16
 80010aa:	0003      	movs	r3, r0
 80010ac:	430c      	orrs	r4, r1
 80010ae:	42a2      	cmp	r2, r4
 80010b0:	d906      	bls.n	80010c0 <__aeabi_ddiv+0x2b4>
 80010b2:	9900      	ldr	r1, [sp, #0]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	468c      	mov	ip, r1
 80010b8:	4464      	add	r4, ip
 80010ba:	42a1      	cmp	r1, r4
 80010bc:	d800      	bhi.n	80010c0 <__aeabi_ddiv+0x2b4>
 80010be:	e142      	b.n	8001346 <__aeabi_ddiv+0x53a>
 80010c0:	1aa0      	subs	r0, r4, r2
 80010c2:	4642      	mov	r2, r8
 80010c4:	0412      	lsls	r2, r2, #16
 80010c6:	431a      	orrs	r2, r3
 80010c8:	4693      	mov	fp, r2
 80010ca:	464b      	mov	r3, r9
 80010cc:	4659      	mov	r1, fp
 80010ce:	0c1b      	lsrs	r3, r3, #16
 80010d0:	001f      	movs	r7, r3
 80010d2:	9304      	str	r3, [sp, #16]
 80010d4:	040b      	lsls	r3, r1, #16
 80010d6:	4649      	mov	r1, r9
 80010d8:	0409      	lsls	r1, r1, #16
 80010da:	0c09      	lsrs	r1, r1, #16
 80010dc:	000c      	movs	r4, r1
 80010de:	0c1b      	lsrs	r3, r3, #16
 80010e0:	435c      	muls	r4, r3
 80010e2:	0c12      	lsrs	r2, r2, #16
 80010e4:	437b      	muls	r3, r7
 80010e6:	4688      	mov	r8, r1
 80010e8:	4351      	muls	r1, r2
 80010ea:	437a      	muls	r2, r7
 80010ec:	0c27      	lsrs	r7, r4, #16
 80010ee:	46bc      	mov	ip, r7
 80010f0:	185b      	adds	r3, r3, r1
 80010f2:	4463      	add	r3, ip
 80010f4:	4299      	cmp	r1, r3
 80010f6:	d903      	bls.n	8001100 <__aeabi_ddiv+0x2f4>
 80010f8:	2180      	movs	r1, #128	@ 0x80
 80010fa:	0249      	lsls	r1, r1, #9
 80010fc:	468c      	mov	ip, r1
 80010fe:	4462      	add	r2, ip
 8001100:	0c19      	lsrs	r1, r3, #16
 8001102:	0424      	lsls	r4, r4, #16
 8001104:	041b      	lsls	r3, r3, #16
 8001106:	0c24      	lsrs	r4, r4, #16
 8001108:	188a      	adds	r2, r1, r2
 800110a:	191c      	adds	r4, r3, r4
 800110c:	4290      	cmp	r0, r2
 800110e:	d302      	bcc.n	8001116 <__aeabi_ddiv+0x30a>
 8001110:	d116      	bne.n	8001140 <__aeabi_ddiv+0x334>
 8001112:	42a5      	cmp	r5, r4
 8001114:	d214      	bcs.n	8001140 <__aeabi_ddiv+0x334>
 8001116:	465b      	mov	r3, fp
 8001118:	9f00      	ldr	r7, [sp, #0]
 800111a:	3b01      	subs	r3, #1
 800111c:	444d      	add	r5, r9
 800111e:	9305      	str	r3, [sp, #20]
 8001120:	454d      	cmp	r5, r9
 8001122:	419b      	sbcs	r3, r3
 8001124:	46bc      	mov	ip, r7
 8001126:	425b      	negs	r3, r3
 8001128:	4463      	add	r3, ip
 800112a:	18c0      	adds	r0, r0, r3
 800112c:	4287      	cmp	r7, r0
 800112e:	d300      	bcc.n	8001132 <__aeabi_ddiv+0x326>
 8001130:	e102      	b.n	8001338 <__aeabi_ddiv+0x52c>
 8001132:	4282      	cmp	r2, r0
 8001134:	d900      	bls.n	8001138 <__aeabi_ddiv+0x32c>
 8001136:	e129      	b.n	800138c <__aeabi_ddiv+0x580>
 8001138:	d100      	bne.n	800113c <__aeabi_ddiv+0x330>
 800113a:	e124      	b.n	8001386 <__aeabi_ddiv+0x57a>
 800113c:	9b05      	ldr	r3, [sp, #20]
 800113e:	469b      	mov	fp, r3
 8001140:	1b2c      	subs	r4, r5, r4
 8001142:	42a5      	cmp	r5, r4
 8001144:	41ad      	sbcs	r5, r5
 8001146:	9b00      	ldr	r3, [sp, #0]
 8001148:	1a80      	subs	r0, r0, r2
 800114a:	426d      	negs	r5, r5
 800114c:	1b40      	subs	r0, r0, r5
 800114e:	4283      	cmp	r3, r0
 8001150:	d100      	bne.n	8001154 <__aeabi_ddiv+0x348>
 8001152:	e10f      	b.n	8001374 <__aeabi_ddiv+0x568>
 8001154:	9902      	ldr	r1, [sp, #8]
 8001156:	f7ff f879 	bl	800024c <__aeabi_uidivmod>
 800115a:	9a03      	ldr	r2, [sp, #12]
 800115c:	040b      	lsls	r3, r1, #16
 800115e:	4342      	muls	r2, r0
 8001160:	0c21      	lsrs	r1, r4, #16
 8001162:	0005      	movs	r5, r0
 8001164:	4319      	orrs	r1, r3
 8001166:	428a      	cmp	r2, r1
 8001168:	d900      	bls.n	800116c <__aeabi_ddiv+0x360>
 800116a:	e0cb      	b.n	8001304 <__aeabi_ddiv+0x4f8>
 800116c:	1a88      	subs	r0, r1, r2
 800116e:	9902      	ldr	r1, [sp, #8]
 8001170:	f7ff f86c 	bl	800024c <__aeabi_uidivmod>
 8001174:	9a03      	ldr	r2, [sp, #12]
 8001176:	0424      	lsls	r4, r4, #16
 8001178:	4342      	muls	r2, r0
 800117a:	0409      	lsls	r1, r1, #16
 800117c:	0c24      	lsrs	r4, r4, #16
 800117e:	0003      	movs	r3, r0
 8001180:	430c      	orrs	r4, r1
 8001182:	42a2      	cmp	r2, r4
 8001184:	d900      	bls.n	8001188 <__aeabi_ddiv+0x37c>
 8001186:	e0ca      	b.n	800131e <__aeabi_ddiv+0x512>
 8001188:	4641      	mov	r1, r8
 800118a:	1aa4      	subs	r4, r4, r2
 800118c:	042a      	lsls	r2, r5, #16
 800118e:	431a      	orrs	r2, r3
 8001190:	9f04      	ldr	r7, [sp, #16]
 8001192:	0413      	lsls	r3, r2, #16
 8001194:	0c1b      	lsrs	r3, r3, #16
 8001196:	4359      	muls	r1, r3
 8001198:	4640      	mov	r0, r8
 800119a:	437b      	muls	r3, r7
 800119c:	469c      	mov	ip, r3
 800119e:	0c15      	lsrs	r5, r2, #16
 80011a0:	4368      	muls	r0, r5
 80011a2:	0c0b      	lsrs	r3, r1, #16
 80011a4:	4484      	add	ip, r0
 80011a6:	4463      	add	r3, ip
 80011a8:	437d      	muls	r5, r7
 80011aa:	4298      	cmp	r0, r3
 80011ac:	d903      	bls.n	80011b6 <__aeabi_ddiv+0x3aa>
 80011ae:	2080      	movs	r0, #128	@ 0x80
 80011b0:	0240      	lsls	r0, r0, #9
 80011b2:	4684      	mov	ip, r0
 80011b4:	4465      	add	r5, ip
 80011b6:	0c18      	lsrs	r0, r3, #16
 80011b8:	0409      	lsls	r1, r1, #16
 80011ba:	041b      	lsls	r3, r3, #16
 80011bc:	0c09      	lsrs	r1, r1, #16
 80011be:	1940      	adds	r0, r0, r5
 80011c0:	185b      	adds	r3, r3, r1
 80011c2:	4284      	cmp	r4, r0
 80011c4:	d327      	bcc.n	8001216 <__aeabi_ddiv+0x40a>
 80011c6:	d023      	beq.n	8001210 <__aeabi_ddiv+0x404>
 80011c8:	2301      	movs	r3, #1
 80011ca:	0035      	movs	r5, r6
 80011cc:	431a      	orrs	r2, r3
 80011ce:	4b94      	ldr	r3, [pc, #592]	@ (8001420 <__aeabi_ddiv+0x614>)
 80011d0:	4453      	add	r3, sl
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	dd60      	ble.n	8001298 <__aeabi_ddiv+0x48c>
 80011d6:	0751      	lsls	r1, r2, #29
 80011d8:	d000      	beq.n	80011dc <__aeabi_ddiv+0x3d0>
 80011da:	e086      	b.n	80012ea <__aeabi_ddiv+0x4de>
 80011dc:	002e      	movs	r6, r5
 80011de:	08d1      	lsrs	r1, r2, #3
 80011e0:	465a      	mov	r2, fp
 80011e2:	01d2      	lsls	r2, r2, #7
 80011e4:	d506      	bpl.n	80011f4 <__aeabi_ddiv+0x3e8>
 80011e6:	465a      	mov	r2, fp
 80011e8:	4b8e      	ldr	r3, [pc, #568]	@ (8001424 <__aeabi_ddiv+0x618>)
 80011ea:	401a      	ands	r2, r3
 80011ec:	2380      	movs	r3, #128	@ 0x80
 80011ee:	4693      	mov	fp, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	4453      	add	r3, sl
 80011f4:	4a8c      	ldr	r2, [pc, #560]	@ (8001428 <__aeabi_ddiv+0x61c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	dd00      	ble.n	80011fc <__aeabi_ddiv+0x3f0>
 80011fa:	e680      	b.n	8000efe <__aeabi_ddiv+0xf2>
 80011fc:	465a      	mov	r2, fp
 80011fe:	0752      	lsls	r2, r2, #29
 8001200:	430a      	orrs	r2, r1
 8001202:	4690      	mov	r8, r2
 8001204:	465a      	mov	r2, fp
 8001206:	055b      	lsls	r3, r3, #21
 8001208:	0254      	lsls	r4, r2, #9
 800120a:	0b24      	lsrs	r4, r4, #12
 800120c:	0d5b      	lsrs	r3, r3, #21
 800120e:	e669      	b.n	8000ee4 <__aeabi_ddiv+0xd8>
 8001210:	0035      	movs	r5, r6
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0db      	beq.n	80011ce <__aeabi_ddiv+0x3c2>
 8001216:	9d00      	ldr	r5, [sp, #0]
 8001218:	1e51      	subs	r1, r2, #1
 800121a:	46ac      	mov	ip, r5
 800121c:	4464      	add	r4, ip
 800121e:	42ac      	cmp	r4, r5
 8001220:	d200      	bcs.n	8001224 <__aeabi_ddiv+0x418>
 8001222:	e09e      	b.n	8001362 <__aeabi_ddiv+0x556>
 8001224:	4284      	cmp	r4, r0
 8001226:	d200      	bcs.n	800122a <__aeabi_ddiv+0x41e>
 8001228:	e0e1      	b.n	80013ee <__aeabi_ddiv+0x5e2>
 800122a:	d100      	bne.n	800122e <__aeabi_ddiv+0x422>
 800122c:	e0ee      	b.n	800140c <__aeabi_ddiv+0x600>
 800122e:	000a      	movs	r2, r1
 8001230:	e7ca      	b.n	80011c8 <__aeabi_ddiv+0x3bc>
 8001232:	4542      	cmp	r2, r8
 8001234:	d900      	bls.n	8001238 <__aeabi_ddiv+0x42c>
 8001236:	e708      	b.n	800104a <__aeabi_ddiv+0x23e>
 8001238:	464b      	mov	r3, r9
 800123a:	07dc      	lsls	r4, r3, #31
 800123c:	0858      	lsrs	r0, r3, #1
 800123e:	4643      	mov	r3, r8
 8001240:	085b      	lsrs	r3, r3, #1
 8001242:	431c      	orrs	r4, r3
 8001244:	4643      	mov	r3, r8
 8001246:	07dd      	lsls	r5, r3, #31
 8001248:	e706      	b.n	8001058 <__aeabi_ddiv+0x24c>
 800124a:	f001 fa83 	bl	8002754 <__clzsi2>
 800124e:	2315      	movs	r3, #21
 8001250:	469c      	mov	ip, r3
 8001252:	4484      	add	ip, r0
 8001254:	0002      	movs	r2, r0
 8001256:	4663      	mov	r3, ip
 8001258:	3220      	adds	r2, #32
 800125a:	2b1c      	cmp	r3, #28
 800125c:	dc00      	bgt.n	8001260 <__aeabi_ddiv+0x454>
 800125e:	e692      	b.n	8000f86 <__aeabi_ddiv+0x17a>
 8001260:	0023      	movs	r3, r4
 8001262:	3808      	subs	r0, #8
 8001264:	4083      	lsls	r3, r0
 8001266:	4699      	mov	r9, r3
 8001268:	2300      	movs	r3, #0
 800126a:	4698      	mov	r8, r3
 800126c:	e69a      	b.n	8000fa4 <__aeabi_ddiv+0x198>
 800126e:	f001 fa71 	bl	8002754 <__clzsi2>
 8001272:	0002      	movs	r2, r0
 8001274:	0003      	movs	r3, r0
 8001276:	3215      	adds	r2, #21
 8001278:	3320      	adds	r3, #32
 800127a:	2a1c      	cmp	r2, #28
 800127c:	dc00      	bgt.n	8001280 <__aeabi_ddiv+0x474>
 800127e:	e65f      	b.n	8000f40 <__aeabi_ddiv+0x134>
 8001280:	9900      	ldr	r1, [sp, #0]
 8001282:	3808      	subs	r0, #8
 8001284:	4081      	lsls	r1, r0
 8001286:	2200      	movs	r2, #0
 8001288:	468b      	mov	fp, r1
 800128a:	e666      	b.n	8000f5a <__aeabi_ddiv+0x14e>
 800128c:	2200      	movs	r2, #0
 800128e:	002e      	movs	r6, r5
 8001290:	2400      	movs	r4, #0
 8001292:	4690      	mov	r8, r2
 8001294:	4b65      	ldr	r3, [pc, #404]	@ (800142c <__aeabi_ddiv+0x620>)
 8001296:	e625      	b.n	8000ee4 <__aeabi_ddiv+0xd8>
 8001298:	002e      	movs	r6, r5
 800129a:	2101      	movs	r1, #1
 800129c:	1ac9      	subs	r1, r1, r3
 800129e:	2938      	cmp	r1, #56	@ 0x38
 80012a0:	dd00      	ble.n	80012a4 <__aeabi_ddiv+0x498>
 80012a2:	e61b      	b.n	8000edc <__aeabi_ddiv+0xd0>
 80012a4:	291f      	cmp	r1, #31
 80012a6:	dc7e      	bgt.n	80013a6 <__aeabi_ddiv+0x59a>
 80012a8:	4861      	ldr	r0, [pc, #388]	@ (8001430 <__aeabi_ddiv+0x624>)
 80012aa:	0014      	movs	r4, r2
 80012ac:	4450      	add	r0, sl
 80012ae:	465b      	mov	r3, fp
 80012b0:	4082      	lsls	r2, r0
 80012b2:	4083      	lsls	r3, r0
 80012b4:	40cc      	lsrs	r4, r1
 80012b6:	1e50      	subs	r0, r2, #1
 80012b8:	4182      	sbcs	r2, r0
 80012ba:	4323      	orrs	r3, r4
 80012bc:	431a      	orrs	r2, r3
 80012be:	465b      	mov	r3, fp
 80012c0:	40cb      	lsrs	r3, r1
 80012c2:	0751      	lsls	r1, r2, #29
 80012c4:	d009      	beq.n	80012da <__aeabi_ddiv+0x4ce>
 80012c6:	210f      	movs	r1, #15
 80012c8:	4011      	ands	r1, r2
 80012ca:	2904      	cmp	r1, #4
 80012cc:	d005      	beq.n	80012da <__aeabi_ddiv+0x4ce>
 80012ce:	1d11      	adds	r1, r2, #4
 80012d0:	4291      	cmp	r1, r2
 80012d2:	4192      	sbcs	r2, r2
 80012d4:	4252      	negs	r2, r2
 80012d6:	189b      	adds	r3, r3, r2
 80012d8:	000a      	movs	r2, r1
 80012da:	0219      	lsls	r1, r3, #8
 80012dc:	d400      	bmi.n	80012e0 <__aeabi_ddiv+0x4d4>
 80012de:	e09b      	b.n	8001418 <__aeabi_ddiv+0x60c>
 80012e0:	2200      	movs	r2, #0
 80012e2:	2301      	movs	r3, #1
 80012e4:	2400      	movs	r4, #0
 80012e6:	4690      	mov	r8, r2
 80012e8:	e5fc      	b.n	8000ee4 <__aeabi_ddiv+0xd8>
 80012ea:	210f      	movs	r1, #15
 80012ec:	4011      	ands	r1, r2
 80012ee:	2904      	cmp	r1, #4
 80012f0:	d100      	bne.n	80012f4 <__aeabi_ddiv+0x4e8>
 80012f2:	e773      	b.n	80011dc <__aeabi_ddiv+0x3d0>
 80012f4:	1d11      	adds	r1, r2, #4
 80012f6:	4291      	cmp	r1, r2
 80012f8:	4192      	sbcs	r2, r2
 80012fa:	4252      	negs	r2, r2
 80012fc:	002e      	movs	r6, r5
 80012fe:	08c9      	lsrs	r1, r1, #3
 8001300:	4493      	add	fp, r2
 8001302:	e76d      	b.n	80011e0 <__aeabi_ddiv+0x3d4>
 8001304:	9b00      	ldr	r3, [sp, #0]
 8001306:	3d01      	subs	r5, #1
 8001308:	469c      	mov	ip, r3
 800130a:	4461      	add	r1, ip
 800130c:	428b      	cmp	r3, r1
 800130e:	d900      	bls.n	8001312 <__aeabi_ddiv+0x506>
 8001310:	e72c      	b.n	800116c <__aeabi_ddiv+0x360>
 8001312:	428a      	cmp	r2, r1
 8001314:	d800      	bhi.n	8001318 <__aeabi_ddiv+0x50c>
 8001316:	e729      	b.n	800116c <__aeabi_ddiv+0x360>
 8001318:	1e85      	subs	r5, r0, #2
 800131a:	4461      	add	r1, ip
 800131c:	e726      	b.n	800116c <__aeabi_ddiv+0x360>
 800131e:	9900      	ldr	r1, [sp, #0]
 8001320:	3b01      	subs	r3, #1
 8001322:	468c      	mov	ip, r1
 8001324:	4464      	add	r4, ip
 8001326:	42a1      	cmp	r1, r4
 8001328:	d900      	bls.n	800132c <__aeabi_ddiv+0x520>
 800132a:	e72d      	b.n	8001188 <__aeabi_ddiv+0x37c>
 800132c:	42a2      	cmp	r2, r4
 800132e:	d800      	bhi.n	8001332 <__aeabi_ddiv+0x526>
 8001330:	e72a      	b.n	8001188 <__aeabi_ddiv+0x37c>
 8001332:	1e83      	subs	r3, r0, #2
 8001334:	4464      	add	r4, ip
 8001336:	e727      	b.n	8001188 <__aeabi_ddiv+0x37c>
 8001338:	4287      	cmp	r7, r0
 800133a:	d000      	beq.n	800133e <__aeabi_ddiv+0x532>
 800133c:	e6fe      	b.n	800113c <__aeabi_ddiv+0x330>
 800133e:	45a9      	cmp	r9, r5
 8001340:	d900      	bls.n	8001344 <__aeabi_ddiv+0x538>
 8001342:	e6fb      	b.n	800113c <__aeabi_ddiv+0x330>
 8001344:	e6f5      	b.n	8001132 <__aeabi_ddiv+0x326>
 8001346:	42a2      	cmp	r2, r4
 8001348:	d800      	bhi.n	800134c <__aeabi_ddiv+0x540>
 800134a:	e6b9      	b.n	80010c0 <__aeabi_ddiv+0x2b4>
 800134c:	1e83      	subs	r3, r0, #2
 800134e:	4464      	add	r4, ip
 8001350:	e6b6      	b.n	80010c0 <__aeabi_ddiv+0x2b4>
 8001352:	428a      	cmp	r2, r1
 8001354:	d800      	bhi.n	8001358 <__aeabi_ddiv+0x54c>
 8001356:	e69f      	b.n	8001098 <__aeabi_ddiv+0x28c>
 8001358:	46bc      	mov	ip, r7
 800135a:	1e83      	subs	r3, r0, #2
 800135c:	4698      	mov	r8, r3
 800135e:	4461      	add	r1, ip
 8001360:	e69a      	b.n	8001098 <__aeabi_ddiv+0x28c>
 8001362:	000a      	movs	r2, r1
 8001364:	4284      	cmp	r4, r0
 8001366:	d000      	beq.n	800136a <__aeabi_ddiv+0x55e>
 8001368:	e72e      	b.n	80011c8 <__aeabi_ddiv+0x3bc>
 800136a:	454b      	cmp	r3, r9
 800136c:	d000      	beq.n	8001370 <__aeabi_ddiv+0x564>
 800136e:	e72b      	b.n	80011c8 <__aeabi_ddiv+0x3bc>
 8001370:	0035      	movs	r5, r6
 8001372:	e72c      	b.n	80011ce <__aeabi_ddiv+0x3c2>
 8001374:	4b2a      	ldr	r3, [pc, #168]	@ (8001420 <__aeabi_ddiv+0x614>)
 8001376:	4a2f      	ldr	r2, [pc, #188]	@ (8001434 <__aeabi_ddiv+0x628>)
 8001378:	4453      	add	r3, sl
 800137a:	4592      	cmp	sl, r2
 800137c:	db43      	blt.n	8001406 <__aeabi_ddiv+0x5fa>
 800137e:	2201      	movs	r2, #1
 8001380:	2100      	movs	r1, #0
 8001382:	4493      	add	fp, r2
 8001384:	e72c      	b.n	80011e0 <__aeabi_ddiv+0x3d4>
 8001386:	42ac      	cmp	r4, r5
 8001388:	d800      	bhi.n	800138c <__aeabi_ddiv+0x580>
 800138a:	e6d7      	b.n	800113c <__aeabi_ddiv+0x330>
 800138c:	2302      	movs	r3, #2
 800138e:	425b      	negs	r3, r3
 8001390:	469c      	mov	ip, r3
 8001392:	9900      	ldr	r1, [sp, #0]
 8001394:	444d      	add	r5, r9
 8001396:	454d      	cmp	r5, r9
 8001398:	419b      	sbcs	r3, r3
 800139a:	44e3      	add	fp, ip
 800139c:	468c      	mov	ip, r1
 800139e:	425b      	negs	r3, r3
 80013a0:	4463      	add	r3, ip
 80013a2:	18c0      	adds	r0, r0, r3
 80013a4:	e6cc      	b.n	8001140 <__aeabi_ddiv+0x334>
 80013a6:	201f      	movs	r0, #31
 80013a8:	4240      	negs	r0, r0
 80013aa:	1ac3      	subs	r3, r0, r3
 80013ac:	4658      	mov	r0, fp
 80013ae:	40d8      	lsrs	r0, r3
 80013b0:	2920      	cmp	r1, #32
 80013b2:	d004      	beq.n	80013be <__aeabi_ddiv+0x5b2>
 80013b4:	4659      	mov	r1, fp
 80013b6:	4b20      	ldr	r3, [pc, #128]	@ (8001438 <__aeabi_ddiv+0x62c>)
 80013b8:	4453      	add	r3, sl
 80013ba:	4099      	lsls	r1, r3
 80013bc:	430a      	orrs	r2, r1
 80013be:	1e53      	subs	r3, r2, #1
 80013c0:	419a      	sbcs	r2, r3
 80013c2:	2307      	movs	r3, #7
 80013c4:	0019      	movs	r1, r3
 80013c6:	4302      	orrs	r2, r0
 80013c8:	2400      	movs	r4, #0
 80013ca:	4011      	ands	r1, r2
 80013cc:	4213      	tst	r3, r2
 80013ce:	d009      	beq.n	80013e4 <__aeabi_ddiv+0x5d8>
 80013d0:	3308      	adds	r3, #8
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	d01d      	beq.n	8001414 <__aeabi_ddiv+0x608>
 80013d8:	1d13      	adds	r3, r2, #4
 80013da:	4293      	cmp	r3, r2
 80013dc:	4189      	sbcs	r1, r1
 80013de:	001a      	movs	r2, r3
 80013e0:	4249      	negs	r1, r1
 80013e2:	0749      	lsls	r1, r1, #29
 80013e4:	08d2      	lsrs	r2, r2, #3
 80013e6:	430a      	orrs	r2, r1
 80013e8:	4690      	mov	r8, r2
 80013ea:	2300      	movs	r3, #0
 80013ec:	e57a      	b.n	8000ee4 <__aeabi_ddiv+0xd8>
 80013ee:	4649      	mov	r1, r9
 80013f0:	9f00      	ldr	r7, [sp, #0]
 80013f2:	004d      	lsls	r5, r1, #1
 80013f4:	454d      	cmp	r5, r9
 80013f6:	4189      	sbcs	r1, r1
 80013f8:	46bc      	mov	ip, r7
 80013fa:	4249      	negs	r1, r1
 80013fc:	4461      	add	r1, ip
 80013fe:	46a9      	mov	r9, r5
 8001400:	3a02      	subs	r2, #2
 8001402:	1864      	adds	r4, r4, r1
 8001404:	e7ae      	b.n	8001364 <__aeabi_ddiv+0x558>
 8001406:	2201      	movs	r2, #1
 8001408:	4252      	negs	r2, r2
 800140a:	e746      	b.n	800129a <__aeabi_ddiv+0x48e>
 800140c:	4599      	cmp	r9, r3
 800140e:	d3ee      	bcc.n	80013ee <__aeabi_ddiv+0x5e2>
 8001410:	000a      	movs	r2, r1
 8001412:	e7aa      	b.n	800136a <__aeabi_ddiv+0x55e>
 8001414:	2100      	movs	r1, #0
 8001416:	e7e5      	b.n	80013e4 <__aeabi_ddiv+0x5d8>
 8001418:	0759      	lsls	r1, r3, #29
 800141a:	025b      	lsls	r3, r3, #9
 800141c:	0b1c      	lsrs	r4, r3, #12
 800141e:	e7e1      	b.n	80013e4 <__aeabi_ddiv+0x5d8>
 8001420:	000003ff 	.word	0x000003ff
 8001424:	feffffff 	.word	0xfeffffff
 8001428:	000007fe 	.word	0x000007fe
 800142c:	000007ff 	.word	0x000007ff
 8001430:	0000041e 	.word	0x0000041e
 8001434:	fffffc02 	.word	0xfffffc02
 8001438:	0000043e 	.word	0x0000043e

0800143c <__eqdf2>:
 800143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143e:	4657      	mov	r7, sl
 8001440:	46de      	mov	lr, fp
 8001442:	464e      	mov	r6, r9
 8001444:	4645      	mov	r5, r8
 8001446:	b5e0      	push	{r5, r6, r7, lr}
 8001448:	000d      	movs	r5, r1
 800144a:	0004      	movs	r4, r0
 800144c:	0fe8      	lsrs	r0, r5, #31
 800144e:	4683      	mov	fp, r0
 8001450:	0309      	lsls	r1, r1, #12
 8001452:	0fd8      	lsrs	r0, r3, #31
 8001454:	0b09      	lsrs	r1, r1, #12
 8001456:	4682      	mov	sl, r0
 8001458:	4819      	ldr	r0, [pc, #100]	@ (80014c0 <__eqdf2+0x84>)
 800145a:	468c      	mov	ip, r1
 800145c:	031f      	lsls	r7, r3, #12
 800145e:	0069      	lsls	r1, r5, #1
 8001460:	005e      	lsls	r6, r3, #1
 8001462:	0d49      	lsrs	r1, r1, #21
 8001464:	0b3f      	lsrs	r7, r7, #12
 8001466:	0d76      	lsrs	r6, r6, #21
 8001468:	4281      	cmp	r1, r0
 800146a:	d018      	beq.n	800149e <__eqdf2+0x62>
 800146c:	4286      	cmp	r6, r0
 800146e:	d00f      	beq.n	8001490 <__eqdf2+0x54>
 8001470:	2001      	movs	r0, #1
 8001472:	42b1      	cmp	r1, r6
 8001474:	d10d      	bne.n	8001492 <__eqdf2+0x56>
 8001476:	45bc      	cmp	ip, r7
 8001478:	d10b      	bne.n	8001492 <__eqdf2+0x56>
 800147a:	4294      	cmp	r4, r2
 800147c:	d109      	bne.n	8001492 <__eqdf2+0x56>
 800147e:	45d3      	cmp	fp, sl
 8001480:	d01c      	beq.n	80014bc <__eqdf2+0x80>
 8001482:	2900      	cmp	r1, #0
 8001484:	d105      	bne.n	8001492 <__eqdf2+0x56>
 8001486:	4660      	mov	r0, ip
 8001488:	4320      	orrs	r0, r4
 800148a:	1e43      	subs	r3, r0, #1
 800148c:	4198      	sbcs	r0, r3
 800148e:	e000      	b.n	8001492 <__eqdf2+0x56>
 8001490:	2001      	movs	r0, #1
 8001492:	bcf0      	pop	{r4, r5, r6, r7}
 8001494:	46bb      	mov	fp, r7
 8001496:	46b2      	mov	sl, r6
 8001498:	46a9      	mov	r9, r5
 800149a:	46a0      	mov	r8, r4
 800149c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149e:	2001      	movs	r0, #1
 80014a0:	428e      	cmp	r6, r1
 80014a2:	d1f6      	bne.n	8001492 <__eqdf2+0x56>
 80014a4:	4661      	mov	r1, ip
 80014a6:	4339      	orrs	r1, r7
 80014a8:	000f      	movs	r7, r1
 80014aa:	4317      	orrs	r7, r2
 80014ac:	4327      	orrs	r7, r4
 80014ae:	d1f0      	bne.n	8001492 <__eqdf2+0x56>
 80014b0:	465b      	mov	r3, fp
 80014b2:	4652      	mov	r2, sl
 80014b4:	1a98      	subs	r0, r3, r2
 80014b6:	1e43      	subs	r3, r0, #1
 80014b8:	4198      	sbcs	r0, r3
 80014ba:	e7ea      	b.n	8001492 <__eqdf2+0x56>
 80014bc:	2000      	movs	r0, #0
 80014be:	e7e8      	b.n	8001492 <__eqdf2+0x56>
 80014c0:	000007ff 	.word	0x000007ff

080014c4 <__gedf2>:
 80014c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c6:	4657      	mov	r7, sl
 80014c8:	464e      	mov	r6, r9
 80014ca:	4645      	mov	r5, r8
 80014cc:	46de      	mov	lr, fp
 80014ce:	b5e0      	push	{r5, r6, r7, lr}
 80014d0:	000d      	movs	r5, r1
 80014d2:	030e      	lsls	r6, r1, #12
 80014d4:	0049      	lsls	r1, r1, #1
 80014d6:	0d49      	lsrs	r1, r1, #21
 80014d8:	468a      	mov	sl, r1
 80014da:	0fdf      	lsrs	r7, r3, #31
 80014dc:	0fe9      	lsrs	r1, r5, #31
 80014de:	46bc      	mov	ip, r7
 80014e0:	b083      	sub	sp, #12
 80014e2:	4f2f      	ldr	r7, [pc, #188]	@ (80015a0 <__gedf2+0xdc>)
 80014e4:	0004      	movs	r4, r0
 80014e6:	4680      	mov	r8, r0
 80014e8:	9101      	str	r1, [sp, #4]
 80014ea:	0058      	lsls	r0, r3, #1
 80014ec:	0319      	lsls	r1, r3, #12
 80014ee:	4691      	mov	r9, r2
 80014f0:	0b36      	lsrs	r6, r6, #12
 80014f2:	0b09      	lsrs	r1, r1, #12
 80014f4:	0d40      	lsrs	r0, r0, #21
 80014f6:	45ba      	cmp	sl, r7
 80014f8:	d01d      	beq.n	8001536 <__gedf2+0x72>
 80014fa:	42b8      	cmp	r0, r7
 80014fc:	d00d      	beq.n	800151a <__gedf2+0x56>
 80014fe:	4657      	mov	r7, sl
 8001500:	2f00      	cmp	r7, #0
 8001502:	d12a      	bne.n	800155a <__gedf2+0x96>
 8001504:	4334      	orrs	r4, r6
 8001506:	2800      	cmp	r0, #0
 8001508:	d124      	bne.n	8001554 <__gedf2+0x90>
 800150a:	430a      	orrs	r2, r1
 800150c:	d036      	beq.n	800157c <__gedf2+0xb8>
 800150e:	2c00      	cmp	r4, #0
 8001510:	d141      	bne.n	8001596 <__gedf2+0xd2>
 8001512:	4663      	mov	r3, ip
 8001514:	0058      	lsls	r0, r3, #1
 8001516:	3801      	subs	r0, #1
 8001518:	e015      	b.n	8001546 <__gedf2+0x82>
 800151a:	4311      	orrs	r1, r2
 800151c:	d138      	bne.n	8001590 <__gedf2+0xcc>
 800151e:	4653      	mov	r3, sl
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <__gedf2+0x64>
 8001524:	4326      	orrs	r6, r4
 8001526:	d0f4      	beq.n	8001512 <__gedf2+0x4e>
 8001528:	9b01      	ldr	r3, [sp, #4]
 800152a:	4563      	cmp	r3, ip
 800152c:	d107      	bne.n	800153e <__gedf2+0x7a>
 800152e:	9b01      	ldr	r3, [sp, #4]
 8001530:	0058      	lsls	r0, r3, #1
 8001532:	3801      	subs	r0, #1
 8001534:	e007      	b.n	8001546 <__gedf2+0x82>
 8001536:	4326      	orrs	r6, r4
 8001538:	d12a      	bne.n	8001590 <__gedf2+0xcc>
 800153a:	4550      	cmp	r0, sl
 800153c:	d021      	beq.n	8001582 <__gedf2+0xbe>
 800153e:	2001      	movs	r0, #1
 8001540:	9b01      	ldr	r3, [sp, #4]
 8001542:	425f      	negs	r7, r3
 8001544:	4338      	orrs	r0, r7
 8001546:	b003      	add	sp, #12
 8001548:	bcf0      	pop	{r4, r5, r6, r7}
 800154a:	46bb      	mov	fp, r7
 800154c:	46b2      	mov	sl, r6
 800154e:	46a9      	mov	r9, r5
 8001550:	46a0      	mov	r8, r4
 8001552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001554:	2c00      	cmp	r4, #0
 8001556:	d0dc      	beq.n	8001512 <__gedf2+0x4e>
 8001558:	e7e6      	b.n	8001528 <__gedf2+0x64>
 800155a:	2800      	cmp	r0, #0
 800155c:	d0ef      	beq.n	800153e <__gedf2+0x7a>
 800155e:	9b01      	ldr	r3, [sp, #4]
 8001560:	4563      	cmp	r3, ip
 8001562:	d1ec      	bne.n	800153e <__gedf2+0x7a>
 8001564:	4582      	cmp	sl, r0
 8001566:	dcea      	bgt.n	800153e <__gedf2+0x7a>
 8001568:	dbe1      	blt.n	800152e <__gedf2+0x6a>
 800156a:	428e      	cmp	r6, r1
 800156c:	d8e7      	bhi.n	800153e <__gedf2+0x7a>
 800156e:	d1de      	bne.n	800152e <__gedf2+0x6a>
 8001570:	45c8      	cmp	r8, r9
 8001572:	d8e4      	bhi.n	800153e <__gedf2+0x7a>
 8001574:	2000      	movs	r0, #0
 8001576:	45c8      	cmp	r8, r9
 8001578:	d2e5      	bcs.n	8001546 <__gedf2+0x82>
 800157a:	e7d8      	b.n	800152e <__gedf2+0x6a>
 800157c:	2c00      	cmp	r4, #0
 800157e:	d0e2      	beq.n	8001546 <__gedf2+0x82>
 8001580:	e7dd      	b.n	800153e <__gedf2+0x7a>
 8001582:	4311      	orrs	r1, r2
 8001584:	d104      	bne.n	8001590 <__gedf2+0xcc>
 8001586:	9b01      	ldr	r3, [sp, #4]
 8001588:	4563      	cmp	r3, ip
 800158a:	d1d8      	bne.n	800153e <__gedf2+0x7a>
 800158c:	2000      	movs	r0, #0
 800158e:	e7da      	b.n	8001546 <__gedf2+0x82>
 8001590:	2002      	movs	r0, #2
 8001592:	4240      	negs	r0, r0
 8001594:	e7d7      	b.n	8001546 <__gedf2+0x82>
 8001596:	9b01      	ldr	r3, [sp, #4]
 8001598:	4563      	cmp	r3, ip
 800159a:	d0e6      	beq.n	800156a <__gedf2+0xa6>
 800159c:	e7cf      	b.n	800153e <__gedf2+0x7a>
 800159e:	46c0      	nop			@ (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4657      	mov	r7, sl
 80015a8:	464e      	mov	r6, r9
 80015aa:	4645      	mov	r5, r8
 80015ac:	46de      	mov	lr, fp
 80015ae:	b5e0      	push	{r5, r6, r7, lr}
 80015b0:	000d      	movs	r5, r1
 80015b2:	030e      	lsls	r6, r1, #12
 80015b4:	0049      	lsls	r1, r1, #1
 80015b6:	0d49      	lsrs	r1, r1, #21
 80015b8:	468a      	mov	sl, r1
 80015ba:	0fdf      	lsrs	r7, r3, #31
 80015bc:	0fe9      	lsrs	r1, r5, #31
 80015be:	46bc      	mov	ip, r7
 80015c0:	b083      	sub	sp, #12
 80015c2:	4f2e      	ldr	r7, [pc, #184]	@ (800167c <__ledf2+0xd8>)
 80015c4:	0004      	movs	r4, r0
 80015c6:	4680      	mov	r8, r0
 80015c8:	9101      	str	r1, [sp, #4]
 80015ca:	0058      	lsls	r0, r3, #1
 80015cc:	0319      	lsls	r1, r3, #12
 80015ce:	4691      	mov	r9, r2
 80015d0:	0b36      	lsrs	r6, r6, #12
 80015d2:	0b09      	lsrs	r1, r1, #12
 80015d4:	0d40      	lsrs	r0, r0, #21
 80015d6:	45ba      	cmp	sl, r7
 80015d8:	d01e      	beq.n	8001618 <__ledf2+0x74>
 80015da:	42b8      	cmp	r0, r7
 80015dc:	d00d      	beq.n	80015fa <__ledf2+0x56>
 80015de:	4657      	mov	r7, sl
 80015e0:	2f00      	cmp	r7, #0
 80015e2:	d127      	bne.n	8001634 <__ledf2+0x90>
 80015e4:	4334      	orrs	r4, r6
 80015e6:	2800      	cmp	r0, #0
 80015e8:	d133      	bne.n	8001652 <__ledf2+0xae>
 80015ea:	430a      	orrs	r2, r1
 80015ec:	d034      	beq.n	8001658 <__ledf2+0xb4>
 80015ee:	2c00      	cmp	r4, #0
 80015f0:	d140      	bne.n	8001674 <__ledf2+0xd0>
 80015f2:	4663      	mov	r3, ip
 80015f4:	0058      	lsls	r0, r3, #1
 80015f6:	3801      	subs	r0, #1
 80015f8:	e015      	b.n	8001626 <__ledf2+0x82>
 80015fa:	4311      	orrs	r1, r2
 80015fc:	d112      	bne.n	8001624 <__ledf2+0x80>
 80015fe:	4653      	mov	r3, sl
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <__ledf2+0x64>
 8001604:	4326      	orrs	r6, r4
 8001606:	d0f4      	beq.n	80015f2 <__ledf2+0x4e>
 8001608:	9b01      	ldr	r3, [sp, #4]
 800160a:	4563      	cmp	r3, ip
 800160c:	d01d      	beq.n	800164a <__ledf2+0xa6>
 800160e:	2001      	movs	r0, #1
 8001610:	9b01      	ldr	r3, [sp, #4]
 8001612:	425f      	negs	r7, r3
 8001614:	4338      	orrs	r0, r7
 8001616:	e006      	b.n	8001626 <__ledf2+0x82>
 8001618:	4326      	orrs	r6, r4
 800161a:	d103      	bne.n	8001624 <__ledf2+0x80>
 800161c:	4550      	cmp	r0, sl
 800161e:	d1f6      	bne.n	800160e <__ledf2+0x6a>
 8001620:	4311      	orrs	r1, r2
 8001622:	d01c      	beq.n	800165e <__ledf2+0xba>
 8001624:	2002      	movs	r0, #2
 8001626:	b003      	add	sp, #12
 8001628:	bcf0      	pop	{r4, r5, r6, r7}
 800162a:	46bb      	mov	fp, r7
 800162c:	46b2      	mov	sl, r6
 800162e:	46a9      	mov	r9, r5
 8001630:	46a0      	mov	r8, r4
 8001632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001634:	2800      	cmp	r0, #0
 8001636:	d0ea      	beq.n	800160e <__ledf2+0x6a>
 8001638:	9b01      	ldr	r3, [sp, #4]
 800163a:	4563      	cmp	r3, ip
 800163c:	d1e7      	bne.n	800160e <__ledf2+0x6a>
 800163e:	4582      	cmp	sl, r0
 8001640:	dce5      	bgt.n	800160e <__ledf2+0x6a>
 8001642:	db02      	blt.n	800164a <__ledf2+0xa6>
 8001644:	428e      	cmp	r6, r1
 8001646:	d8e2      	bhi.n	800160e <__ledf2+0x6a>
 8001648:	d00e      	beq.n	8001668 <__ledf2+0xc4>
 800164a:	9b01      	ldr	r3, [sp, #4]
 800164c:	0058      	lsls	r0, r3, #1
 800164e:	3801      	subs	r0, #1
 8001650:	e7e9      	b.n	8001626 <__ledf2+0x82>
 8001652:	2c00      	cmp	r4, #0
 8001654:	d0cd      	beq.n	80015f2 <__ledf2+0x4e>
 8001656:	e7d7      	b.n	8001608 <__ledf2+0x64>
 8001658:	2c00      	cmp	r4, #0
 800165a:	d0e4      	beq.n	8001626 <__ledf2+0x82>
 800165c:	e7d7      	b.n	800160e <__ledf2+0x6a>
 800165e:	9b01      	ldr	r3, [sp, #4]
 8001660:	2000      	movs	r0, #0
 8001662:	4563      	cmp	r3, ip
 8001664:	d0df      	beq.n	8001626 <__ledf2+0x82>
 8001666:	e7d2      	b.n	800160e <__ledf2+0x6a>
 8001668:	45c8      	cmp	r8, r9
 800166a:	d8d0      	bhi.n	800160e <__ledf2+0x6a>
 800166c:	2000      	movs	r0, #0
 800166e:	45c8      	cmp	r8, r9
 8001670:	d2d9      	bcs.n	8001626 <__ledf2+0x82>
 8001672:	e7ea      	b.n	800164a <__ledf2+0xa6>
 8001674:	9b01      	ldr	r3, [sp, #4]
 8001676:	4563      	cmp	r3, ip
 8001678:	d0e4      	beq.n	8001644 <__ledf2+0xa0>
 800167a:	e7c8      	b.n	800160e <__ledf2+0x6a>
 800167c:	000007ff 	.word	0x000007ff

08001680 <__aeabi_dmul>:
 8001680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001682:	4657      	mov	r7, sl
 8001684:	464e      	mov	r6, r9
 8001686:	46de      	mov	lr, fp
 8001688:	4645      	mov	r5, r8
 800168a:	b5e0      	push	{r5, r6, r7, lr}
 800168c:	001f      	movs	r7, r3
 800168e:	030b      	lsls	r3, r1, #12
 8001690:	0b1b      	lsrs	r3, r3, #12
 8001692:	0016      	movs	r6, r2
 8001694:	469a      	mov	sl, r3
 8001696:	0fca      	lsrs	r2, r1, #31
 8001698:	004b      	lsls	r3, r1, #1
 800169a:	0004      	movs	r4, r0
 800169c:	4691      	mov	r9, r2
 800169e:	b085      	sub	sp, #20
 80016a0:	0d5b      	lsrs	r3, r3, #21
 80016a2:	d100      	bne.n	80016a6 <__aeabi_dmul+0x26>
 80016a4:	e1cf      	b.n	8001a46 <__aeabi_dmul+0x3c6>
 80016a6:	4acd      	ldr	r2, [pc, #820]	@ (80019dc <__aeabi_dmul+0x35c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d055      	beq.n	8001758 <__aeabi_dmul+0xd8>
 80016ac:	4651      	mov	r1, sl
 80016ae:	0f42      	lsrs	r2, r0, #29
 80016b0:	00c9      	lsls	r1, r1, #3
 80016b2:	430a      	orrs	r2, r1
 80016b4:	2180      	movs	r1, #128	@ 0x80
 80016b6:	0409      	lsls	r1, r1, #16
 80016b8:	4311      	orrs	r1, r2
 80016ba:	00c2      	lsls	r2, r0, #3
 80016bc:	4690      	mov	r8, r2
 80016be:	4ac8      	ldr	r2, [pc, #800]	@ (80019e0 <__aeabi_dmul+0x360>)
 80016c0:	468a      	mov	sl, r1
 80016c2:	4693      	mov	fp, r2
 80016c4:	449b      	add	fp, r3
 80016c6:	2300      	movs	r3, #0
 80016c8:	2500      	movs	r5, #0
 80016ca:	9302      	str	r3, [sp, #8]
 80016cc:	033c      	lsls	r4, r7, #12
 80016ce:	007b      	lsls	r3, r7, #1
 80016d0:	0ffa      	lsrs	r2, r7, #31
 80016d2:	9601      	str	r6, [sp, #4]
 80016d4:	0b24      	lsrs	r4, r4, #12
 80016d6:	0d5b      	lsrs	r3, r3, #21
 80016d8:	9200      	str	r2, [sp, #0]
 80016da:	d100      	bne.n	80016de <__aeabi_dmul+0x5e>
 80016dc:	e188      	b.n	80019f0 <__aeabi_dmul+0x370>
 80016de:	4abf      	ldr	r2, [pc, #764]	@ (80019dc <__aeabi_dmul+0x35c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d100      	bne.n	80016e6 <__aeabi_dmul+0x66>
 80016e4:	e092      	b.n	800180c <__aeabi_dmul+0x18c>
 80016e6:	4abe      	ldr	r2, [pc, #760]	@ (80019e0 <__aeabi_dmul+0x360>)
 80016e8:	4694      	mov	ip, r2
 80016ea:	4463      	add	r3, ip
 80016ec:	449b      	add	fp, r3
 80016ee:	2d0a      	cmp	r5, #10
 80016f0:	dc42      	bgt.n	8001778 <__aeabi_dmul+0xf8>
 80016f2:	00e4      	lsls	r4, r4, #3
 80016f4:	0f73      	lsrs	r3, r6, #29
 80016f6:	4323      	orrs	r3, r4
 80016f8:	2480      	movs	r4, #128	@ 0x80
 80016fa:	4649      	mov	r1, r9
 80016fc:	0424      	lsls	r4, r4, #16
 80016fe:	431c      	orrs	r4, r3
 8001700:	00f3      	lsls	r3, r6, #3
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	9b00      	ldr	r3, [sp, #0]
 8001706:	2000      	movs	r0, #0
 8001708:	4059      	eors	r1, r3
 800170a:	b2cb      	uxtb	r3, r1
 800170c:	9303      	str	r3, [sp, #12]
 800170e:	2d02      	cmp	r5, #2
 8001710:	dc00      	bgt.n	8001714 <__aeabi_dmul+0x94>
 8001712:	e094      	b.n	800183e <__aeabi_dmul+0x1be>
 8001714:	2301      	movs	r3, #1
 8001716:	40ab      	lsls	r3, r5
 8001718:	001d      	movs	r5, r3
 800171a:	23a6      	movs	r3, #166	@ 0xa6
 800171c:	002a      	movs	r2, r5
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	401a      	ands	r2, r3
 8001722:	421d      	tst	r5, r3
 8001724:	d000      	beq.n	8001728 <__aeabi_dmul+0xa8>
 8001726:	e229      	b.n	8001b7c <__aeabi_dmul+0x4fc>
 8001728:	2390      	movs	r3, #144	@ 0x90
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	421d      	tst	r5, r3
 800172e:	d100      	bne.n	8001732 <__aeabi_dmul+0xb2>
 8001730:	e24d      	b.n	8001bce <__aeabi_dmul+0x54e>
 8001732:	2300      	movs	r3, #0
 8001734:	2480      	movs	r4, #128	@ 0x80
 8001736:	4699      	mov	r9, r3
 8001738:	0324      	lsls	r4, r4, #12
 800173a:	4ba8      	ldr	r3, [pc, #672]	@ (80019dc <__aeabi_dmul+0x35c>)
 800173c:	0010      	movs	r0, r2
 800173e:	464a      	mov	r2, r9
 8001740:	051b      	lsls	r3, r3, #20
 8001742:	4323      	orrs	r3, r4
 8001744:	07d2      	lsls	r2, r2, #31
 8001746:	4313      	orrs	r3, r2
 8001748:	0019      	movs	r1, r3
 800174a:	b005      	add	sp, #20
 800174c:	bcf0      	pop	{r4, r5, r6, r7}
 800174e:	46bb      	mov	fp, r7
 8001750:	46b2      	mov	sl, r6
 8001752:	46a9      	mov	r9, r5
 8001754:	46a0      	mov	r8, r4
 8001756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001758:	4652      	mov	r2, sl
 800175a:	4302      	orrs	r2, r0
 800175c:	4690      	mov	r8, r2
 800175e:	d000      	beq.n	8001762 <__aeabi_dmul+0xe2>
 8001760:	e1ac      	b.n	8001abc <__aeabi_dmul+0x43c>
 8001762:	469b      	mov	fp, r3
 8001764:	2302      	movs	r3, #2
 8001766:	4692      	mov	sl, r2
 8001768:	2508      	movs	r5, #8
 800176a:	9302      	str	r3, [sp, #8]
 800176c:	e7ae      	b.n	80016cc <__aeabi_dmul+0x4c>
 800176e:	9b00      	ldr	r3, [sp, #0]
 8001770:	46a2      	mov	sl, r4
 8001772:	4699      	mov	r9, r3
 8001774:	9b01      	ldr	r3, [sp, #4]
 8001776:	4698      	mov	r8, r3
 8001778:	9b02      	ldr	r3, [sp, #8]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d100      	bne.n	8001780 <__aeabi_dmul+0x100>
 800177e:	e1ca      	b.n	8001b16 <__aeabi_dmul+0x496>
 8001780:	2b03      	cmp	r3, #3
 8001782:	d100      	bne.n	8001786 <__aeabi_dmul+0x106>
 8001784:	e192      	b.n	8001aac <__aeabi_dmul+0x42c>
 8001786:	2b01      	cmp	r3, #1
 8001788:	d110      	bne.n	80017ac <__aeabi_dmul+0x12c>
 800178a:	2300      	movs	r3, #0
 800178c:	2400      	movs	r4, #0
 800178e:	2200      	movs	r2, #0
 8001790:	e7d4      	b.n	800173c <__aeabi_dmul+0xbc>
 8001792:	2201      	movs	r2, #1
 8001794:	087b      	lsrs	r3, r7, #1
 8001796:	403a      	ands	r2, r7
 8001798:	4313      	orrs	r3, r2
 800179a:	4652      	mov	r2, sl
 800179c:	07d2      	lsls	r2, r2, #31
 800179e:	4313      	orrs	r3, r2
 80017a0:	4698      	mov	r8, r3
 80017a2:	4653      	mov	r3, sl
 80017a4:	085b      	lsrs	r3, r3, #1
 80017a6:	469a      	mov	sl, r3
 80017a8:	9b03      	ldr	r3, [sp, #12]
 80017aa:	4699      	mov	r9, r3
 80017ac:	465b      	mov	r3, fp
 80017ae:	1c58      	adds	r0, r3, #1
 80017b0:	2380      	movs	r3, #128	@ 0x80
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	445b      	add	r3, fp
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	dc00      	bgt.n	80017bc <__aeabi_dmul+0x13c>
 80017ba:	e1b1      	b.n	8001b20 <__aeabi_dmul+0x4a0>
 80017bc:	4642      	mov	r2, r8
 80017be:	0752      	lsls	r2, r2, #29
 80017c0:	d00b      	beq.n	80017da <__aeabi_dmul+0x15a>
 80017c2:	220f      	movs	r2, #15
 80017c4:	4641      	mov	r1, r8
 80017c6:	400a      	ands	r2, r1
 80017c8:	2a04      	cmp	r2, #4
 80017ca:	d006      	beq.n	80017da <__aeabi_dmul+0x15a>
 80017cc:	4642      	mov	r2, r8
 80017ce:	1d11      	adds	r1, r2, #4
 80017d0:	4541      	cmp	r1, r8
 80017d2:	4192      	sbcs	r2, r2
 80017d4:	4688      	mov	r8, r1
 80017d6:	4252      	negs	r2, r2
 80017d8:	4492      	add	sl, r2
 80017da:	4652      	mov	r2, sl
 80017dc:	01d2      	lsls	r2, r2, #7
 80017de:	d506      	bpl.n	80017ee <__aeabi_dmul+0x16e>
 80017e0:	4652      	mov	r2, sl
 80017e2:	4b80      	ldr	r3, [pc, #512]	@ (80019e4 <__aeabi_dmul+0x364>)
 80017e4:	401a      	ands	r2, r3
 80017e6:	2380      	movs	r3, #128	@ 0x80
 80017e8:	4692      	mov	sl, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	18c3      	adds	r3, r0, r3
 80017ee:	4a7e      	ldr	r2, [pc, #504]	@ (80019e8 <__aeabi_dmul+0x368>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	dd00      	ble.n	80017f6 <__aeabi_dmul+0x176>
 80017f4:	e18f      	b.n	8001b16 <__aeabi_dmul+0x496>
 80017f6:	4642      	mov	r2, r8
 80017f8:	08d1      	lsrs	r1, r2, #3
 80017fa:	4652      	mov	r2, sl
 80017fc:	0752      	lsls	r2, r2, #29
 80017fe:	430a      	orrs	r2, r1
 8001800:	4651      	mov	r1, sl
 8001802:	055b      	lsls	r3, r3, #21
 8001804:	024c      	lsls	r4, r1, #9
 8001806:	0b24      	lsrs	r4, r4, #12
 8001808:	0d5b      	lsrs	r3, r3, #21
 800180a:	e797      	b.n	800173c <__aeabi_dmul+0xbc>
 800180c:	4b73      	ldr	r3, [pc, #460]	@ (80019dc <__aeabi_dmul+0x35c>)
 800180e:	4326      	orrs	r6, r4
 8001810:	469c      	mov	ip, r3
 8001812:	44e3      	add	fp, ip
 8001814:	2e00      	cmp	r6, #0
 8001816:	d100      	bne.n	800181a <__aeabi_dmul+0x19a>
 8001818:	e16f      	b.n	8001afa <__aeabi_dmul+0x47a>
 800181a:	2303      	movs	r3, #3
 800181c:	4649      	mov	r1, r9
 800181e:	431d      	orrs	r5, r3
 8001820:	9b00      	ldr	r3, [sp, #0]
 8001822:	4059      	eors	r1, r3
 8001824:	b2cb      	uxtb	r3, r1
 8001826:	9303      	str	r3, [sp, #12]
 8001828:	2d0a      	cmp	r5, #10
 800182a:	dd00      	ble.n	800182e <__aeabi_dmul+0x1ae>
 800182c:	e133      	b.n	8001a96 <__aeabi_dmul+0x416>
 800182e:	2301      	movs	r3, #1
 8001830:	40ab      	lsls	r3, r5
 8001832:	001d      	movs	r5, r3
 8001834:	2303      	movs	r3, #3
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	2288      	movs	r2, #136	@ 0x88
 800183a:	422a      	tst	r2, r5
 800183c:	d197      	bne.n	800176e <__aeabi_dmul+0xee>
 800183e:	4642      	mov	r2, r8
 8001840:	4643      	mov	r3, r8
 8001842:	0412      	lsls	r2, r2, #16
 8001844:	0c12      	lsrs	r2, r2, #16
 8001846:	0016      	movs	r6, r2
 8001848:	9801      	ldr	r0, [sp, #4]
 800184a:	0c1d      	lsrs	r5, r3, #16
 800184c:	0c03      	lsrs	r3, r0, #16
 800184e:	0400      	lsls	r0, r0, #16
 8001850:	0c00      	lsrs	r0, r0, #16
 8001852:	4346      	muls	r6, r0
 8001854:	46b4      	mov	ip, r6
 8001856:	001e      	movs	r6, r3
 8001858:	436e      	muls	r6, r5
 800185a:	9600      	str	r6, [sp, #0]
 800185c:	0016      	movs	r6, r2
 800185e:	0007      	movs	r7, r0
 8001860:	435e      	muls	r6, r3
 8001862:	4661      	mov	r1, ip
 8001864:	46b0      	mov	r8, r6
 8001866:	436f      	muls	r7, r5
 8001868:	0c0e      	lsrs	r6, r1, #16
 800186a:	44b8      	add	r8, r7
 800186c:	4446      	add	r6, r8
 800186e:	42b7      	cmp	r7, r6
 8001870:	d905      	bls.n	800187e <__aeabi_dmul+0x1fe>
 8001872:	2180      	movs	r1, #128	@ 0x80
 8001874:	0249      	lsls	r1, r1, #9
 8001876:	4688      	mov	r8, r1
 8001878:	9f00      	ldr	r7, [sp, #0]
 800187a:	4447      	add	r7, r8
 800187c:	9700      	str	r7, [sp, #0]
 800187e:	4661      	mov	r1, ip
 8001880:	0409      	lsls	r1, r1, #16
 8001882:	0c09      	lsrs	r1, r1, #16
 8001884:	0c37      	lsrs	r7, r6, #16
 8001886:	0436      	lsls	r6, r6, #16
 8001888:	468c      	mov	ip, r1
 800188a:	0031      	movs	r1, r6
 800188c:	4461      	add	r1, ip
 800188e:	9101      	str	r1, [sp, #4]
 8001890:	0011      	movs	r1, r2
 8001892:	0c26      	lsrs	r6, r4, #16
 8001894:	0424      	lsls	r4, r4, #16
 8001896:	0c24      	lsrs	r4, r4, #16
 8001898:	4361      	muls	r1, r4
 800189a:	468c      	mov	ip, r1
 800189c:	0021      	movs	r1, r4
 800189e:	4369      	muls	r1, r5
 80018a0:	4689      	mov	r9, r1
 80018a2:	4661      	mov	r1, ip
 80018a4:	0c09      	lsrs	r1, r1, #16
 80018a6:	4688      	mov	r8, r1
 80018a8:	4372      	muls	r2, r6
 80018aa:	444a      	add	r2, r9
 80018ac:	4442      	add	r2, r8
 80018ae:	4375      	muls	r5, r6
 80018b0:	4591      	cmp	r9, r2
 80018b2:	d903      	bls.n	80018bc <__aeabi_dmul+0x23c>
 80018b4:	2180      	movs	r1, #128	@ 0x80
 80018b6:	0249      	lsls	r1, r1, #9
 80018b8:	4688      	mov	r8, r1
 80018ba:	4445      	add	r5, r8
 80018bc:	0c11      	lsrs	r1, r2, #16
 80018be:	4688      	mov	r8, r1
 80018c0:	4661      	mov	r1, ip
 80018c2:	0409      	lsls	r1, r1, #16
 80018c4:	0c09      	lsrs	r1, r1, #16
 80018c6:	468c      	mov	ip, r1
 80018c8:	0412      	lsls	r2, r2, #16
 80018ca:	4462      	add	r2, ip
 80018cc:	18b9      	adds	r1, r7, r2
 80018ce:	9102      	str	r1, [sp, #8]
 80018d0:	4651      	mov	r1, sl
 80018d2:	0c09      	lsrs	r1, r1, #16
 80018d4:	468c      	mov	ip, r1
 80018d6:	4651      	mov	r1, sl
 80018d8:	040f      	lsls	r7, r1, #16
 80018da:	0c3f      	lsrs	r7, r7, #16
 80018dc:	0039      	movs	r1, r7
 80018de:	4341      	muls	r1, r0
 80018e0:	4445      	add	r5, r8
 80018e2:	4688      	mov	r8, r1
 80018e4:	4661      	mov	r1, ip
 80018e6:	4341      	muls	r1, r0
 80018e8:	468a      	mov	sl, r1
 80018ea:	4641      	mov	r1, r8
 80018ec:	4660      	mov	r0, ip
 80018ee:	0c09      	lsrs	r1, r1, #16
 80018f0:	4689      	mov	r9, r1
 80018f2:	4358      	muls	r0, r3
 80018f4:	437b      	muls	r3, r7
 80018f6:	4453      	add	r3, sl
 80018f8:	444b      	add	r3, r9
 80018fa:	459a      	cmp	sl, r3
 80018fc:	d903      	bls.n	8001906 <__aeabi_dmul+0x286>
 80018fe:	2180      	movs	r1, #128	@ 0x80
 8001900:	0249      	lsls	r1, r1, #9
 8001902:	4689      	mov	r9, r1
 8001904:	4448      	add	r0, r9
 8001906:	0c19      	lsrs	r1, r3, #16
 8001908:	4689      	mov	r9, r1
 800190a:	4641      	mov	r1, r8
 800190c:	0409      	lsls	r1, r1, #16
 800190e:	0c09      	lsrs	r1, r1, #16
 8001910:	4688      	mov	r8, r1
 8001912:	0039      	movs	r1, r7
 8001914:	4361      	muls	r1, r4
 8001916:	041b      	lsls	r3, r3, #16
 8001918:	4443      	add	r3, r8
 800191a:	4688      	mov	r8, r1
 800191c:	4661      	mov	r1, ip
 800191e:	434c      	muls	r4, r1
 8001920:	4371      	muls	r1, r6
 8001922:	468c      	mov	ip, r1
 8001924:	4641      	mov	r1, r8
 8001926:	4377      	muls	r7, r6
 8001928:	0c0e      	lsrs	r6, r1, #16
 800192a:	193f      	adds	r7, r7, r4
 800192c:	19f6      	adds	r6, r6, r7
 800192e:	4448      	add	r0, r9
 8001930:	42b4      	cmp	r4, r6
 8001932:	d903      	bls.n	800193c <__aeabi_dmul+0x2bc>
 8001934:	2180      	movs	r1, #128	@ 0x80
 8001936:	0249      	lsls	r1, r1, #9
 8001938:	4689      	mov	r9, r1
 800193a:	44cc      	add	ip, r9
 800193c:	9902      	ldr	r1, [sp, #8]
 800193e:	9f00      	ldr	r7, [sp, #0]
 8001940:	4689      	mov	r9, r1
 8001942:	0431      	lsls	r1, r6, #16
 8001944:	444f      	add	r7, r9
 8001946:	4689      	mov	r9, r1
 8001948:	4641      	mov	r1, r8
 800194a:	4297      	cmp	r7, r2
 800194c:	4192      	sbcs	r2, r2
 800194e:	040c      	lsls	r4, r1, #16
 8001950:	0c24      	lsrs	r4, r4, #16
 8001952:	444c      	add	r4, r9
 8001954:	18ff      	adds	r7, r7, r3
 8001956:	4252      	negs	r2, r2
 8001958:	1964      	adds	r4, r4, r5
 800195a:	18a1      	adds	r1, r4, r2
 800195c:	429f      	cmp	r7, r3
 800195e:	419b      	sbcs	r3, r3
 8001960:	4688      	mov	r8, r1
 8001962:	4682      	mov	sl, r0
 8001964:	425b      	negs	r3, r3
 8001966:	4699      	mov	r9, r3
 8001968:	4590      	cmp	r8, r2
 800196a:	4192      	sbcs	r2, r2
 800196c:	42ac      	cmp	r4, r5
 800196e:	41a4      	sbcs	r4, r4
 8001970:	44c2      	add	sl, r8
 8001972:	44d1      	add	r9, sl
 8001974:	4252      	negs	r2, r2
 8001976:	4264      	negs	r4, r4
 8001978:	4314      	orrs	r4, r2
 800197a:	4599      	cmp	r9, r3
 800197c:	419b      	sbcs	r3, r3
 800197e:	4582      	cmp	sl, r0
 8001980:	4192      	sbcs	r2, r2
 8001982:	425b      	negs	r3, r3
 8001984:	4252      	negs	r2, r2
 8001986:	4313      	orrs	r3, r2
 8001988:	464a      	mov	r2, r9
 800198a:	0c36      	lsrs	r6, r6, #16
 800198c:	19a4      	adds	r4, r4, r6
 800198e:	18e3      	adds	r3, r4, r3
 8001990:	4463      	add	r3, ip
 8001992:	025b      	lsls	r3, r3, #9
 8001994:	0dd2      	lsrs	r2, r2, #23
 8001996:	431a      	orrs	r2, r3
 8001998:	9901      	ldr	r1, [sp, #4]
 800199a:	4692      	mov	sl, r2
 800199c:	027a      	lsls	r2, r7, #9
 800199e:	430a      	orrs	r2, r1
 80019a0:	1e50      	subs	r0, r2, #1
 80019a2:	4182      	sbcs	r2, r0
 80019a4:	0dff      	lsrs	r7, r7, #23
 80019a6:	4317      	orrs	r7, r2
 80019a8:	464a      	mov	r2, r9
 80019aa:	0252      	lsls	r2, r2, #9
 80019ac:	4317      	orrs	r7, r2
 80019ae:	46b8      	mov	r8, r7
 80019b0:	01db      	lsls	r3, r3, #7
 80019b2:	d500      	bpl.n	80019b6 <__aeabi_dmul+0x336>
 80019b4:	e6ed      	b.n	8001792 <__aeabi_dmul+0x112>
 80019b6:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <__aeabi_dmul+0x36c>)
 80019b8:	9a03      	ldr	r2, [sp, #12]
 80019ba:	445b      	add	r3, fp
 80019bc:	4691      	mov	r9, r2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	dc00      	bgt.n	80019c4 <__aeabi_dmul+0x344>
 80019c2:	e0ac      	b.n	8001b1e <__aeabi_dmul+0x49e>
 80019c4:	003a      	movs	r2, r7
 80019c6:	0752      	lsls	r2, r2, #29
 80019c8:	d100      	bne.n	80019cc <__aeabi_dmul+0x34c>
 80019ca:	e710      	b.n	80017ee <__aeabi_dmul+0x16e>
 80019cc:	220f      	movs	r2, #15
 80019ce:	4658      	mov	r0, fp
 80019d0:	403a      	ands	r2, r7
 80019d2:	2a04      	cmp	r2, #4
 80019d4:	d000      	beq.n	80019d8 <__aeabi_dmul+0x358>
 80019d6:	e6f9      	b.n	80017cc <__aeabi_dmul+0x14c>
 80019d8:	e709      	b.n	80017ee <__aeabi_dmul+0x16e>
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	000007ff 	.word	0x000007ff
 80019e0:	fffffc01 	.word	0xfffffc01
 80019e4:	feffffff 	.word	0xfeffffff
 80019e8:	000007fe 	.word	0x000007fe
 80019ec:	000003ff 	.word	0x000003ff
 80019f0:	0022      	movs	r2, r4
 80019f2:	4332      	orrs	r2, r6
 80019f4:	d06f      	beq.n	8001ad6 <__aeabi_dmul+0x456>
 80019f6:	2c00      	cmp	r4, #0
 80019f8:	d100      	bne.n	80019fc <__aeabi_dmul+0x37c>
 80019fa:	e0c2      	b.n	8001b82 <__aeabi_dmul+0x502>
 80019fc:	0020      	movs	r0, r4
 80019fe:	f000 fea9 	bl	8002754 <__clzsi2>
 8001a02:	0002      	movs	r2, r0
 8001a04:	0003      	movs	r3, r0
 8001a06:	3a0b      	subs	r2, #11
 8001a08:	201d      	movs	r0, #29
 8001a0a:	1a82      	subs	r2, r0, r2
 8001a0c:	0030      	movs	r0, r6
 8001a0e:	0019      	movs	r1, r3
 8001a10:	40d0      	lsrs	r0, r2
 8001a12:	3908      	subs	r1, #8
 8001a14:	408c      	lsls	r4, r1
 8001a16:	0002      	movs	r2, r0
 8001a18:	4322      	orrs	r2, r4
 8001a1a:	0034      	movs	r4, r6
 8001a1c:	408c      	lsls	r4, r1
 8001a1e:	4659      	mov	r1, fp
 8001a20:	1acb      	subs	r3, r1, r3
 8001a22:	4986      	ldr	r1, [pc, #536]	@ (8001c3c <__aeabi_dmul+0x5bc>)
 8001a24:	468b      	mov	fp, r1
 8001a26:	449b      	add	fp, r3
 8001a28:	2d0a      	cmp	r5, #10
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dmul+0x3ae>
 8001a2c:	e6a4      	b.n	8001778 <__aeabi_dmul+0xf8>
 8001a2e:	4649      	mov	r1, r9
 8001a30:	9b00      	ldr	r3, [sp, #0]
 8001a32:	9401      	str	r4, [sp, #4]
 8001a34:	4059      	eors	r1, r3
 8001a36:	b2cb      	uxtb	r3, r1
 8001a38:	0014      	movs	r4, r2
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	9303      	str	r3, [sp, #12]
 8001a3e:	2d02      	cmp	r5, #2
 8001a40:	dd00      	ble.n	8001a44 <__aeabi_dmul+0x3c4>
 8001a42:	e667      	b.n	8001714 <__aeabi_dmul+0x94>
 8001a44:	e6fb      	b.n	800183e <__aeabi_dmul+0x1be>
 8001a46:	4653      	mov	r3, sl
 8001a48:	4303      	orrs	r3, r0
 8001a4a:	4698      	mov	r8, r3
 8001a4c:	d03c      	beq.n	8001ac8 <__aeabi_dmul+0x448>
 8001a4e:	4653      	mov	r3, sl
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d100      	bne.n	8001a56 <__aeabi_dmul+0x3d6>
 8001a54:	e0a3      	b.n	8001b9e <__aeabi_dmul+0x51e>
 8001a56:	4650      	mov	r0, sl
 8001a58:	f000 fe7c 	bl	8002754 <__clzsi2>
 8001a5c:	230b      	movs	r3, #11
 8001a5e:	425b      	negs	r3, r3
 8001a60:	469c      	mov	ip, r3
 8001a62:	0002      	movs	r2, r0
 8001a64:	4484      	add	ip, r0
 8001a66:	0011      	movs	r1, r2
 8001a68:	4650      	mov	r0, sl
 8001a6a:	3908      	subs	r1, #8
 8001a6c:	4088      	lsls	r0, r1
 8001a6e:	231d      	movs	r3, #29
 8001a70:	4680      	mov	r8, r0
 8001a72:	4660      	mov	r0, ip
 8001a74:	1a1b      	subs	r3, r3, r0
 8001a76:	0020      	movs	r0, r4
 8001a78:	40d8      	lsrs	r0, r3
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	4640      	mov	r0, r8
 8001a7e:	4303      	orrs	r3, r0
 8001a80:	469a      	mov	sl, r3
 8001a82:	0023      	movs	r3, r4
 8001a84:	408b      	lsls	r3, r1
 8001a86:	4698      	mov	r8, r3
 8001a88:	4b6c      	ldr	r3, [pc, #432]	@ (8001c3c <__aeabi_dmul+0x5bc>)
 8001a8a:	2500      	movs	r5, #0
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	469b      	mov	fp, r3
 8001a90:	2300      	movs	r3, #0
 8001a92:	9302      	str	r3, [sp, #8]
 8001a94:	e61a      	b.n	80016cc <__aeabi_dmul+0x4c>
 8001a96:	2d0f      	cmp	r5, #15
 8001a98:	d000      	beq.n	8001a9c <__aeabi_dmul+0x41c>
 8001a9a:	e0c9      	b.n	8001c30 <__aeabi_dmul+0x5b0>
 8001a9c:	2380      	movs	r3, #128	@ 0x80
 8001a9e:	4652      	mov	r2, sl
 8001aa0:	031b      	lsls	r3, r3, #12
 8001aa2:	421a      	tst	r2, r3
 8001aa4:	d002      	beq.n	8001aac <__aeabi_dmul+0x42c>
 8001aa6:	421c      	tst	r4, r3
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dmul+0x42c>
 8001aaa:	e092      	b.n	8001bd2 <__aeabi_dmul+0x552>
 8001aac:	2480      	movs	r4, #128	@ 0x80
 8001aae:	4653      	mov	r3, sl
 8001ab0:	0324      	lsls	r4, r4, #12
 8001ab2:	431c      	orrs	r4, r3
 8001ab4:	0324      	lsls	r4, r4, #12
 8001ab6:	4642      	mov	r2, r8
 8001ab8:	0b24      	lsrs	r4, r4, #12
 8001aba:	e63e      	b.n	800173a <__aeabi_dmul+0xba>
 8001abc:	469b      	mov	fp, r3
 8001abe:	2303      	movs	r3, #3
 8001ac0:	4680      	mov	r8, r0
 8001ac2:	250c      	movs	r5, #12
 8001ac4:	9302      	str	r3, [sp, #8]
 8001ac6:	e601      	b.n	80016cc <__aeabi_dmul+0x4c>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	469a      	mov	sl, r3
 8001acc:	469b      	mov	fp, r3
 8001ace:	3301      	adds	r3, #1
 8001ad0:	2504      	movs	r5, #4
 8001ad2:	9302      	str	r3, [sp, #8]
 8001ad4:	e5fa      	b.n	80016cc <__aeabi_dmul+0x4c>
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	430d      	orrs	r5, r1
 8001ada:	2d0a      	cmp	r5, #10
 8001adc:	dd00      	ble.n	8001ae0 <__aeabi_dmul+0x460>
 8001ade:	e64b      	b.n	8001778 <__aeabi_dmul+0xf8>
 8001ae0:	4649      	mov	r1, r9
 8001ae2:	9800      	ldr	r0, [sp, #0]
 8001ae4:	4041      	eors	r1, r0
 8001ae6:	b2c9      	uxtb	r1, r1
 8001ae8:	9103      	str	r1, [sp, #12]
 8001aea:	2d02      	cmp	r5, #2
 8001aec:	dc00      	bgt.n	8001af0 <__aeabi_dmul+0x470>
 8001aee:	e096      	b.n	8001c1e <__aeabi_dmul+0x59e>
 8001af0:	2300      	movs	r3, #0
 8001af2:	2400      	movs	r4, #0
 8001af4:	2001      	movs	r0, #1
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	e60c      	b.n	8001714 <__aeabi_dmul+0x94>
 8001afa:	4649      	mov	r1, r9
 8001afc:	2302      	movs	r3, #2
 8001afe:	9a00      	ldr	r2, [sp, #0]
 8001b00:	432b      	orrs	r3, r5
 8001b02:	4051      	eors	r1, r2
 8001b04:	b2ca      	uxtb	r2, r1
 8001b06:	9203      	str	r2, [sp, #12]
 8001b08:	2b0a      	cmp	r3, #10
 8001b0a:	dd00      	ble.n	8001b0e <__aeabi_dmul+0x48e>
 8001b0c:	e634      	b.n	8001778 <__aeabi_dmul+0xf8>
 8001b0e:	2d00      	cmp	r5, #0
 8001b10:	d157      	bne.n	8001bc2 <__aeabi_dmul+0x542>
 8001b12:	9b03      	ldr	r3, [sp, #12]
 8001b14:	4699      	mov	r9, r3
 8001b16:	2400      	movs	r4, #0
 8001b18:	2200      	movs	r2, #0
 8001b1a:	4b49      	ldr	r3, [pc, #292]	@ (8001c40 <__aeabi_dmul+0x5c0>)
 8001b1c:	e60e      	b.n	800173c <__aeabi_dmul+0xbc>
 8001b1e:	4658      	mov	r0, fp
 8001b20:	2101      	movs	r1, #1
 8001b22:	1ac9      	subs	r1, r1, r3
 8001b24:	2938      	cmp	r1, #56	@ 0x38
 8001b26:	dd00      	ble.n	8001b2a <__aeabi_dmul+0x4aa>
 8001b28:	e62f      	b.n	800178a <__aeabi_dmul+0x10a>
 8001b2a:	291f      	cmp	r1, #31
 8001b2c:	dd56      	ble.n	8001bdc <__aeabi_dmul+0x55c>
 8001b2e:	221f      	movs	r2, #31
 8001b30:	4654      	mov	r4, sl
 8001b32:	4252      	negs	r2, r2
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	40dc      	lsrs	r4, r3
 8001b38:	2920      	cmp	r1, #32
 8001b3a:	d007      	beq.n	8001b4c <__aeabi_dmul+0x4cc>
 8001b3c:	4b41      	ldr	r3, [pc, #260]	@ (8001c44 <__aeabi_dmul+0x5c4>)
 8001b3e:	4642      	mov	r2, r8
 8001b40:	469c      	mov	ip, r3
 8001b42:	4653      	mov	r3, sl
 8001b44:	4460      	add	r0, ip
 8001b46:	4083      	lsls	r3, r0
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	4690      	mov	r8, r2
 8001b4c:	4642      	mov	r2, r8
 8001b4e:	2107      	movs	r1, #7
 8001b50:	1e53      	subs	r3, r2, #1
 8001b52:	419a      	sbcs	r2, r3
 8001b54:	000b      	movs	r3, r1
 8001b56:	4322      	orrs	r2, r4
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2400      	movs	r4, #0
 8001b5c:	4211      	tst	r1, r2
 8001b5e:	d009      	beq.n	8001b74 <__aeabi_dmul+0x4f4>
 8001b60:	230f      	movs	r3, #15
 8001b62:	4013      	ands	r3, r2
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d05d      	beq.n	8001c24 <__aeabi_dmul+0x5a4>
 8001b68:	1d11      	adds	r1, r2, #4
 8001b6a:	4291      	cmp	r1, r2
 8001b6c:	419b      	sbcs	r3, r3
 8001b6e:	000a      	movs	r2, r1
 8001b70:	425b      	negs	r3, r3
 8001b72:	075b      	lsls	r3, r3, #29
 8001b74:	08d2      	lsrs	r2, r2, #3
 8001b76:	431a      	orrs	r2, r3
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e5df      	b.n	800173c <__aeabi_dmul+0xbc>
 8001b7c:	9b03      	ldr	r3, [sp, #12]
 8001b7e:	4699      	mov	r9, r3
 8001b80:	e5fa      	b.n	8001778 <__aeabi_dmul+0xf8>
 8001b82:	9801      	ldr	r0, [sp, #4]
 8001b84:	f000 fde6 	bl	8002754 <__clzsi2>
 8001b88:	0002      	movs	r2, r0
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	3215      	adds	r2, #21
 8001b8e:	3320      	adds	r3, #32
 8001b90:	2a1c      	cmp	r2, #28
 8001b92:	dc00      	bgt.n	8001b96 <__aeabi_dmul+0x516>
 8001b94:	e738      	b.n	8001a08 <__aeabi_dmul+0x388>
 8001b96:	9a01      	ldr	r2, [sp, #4]
 8001b98:	3808      	subs	r0, #8
 8001b9a:	4082      	lsls	r2, r0
 8001b9c:	e73f      	b.n	8001a1e <__aeabi_dmul+0x39e>
 8001b9e:	f000 fdd9 	bl	8002754 <__clzsi2>
 8001ba2:	2315      	movs	r3, #21
 8001ba4:	469c      	mov	ip, r3
 8001ba6:	4484      	add	ip, r0
 8001ba8:	0002      	movs	r2, r0
 8001baa:	4663      	mov	r3, ip
 8001bac:	3220      	adds	r2, #32
 8001bae:	2b1c      	cmp	r3, #28
 8001bb0:	dc00      	bgt.n	8001bb4 <__aeabi_dmul+0x534>
 8001bb2:	e758      	b.n	8001a66 <__aeabi_dmul+0x3e6>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	4698      	mov	r8, r3
 8001bb8:	0023      	movs	r3, r4
 8001bba:	3808      	subs	r0, #8
 8001bbc:	4083      	lsls	r3, r0
 8001bbe:	469a      	mov	sl, r3
 8001bc0:	e762      	b.n	8001a88 <__aeabi_dmul+0x408>
 8001bc2:	001d      	movs	r5, r3
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	2400      	movs	r4, #0
 8001bc8:	2002      	movs	r0, #2
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	e5a2      	b.n	8001714 <__aeabi_dmul+0x94>
 8001bce:	9002      	str	r0, [sp, #8]
 8001bd0:	e632      	b.n	8001838 <__aeabi_dmul+0x1b8>
 8001bd2:	431c      	orrs	r4, r3
 8001bd4:	9b00      	ldr	r3, [sp, #0]
 8001bd6:	9a01      	ldr	r2, [sp, #4]
 8001bd8:	4699      	mov	r9, r3
 8001bda:	e5ae      	b.n	800173a <__aeabi_dmul+0xba>
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c48 <__aeabi_dmul+0x5c8>)
 8001bde:	4652      	mov	r2, sl
 8001be0:	18c3      	adds	r3, r0, r3
 8001be2:	4640      	mov	r0, r8
 8001be4:	409a      	lsls	r2, r3
 8001be6:	40c8      	lsrs	r0, r1
 8001be8:	4302      	orrs	r2, r0
 8001bea:	4640      	mov	r0, r8
 8001bec:	4098      	lsls	r0, r3
 8001bee:	0003      	movs	r3, r0
 8001bf0:	1e58      	subs	r0, r3, #1
 8001bf2:	4183      	sbcs	r3, r0
 8001bf4:	4654      	mov	r4, sl
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	40cc      	lsrs	r4, r1
 8001bfa:	0753      	lsls	r3, r2, #29
 8001bfc:	d009      	beq.n	8001c12 <__aeabi_dmul+0x592>
 8001bfe:	230f      	movs	r3, #15
 8001c00:	4013      	ands	r3, r2
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d005      	beq.n	8001c12 <__aeabi_dmul+0x592>
 8001c06:	1d13      	adds	r3, r2, #4
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	4192      	sbcs	r2, r2
 8001c0c:	4252      	negs	r2, r2
 8001c0e:	18a4      	adds	r4, r4, r2
 8001c10:	001a      	movs	r2, r3
 8001c12:	0223      	lsls	r3, r4, #8
 8001c14:	d508      	bpl.n	8001c28 <__aeabi_dmul+0x5a8>
 8001c16:	2301      	movs	r3, #1
 8001c18:	2400      	movs	r4, #0
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	e58e      	b.n	800173c <__aeabi_dmul+0xbc>
 8001c1e:	4689      	mov	r9, r1
 8001c20:	2400      	movs	r4, #0
 8001c22:	e58b      	b.n	800173c <__aeabi_dmul+0xbc>
 8001c24:	2300      	movs	r3, #0
 8001c26:	e7a5      	b.n	8001b74 <__aeabi_dmul+0x4f4>
 8001c28:	0763      	lsls	r3, r4, #29
 8001c2a:	0264      	lsls	r4, r4, #9
 8001c2c:	0b24      	lsrs	r4, r4, #12
 8001c2e:	e7a1      	b.n	8001b74 <__aeabi_dmul+0x4f4>
 8001c30:	9b00      	ldr	r3, [sp, #0]
 8001c32:	46a2      	mov	sl, r4
 8001c34:	4699      	mov	r9, r3
 8001c36:	9b01      	ldr	r3, [sp, #4]
 8001c38:	4698      	mov	r8, r3
 8001c3a:	e737      	b.n	8001aac <__aeabi_dmul+0x42c>
 8001c3c:	fffffc0d 	.word	0xfffffc0d
 8001c40:	000007ff 	.word	0x000007ff
 8001c44:	0000043e 	.word	0x0000043e
 8001c48:	0000041e 	.word	0x0000041e

08001c4c <__aeabi_dsub>:
 8001c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4e:	4657      	mov	r7, sl
 8001c50:	464e      	mov	r6, r9
 8001c52:	4645      	mov	r5, r8
 8001c54:	46de      	mov	lr, fp
 8001c56:	b5e0      	push	{r5, r6, r7, lr}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	9000      	str	r0, [sp, #0]
 8001c5c:	9101      	str	r1, [sp, #4]
 8001c5e:	030c      	lsls	r4, r1, #12
 8001c60:	004d      	lsls	r5, r1, #1
 8001c62:	0fce      	lsrs	r6, r1, #31
 8001c64:	0a61      	lsrs	r1, r4, #9
 8001c66:	9c00      	ldr	r4, [sp, #0]
 8001c68:	005f      	lsls	r7, r3, #1
 8001c6a:	0f64      	lsrs	r4, r4, #29
 8001c6c:	430c      	orrs	r4, r1
 8001c6e:	9900      	ldr	r1, [sp, #0]
 8001c70:	9200      	str	r2, [sp, #0]
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	00c8      	lsls	r0, r1, #3
 8001c76:	0319      	lsls	r1, r3, #12
 8001c78:	0d7b      	lsrs	r3, r7, #21
 8001c7a:	4699      	mov	r9, r3
 8001c7c:	9b01      	ldr	r3, [sp, #4]
 8001c7e:	4fcc      	ldr	r7, [pc, #816]	@ (8001fb0 <__aeabi_dsub+0x364>)
 8001c80:	0fdb      	lsrs	r3, r3, #31
 8001c82:	469c      	mov	ip, r3
 8001c84:	0a4b      	lsrs	r3, r1, #9
 8001c86:	9900      	ldr	r1, [sp, #0]
 8001c88:	4680      	mov	r8, r0
 8001c8a:	0f49      	lsrs	r1, r1, #29
 8001c8c:	4319      	orrs	r1, r3
 8001c8e:	9b00      	ldr	r3, [sp, #0]
 8001c90:	468b      	mov	fp, r1
 8001c92:	00da      	lsls	r2, r3, #3
 8001c94:	4692      	mov	sl, r2
 8001c96:	0d6d      	lsrs	r5, r5, #21
 8001c98:	45b9      	cmp	r9, r7
 8001c9a:	d100      	bne.n	8001c9e <__aeabi_dsub+0x52>
 8001c9c:	e0bf      	b.n	8001e1e <__aeabi_dsub+0x1d2>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	4661      	mov	r1, ip
 8001ca2:	4059      	eors	r1, r3
 8001ca4:	464b      	mov	r3, r9
 8001ca6:	468c      	mov	ip, r1
 8001ca8:	1aeb      	subs	r3, r5, r3
 8001caa:	428e      	cmp	r6, r1
 8001cac:	d075      	beq.n	8001d9a <__aeabi_dsub+0x14e>
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	dc00      	bgt.n	8001cb4 <__aeabi_dsub+0x68>
 8001cb2:	e2a3      	b.n	80021fc <__aeabi_dsub+0x5b0>
 8001cb4:	4649      	mov	r1, r9
 8001cb6:	2900      	cmp	r1, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0x70>
 8001cba:	e0ce      	b.n	8001e5a <__aeabi_dsub+0x20e>
 8001cbc:	42bd      	cmp	r5, r7
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_dsub+0x76>
 8001cc0:	e200      	b.n	80020c4 <__aeabi_dsub+0x478>
 8001cc2:	2701      	movs	r7, #1
 8001cc4:	2b38      	cmp	r3, #56	@ 0x38
 8001cc6:	dc19      	bgt.n	8001cfc <__aeabi_dsub+0xb0>
 8001cc8:	2780      	movs	r7, #128	@ 0x80
 8001cca:	4659      	mov	r1, fp
 8001ccc:	043f      	lsls	r7, r7, #16
 8001cce:	4339      	orrs	r1, r7
 8001cd0:	468b      	mov	fp, r1
 8001cd2:	2b1f      	cmp	r3, #31
 8001cd4:	dd00      	ble.n	8001cd8 <__aeabi_dsub+0x8c>
 8001cd6:	e1fa      	b.n	80020ce <__aeabi_dsub+0x482>
 8001cd8:	2720      	movs	r7, #32
 8001cda:	1af9      	subs	r1, r7, r3
 8001cdc:	468c      	mov	ip, r1
 8001cde:	4659      	mov	r1, fp
 8001ce0:	4667      	mov	r7, ip
 8001ce2:	40b9      	lsls	r1, r7
 8001ce4:	000f      	movs	r7, r1
 8001ce6:	0011      	movs	r1, r2
 8001ce8:	40d9      	lsrs	r1, r3
 8001cea:	430f      	orrs	r7, r1
 8001cec:	4661      	mov	r1, ip
 8001cee:	408a      	lsls	r2, r1
 8001cf0:	1e51      	subs	r1, r2, #1
 8001cf2:	418a      	sbcs	r2, r1
 8001cf4:	4659      	mov	r1, fp
 8001cf6:	40d9      	lsrs	r1, r3
 8001cf8:	4317      	orrs	r7, r2
 8001cfa:	1a64      	subs	r4, r4, r1
 8001cfc:	1bc7      	subs	r7, r0, r7
 8001cfe:	42b8      	cmp	r0, r7
 8001d00:	4180      	sbcs	r0, r0
 8001d02:	4240      	negs	r0, r0
 8001d04:	1a24      	subs	r4, r4, r0
 8001d06:	0223      	lsls	r3, r4, #8
 8001d08:	d400      	bmi.n	8001d0c <__aeabi_dsub+0xc0>
 8001d0a:	e140      	b.n	8001f8e <__aeabi_dsub+0x342>
 8001d0c:	0264      	lsls	r4, r4, #9
 8001d0e:	0a64      	lsrs	r4, r4, #9
 8001d10:	2c00      	cmp	r4, #0
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dsub+0xca>
 8001d14:	e154      	b.n	8001fc0 <__aeabi_dsub+0x374>
 8001d16:	0020      	movs	r0, r4
 8001d18:	f000 fd1c 	bl	8002754 <__clzsi2>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	3b08      	subs	r3, #8
 8001d20:	2120      	movs	r1, #32
 8001d22:	0038      	movs	r0, r7
 8001d24:	1aca      	subs	r2, r1, r3
 8001d26:	40d0      	lsrs	r0, r2
 8001d28:	409c      	lsls	r4, r3
 8001d2a:	0002      	movs	r2, r0
 8001d2c:	409f      	lsls	r7, r3
 8001d2e:	4322      	orrs	r2, r4
 8001d30:	429d      	cmp	r5, r3
 8001d32:	dd00      	ble.n	8001d36 <__aeabi_dsub+0xea>
 8001d34:	e1a6      	b.n	8002084 <__aeabi_dsub+0x438>
 8001d36:	1b58      	subs	r0, r3, r5
 8001d38:	3001      	adds	r0, #1
 8001d3a:	1a09      	subs	r1, r1, r0
 8001d3c:	003c      	movs	r4, r7
 8001d3e:	408f      	lsls	r7, r1
 8001d40:	40c4      	lsrs	r4, r0
 8001d42:	1e7b      	subs	r3, r7, #1
 8001d44:	419f      	sbcs	r7, r3
 8001d46:	0013      	movs	r3, r2
 8001d48:	408b      	lsls	r3, r1
 8001d4a:	4327      	orrs	r7, r4
 8001d4c:	431f      	orrs	r7, r3
 8001d4e:	40c2      	lsrs	r2, r0
 8001d50:	003b      	movs	r3, r7
 8001d52:	0014      	movs	r4, r2
 8001d54:	2500      	movs	r5, #0
 8001d56:	4313      	orrs	r3, r2
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0x110>
 8001d5a:	e1f7      	b.n	800214c <__aeabi_dsub+0x500>
 8001d5c:	077b      	lsls	r3, r7, #29
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_dsub+0x116>
 8001d60:	e377      	b.n	8002452 <__aeabi_dsub+0x806>
 8001d62:	230f      	movs	r3, #15
 8001d64:	0038      	movs	r0, r7
 8001d66:	403b      	ands	r3, r7
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d004      	beq.n	8001d76 <__aeabi_dsub+0x12a>
 8001d6c:	1d38      	adds	r0, r7, #4
 8001d6e:	42b8      	cmp	r0, r7
 8001d70:	41bf      	sbcs	r7, r7
 8001d72:	427f      	negs	r7, r7
 8001d74:	19e4      	adds	r4, r4, r7
 8001d76:	0223      	lsls	r3, r4, #8
 8001d78:	d400      	bmi.n	8001d7c <__aeabi_dsub+0x130>
 8001d7a:	e368      	b.n	800244e <__aeabi_dsub+0x802>
 8001d7c:	4b8c      	ldr	r3, [pc, #560]	@ (8001fb0 <__aeabi_dsub+0x364>)
 8001d7e:	3501      	adds	r5, #1
 8001d80:	429d      	cmp	r5, r3
 8001d82:	d100      	bne.n	8001d86 <__aeabi_dsub+0x13a>
 8001d84:	e0f4      	b.n	8001f70 <__aeabi_dsub+0x324>
 8001d86:	4b8b      	ldr	r3, [pc, #556]	@ (8001fb4 <__aeabi_dsub+0x368>)
 8001d88:	056d      	lsls	r5, r5, #21
 8001d8a:	401c      	ands	r4, r3
 8001d8c:	0d6d      	lsrs	r5, r5, #21
 8001d8e:	0767      	lsls	r7, r4, #29
 8001d90:	08c0      	lsrs	r0, r0, #3
 8001d92:	0264      	lsls	r4, r4, #9
 8001d94:	4307      	orrs	r7, r0
 8001d96:	0b24      	lsrs	r4, r4, #12
 8001d98:	e0ec      	b.n	8001f74 <__aeabi_dsub+0x328>
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	dc00      	bgt.n	8001da0 <__aeabi_dsub+0x154>
 8001d9e:	e329      	b.n	80023f4 <__aeabi_dsub+0x7a8>
 8001da0:	4649      	mov	r1, r9
 8001da2:	2900      	cmp	r1, #0
 8001da4:	d000      	beq.n	8001da8 <__aeabi_dsub+0x15c>
 8001da6:	e0d6      	b.n	8001f56 <__aeabi_dsub+0x30a>
 8001da8:	4659      	mov	r1, fp
 8001daa:	4311      	orrs	r1, r2
 8001dac:	d100      	bne.n	8001db0 <__aeabi_dsub+0x164>
 8001dae:	e12e      	b.n	800200e <__aeabi_dsub+0x3c2>
 8001db0:	1e59      	subs	r1, r3, #1
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d100      	bne.n	8001db8 <__aeabi_dsub+0x16c>
 8001db6:	e1e6      	b.n	8002186 <__aeabi_dsub+0x53a>
 8001db8:	42bb      	cmp	r3, r7
 8001dba:	d100      	bne.n	8001dbe <__aeabi_dsub+0x172>
 8001dbc:	e182      	b.n	80020c4 <__aeabi_dsub+0x478>
 8001dbe:	2701      	movs	r7, #1
 8001dc0:	000b      	movs	r3, r1
 8001dc2:	2938      	cmp	r1, #56	@ 0x38
 8001dc4:	dc14      	bgt.n	8001df0 <__aeabi_dsub+0x1a4>
 8001dc6:	2b1f      	cmp	r3, #31
 8001dc8:	dd00      	ble.n	8001dcc <__aeabi_dsub+0x180>
 8001dca:	e23c      	b.n	8002246 <__aeabi_dsub+0x5fa>
 8001dcc:	2720      	movs	r7, #32
 8001dce:	1af9      	subs	r1, r7, r3
 8001dd0:	468c      	mov	ip, r1
 8001dd2:	4659      	mov	r1, fp
 8001dd4:	4667      	mov	r7, ip
 8001dd6:	40b9      	lsls	r1, r7
 8001dd8:	000f      	movs	r7, r1
 8001dda:	0011      	movs	r1, r2
 8001ddc:	40d9      	lsrs	r1, r3
 8001dde:	430f      	orrs	r7, r1
 8001de0:	4661      	mov	r1, ip
 8001de2:	408a      	lsls	r2, r1
 8001de4:	1e51      	subs	r1, r2, #1
 8001de6:	418a      	sbcs	r2, r1
 8001de8:	4659      	mov	r1, fp
 8001dea:	40d9      	lsrs	r1, r3
 8001dec:	4317      	orrs	r7, r2
 8001dee:	1864      	adds	r4, r4, r1
 8001df0:	183f      	adds	r7, r7, r0
 8001df2:	4287      	cmp	r7, r0
 8001df4:	4180      	sbcs	r0, r0
 8001df6:	4240      	negs	r0, r0
 8001df8:	1824      	adds	r4, r4, r0
 8001dfa:	0223      	lsls	r3, r4, #8
 8001dfc:	d400      	bmi.n	8001e00 <__aeabi_dsub+0x1b4>
 8001dfe:	e0c6      	b.n	8001f8e <__aeabi_dsub+0x342>
 8001e00:	4b6b      	ldr	r3, [pc, #428]	@ (8001fb0 <__aeabi_dsub+0x364>)
 8001e02:	3501      	adds	r5, #1
 8001e04:	429d      	cmp	r5, r3
 8001e06:	d100      	bne.n	8001e0a <__aeabi_dsub+0x1be>
 8001e08:	e0b2      	b.n	8001f70 <__aeabi_dsub+0x324>
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	4b69      	ldr	r3, [pc, #420]	@ (8001fb4 <__aeabi_dsub+0x368>)
 8001e0e:	087a      	lsrs	r2, r7, #1
 8001e10:	401c      	ands	r4, r3
 8001e12:	4039      	ands	r1, r7
 8001e14:	430a      	orrs	r2, r1
 8001e16:	07e7      	lsls	r7, r4, #31
 8001e18:	4317      	orrs	r7, r2
 8001e1a:	0864      	lsrs	r4, r4, #1
 8001e1c:	e79e      	b.n	8001d5c <__aeabi_dsub+0x110>
 8001e1e:	4b66      	ldr	r3, [pc, #408]	@ (8001fb8 <__aeabi_dsub+0x36c>)
 8001e20:	4311      	orrs	r1, r2
 8001e22:	468a      	mov	sl, r1
 8001e24:	18eb      	adds	r3, r5, r3
 8001e26:	2900      	cmp	r1, #0
 8001e28:	d028      	beq.n	8001e7c <__aeabi_dsub+0x230>
 8001e2a:	4566      	cmp	r6, ip
 8001e2c:	d02c      	beq.n	8001e88 <__aeabi_dsub+0x23c>
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d05b      	beq.n	8001eea <__aeabi_dsub+0x29e>
 8001e32:	2d00      	cmp	r5, #0
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x1ec>
 8001e36:	e12c      	b.n	8002092 <__aeabi_dsub+0x446>
 8001e38:	465b      	mov	r3, fp
 8001e3a:	4666      	mov	r6, ip
 8001e3c:	075f      	lsls	r7, r3, #29
 8001e3e:	08d2      	lsrs	r2, r2, #3
 8001e40:	4317      	orrs	r7, r2
 8001e42:	08dd      	lsrs	r5, r3, #3
 8001e44:	003b      	movs	r3, r7
 8001e46:	432b      	orrs	r3, r5
 8001e48:	d100      	bne.n	8001e4c <__aeabi_dsub+0x200>
 8001e4a:	e0e2      	b.n	8002012 <__aeabi_dsub+0x3c6>
 8001e4c:	2480      	movs	r4, #128	@ 0x80
 8001e4e:	0324      	lsls	r4, r4, #12
 8001e50:	432c      	orrs	r4, r5
 8001e52:	0324      	lsls	r4, r4, #12
 8001e54:	4d56      	ldr	r5, [pc, #344]	@ (8001fb0 <__aeabi_dsub+0x364>)
 8001e56:	0b24      	lsrs	r4, r4, #12
 8001e58:	e08c      	b.n	8001f74 <__aeabi_dsub+0x328>
 8001e5a:	4659      	mov	r1, fp
 8001e5c:	4311      	orrs	r1, r2
 8001e5e:	d100      	bne.n	8001e62 <__aeabi_dsub+0x216>
 8001e60:	e0d5      	b.n	800200e <__aeabi_dsub+0x3c2>
 8001e62:	1e59      	subs	r1, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x21e>
 8001e68:	e1b9      	b.n	80021de <__aeabi_dsub+0x592>
 8001e6a:	42bb      	cmp	r3, r7
 8001e6c:	d100      	bne.n	8001e70 <__aeabi_dsub+0x224>
 8001e6e:	e1b1      	b.n	80021d4 <__aeabi_dsub+0x588>
 8001e70:	2701      	movs	r7, #1
 8001e72:	000b      	movs	r3, r1
 8001e74:	2938      	cmp	r1, #56	@ 0x38
 8001e76:	dd00      	ble.n	8001e7a <__aeabi_dsub+0x22e>
 8001e78:	e740      	b.n	8001cfc <__aeabi_dsub+0xb0>
 8001e7a:	e72a      	b.n	8001cd2 <__aeabi_dsub+0x86>
 8001e7c:	4661      	mov	r1, ip
 8001e7e:	2701      	movs	r7, #1
 8001e80:	4079      	eors	r1, r7
 8001e82:	468c      	mov	ip, r1
 8001e84:	4566      	cmp	r6, ip
 8001e86:	d1d2      	bne.n	8001e2e <__aeabi_dsub+0x1e2>
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d100      	bne.n	8001e8e <__aeabi_dsub+0x242>
 8001e8c:	e0c5      	b.n	800201a <__aeabi_dsub+0x3ce>
 8001e8e:	2d00      	cmp	r5, #0
 8001e90:	d000      	beq.n	8001e94 <__aeabi_dsub+0x248>
 8001e92:	e155      	b.n	8002140 <__aeabi_dsub+0x4f4>
 8001e94:	464b      	mov	r3, r9
 8001e96:	0025      	movs	r5, r4
 8001e98:	4305      	orrs	r5, r0
 8001e9a:	d100      	bne.n	8001e9e <__aeabi_dsub+0x252>
 8001e9c:	e212      	b.n	80022c4 <__aeabi_dsub+0x678>
 8001e9e:	1e59      	subs	r1, r3, #1
 8001ea0:	468c      	mov	ip, r1
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x25c>
 8001ea6:	e249      	b.n	800233c <__aeabi_dsub+0x6f0>
 8001ea8:	4d41      	ldr	r5, [pc, #260]	@ (8001fb0 <__aeabi_dsub+0x364>)
 8001eaa:	42ab      	cmp	r3, r5
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dsub+0x264>
 8001eae:	e28f      	b.n	80023d0 <__aeabi_dsub+0x784>
 8001eb0:	2701      	movs	r7, #1
 8001eb2:	2938      	cmp	r1, #56	@ 0x38
 8001eb4:	dc11      	bgt.n	8001eda <__aeabi_dsub+0x28e>
 8001eb6:	4663      	mov	r3, ip
 8001eb8:	2b1f      	cmp	r3, #31
 8001eba:	dd00      	ble.n	8001ebe <__aeabi_dsub+0x272>
 8001ebc:	e25b      	b.n	8002376 <__aeabi_dsub+0x72a>
 8001ebe:	4661      	mov	r1, ip
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	0027      	movs	r7, r4
 8001ec4:	1a5b      	subs	r3, r3, r1
 8001ec6:	0005      	movs	r5, r0
 8001ec8:	4098      	lsls	r0, r3
 8001eca:	409f      	lsls	r7, r3
 8001ecc:	40cd      	lsrs	r5, r1
 8001ece:	1e43      	subs	r3, r0, #1
 8001ed0:	4198      	sbcs	r0, r3
 8001ed2:	40cc      	lsrs	r4, r1
 8001ed4:	432f      	orrs	r7, r5
 8001ed6:	4307      	orrs	r7, r0
 8001ed8:	44a3      	add	fp, r4
 8001eda:	18bf      	adds	r7, r7, r2
 8001edc:	4297      	cmp	r7, r2
 8001ede:	4192      	sbcs	r2, r2
 8001ee0:	4252      	negs	r2, r2
 8001ee2:	445a      	add	r2, fp
 8001ee4:	0014      	movs	r4, r2
 8001ee6:	464d      	mov	r5, r9
 8001ee8:	e787      	b.n	8001dfa <__aeabi_dsub+0x1ae>
 8001eea:	4f34      	ldr	r7, [pc, #208]	@ (8001fbc <__aeabi_dsub+0x370>)
 8001eec:	1c6b      	adds	r3, r5, #1
 8001eee:	423b      	tst	r3, r7
 8001ef0:	d000      	beq.n	8001ef4 <__aeabi_dsub+0x2a8>
 8001ef2:	e0b6      	b.n	8002062 <__aeabi_dsub+0x416>
 8001ef4:	4659      	mov	r1, fp
 8001ef6:	0023      	movs	r3, r4
 8001ef8:	4311      	orrs	r1, r2
 8001efa:	000f      	movs	r7, r1
 8001efc:	4303      	orrs	r3, r0
 8001efe:	2d00      	cmp	r5, #0
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dsub+0x2b8>
 8001f02:	e126      	b.n	8002152 <__aeabi_dsub+0x506>
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d100      	bne.n	8001f0a <__aeabi_dsub+0x2be>
 8001f08:	e1c0      	b.n	800228c <__aeabi_dsub+0x640>
 8001f0a:	2900      	cmp	r1, #0
 8001f0c:	d100      	bne.n	8001f10 <__aeabi_dsub+0x2c4>
 8001f0e:	e0a1      	b.n	8002054 <__aeabi_dsub+0x408>
 8001f10:	1a83      	subs	r3, r0, r2
 8001f12:	4698      	mov	r8, r3
 8001f14:	465b      	mov	r3, fp
 8001f16:	4540      	cmp	r0, r8
 8001f18:	41ad      	sbcs	r5, r5
 8001f1a:	1ae3      	subs	r3, r4, r3
 8001f1c:	426d      	negs	r5, r5
 8001f1e:	1b5b      	subs	r3, r3, r5
 8001f20:	2580      	movs	r5, #128	@ 0x80
 8001f22:	042d      	lsls	r5, r5, #16
 8001f24:	422b      	tst	r3, r5
 8001f26:	d100      	bne.n	8001f2a <__aeabi_dsub+0x2de>
 8001f28:	e14b      	b.n	80021c2 <__aeabi_dsub+0x576>
 8001f2a:	465b      	mov	r3, fp
 8001f2c:	1a10      	subs	r0, r2, r0
 8001f2e:	4282      	cmp	r2, r0
 8001f30:	4192      	sbcs	r2, r2
 8001f32:	1b1c      	subs	r4, r3, r4
 8001f34:	0007      	movs	r7, r0
 8001f36:	2601      	movs	r6, #1
 8001f38:	4663      	mov	r3, ip
 8001f3a:	4252      	negs	r2, r2
 8001f3c:	1aa4      	subs	r4, r4, r2
 8001f3e:	4327      	orrs	r7, r4
 8001f40:	401e      	ands	r6, r3
 8001f42:	2f00      	cmp	r7, #0
 8001f44:	d100      	bne.n	8001f48 <__aeabi_dsub+0x2fc>
 8001f46:	e142      	b.n	80021ce <__aeabi_dsub+0x582>
 8001f48:	422c      	tst	r4, r5
 8001f4a:	d100      	bne.n	8001f4e <__aeabi_dsub+0x302>
 8001f4c:	e26d      	b.n	800242a <__aeabi_dsub+0x7de>
 8001f4e:	4b19      	ldr	r3, [pc, #100]	@ (8001fb4 <__aeabi_dsub+0x368>)
 8001f50:	2501      	movs	r5, #1
 8001f52:	401c      	ands	r4, r3
 8001f54:	e71b      	b.n	8001d8e <__aeabi_dsub+0x142>
 8001f56:	42bd      	cmp	r5, r7
 8001f58:	d100      	bne.n	8001f5c <__aeabi_dsub+0x310>
 8001f5a:	e13b      	b.n	80021d4 <__aeabi_dsub+0x588>
 8001f5c:	2701      	movs	r7, #1
 8001f5e:	2b38      	cmp	r3, #56	@ 0x38
 8001f60:	dd00      	ble.n	8001f64 <__aeabi_dsub+0x318>
 8001f62:	e745      	b.n	8001df0 <__aeabi_dsub+0x1a4>
 8001f64:	2780      	movs	r7, #128	@ 0x80
 8001f66:	4659      	mov	r1, fp
 8001f68:	043f      	lsls	r7, r7, #16
 8001f6a:	4339      	orrs	r1, r7
 8001f6c:	468b      	mov	fp, r1
 8001f6e:	e72a      	b.n	8001dc6 <__aeabi_dsub+0x17a>
 8001f70:	2400      	movs	r4, #0
 8001f72:	2700      	movs	r7, #0
 8001f74:	052d      	lsls	r5, r5, #20
 8001f76:	4325      	orrs	r5, r4
 8001f78:	07f6      	lsls	r6, r6, #31
 8001f7a:	4335      	orrs	r5, r6
 8001f7c:	0038      	movs	r0, r7
 8001f7e:	0029      	movs	r1, r5
 8001f80:	b003      	add	sp, #12
 8001f82:	bcf0      	pop	{r4, r5, r6, r7}
 8001f84:	46bb      	mov	fp, r7
 8001f86:	46b2      	mov	sl, r6
 8001f88:	46a9      	mov	r9, r5
 8001f8a:	46a0      	mov	r8, r4
 8001f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f8e:	077b      	lsls	r3, r7, #29
 8001f90:	d004      	beq.n	8001f9c <__aeabi_dsub+0x350>
 8001f92:	230f      	movs	r3, #15
 8001f94:	403b      	ands	r3, r7
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d000      	beq.n	8001f9c <__aeabi_dsub+0x350>
 8001f9a:	e6e7      	b.n	8001d6c <__aeabi_dsub+0x120>
 8001f9c:	002b      	movs	r3, r5
 8001f9e:	08f8      	lsrs	r0, r7, #3
 8001fa0:	4a03      	ldr	r2, [pc, #12]	@ (8001fb0 <__aeabi_dsub+0x364>)
 8001fa2:	0767      	lsls	r7, r4, #29
 8001fa4:	4307      	orrs	r7, r0
 8001fa6:	08e5      	lsrs	r5, r4, #3
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d100      	bne.n	8001fae <__aeabi_dsub+0x362>
 8001fac:	e74a      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 8001fae:	e0a5      	b.n	80020fc <__aeabi_dsub+0x4b0>
 8001fb0:	000007ff 	.word	0x000007ff
 8001fb4:	ff7fffff 	.word	0xff7fffff
 8001fb8:	fffff801 	.word	0xfffff801
 8001fbc:	000007fe 	.word	0x000007fe
 8001fc0:	0038      	movs	r0, r7
 8001fc2:	f000 fbc7 	bl	8002754 <__clzsi2>
 8001fc6:	0003      	movs	r3, r0
 8001fc8:	3318      	adds	r3, #24
 8001fca:	2b1f      	cmp	r3, #31
 8001fcc:	dc00      	bgt.n	8001fd0 <__aeabi_dsub+0x384>
 8001fce:	e6a7      	b.n	8001d20 <__aeabi_dsub+0xd4>
 8001fd0:	003a      	movs	r2, r7
 8001fd2:	3808      	subs	r0, #8
 8001fd4:	4082      	lsls	r2, r0
 8001fd6:	429d      	cmp	r5, r3
 8001fd8:	dd00      	ble.n	8001fdc <__aeabi_dsub+0x390>
 8001fda:	e08a      	b.n	80020f2 <__aeabi_dsub+0x4a6>
 8001fdc:	1b5b      	subs	r3, r3, r5
 8001fde:	1c58      	adds	r0, r3, #1
 8001fe0:	281f      	cmp	r0, #31
 8001fe2:	dc00      	bgt.n	8001fe6 <__aeabi_dsub+0x39a>
 8001fe4:	e1d8      	b.n	8002398 <__aeabi_dsub+0x74c>
 8001fe6:	0017      	movs	r7, r2
 8001fe8:	3b1f      	subs	r3, #31
 8001fea:	40df      	lsrs	r7, r3
 8001fec:	2820      	cmp	r0, #32
 8001fee:	d005      	beq.n	8001ffc <__aeabi_dsub+0x3b0>
 8001ff0:	2340      	movs	r3, #64	@ 0x40
 8001ff2:	1a1b      	subs	r3, r3, r0
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	1e53      	subs	r3, r2, #1
 8001ff8:	419a      	sbcs	r2, r3
 8001ffa:	4317      	orrs	r7, r2
 8001ffc:	2500      	movs	r5, #0
 8001ffe:	2f00      	cmp	r7, #0
 8002000:	d100      	bne.n	8002004 <__aeabi_dsub+0x3b8>
 8002002:	e0e5      	b.n	80021d0 <__aeabi_dsub+0x584>
 8002004:	077b      	lsls	r3, r7, #29
 8002006:	d000      	beq.n	800200a <__aeabi_dsub+0x3be>
 8002008:	e6ab      	b.n	8001d62 <__aeabi_dsub+0x116>
 800200a:	002c      	movs	r4, r5
 800200c:	e7c6      	b.n	8001f9c <__aeabi_dsub+0x350>
 800200e:	08c0      	lsrs	r0, r0, #3
 8002010:	e7c6      	b.n	8001fa0 <__aeabi_dsub+0x354>
 8002012:	2700      	movs	r7, #0
 8002014:	2400      	movs	r4, #0
 8002016:	4dd1      	ldr	r5, [pc, #836]	@ (800235c <__aeabi_dsub+0x710>)
 8002018:	e7ac      	b.n	8001f74 <__aeabi_dsub+0x328>
 800201a:	4fd1      	ldr	r7, [pc, #836]	@ (8002360 <__aeabi_dsub+0x714>)
 800201c:	1c6b      	adds	r3, r5, #1
 800201e:	423b      	tst	r3, r7
 8002020:	d171      	bne.n	8002106 <__aeabi_dsub+0x4ba>
 8002022:	0023      	movs	r3, r4
 8002024:	4303      	orrs	r3, r0
 8002026:	2d00      	cmp	r5, #0
 8002028:	d000      	beq.n	800202c <__aeabi_dsub+0x3e0>
 800202a:	e14e      	b.n	80022ca <__aeabi_dsub+0x67e>
 800202c:	4657      	mov	r7, sl
 800202e:	2b00      	cmp	r3, #0
 8002030:	d100      	bne.n	8002034 <__aeabi_dsub+0x3e8>
 8002032:	e1b5      	b.n	80023a0 <__aeabi_dsub+0x754>
 8002034:	2f00      	cmp	r7, #0
 8002036:	d00d      	beq.n	8002054 <__aeabi_dsub+0x408>
 8002038:	1883      	adds	r3, r0, r2
 800203a:	4283      	cmp	r3, r0
 800203c:	4180      	sbcs	r0, r0
 800203e:	445c      	add	r4, fp
 8002040:	4240      	negs	r0, r0
 8002042:	1824      	adds	r4, r4, r0
 8002044:	0222      	lsls	r2, r4, #8
 8002046:	d500      	bpl.n	800204a <__aeabi_dsub+0x3fe>
 8002048:	e1c8      	b.n	80023dc <__aeabi_dsub+0x790>
 800204a:	001f      	movs	r7, r3
 800204c:	4698      	mov	r8, r3
 800204e:	4327      	orrs	r7, r4
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x408>
 8002052:	e0bc      	b.n	80021ce <__aeabi_dsub+0x582>
 8002054:	4643      	mov	r3, r8
 8002056:	0767      	lsls	r7, r4, #29
 8002058:	08db      	lsrs	r3, r3, #3
 800205a:	431f      	orrs	r7, r3
 800205c:	08e5      	lsrs	r5, r4, #3
 800205e:	2300      	movs	r3, #0
 8002060:	e04c      	b.n	80020fc <__aeabi_dsub+0x4b0>
 8002062:	1a83      	subs	r3, r0, r2
 8002064:	4698      	mov	r8, r3
 8002066:	465b      	mov	r3, fp
 8002068:	4540      	cmp	r0, r8
 800206a:	41bf      	sbcs	r7, r7
 800206c:	1ae3      	subs	r3, r4, r3
 800206e:	427f      	negs	r7, r7
 8002070:	1bdb      	subs	r3, r3, r7
 8002072:	021f      	lsls	r7, r3, #8
 8002074:	d47c      	bmi.n	8002170 <__aeabi_dsub+0x524>
 8002076:	4647      	mov	r7, r8
 8002078:	431f      	orrs	r7, r3
 800207a:	d100      	bne.n	800207e <__aeabi_dsub+0x432>
 800207c:	e0a6      	b.n	80021cc <__aeabi_dsub+0x580>
 800207e:	001c      	movs	r4, r3
 8002080:	4647      	mov	r7, r8
 8002082:	e645      	b.n	8001d10 <__aeabi_dsub+0xc4>
 8002084:	4cb7      	ldr	r4, [pc, #732]	@ (8002364 <__aeabi_dsub+0x718>)
 8002086:	1aed      	subs	r5, r5, r3
 8002088:	4014      	ands	r4, r2
 800208a:	077b      	lsls	r3, r7, #29
 800208c:	d000      	beq.n	8002090 <__aeabi_dsub+0x444>
 800208e:	e780      	b.n	8001f92 <__aeabi_dsub+0x346>
 8002090:	e784      	b.n	8001f9c <__aeabi_dsub+0x350>
 8002092:	464b      	mov	r3, r9
 8002094:	0025      	movs	r5, r4
 8002096:	4305      	orrs	r5, r0
 8002098:	d066      	beq.n	8002168 <__aeabi_dsub+0x51c>
 800209a:	1e5f      	subs	r7, r3, #1
 800209c:	2b01      	cmp	r3, #1
 800209e:	d100      	bne.n	80020a2 <__aeabi_dsub+0x456>
 80020a0:	e0fc      	b.n	800229c <__aeabi_dsub+0x650>
 80020a2:	4dae      	ldr	r5, [pc, #696]	@ (800235c <__aeabi_dsub+0x710>)
 80020a4:	42ab      	cmp	r3, r5
 80020a6:	d100      	bne.n	80020aa <__aeabi_dsub+0x45e>
 80020a8:	e15e      	b.n	8002368 <__aeabi_dsub+0x71c>
 80020aa:	4666      	mov	r6, ip
 80020ac:	2f38      	cmp	r7, #56	@ 0x38
 80020ae:	dc00      	bgt.n	80020b2 <__aeabi_dsub+0x466>
 80020b0:	e0b4      	b.n	800221c <__aeabi_dsub+0x5d0>
 80020b2:	2001      	movs	r0, #1
 80020b4:	1a17      	subs	r7, r2, r0
 80020b6:	42ba      	cmp	r2, r7
 80020b8:	4192      	sbcs	r2, r2
 80020ba:	465b      	mov	r3, fp
 80020bc:	4252      	negs	r2, r2
 80020be:	464d      	mov	r5, r9
 80020c0:	1a9c      	subs	r4, r3, r2
 80020c2:	e620      	b.n	8001d06 <__aeabi_dsub+0xba>
 80020c4:	0767      	lsls	r7, r4, #29
 80020c6:	08c0      	lsrs	r0, r0, #3
 80020c8:	4307      	orrs	r7, r0
 80020ca:	08e5      	lsrs	r5, r4, #3
 80020cc:	e6ba      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 80020ce:	001f      	movs	r7, r3
 80020d0:	4659      	mov	r1, fp
 80020d2:	3f20      	subs	r7, #32
 80020d4:	40f9      	lsrs	r1, r7
 80020d6:	000f      	movs	r7, r1
 80020d8:	2b20      	cmp	r3, #32
 80020da:	d005      	beq.n	80020e8 <__aeabi_dsub+0x49c>
 80020dc:	2140      	movs	r1, #64	@ 0x40
 80020de:	1acb      	subs	r3, r1, r3
 80020e0:	4659      	mov	r1, fp
 80020e2:	4099      	lsls	r1, r3
 80020e4:	430a      	orrs	r2, r1
 80020e6:	4692      	mov	sl, r2
 80020e8:	4653      	mov	r3, sl
 80020ea:	1e5a      	subs	r2, r3, #1
 80020ec:	4193      	sbcs	r3, r2
 80020ee:	431f      	orrs	r7, r3
 80020f0:	e604      	b.n	8001cfc <__aeabi_dsub+0xb0>
 80020f2:	1aeb      	subs	r3, r5, r3
 80020f4:	4d9b      	ldr	r5, [pc, #620]	@ (8002364 <__aeabi_dsub+0x718>)
 80020f6:	4015      	ands	r5, r2
 80020f8:	076f      	lsls	r7, r5, #29
 80020fa:	08ed      	lsrs	r5, r5, #3
 80020fc:	032c      	lsls	r4, r5, #12
 80020fe:	055d      	lsls	r5, r3, #21
 8002100:	0b24      	lsrs	r4, r4, #12
 8002102:	0d6d      	lsrs	r5, r5, #21
 8002104:	e736      	b.n	8001f74 <__aeabi_dsub+0x328>
 8002106:	4d95      	ldr	r5, [pc, #596]	@ (800235c <__aeabi_dsub+0x710>)
 8002108:	42ab      	cmp	r3, r5
 800210a:	d100      	bne.n	800210e <__aeabi_dsub+0x4c2>
 800210c:	e0d6      	b.n	80022bc <__aeabi_dsub+0x670>
 800210e:	1882      	adds	r2, r0, r2
 8002110:	0021      	movs	r1, r4
 8002112:	4282      	cmp	r2, r0
 8002114:	4180      	sbcs	r0, r0
 8002116:	4459      	add	r1, fp
 8002118:	4240      	negs	r0, r0
 800211a:	1808      	adds	r0, r1, r0
 800211c:	07c7      	lsls	r7, r0, #31
 800211e:	0852      	lsrs	r2, r2, #1
 8002120:	4317      	orrs	r7, r2
 8002122:	0844      	lsrs	r4, r0, #1
 8002124:	0752      	lsls	r2, r2, #29
 8002126:	d400      	bmi.n	800212a <__aeabi_dsub+0x4de>
 8002128:	e185      	b.n	8002436 <__aeabi_dsub+0x7ea>
 800212a:	220f      	movs	r2, #15
 800212c:	001d      	movs	r5, r3
 800212e:	403a      	ands	r2, r7
 8002130:	2a04      	cmp	r2, #4
 8002132:	d000      	beq.n	8002136 <__aeabi_dsub+0x4ea>
 8002134:	e61a      	b.n	8001d6c <__aeabi_dsub+0x120>
 8002136:	08ff      	lsrs	r7, r7, #3
 8002138:	0764      	lsls	r4, r4, #29
 800213a:	4327      	orrs	r7, r4
 800213c:	0905      	lsrs	r5, r0, #4
 800213e:	e7dd      	b.n	80020fc <__aeabi_dsub+0x4b0>
 8002140:	465b      	mov	r3, fp
 8002142:	08d2      	lsrs	r2, r2, #3
 8002144:	075f      	lsls	r7, r3, #29
 8002146:	4317      	orrs	r7, r2
 8002148:	08dd      	lsrs	r5, r3, #3
 800214a:	e67b      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 800214c:	2700      	movs	r7, #0
 800214e:	2400      	movs	r4, #0
 8002150:	e710      	b.n	8001f74 <__aeabi_dsub+0x328>
 8002152:	2b00      	cmp	r3, #0
 8002154:	d000      	beq.n	8002158 <__aeabi_dsub+0x50c>
 8002156:	e0d6      	b.n	8002306 <__aeabi_dsub+0x6ba>
 8002158:	2900      	cmp	r1, #0
 800215a:	d000      	beq.n	800215e <__aeabi_dsub+0x512>
 800215c:	e12f      	b.n	80023be <__aeabi_dsub+0x772>
 800215e:	2480      	movs	r4, #128	@ 0x80
 8002160:	2600      	movs	r6, #0
 8002162:	4d7e      	ldr	r5, [pc, #504]	@ (800235c <__aeabi_dsub+0x710>)
 8002164:	0324      	lsls	r4, r4, #12
 8002166:	e705      	b.n	8001f74 <__aeabi_dsub+0x328>
 8002168:	4666      	mov	r6, ip
 800216a:	465c      	mov	r4, fp
 800216c:	08d0      	lsrs	r0, r2, #3
 800216e:	e717      	b.n	8001fa0 <__aeabi_dsub+0x354>
 8002170:	465b      	mov	r3, fp
 8002172:	1a17      	subs	r7, r2, r0
 8002174:	42ba      	cmp	r2, r7
 8002176:	4192      	sbcs	r2, r2
 8002178:	1b1c      	subs	r4, r3, r4
 800217a:	2601      	movs	r6, #1
 800217c:	4663      	mov	r3, ip
 800217e:	4252      	negs	r2, r2
 8002180:	1aa4      	subs	r4, r4, r2
 8002182:	401e      	ands	r6, r3
 8002184:	e5c4      	b.n	8001d10 <__aeabi_dsub+0xc4>
 8002186:	1883      	adds	r3, r0, r2
 8002188:	4283      	cmp	r3, r0
 800218a:	4180      	sbcs	r0, r0
 800218c:	445c      	add	r4, fp
 800218e:	4240      	negs	r0, r0
 8002190:	1825      	adds	r5, r4, r0
 8002192:	022a      	lsls	r2, r5, #8
 8002194:	d400      	bmi.n	8002198 <__aeabi_dsub+0x54c>
 8002196:	e0da      	b.n	800234e <__aeabi_dsub+0x702>
 8002198:	4a72      	ldr	r2, [pc, #456]	@ (8002364 <__aeabi_dsub+0x718>)
 800219a:	085b      	lsrs	r3, r3, #1
 800219c:	4015      	ands	r5, r2
 800219e:	07ea      	lsls	r2, r5, #31
 80021a0:	431a      	orrs	r2, r3
 80021a2:	0869      	lsrs	r1, r5, #1
 80021a4:	075b      	lsls	r3, r3, #29
 80021a6:	d400      	bmi.n	80021aa <__aeabi_dsub+0x55e>
 80021a8:	e14a      	b.n	8002440 <__aeabi_dsub+0x7f4>
 80021aa:	230f      	movs	r3, #15
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0x568>
 80021b2:	e0fc      	b.n	80023ae <__aeabi_dsub+0x762>
 80021b4:	1d17      	adds	r7, r2, #4
 80021b6:	4297      	cmp	r7, r2
 80021b8:	41a4      	sbcs	r4, r4
 80021ba:	4264      	negs	r4, r4
 80021bc:	2502      	movs	r5, #2
 80021be:	1864      	adds	r4, r4, r1
 80021c0:	e6ec      	b.n	8001f9c <__aeabi_dsub+0x350>
 80021c2:	4647      	mov	r7, r8
 80021c4:	001c      	movs	r4, r3
 80021c6:	431f      	orrs	r7, r3
 80021c8:	d000      	beq.n	80021cc <__aeabi_dsub+0x580>
 80021ca:	e743      	b.n	8002054 <__aeabi_dsub+0x408>
 80021cc:	2600      	movs	r6, #0
 80021ce:	2500      	movs	r5, #0
 80021d0:	2400      	movs	r4, #0
 80021d2:	e6cf      	b.n	8001f74 <__aeabi_dsub+0x328>
 80021d4:	08c0      	lsrs	r0, r0, #3
 80021d6:	0767      	lsls	r7, r4, #29
 80021d8:	4307      	orrs	r7, r0
 80021da:	08e5      	lsrs	r5, r4, #3
 80021dc:	e632      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 80021de:	1a87      	subs	r7, r0, r2
 80021e0:	465b      	mov	r3, fp
 80021e2:	42b8      	cmp	r0, r7
 80021e4:	4180      	sbcs	r0, r0
 80021e6:	1ae4      	subs	r4, r4, r3
 80021e8:	4240      	negs	r0, r0
 80021ea:	1a24      	subs	r4, r4, r0
 80021ec:	0223      	lsls	r3, r4, #8
 80021ee:	d428      	bmi.n	8002242 <__aeabi_dsub+0x5f6>
 80021f0:	0763      	lsls	r3, r4, #29
 80021f2:	08ff      	lsrs	r7, r7, #3
 80021f4:	431f      	orrs	r7, r3
 80021f6:	08e5      	lsrs	r5, r4, #3
 80021f8:	2301      	movs	r3, #1
 80021fa:	e77f      	b.n	80020fc <__aeabi_dsub+0x4b0>
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d100      	bne.n	8002202 <__aeabi_dsub+0x5b6>
 8002200:	e673      	b.n	8001eea <__aeabi_dsub+0x29e>
 8002202:	464b      	mov	r3, r9
 8002204:	1b5f      	subs	r7, r3, r5
 8002206:	003b      	movs	r3, r7
 8002208:	2d00      	cmp	r5, #0
 800220a:	d100      	bne.n	800220e <__aeabi_dsub+0x5c2>
 800220c:	e742      	b.n	8002094 <__aeabi_dsub+0x448>
 800220e:	2f38      	cmp	r7, #56	@ 0x38
 8002210:	dd00      	ble.n	8002214 <__aeabi_dsub+0x5c8>
 8002212:	e0ec      	b.n	80023ee <__aeabi_dsub+0x7a2>
 8002214:	2380      	movs	r3, #128	@ 0x80
 8002216:	000e      	movs	r6, r1
 8002218:	041b      	lsls	r3, r3, #16
 800221a:	431c      	orrs	r4, r3
 800221c:	2f1f      	cmp	r7, #31
 800221e:	dc25      	bgt.n	800226c <__aeabi_dsub+0x620>
 8002220:	2520      	movs	r5, #32
 8002222:	0023      	movs	r3, r4
 8002224:	1bed      	subs	r5, r5, r7
 8002226:	0001      	movs	r1, r0
 8002228:	40a8      	lsls	r0, r5
 800222a:	40ab      	lsls	r3, r5
 800222c:	40f9      	lsrs	r1, r7
 800222e:	1e45      	subs	r5, r0, #1
 8002230:	41a8      	sbcs	r0, r5
 8002232:	430b      	orrs	r3, r1
 8002234:	40fc      	lsrs	r4, r7
 8002236:	4318      	orrs	r0, r3
 8002238:	465b      	mov	r3, fp
 800223a:	1b1b      	subs	r3, r3, r4
 800223c:	469b      	mov	fp, r3
 800223e:	e739      	b.n	80020b4 <__aeabi_dsub+0x468>
 8002240:	4666      	mov	r6, ip
 8002242:	2501      	movs	r5, #1
 8002244:	e562      	b.n	8001d0c <__aeabi_dsub+0xc0>
 8002246:	001f      	movs	r7, r3
 8002248:	4659      	mov	r1, fp
 800224a:	3f20      	subs	r7, #32
 800224c:	40f9      	lsrs	r1, r7
 800224e:	468c      	mov	ip, r1
 8002250:	2b20      	cmp	r3, #32
 8002252:	d005      	beq.n	8002260 <__aeabi_dsub+0x614>
 8002254:	2740      	movs	r7, #64	@ 0x40
 8002256:	4659      	mov	r1, fp
 8002258:	1afb      	subs	r3, r7, r3
 800225a:	4099      	lsls	r1, r3
 800225c:	430a      	orrs	r2, r1
 800225e:	4692      	mov	sl, r2
 8002260:	4657      	mov	r7, sl
 8002262:	1e7b      	subs	r3, r7, #1
 8002264:	419f      	sbcs	r7, r3
 8002266:	4663      	mov	r3, ip
 8002268:	431f      	orrs	r7, r3
 800226a:	e5c1      	b.n	8001df0 <__aeabi_dsub+0x1a4>
 800226c:	003b      	movs	r3, r7
 800226e:	0025      	movs	r5, r4
 8002270:	3b20      	subs	r3, #32
 8002272:	40dd      	lsrs	r5, r3
 8002274:	2f20      	cmp	r7, #32
 8002276:	d004      	beq.n	8002282 <__aeabi_dsub+0x636>
 8002278:	2340      	movs	r3, #64	@ 0x40
 800227a:	1bdb      	subs	r3, r3, r7
 800227c:	409c      	lsls	r4, r3
 800227e:	4320      	orrs	r0, r4
 8002280:	4680      	mov	r8, r0
 8002282:	4640      	mov	r0, r8
 8002284:	1e43      	subs	r3, r0, #1
 8002286:	4198      	sbcs	r0, r3
 8002288:	4328      	orrs	r0, r5
 800228a:	e713      	b.n	80020b4 <__aeabi_dsub+0x468>
 800228c:	2900      	cmp	r1, #0
 800228e:	d09d      	beq.n	80021cc <__aeabi_dsub+0x580>
 8002290:	2601      	movs	r6, #1
 8002292:	4663      	mov	r3, ip
 8002294:	465c      	mov	r4, fp
 8002296:	4690      	mov	r8, r2
 8002298:	401e      	ands	r6, r3
 800229a:	e6db      	b.n	8002054 <__aeabi_dsub+0x408>
 800229c:	1a17      	subs	r7, r2, r0
 800229e:	465b      	mov	r3, fp
 80022a0:	42ba      	cmp	r2, r7
 80022a2:	4192      	sbcs	r2, r2
 80022a4:	1b1c      	subs	r4, r3, r4
 80022a6:	4252      	negs	r2, r2
 80022a8:	1aa4      	subs	r4, r4, r2
 80022aa:	0223      	lsls	r3, r4, #8
 80022ac:	d4c8      	bmi.n	8002240 <__aeabi_dsub+0x5f4>
 80022ae:	0763      	lsls	r3, r4, #29
 80022b0:	08ff      	lsrs	r7, r7, #3
 80022b2:	431f      	orrs	r7, r3
 80022b4:	4666      	mov	r6, ip
 80022b6:	2301      	movs	r3, #1
 80022b8:	08e5      	lsrs	r5, r4, #3
 80022ba:	e71f      	b.n	80020fc <__aeabi_dsub+0x4b0>
 80022bc:	001d      	movs	r5, r3
 80022be:	2400      	movs	r4, #0
 80022c0:	2700      	movs	r7, #0
 80022c2:	e657      	b.n	8001f74 <__aeabi_dsub+0x328>
 80022c4:	465c      	mov	r4, fp
 80022c6:	08d0      	lsrs	r0, r2, #3
 80022c8:	e66a      	b.n	8001fa0 <__aeabi_dsub+0x354>
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d100      	bne.n	80022d0 <__aeabi_dsub+0x684>
 80022ce:	e737      	b.n	8002140 <__aeabi_dsub+0x4f4>
 80022d0:	4653      	mov	r3, sl
 80022d2:	08c0      	lsrs	r0, r0, #3
 80022d4:	0767      	lsls	r7, r4, #29
 80022d6:	4307      	orrs	r7, r0
 80022d8:	08e5      	lsrs	r5, r4, #3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d100      	bne.n	80022e0 <__aeabi_dsub+0x694>
 80022de:	e5b1      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 80022e0:	2380      	movs	r3, #128	@ 0x80
 80022e2:	031b      	lsls	r3, r3, #12
 80022e4:	421d      	tst	r5, r3
 80022e6:	d008      	beq.n	80022fa <__aeabi_dsub+0x6ae>
 80022e8:	4659      	mov	r1, fp
 80022ea:	08c8      	lsrs	r0, r1, #3
 80022ec:	4218      	tst	r0, r3
 80022ee:	d104      	bne.n	80022fa <__aeabi_dsub+0x6ae>
 80022f0:	08d2      	lsrs	r2, r2, #3
 80022f2:	0749      	lsls	r1, r1, #29
 80022f4:	430a      	orrs	r2, r1
 80022f6:	0017      	movs	r7, r2
 80022f8:	0005      	movs	r5, r0
 80022fa:	0f7b      	lsrs	r3, r7, #29
 80022fc:	00ff      	lsls	r7, r7, #3
 80022fe:	08ff      	lsrs	r7, r7, #3
 8002300:	075b      	lsls	r3, r3, #29
 8002302:	431f      	orrs	r7, r3
 8002304:	e59e      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 8002306:	08c0      	lsrs	r0, r0, #3
 8002308:	0763      	lsls	r3, r4, #29
 800230a:	4318      	orrs	r0, r3
 800230c:	08e5      	lsrs	r5, r4, #3
 800230e:	2900      	cmp	r1, #0
 8002310:	d053      	beq.n	80023ba <__aeabi_dsub+0x76e>
 8002312:	2380      	movs	r3, #128	@ 0x80
 8002314:	031b      	lsls	r3, r3, #12
 8002316:	421d      	tst	r5, r3
 8002318:	d00a      	beq.n	8002330 <__aeabi_dsub+0x6e4>
 800231a:	4659      	mov	r1, fp
 800231c:	08cc      	lsrs	r4, r1, #3
 800231e:	421c      	tst	r4, r3
 8002320:	d106      	bne.n	8002330 <__aeabi_dsub+0x6e4>
 8002322:	2601      	movs	r6, #1
 8002324:	4663      	mov	r3, ip
 8002326:	0025      	movs	r5, r4
 8002328:	08d0      	lsrs	r0, r2, #3
 800232a:	0749      	lsls	r1, r1, #29
 800232c:	4308      	orrs	r0, r1
 800232e:	401e      	ands	r6, r3
 8002330:	0f47      	lsrs	r7, r0, #29
 8002332:	00c0      	lsls	r0, r0, #3
 8002334:	08c0      	lsrs	r0, r0, #3
 8002336:	077f      	lsls	r7, r7, #29
 8002338:	4307      	orrs	r7, r0
 800233a:	e583      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 800233c:	1883      	adds	r3, r0, r2
 800233e:	4293      	cmp	r3, r2
 8002340:	4192      	sbcs	r2, r2
 8002342:	445c      	add	r4, fp
 8002344:	4252      	negs	r2, r2
 8002346:	18a5      	adds	r5, r4, r2
 8002348:	022a      	lsls	r2, r5, #8
 800234a:	d500      	bpl.n	800234e <__aeabi_dsub+0x702>
 800234c:	e724      	b.n	8002198 <__aeabi_dsub+0x54c>
 800234e:	076f      	lsls	r7, r5, #29
 8002350:	08db      	lsrs	r3, r3, #3
 8002352:	431f      	orrs	r7, r3
 8002354:	08ed      	lsrs	r5, r5, #3
 8002356:	2301      	movs	r3, #1
 8002358:	e6d0      	b.n	80020fc <__aeabi_dsub+0x4b0>
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	000007ff 	.word	0x000007ff
 8002360:	000007fe 	.word	0x000007fe
 8002364:	ff7fffff 	.word	0xff7fffff
 8002368:	465b      	mov	r3, fp
 800236a:	08d2      	lsrs	r2, r2, #3
 800236c:	075f      	lsls	r7, r3, #29
 800236e:	4666      	mov	r6, ip
 8002370:	4317      	orrs	r7, r2
 8002372:	08dd      	lsrs	r5, r3, #3
 8002374:	e566      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 8002376:	0025      	movs	r5, r4
 8002378:	3b20      	subs	r3, #32
 800237a:	40dd      	lsrs	r5, r3
 800237c:	4663      	mov	r3, ip
 800237e:	2b20      	cmp	r3, #32
 8002380:	d005      	beq.n	800238e <__aeabi_dsub+0x742>
 8002382:	2340      	movs	r3, #64	@ 0x40
 8002384:	4661      	mov	r1, ip
 8002386:	1a5b      	subs	r3, r3, r1
 8002388:	409c      	lsls	r4, r3
 800238a:	4320      	orrs	r0, r4
 800238c:	4680      	mov	r8, r0
 800238e:	4647      	mov	r7, r8
 8002390:	1e7b      	subs	r3, r7, #1
 8002392:	419f      	sbcs	r7, r3
 8002394:	432f      	orrs	r7, r5
 8002396:	e5a0      	b.n	8001eda <__aeabi_dsub+0x28e>
 8002398:	2120      	movs	r1, #32
 800239a:	2700      	movs	r7, #0
 800239c:	1a09      	subs	r1, r1, r0
 800239e:	e4d2      	b.n	8001d46 <__aeabi_dsub+0xfa>
 80023a0:	2f00      	cmp	r7, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x75a>
 80023a4:	e713      	b.n	80021ce <__aeabi_dsub+0x582>
 80023a6:	465c      	mov	r4, fp
 80023a8:	0017      	movs	r7, r2
 80023aa:	2500      	movs	r5, #0
 80023ac:	e5f6      	b.n	8001f9c <__aeabi_dsub+0x350>
 80023ae:	08d7      	lsrs	r7, r2, #3
 80023b0:	0749      	lsls	r1, r1, #29
 80023b2:	2302      	movs	r3, #2
 80023b4:	430f      	orrs	r7, r1
 80023b6:	092d      	lsrs	r5, r5, #4
 80023b8:	e6a0      	b.n	80020fc <__aeabi_dsub+0x4b0>
 80023ba:	0007      	movs	r7, r0
 80023bc:	e542      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 80023be:	465b      	mov	r3, fp
 80023c0:	2601      	movs	r6, #1
 80023c2:	075f      	lsls	r7, r3, #29
 80023c4:	08dd      	lsrs	r5, r3, #3
 80023c6:	4663      	mov	r3, ip
 80023c8:	08d2      	lsrs	r2, r2, #3
 80023ca:	4317      	orrs	r7, r2
 80023cc:	401e      	ands	r6, r3
 80023ce:	e539      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 80023d0:	465b      	mov	r3, fp
 80023d2:	08d2      	lsrs	r2, r2, #3
 80023d4:	075f      	lsls	r7, r3, #29
 80023d6:	4317      	orrs	r7, r2
 80023d8:	08dd      	lsrs	r5, r3, #3
 80023da:	e533      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 80023dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002458 <__aeabi_dsub+0x80c>)
 80023de:	08db      	lsrs	r3, r3, #3
 80023e0:	4022      	ands	r2, r4
 80023e2:	0757      	lsls	r7, r2, #29
 80023e4:	0252      	lsls	r2, r2, #9
 80023e6:	2501      	movs	r5, #1
 80023e8:	431f      	orrs	r7, r3
 80023ea:	0b14      	lsrs	r4, r2, #12
 80023ec:	e5c2      	b.n	8001f74 <__aeabi_dsub+0x328>
 80023ee:	000e      	movs	r6, r1
 80023f0:	2001      	movs	r0, #1
 80023f2:	e65f      	b.n	80020b4 <__aeabi_dsub+0x468>
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00d      	beq.n	8002414 <__aeabi_dsub+0x7c8>
 80023f8:	464b      	mov	r3, r9
 80023fa:	1b5b      	subs	r3, r3, r5
 80023fc:	469c      	mov	ip, r3
 80023fe:	2d00      	cmp	r5, #0
 8002400:	d100      	bne.n	8002404 <__aeabi_dsub+0x7b8>
 8002402:	e548      	b.n	8001e96 <__aeabi_dsub+0x24a>
 8002404:	2701      	movs	r7, #1
 8002406:	2b38      	cmp	r3, #56	@ 0x38
 8002408:	dd00      	ble.n	800240c <__aeabi_dsub+0x7c0>
 800240a:	e566      	b.n	8001eda <__aeabi_dsub+0x28e>
 800240c:	2380      	movs	r3, #128	@ 0x80
 800240e:	041b      	lsls	r3, r3, #16
 8002410:	431c      	orrs	r4, r3
 8002412:	e550      	b.n	8001eb6 <__aeabi_dsub+0x26a>
 8002414:	1c6b      	adds	r3, r5, #1
 8002416:	4d11      	ldr	r5, [pc, #68]	@ (800245c <__aeabi_dsub+0x810>)
 8002418:	422b      	tst	r3, r5
 800241a:	d000      	beq.n	800241e <__aeabi_dsub+0x7d2>
 800241c:	e673      	b.n	8002106 <__aeabi_dsub+0x4ba>
 800241e:	4659      	mov	r1, fp
 8002420:	0023      	movs	r3, r4
 8002422:	4311      	orrs	r1, r2
 8002424:	468a      	mov	sl, r1
 8002426:	4303      	orrs	r3, r0
 8002428:	e600      	b.n	800202c <__aeabi_dsub+0x3e0>
 800242a:	0767      	lsls	r7, r4, #29
 800242c:	08c0      	lsrs	r0, r0, #3
 800242e:	2300      	movs	r3, #0
 8002430:	4307      	orrs	r7, r0
 8002432:	08e5      	lsrs	r5, r4, #3
 8002434:	e662      	b.n	80020fc <__aeabi_dsub+0x4b0>
 8002436:	0764      	lsls	r4, r4, #29
 8002438:	08ff      	lsrs	r7, r7, #3
 800243a:	4327      	orrs	r7, r4
 800243c:	0905      	lsrs	r5, r0, #4
 800243e:	e65d      	b.n	80020fc <__aeabi_dsub+0x4b0>
 8002440:	08d2      	lsrs	r2, r2, #3
 8002442:	0749      	lsls	r1, r1, #29
 8002444:	4311      	orrs	r1, r2
 8002446:	000f      	movs	r7, r1
 8002448:	2302      	movs	r3, #2
 800244a:	092d      	lsrs	r5, r5, #4
 800244c:	e656      	b.n	80020fc <__aeabi_dsub+0x4b0>
 800244e:	0007      	movs	r7, r0
 8002450:	e5a4      	b.n	8001f9c <__aeabi_dsub+0x350>
 8002452:	0038      	movs	r0, r7
 8002454:	e48f      	b.n	8001d76 <__aeabi_dsub+0x12a>
 8002456:	46c0      	nop			@ (mov r8, r8)
 8002458:	ff7fffff 	.word	0xff7fffff
 800245c:	000007fe 	.word	0x000007fe

08002460 <__aeabi_dcmpun>:
 8002460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002462:	46c6      	mov	lr, r8
 8002464:	031e      	lsls	r6, r3, #12
 8002466:	0b36      	lsrs	r6, r6, #12
 8002468:	46b0      	mov	r8, r6
 800246a:	4e0d      	ldr	r6, [pc, #52]	@ (80024a0 <__aeabi_dcmpun+0x40>)
 800246c:	030c      	lsls	r4, r1, #12
 800246e:	004d      	lsls	r5, r1, #1
 8002470:	005f      	lsls	r7, r3, #1
 8002472:	b500      	push	{lr}
 8002474:	0b24      	lsrs	r4, r4, #12
 8002476:	0d6d      	lsrs	r5, r5, #21
 8002478:	0d7f      	lsrs	r7, r7, #21
 800247a:	42b5      	cmp	r5, r6
 800247c:	d00b      	beq.n	8002496 <__aeabi_dcmpun+0x36>
 800247e:	4908      	ldr	r1, [pc, #32]	@ (80024a0 <__aeabi_dcmpun+0x40>)
 8002480:	2000      	movs	r0, #0
 8002482:	428f      	cmp	r7, r1
 8002484:	d104      	bne.n	8002490 <__aeabi_dcmpun+0x30>
 8002486:	4646      	mov	r6, r8
 8002488:	4316      	orrs	r6, r2
 800248a:	0030      	movs	r0, r6
 800248c:	1e43      	subs	r3, r0, #1
 800248e:	4198      	sbcs	r0, r3
 8002490:	bc80      	pop	{r7}
 8002492:	46b8      	mov	r8, r7
 8002494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002496:	4304      	orrs	r4, r0
 8002498:	2001      	movs	r0, #1
 800249a:	2c00      	cmp	r4, #0
 800249c:	d1f8      	bne.n	8002490 <__aeabi_dcmpun+0x30>
 800249e:	e7ee      	b.n	800247e <__aeabi_dcmpun+0x1e>
 80024a0:	000007ff 	.word	0x000007ff

080024a4 <__aeabi_d2iz>:
 80024a4:	000b      	movs	r3, r1
 80024a6:	0002      	movs	r2, r0
 80024a8:	b570      	push	{r4, r5, r6, lr}
 80024aa:	4d16      	ldr	r5, [pc, #88]	@ (8002504 <__aeabi_d2iz+0x60>)
 80024ac:	030c      	lsls	r4, r1, #12
 80024ae:	b082      	sub	sp, #8
 80024b0:	0049      	lsls	r1, r1, #1
 80024b2:	2000      	movs	r0, #0
 80024b4:	9200      	str	r2, [sp, #0]
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	0b24      	lsrs	r4, r4, #12
 80024ba:	0d49      	lsrs	r1, r1, #21
 80024bc:	0fde      	lsrs	r6, r3, #31
 80024be:	42a9      	cmp	r1, r5
 80024c0:	dd04      	ble.n	80024cc <__aeabi_d2iz+0x28>
 80024c2:	4811      	ldr	r0, [pc, #68]	@ (8002508 <__aeabi_d2iz+0x64>)
 80024c4:	4281      	cmp	r1, r0
 80024c6:	dd03      	ble.n	80024d0 <__aeabi_d2iz+0x2c>
 80024c8:	4b10      	ldr	r3, [pc, #64]	@ (800250c <__aeabi_d2iz+0x68>)
 80024ca:	18f0      	adds	r0, r6, r3
 80024cc:	b002      	add	sp, #8
 80024ce:	bd70      	pop	{r4, r5, r6, pc}
 80024d0:	2080      	movs	r0, #128	@ 0x80
 80024d2:	0340      	lsls	r0, r0, #13
 80024d4:	4320      	orrs	r0, r4
 80024d6:	4c0e      	ldr	r4, [pc, #56]	@ (8002510 <__aeabi_d2iz+0x6c>)
 80024d8:	1a64      	subs	r4, r4, r1
 80024da:	2c1f      	cmp	r4, #31
 80024dc:	dd08      	ble.n	80024f0 <__aeabi_d2iz+0x4c>
 80024de:	4b0d      	ldr	r3, [pc, #52]	@ (8002514 <__aeabi_d2iz+0x70>)
 80024e0:	1a5b      	subs	r3, r3, r1
 80024e2:	40d8      	lsrs	r0, r3
 80024e4:	0003      	movs	r3, r0
 80024e6:	4258      	negs	r0, r3
 80024e8:	2e00      	cmp	r6, #0
 80024ea:	d1ef      	bne.n	80024cc <__aeabi_d2iz+0x28>
 80024ec:	0018      	movs	r0, r3
 80024ee:	e7ed      	b.n	80024cc <__aeabi_d2iz+0x28>
 80024f0:	4b09      	ldr	r3, [pc, #36]	@ (8002518 <__aeabi_d2iz+0x74>)
 80024f2:	9a00      	ldr	r2, [sp, #0]
 80024f4:	469c      	mov	ip, r3
 80024f6:	0003      	movs	r3, r0
 80024f8:	4461      	add	r1, ip
 80024fa:	408b      	lsls	r3, r1
 80024fc:	40e2      	lsrs	r2, r4
 80024fe:	4313      	orrs	r3, r2
 8002500:	e7f1      	b.n	80024e6 <__aeabi_d2iz+0x42>
 8002502:	46c0      	nop			@ (mov r8, r8)
 8002504:	000003fe 	.word	0x000003fe
 8002508:	0000041d 	.word	0x0000041d
 800250c:	7fffffff 	.word	0x7fffffff
 8002510:	00000433 	.word	0x00000433
 8002514:	00000413 	.word	0x00000413
 8002518:	fffffbed 	.word	0xfffffbed

0800251c <__aeabi_i2d>:
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	2800      	cmp	r0, #0
 8002520:	d016      	beq.n	8002550 <__aeabi_i2d+0x34>
 8002522:	17c3      	asrs	r3, r0, #31
 8002524:	18c5      	adds	r5, r0, r3
 8002526:	405d      	eors	r5, r3
 8002528:	0fc4      	lsrs	r4, r0, #31
 800252a:	0028      	movs	r0, r5
 800252c:	f000 f912 	bl	8002754 <__clzsi2>
 8002530:	4b10      	ldr	r3, [pc, #64]	@ (8002574 <__aeabi_i2d+0x58>)
 8002532:	1a1b      	subs	r3, r3, r0
 8002534:	055b      	lsls	r3, r3, #21
 8002536:	0d5b      	lsrs	r3, r3, #21
 8002538:	280a      	cmp	r0, #10
 800253a:	dc14      	bgt.n	8002566 <__aeabi_i2d+0x4a>
 800253c:	0002      	movs	r2, r0
 800253e:	002e      	movs	r6, r5
 8002540:	3215      	adds	r2, #21
 8002542:	4096      	lsls	r6, r2
 8002544:	220b      	movs	r2, #11
 8002546:	1a12      	subs	r2, r2, r0
 8002548:	40d5      	lsrs	r5, r2
 800254a:	032d      	lsls	r5, r5, #12
 800254c:	0b2d      	lsrs	r5, r5, #12
 800254e:	e003      	b.n	8002558 <__aeabi_i2d+0x3c>
 8002550:	2400      	movs	r4, #0
 8002552:	2300      	movs	r3, #0
 8002554:	2500      	movs	r5, #0
 8002556:	2600      	movs	r6, #0
 8002558:	051b      	lsls	r3, r3, #20
 800255a:	432b      	orrs	r3, r5
 800255c:	07e4      	lsls	r4, r4, #31
 800255e:	4323      	orrs	r3, r4
 8002560:	0030      	movs	r0, r6
 8002562:	0019      	movs	r1, r3
 8002564:	bd70      	pop	{r4, r5, r6, pc}
 8002566:	380b      	subs	r0, #11
 8002568:	4085      	lsls	r5, r0
 800256a:	032d      	lsls	r5, r5, #12
 800256c:	2600      	movs	r6, #0
 800256e:	0b2d      	lsrs	r5, r5, #12
 8002570:	e7f2      	b.n	8002558 <__aeabi_i2d+0x3c>
 8002572:	46c0      	nop			@ (mov r8, r8)
 8002574:	0000041e 	.word	0x0000041e

08002578 <__aeabi_ui2d>:
 8002578:	b510      	push	{r4, lr}
 800257a:	1e04      	subs	r4, r0, #0
 800257c:	d010      	beq.n	80025a0 <__aeabi_ui2d+0x28>
 800257e:	f000 f8e9 	bl	8002754 <__clzsi2>
 8002582:	4b0e      	ldr	r3, [pc, #56]	@ (80025bc <__aeabi_ui2d+0x44>)
 8002584:	1a1b      	subs	r3, r3, r0
 8002586:	055b      	lsls	r3, r3, #21
 8002588:	0d5b      	lsrs	r3, r3, #21
 800258a:	280a      	cmp	r0, #10
 800258c:	dc0f      	bgt.n	80025ae <__aeabi_ui2d+0x36>
 800258e:	220b      	movs	r2, #11
 8002590:	0021      	movs	r1, r4
 8002592:	1a12      	subs	r2, r2, r0
 8002594:	40d1      	lsrs	r1, r2
 8002596:	3015      	adds	r0, #21
 8002598:	030a      	lsls	r2, r1, #12
 800259a:	4084      	lsls	r4, r0
 800259c:	0b12      	lsrs	r2, r2, #12
 800259e:	e001      	b.n	80025a4 <__aeabi_ui2d+0x2c>
 80025a0:	2300      	movs	r3, #0
 80025a2:	2200      	movs	r2, #0
 80025a4:	051b      	lsls	r3, r3, #20
 80025a6:	4313      	orrs	r3, r2
 80025a8:	0020      	movs	r0, r4
 80025aa:	0019      	movs	r1, r3
 80025ac:	bd10      	pop	{r4, pc}
 80025ae:	0022      	movs	r2, r4
 80025b0:	380b      	subs	r0, #11
 80025b2:	4082      	lsls	r2, r0
 80025b4:	0312      	lsls	r2, r2, #12
 80025b6:	2400      	movs	r4, #0
 80025b8:	0b12      	lsrs	r2, r2, #12
 80025ba:	e7f3      	b.n	80025a4 <__aeabi_ui2d+0x2c>
 80025bc:	0000041e 	.word	0x0000041e

080025c0 <__aeabi_f2d>:
 80025c0:	b570      	push	{r4, r5, r6, lr}
 80025c2:	0242      	lsls	r2, r0, #9
 80025c4:	0043      	lsls	r3, r0, #1
 80025c6:	0fc4      	lsrs	r4, r0, #31
 80025c8:	20fe      	movs	r0, #254	@ 0xfe
 80025ca:	0e1b      	lsrs	r3, r3, #24
 80025cc:	1c59      	adds	r1, r3, #1
 80025ce:	0a55      	lsrs	r5, r2, #9
 80025d0:	4208      	tst	r0, r1
 80025d2:	d00c      	beq.n	80025ee <__aeabi_f2d+0x2e>
 80025d4:	21e0      	movs	r1, #224	@ 0xe0
 80025d6:	0089      	lsls	r1, r1, #2
 80025d8:	468c      	mov	ip, r1
 80025da:	076d      	lsls	r5, r5, #29
 80025dc:	0b12      	lsrs	r2, r2, #12
 80025de:	4463      	add	r3, ip
 80025e0:	051b      	lsls	r3, r3, #20
 80025e2:	4313      	orrs	r3, r2
 80025e4:	07e4      	lsls	r4, r4, #31
 80025e6:	4323      	orrs	r3, r4
 80025e8:	0028      	movs	r0, r5
 80025ea:	0019      	movs	r1, r3
 80025ec:	bd70      	pop	{r4, r5, r6, pc}
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d114      	bne.n	800261c <__aeabi_f2d+0x5c>
 80025f2:	2d00      	cmp	r5, #0
 80025f4:	d01b      	beq.n	800262e <__aeabi_f2d+0x6e>
 80025f6:	0028      	movs	r0, r5
 80025f8:	f000 f8ac 	bl	8002754 <__clzsi2>
 80025fc:	280a      	cmp	r0, #10
 80025fe:	dc1c      	bgt.n	800263a <__aeabi_f2d+0x7a>
 8002600:	230b      	movs	r3, #11
 8002602:	002a      	movs	r2, r5
 8002604:	1a1b      	subs	r3, r3, r0
 8002606:	40da      	lsrs	r2, r3
 8002608:	0003      	movs	r3, r0
 800260a:	3315      	adds	r3, #21
 800260c:	409d      	lsls	r5, r3
 800260e:	4b0e      	ldr	r3, [pc, #56]	@ (8002648 <__aeabi_f2d+0x88>)
 8002610:	0312      	lsls	r2, r2, #12
 8002612:	1a1b      	subs	r3, r3, r0
 8002614:	055b      	lsls	r3, r3, #21
 8002616:	0b12      	lsrs	r2, r2, #12
 8002618:	0d5b      	lsrs	r3, r3, #21
 800261a:	e7e1      	b.n	80025e0 <__aeabi_f2d+0x20>
 800261c:	2d00      	cmp	r5, #0
 800261e:	d009      	beq.n	8002634 <__aeabi_f2d+0x74>
 8002620:	0b13      	lsrs	r3, r2, #12
 8002622:	2280      	movs	r2, #128	@ 0x80
 8002624:	0312      	lsls	r2, r2, #12
 8002626:	431a      	orrs	r2, r3
 8002628:	076d      	lsls	r5, r5, #29
 800262a:	4b08      	ldr	r3, [pc, #32]	@ (800264c <__aeabi_f2d+0x8c>)
 800262c:	e7d8      	b.n	80025e0 <__aeabi_f2d+0x20>
 800262e:	2300      	movs	r3, #0
 8002630:	2200      	movs	r2, #0
 8002632:	e7d5      	b.n	80025e0 <__aeabi_f2d+0x20>
 8002634:	2200      	movs	r2, #0
 8002636:	4b05      	ldr	r3, [pc, #20]	@ (800264c <__aeabi_f2d+0x8c>)
 8002638:	e7d2      	b.n	80025e0 <__aeabi_f2d+0x20>
 800263a:	0003      	movs	r3, r0
 800263c:	002a      	movs	r2, r5
 800263e:	3b0b      	subs	r3, #11
 8002640:	409a      	lsls	r2, r3
 8002642:	2500      	movs	r5, #0
 8002644:	e7e3      	b.n	800260e <__aeabi_f2d+0x4e>
 8002646:	46c0      	nop			@ (mov r8, r8)
 8002648:	00000389 	.word	0x00000389
 800264c:	000007ff 	.word	0x000007ff

08002650 <__aeabi_d2f>:
 8002650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002652:	004b      	lsls	r3, r1, #1
 8002654:	030f      	lsls	r7, r1, #12
 8002656:	0d5b      	lsrs	r3, r3, #21
 8002658:	4c3a      	ldr	r4, [pc, #232]	@ (8002744 <__aeabi_d2f+0xf4>)
 800265a:	0f45      	lsrs	r5, r0, #29
 800265c:	b083      	sub	sp, #12
 800265e:	0a7f      	lsrs	r7, r7, #9
 8002660:	1c5e      	adds	r6, r3, #1
 8002662:	432f      	orrs	r7, r5
 8002664:	9000      	str	r0, [sp, #0]
 8002666:	9101      	str	r1, [sp, #4]
 8002668:	0fca      	lsrs	r2, r1, #31
 800266a:	00c5      	lsls	r5, r0, #3
 800266c:	4226      	tst	r6, r4
 800266e:	d00b      	beq.n	8002688 <__aeabi_d2f+0x38>
 8002670:	4935      	ldr	r1, [pc, #212]	@ (8002748 <__aeabi_d2f+0xf8>)
 8002672:	185c      	adds	r4, r3, r1
 8002674:	2cfe      	cmp	r4, #254	@ 0xfe
 8002676:	dd13      	ble.n	80026a0 <__aeabi_d2f+0x50>
 8002678:	20ff      	movs	r0, #255	@ 0xff
 800267a:	2300      	movs	r3, #0
 800267c:	05c0      	lsls	r0, r0, #23
 800267e:	4318      	orrs	r0, r3
 8002680:	07d2      	lsls	r2, r2, #31
 8002682:	4310      	orrs	r0, r2
 8002684:	b003      	add	sp, #12
 8002686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002688:	433d      	orrs	r5, r7
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <__aeabi_d2f+0x42>
 800268e:	2000      	movs	r0, #0
 8002690:	e7f4      	b.n	800267c <__aeabi_d2f+0x2c>
 8002692:	2d00      	cmp	r5, #0
 8002694:	d0f0      	beq.n	8002678 <__aeabi_d2f+0x28>
 8002696:	2380      	movs	r3, #128	@ 0x80
 8002698:	03db      	lsls	r3, r3, #15
 800269a:	20ff      	movs	r0, #255	@ 0xff
 800269c:	433b      	orrs	r3, r7
 800269e:	e7ed      	b.n	800267c <__aeabi_d2f+0x2c>
 80026a0:	2c00      	cmp	r4, #0
 80026a2:	dd0c      	ble.n	80026be <__aeabi_d2f+0x6e>
 80026a4:	9b00      	ldr	r3, [sp, #0]
 80026a6:	00ff      	lsls	r7, r7, #3
 80026a8:	019b      	lsls	r3, r3, #6
 80026aa:	1e58      	subs	r0, r3, #1
 80026ac:	4183      	sbcs	r3, r0
 80026ae:	0f69      	lsrs	r1, r5, #29
 80026b0:	433b      	orrs	r3, r7
 80026b2:	430b      	orrs	r3, r1
 80026b4:	0759      	lsls	r1, r3, #29
 80026b6:	d127      	bne.n	8002708 <__aeabi_d2f+0xb8>
 80026b8:	08db      	lsrs	r3, r3, #3
 80026ba:	b2e0      	uxtb	r0, r4
 80026bc:	e7de      	b.n	800267c <__aeabi_d2f+0x2c>
 80026be:	0021      	movs	r1, r4
 80026c0:	3117      	adds	r1, #23
 80026c2:	db31      	blt.n	8002728 <__aeabi_d2f+0xd8>
 80026c4:	2180      	movs	r1, #128	@ 0x80
 80026c6:	201e      	movs	r0, #30
 80026c8:	0409      	lsls	r1, r1, #16
 80026ca:	4339      	orrs	r1, r7
 80026cc:	1b00      	subs	r0, r0, r4
 80026ce:	281f      	cmp	r0, #31
 80026d0:	dd2d      	ble.n	800272e <__aeabi_d2f+0xde>
 80026d2:	2602      	movs	r6, #2
 80026d4:	4276      	negs	r6, r6
 80026d6:	1b34      	subs	r4, r6, r4
 80026d8:	000e      	movs	r6, r1
 80026da:	40e6      	lsrs	r6, r4
 80026dc:	0034      	movs	r4, r6
 80026de:	2820      	cmp	r0, #32
 80026e0:	d004      	beq.n	80026ec <__aeabi_d2f+0x9c>
 80026e2:	481a      	ldr	r0, [pc, #104]	@ (800274c <__aeabi_d2f+0xfc>)
 80026e4:	4684      	mov	ip, r0
 80026e6:	4463      	add	r3, ip
 80026e8:	4099      	lsls	r1, r3
 80026ea:	430d      	orrs	r5, r1
 80026ec:	002b      	movs	r3, r5
 80026ee:	1e59      	subs	r1, r3, #1
 80026f0:	418b      	sbcs	r3, r1
 80026f2:	4323      	orrs	r3, r4
 80026f4:	0759      	lsls	r1, r3, #29
 80026f6:	d003      	beq.n	8002700 <__aeabi_d2f+0xb0>
 80026f8:	210f      	movs	r1, #15
 80026fa:	4019      	ands	r1, r3
 80026fc:	2904      	cmp	r1, #4
 80026fe:	d10b      	bne.n	8002718 <__aeabi_d2f+0xc8>
 8002700:	019b      	lsls	r3, r3, #6
 8002702:	2000      	movs	r0, #0
 8002704:	0a5b      	lsrs	r3, r3, #9
 8002706:	e7b9      	b.n	800267c <__aeabi_d2f+0x2c>
 8002708:	210f      	movs	r1, #15
 800270a:	4019      	ands	r1, r3
 800270c:	2904      	cmp	r1, #4
 800270e:	d104      	bne.n	800271a <__aeabi_d2f+0xca>
 8002710:	019b      	lsls	r3, r3, #6
 8002712:	0a5b      	lsrs	r3, r3, #9
 8002714:	b2e0      	uxtb	r0, r4
 8002716:	e7b1      	b.n	800267c <__aeabi_d2f+0x2c>
 8002718:	2400      	movs	r4, #0
 800271a:	3304      	adds	r3, #4
 800271c:	0159      	lsls	r1, r3, #5
 800271e:	d5f7      	bpl.n	8002710 <__aeabi_d2f+0xc0>
 8002720:	3401      	adds	r4, #1
 8002722:	2300      	movs	r3, #0
 8002724:	b2e0      	uxtb	r0, r4
 8002726:	e7a9      	b.n	800267c <__aeabi_d2f+0x2c>
 8002728:	2000      	movs	r0, #0
 800272a:	2300      	movs	r3, #0
 800272c:	e7a6      	b.n	800267c <__aeabi_d2f+0x2c>
 800272e:	4c08      	ldr	r4, [pc, #32]	@ (8002750 <__aeabi_d2f+0x100>)
 8002730:	191c      	adds	r4, r3, r4
 8002732:	002b      	movs	r3, r5
 8002734:	40a5      	lsls	r5, r4
 8002736:	40c3      	lsrs	r3, r0
 8002738:	40a1      	lsls	r1, r4
 800273a:	1e68      	subs	r0, r5, #1
 800273c:	4185      	sbcs	r5, r0
 800273e:	4329      	orrs	r1, r5
 8002740:	430b      	orrs	r3, r1
 8002742:	e7d7      	b.n	80026f4 <__aeabi_d2f+0xa4>
 8002744:	000007fe 	.word	0x000007fe
 8002748:	fffffc80 	.word	0xfffffc80
 800274c:	fffffca2 	.word	0xfffffca2
 8002750:	fffffc82 	.word	0xfffffc82

08002754 <__clzsi2>:
 8002754:	211c      	movs	r1, #28
 8002756:	2301      	movs	r3, #1
 8002758:	041b      	lsls	r3, r3, #16
 800275a:	4298      	cmp	r0, r3
 800275c:	d301      	bcc.n	8002762 <__clzsi2+0xe>
 800275e:	0c00      	lsrs	r0, r0, #16
 8002760:	3910      	subs	r1, #16
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	4298      	cmp	r0, r3
 8002766:	d301      	bcc.n	800276c <__clzsi2+0x18>
 8002768:	0a00      	lsrs	r0, r0, #8
 800276a:	3908      	subs	r1, #8
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	4298      	cmp	r0, r3
 8002770:	d301      	bcc.n	8002776 <__clzsi2+0x22>
 8002772:	0900      	lsrs	r0, r0, #4
 8002774:	3904      	subs	r1, #4
 8002776:	a202      	add	r2, pc, #8	@ (adr r2, 8002780 <__clzsi2+0x2c>)
 8002778:	5c10      	ldrb	r0, [r2, r0]
 800277a:	1840      	adds	r0, r0, r1
 800277c:	4770      	bx	lr
 800277e:	46c0      	nop			@ (mov r8, r8)
 8002780:	02020304 	.word	0x02020304
 8002784:	01010101 	.word	0x01010101
	...

08002790 <__clzdi2>:
 8002790:	b510      	push	{r4, lr}
 8002792:	2900      	cmp	r1, #0
 8002794:	d103      	bne.n	800279e <__clzdi2+0xe>
 8002796:	f7ff ffdd 	bl	8002754 <__clzsi2>
 800279a:	3020      	adds	r0, #32
 800279c:	e002      	b.n	80027a4 <__clzdi2+0x14>
 800279e:	0008      	movs	r0, r1
 80027a0:	f7ff ffd8 	bl	8002754 <__clzsi2>
 80027a4:	bd10      	pop	{r4, pc}
 80027a6:	46c0      	nop			@ (mov r8, r8)

080027a8 <example>:
#include <stdio.h>
#include <string.h>
#include "main.h"


void example() {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0


	HAL_Delay(1500);
 80027ac:	4b03      	ldr	r3, [pc, #12]	@ (80027bc <example+0x14>)
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 fcae 	bl	8003110 <HAL_Delay>
}
 80027b4:	46c0      	nop			@ (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	46c0      	nop			@ (mov r8, r8)
 80027bc:	000005dc 	.word	0x000005dc

080027c0 <ReadTemperature>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define Vref 3.3
#define Vstep Vref/4096 // 12 bit ADC
float ReadTemperature(void)
{
 80027c0:	b5b0      	push	{r4, r5, r7, lr}
 80027c2:	b08a      	sub	sp, #40	@ 0x28
 80027c4:	af00      	add	r7, sp, #0
	// NTC thermistor coefficients
	float A = 0.001210656;
 80027c6:	4b6c      	ldr	r3, [pc, #432]	@ (8002978 <ReadTemperature+0x1b8>)
 80027c8:	623b      	str	r3, [r7, #32]
	float B = 0.000226946;
 80027ca:	4b6c      	ldr	r3, [pc, #432]	@ (800297c <ReadTemperature+0x1bc>)
 80027cc:	61fb      	str	r3, [r7, #28]
	float C = 6.7980e-8;
 80027ce:	4b6c      	ldr	r3, [pc, #432]	@ (8002980 <ReadTemperature+0x1c0>)
 80027d0:	61bb      	str	r3, [r7, #24]
	float D = 0;  // adjust for better precision
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
	float temperature;
	uint32_t ADCpa0;
	float Vpa0;
	static unsigned char bADCReady=1;

	if (bADCReady==1) {
 80027d6:	4b6b      	ldr	r3, [pc, #428]	@ (8002984 <ReadTemperature+0x1c4>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d10b      	bne.n	80027f6 <ReadTemperature+0x36>
	// starting ADC
		if (HAL_ADC_Start(&hadc) != HAL_OK) {
 80027de:	4b6a      	ldr	r3, [pc, #424]	@ (8002988 <ReadTemperature+0x1c8>)
 80027e0:	0018      	movs	r0, r3
 80027e2:	f000 fe2d 	bl	8003440 <HAL_ADC_Start>
 80027e6:	1e03      	subs	r3, r0, #0
 80027e8:	d002      	beq.n	80027f0 <ReadTemperature+0x30>
			// Start Conversation Error
			Error_Handler();
 80027ea:	f000 fa7f 	bl	8002cec <Error_Handler>
 80027ee:	e002      	b.n	80027f6 <ReadTemperature+0x36>
		}
		else bADCReady=0; // ADC conversion in progress, you cannot start another ADC conversion
 80027f0:	4b64      	ldr	r3, [pc, #400]	@ (8002984 <ReadTemperature+0x1c4>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
	}

	HAL_ADC_PollForConversion(&hadc, 10);
 80027f6:	4b64      	ldr	r3, [pc, #400]	@ (8002988 <ReadTemperature+0x1c8>)
 80027f8:	210a      	movs	r1, #10
 80027fa:	0018      	movs	r0, r3
 80027fc:	f000 fe74 	bl	80034e8 <HAL_ADC_PollForConversion>

	// Check if the continous conversion of regular channel is finished
	if ((HAL_ADC_GetState(&hadc) & HAL_ADC_STATE_REG_EOC) == HAL_ADC_STATE_REG_EOC) {
 8002800:	4b61      	ldr	r3, [pc, #388]	@ (8002988 <ReadTemperature+0x1c8>)
 8002802:	0018      	movs	r0, r3
 8002804:	f000 ffb8 	bl	8003778 <HAL_ADC_GetState>
 8002808:	0002      	movs	r2, r0
 800280a:	2380      	movs	r3, #128	@ 0x80
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	401a      	ands	r2, r3
 8002810:	2380      	movs	r3, #128	@ 0x80
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	429a      	cmp	r2, r3
 8002816:	d000      	beq.n	800281a <ReadTemperature+0x5a>
 8002818:	e0a8      	b.n	800296c <ReadTemperature+0x1ac>

		//##-6- Get the converted value of regular channel ########################
		ADCpa0 = HAL_ADC_GetValue(&hadc);// Read ADC result
 800281a:	4b5b      	ldr	r3, [pc, #364]	@ (8002988 <ReadTemperature+0x1c8>)
 800281c:	0018      	movs	r0, r3
 800281e:	f000 feff 	bl	8003620 <HAL_ADC_GetValue>
 8002822:	0003      	movs	r3, r0
 8002824:	613b      	str	r3, [r7, #16]
		Vpa0=ADCpa0*Vstep; // calculate voltage
 8002826:	6938      	ldr	r0, [r7, #16]
 8002828:	f7ff fea6 	bl	8002578 <__aeabi_ui2d>
 800282c:	4a57      	ldr	r2, [pc, #348]	@ (800298c <ReadTemperature+0x1cc>)
 800282e:	4b58      	ldr	r3, [pc, #352]	@ (8002990 <ReadTemperature+0x1d0>)
 8002830:	f7fe ff26 	bl	8001680 <__aeabi_dmul>
 8002834:	0002      	movs	r2, r0
 8002836:	000b      	movs	r3, r1
 8002838:	0010      	movs	r0, r2
 800283a:	0019      	movs	r1, r3
 800283c:	2200      	movs	r2, #0
 800283e:	4b55      	ldr	r3, [pc, #340]	@ (8002994 <ReadTemperature+0x1d4>)
 8002840:	f7fe fae4 	bl	8000e0c <__aeabi_ddiv>
 8002844:	0002      	movs	r2, r0
 8002846:	000b      	movs	r3, r1
 8002848:	0010      	movs	r0, r2
 800284a:	0019      	movs	r1, r3
 800284c:	f7ff ff00 	bl	8002650 <__aeabi_d2f>
 8002850:	1c03      	adds	r3, r0, #0
 8002852:	60fb      	str	r3, [r7, #12]

		resistance = 5714.3 * Vpa0;
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f7ff feb3 	bl	80025c0 <__aeabi_f2d>
 800285a:	4a4f      	ldr	r2, [pc, #316]	@ (8002998 <ReadTemperature+0x1d8>)
 800285c:	4b4f      	ldr	r3, [pc, #316]	@ (800299c <ReadTemperature+0x1dc>)
 800285e:	f7fe ff0f 	bl	8001680 <__aeabi_dmul>
 8002862:	0002      	movs	r2, r0
 8002864:	000b      	movs	r3, r1
 8002866:	0010      	movs	r0, r2
 8002868:	0019      	movs	r1, r3
 800286a:	f7ff fef1 	bl	8002650 <__aeabi_d2f>
 800286e:	1c03      	adds	r3, r0, #0
 8002870:	60bb      	str	r3, [r7, #8]
		temperature = 1 / (A + B * log(resistance) + C * pow(log(resistance), 2) + D * pow(log(resistance), 3)) - 273.15;
 8002872:	6a38      	ldr	r0, [r7, #32]
 8002874:	f7ff fea4 	bl	80025c0 <__aeabi_f2d>
 8002878:	0004      	movs	r4, r0
 800287a:	000d      	movs	r5, r1
 800287c:	69f8      	ldr	r0, [r7, #28]
 800287e:	f7ff fe9f 	bl	80025c0 <__aeabi_f2d>
 8002882:	6038      	str	r0, [r7, #0]
 8002884:	6079      	str	r1, [r7, #4]
 8002886:	68b8      	ldr	r0, [r7, #8]
 8002888:	f7ff fe9a 	bl	80025c0 <__aeabi_f2d>
 800288c:	0002      	movs	r2, r0
 800288e:	000b      	movs	r3, r1
 8002890:	0010      	movs	r0, r2
 8002892:	0019      	movs	r1, r3
 8002894:	f005 fe7a 	bl	800858c <log>
 8002898:	0002      	movs	r2, r0
 800289a:	000b      	movs	r3, r1
 800289c:	6838      	ldr	r0, [r7, #0]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	f7fe feee 	bl	8001680 <__aeabi_dmul>
 80028a4:	0002      	movs	r2, r0
 80028a6:	000b      	movs	r3, r1
 80028a8:	0020      	movs	r0, r4
 80028aa:	0029      	movs	r1, r5
 80028ac:	f7fd fee8 	bl	8000680 <__aeabi_dadd>
 80028b0:	0002      	movs	r2, r0
 80028b2:	000b      	movs	r3, r1
 80028b4:	603a      	str	r2, [r7, #0]
 80028b6:	607b      	str	r3, [r7, #4]
 80028b8:	69b8      	ldr	r0, [r7, #24]
 80028ba:	f7ff fe81 	bl	80025c0 <__aeabi_f2d>
 80028be:	0004      	movs	r4, r0
 80028c0:	000d      	movs	r5, r1
 80028c2:	68b8      	ldr	r0, [r7, #8]
 80028c4:	f7ff fe7c 	bl	80025c0 <__aeabi_f2d>
 80028c8:	0002      	movs	r2, r0
 80028ca:	000b      	movs	r3, r1
 80028cc:	0010      	movs	r0, r2
 80028ce:	0019      	movs	r1, r3
 80028d0:	f005 fe5c 	bl	800858c <log>
 80028d4:	2200      	movs	r2, #0
 80028d6:	2380      	movs	r3, #128	@ 0x80
 80028d8:	05db      	lsls	r3, r3, #23
 80028da:	f005 fe8d 	bl	80085f8 <pow>
 80028de:	0002      	movs	r2, r0
 80028e0:	000b      	movs	r3, r1
 80028e2:	0020      	movs	r0, r4
 80028e4:	0029      	movs	r1, r5
 80028e6:	f7fe fecb 	bl	8001680 <__aeabi_dmul>
 80028ea:	0002      	movs	r2, r0
 80028ec:	000b      	movs	r3, r1
 80028ee:	6838      	ldr	r0, [r7, #0]
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	f7fd fec5 	bl	8000680 <__aeabi_dadd>
 80028f6:	0002      	movs	r2, r0
 80028f8:	000b      	movs	r3, r1
 80028fa:	603a      	str	r2, [r7, #0]
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	6978      	ldr	r0, [r7, #20]
 8002900:	f7ff fe5e 	bl	80025c0 <__aeabi_f2d>
 8002904:	0004      	movs	r4, r0
 8002906:	000d      	movs	r5, r1
 8002908:	68b8      	ldr	r0, [r7, #8]
 800290a:	f7ff fe59 	bl	80025c0 <__aeabi_f2d>
 800290e:	0002      	movs	r2, r0
 8002910:	000b      	movs	r3, r1
 8002912:	0010      	movs	r0, r2
 8002914:	0019      	movs	r1, r3
 8002916:	f005 fe39 	bl	800858c <log>
 800291a:	2200      	movs	r2, #0
 800291c:	4b20      	ldr	r3, [pc, #128]	@ (80029a0 <ReadTemperature+0x1e0>)
 800291e:	f005 fe6b 	bl	80085f8 <pow>
 8002922:	0002      	movs	r2, r0
 8002924:	000b      	movs	r3, r1
 8002926:	0020      	movs	r0, r4
 8002928:	0029      	movs	r1, r5
 800292a:	f7fe fea9 	bl	8001680 <__aeabi_dmul>
 800292e:	0002      	movs	r2, r0
 8002930:	000b      	movs	r3, r1
 8002932:	6838      	ldr	r0, [r7, #0]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	f7fd fea3 	bl	8000680 <__aeabi_dadd>
 800293a:	0002      	movs	r2, r0
 800293c:	000b      	movs	r3, r1
 800293e:	2000      	movs	r0, #0
 8002940:	4918      	ldr	r1, [pc, #96]	@ (80029a4 <ReadTemperature+0x1e4>)
 8002942:	f7fe fa63 	bl	8000e0c <__aeabi_ddiv>
 8002946:	0002      	movs	r2, r0
 8002948:	000b      	movs	r3, r1
 800294a:	0010      	movs	r0, r2
 800294c:	0019      	movs	r1, r3
 800294e:	4a0f      	ldr	r2, [pc, #60]	@ (800298c <ReadTemperature+0x1cc>)
 8002950:	4b15      	ldr	r3, [pc, #84]	@ (80029a8 <ReadTemperature+0x1e8>)
 8002952:	f7ff f97b 	bl	8001c4c <__aeabi_dsub>
 8002956:	0002      	movs	r2, r0
 8002958:	000b      	movs	r3, r1
 800295a:	0010      	movs	r0, r2
 800295c:	0019      	movs	r1, r3
 800295e:	f7ff fe77 	bl	8002650 <__aeabi_d2f>
 8002962:	1c03      	adds	r3, r0, #0
 8002964:	627b      	str	r3, [r7, #36]	@ 0x24

		bADCReady=1; // you can start another ADC conversion
 8002966:	4b07      	ldr	r3, [pc, #28]	@ (8002984 <ReadTemperature+0x1c4>)
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
	}

	return temperature;
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

}
 800296e:	1c18      	adds	r0, r3, #0
 8002970:	46bd      	mov	sp, r7
 8002972:	b00a      	add	sp, #40	@ 0x28
 8002974:	bdb0      	pop	{r4, r5, r7, pc}
 8002976:	46c0      	nop			@ (mov r8, r8)
 8002978:	3a9eaee0 	.word	0x3a9eaee0
 800297c:	396df85a 	.word	0x396df85a
 8002980:	3391fc66 	.word	0x3391fc66
 8002984:	20000000 	.word	0x20000000
 8002988:	200001f4 	.word	0x200001f4
 800298c:	66666666 	.word	0x66666666
 8002990:	400a6666 	.word	0x400a6666
 8002994:	40b00000 	.word	0x40b00000
 8002998:	cccccccd 	.word	0xcccccccd
 800299c:	40b6524c 	.word	0x40b6524c
 80029a0:	40080000 	.word	0x40080000
 80029a4:	3ff00000 	.word	0x3ff00000
 80029a8:	40711266 	.word	0x40711266

080029ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029b0:	f000 fb3e 	bl	8003030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029b4:	f000 f828 	bl	8002a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029b8:	f000 f934 	bl	8002c24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80029bc:	f000 f902 	bl	8002bc4 <MX_USART2_UART_Init>
  MX_ADC_Init();
 80029c0:	f000 f88e 	bl	8002ae0 <MX_ADC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(msg, "Temperature: %f \r\n", ReadTemperature());
 80029c4:	f7ff fefc 	bl	80027c0 <ReadTemperature>
 80029c8:	1c03      	adds	r3, r0, #0
 80029ca:	1c18      	adds	r0, r3, #0
 80029cc:	f7ff fdf8 	bl	80025c0 <__aeabi_f2d>
 80029d0:	0002      	movs	r2, r0
 80029d2:	000b      	movs	r3, r1
 80029d4:	4909      	ldr	r1, [pc, #36]	@ (80029fc <main+0x50>)
 80029d6:	480a      	ldr	r0, [pc, #40]	@ (8002a00 <main+0x54>)
 80029d8:	f003 fc0c 	bl	80061f4 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80029dc:	4b08      	ldr	r3, [pc, #32]	@ (8002a00 <main+0x54>)
 80029de:	0018      	movs	r0, r3
 80029e0:	f7fd fb92 	bl	8000108 <strlen>
 80029e4:	0003      	movs	r3, r0
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	2301      	movs	r3, #1
 80029ea:	425b      	negs	r3, r3
 80029ec:	4904      	ldr	r1, [pc, #16]	@ (8002a00 <main+0x54>)
 80029ee:	4805      	ldr	r0, [pc, #20]	@ (8002a04 <main+0x58>)
 80029f0:	f002 f96e 	bl	8004cd0 <HAL_UART_Transmit>
	  example();
 80029f4:	f7ff fed8 	bl	80027a8 <example>
	  sprintf(msg, "Temperature: %f \r\n", ReadTemperature());
 80029f8:	46c0      	nop			@ (mov r8, r8)
 80029fa:	e7e3      	b.n	80029c4 <main+0x18>
 80029fc:	080097a0 	.word	0x080097a0
 8002a00:	200002d8 	.word	0x200002d8
 8002a04:	20000250 	.word	0x20000250

08002a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a08:	b590      	push	{r4, r7, lr}
 8002a0a:	b09f      	sub	sp, #124	@ 0x7c
 8002a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a0e:	2440      	movs	r4, #64	@ 0x40
 8002a10:	193b      	adds	r3, r7, r4
 8002a12:	0018      	movs	r0, r3
 8002a14:	2338      	movs	r3, #56	@ 0x38
 8002a16:	001a      	movs	r2, r3
 8002a18:	2100      	movs	r1, #0
 8002a1a:	f003 fc59 	bl	80062d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a1e:	232c      	movs	r3, #44	@ 0x2c
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	0018      	movs	r0, r3
 8002a24:	2314      	movs	r3, #20
 8002a26:	001a      	movs	r2, r3
 8002a28:	2100      	movs	r1, #0
 8002a2a:	f003 fc51 	bl	80062d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a2e:	1d3b      	adds	r3, r7, #4
 8002a30:	0018      	movs	r0, r3
 8002a32:	2328      	movs	r3, #40	@ 0x28
 8002a34:	001a      	movs	r2, r3
 8002a36:	2100      	movs	r1, #0
 8002a38:	f003 fc4a 	bl	80062d0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a3c:	4b26      	ldr	r3, [pc, #152]	@ (8002ad8 <SystemClock_Config+0xd0>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a26      	ldr	r2, [pc, #152]	@ (8002adc <SystemClock_Config+0xd4>)
 8002a42:	401a      	ands	r2, r3
 8002a44:	4b24      	ldr	r3, [pc, #144]	@ (8002ad8 <SystemClock_Config+0xd0>)
 8002a46:	2180      	movs	r1, #128	@ 0x80
 8002a48:	0109      	lsls	r1, r1, #4
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002a4e:	0021      	movs	r1, r4
 8002a50:	187b      	adds	r3, r7, r1
 8002a52:	2210      	movs	r2, #16
 8002a54:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002a56:	187b      	adds	r3, r7, r1
 8002a58:	2201      	movs	r2, #1
 8002a5a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002a5c:	187b      	adds	r3, r7, r1
 8002a5e:	2200      	movs	r2, #0
 8002a60:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002a62:	187b      	adds	r3, r7, r1
 8002a64:	22a0      	movs	r2, #160	@ 0xa0
 8002a66:	0212      	lsls	r2, r2, #8
 8002a68:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a70:	187b      	adds	r3, r7, r1
 8002a72:	0018      	movs	r0, r3
 8002a74:	f001 f962 	bl	8003d3c <HAL_RCC_OscConfig>
 8002a78:	1e03      	subs	r3, r0, #0
 8002a7a:	d001      	beq.n	8002a80 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002a7c:	f000 f936 	bl	8002cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a80:	212c      	movs	r1, #44	@ 0x2c
 8002a82:	187b      	adds	r3, r7, r1
 8002a84:	220f      	movs	r2, #15
 8002a86:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002a88:	187b      	adds	r3, r7, r1
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a8e:	187b      	adds	r3, r7, r1
 8002a90:	2200      	movs	r2, #0
 8002a92:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a94:	187b      	adds	r3, r7, r1
 8002a96:	2200      	movs	r2, #0
 8002a98:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a9a:	187b      	adds	r3, r7, r1
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f001 fd1d 	bl	80044e4 <HAL_RCC_ClockConfig>
 8002aaa:	1e03      	subs	r3, r0, #0
 8002aac:	d001      	beq.n	8002ab2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002aae:	f000 f91d 	bl	8002cec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ab2:	1d3b      	adds	r3, r7, #4
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	2200      	movs	r2, #0
 8002abc:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002abe:	1d3b      	adds	r3, r7, #4
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f001 ff13 	bl	80048ec <HAL_RCCEx_PeriphCLKConfig>
 8002ac6:	1e03      	subs	r3, r0, #0
 8002ac8:	d001      	beq.n	8002ace <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002aca:	f000 f90f 	bl	8002cec <Error_Handler>
  }
}
 8002ace:	46c0      	nop			@ (mov r8, r8)
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b01f      	add	sp, #124	@ 0x7c
 8002ad4:	bd90      	pop	{r4, r7, pc}
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	40007000 	.word	0x40007000
 8002adc:	ffffe7ff 	.word	0xffffe7ff

08002ae0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ae6:	003b      	movs	r3, r7
 8002ae8:	0018      	movs	r0, r3
 8002aea:	2308      	movs	r3, #8
 8002aec:	001a      	movs	r2, r3
 8002aee:	2100      	movs	r1, #0
 8002af0:	f003 fbee 	bl	80062d0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002af4:	4b30      	ldr	r3, [pc, #192]	@ (8002bb8 <MX_ADC_Init+0xd8>)
 8002af6:	4a31      	ldr	r2, [pc, #196]	@ (8002bbc <MX_ADC_Init+0xdc>)
 8002af8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002afa:	4b2f      	ldr	r3, [pc, #188]	@ (8002bb8 <MX_ADC_Init+0xd8>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002b00:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb8 <MX_ADC_Init+0xd8>)
 8002b02:	22c0      	movs	r2, #192	@ 0xc0
 8002b04:	0612      	lsls	r2, r2, #24
 8002b06:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002b08:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb8 <MX_ADC_Init+0xd8>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb8 <MX_ADC_Init+0xd8>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002b14:	4b28      	ldr	r3, [pc, #160]	@ (8002bb8 <MX_ADC_Init+0xd8>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b1a:	4b27      	ldr	r3, [pc, #156]	@ (8002bb8 <MX_ADC_Init+0xd8>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002b20:	4b25      	ldr	r3, [pc, #148]	@ (8002bb8 <MX_ADC_Init+0xd8>)
 8002b22:	2220      	movs	r2, #32
 8002b24:	2100      	movs	r1, #0
 8002b26:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002b28:	4b23      	ldr	r3, [pc, #140]	@ (8002bb8 <MX_ADC_Init+0xd8>)
 8002b2a:	2221      	movs	r2, #33	@ 0x21
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b30:	4b21      	ldr	r3, [pc, #132]	@ (8002bb8 <MX_ADC_Init+0xd8>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b36:	4b20      	ldr	r3, [pc, #128]	@ (8002bb8 <MX_ADC_Init+0xd8>)
 8002b38:	22c2      	movs	r2, #194	@ 0xc2
 8002b3a:	32ff      	adds	r2, #255	@ 0xff
 8002b3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb8 <MX_ADC_Init+0xd8>)
 8002b40:	222c      	movs	r2, #44	@ 0x2c
 8002b42:	2100      	movs	r1, #0
 8002b44:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b46:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb8 <MX_ADC_Init+0xd8>)
 8002b48:	2204      	movs	r2, #4
 8002b4a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb8 <MX_ADC_Init+0xd8>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002b52:	4b19      	ldr	r3, [pc, #100]	@ (8002bb8 <MX_ADC_Init+0xd8>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8002b58:	4b17      	ldr	r3, [pc, #92]	@ (8002bb8 <MX_ADC_Init+0xd8>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002b5e:	4b16      	ldr	r3, [pc, #88]	@ (8002bb8 <MX_ADC_Init+0xd8>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002b64:	4b14      	ldr	r3, [pc, #80]	@ (8002bb8 <MX_ADC_Init+0xd8>)
 8002b66:	0018      	movs	r0, r3
 8002b68:	f000 faf6 	bl	8003158 <HAL_ADC_Init>
 8002b6c:	1e03      	subs	r3, r0, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002b70:	f000 f8bc 	bl	8002cec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002b74:	003b      	movs	r3, r7
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002b7a:	003b      	movs	r3, r7
 8002b7c:	2280      	movs	r2, #128	@ 0x80
 8002b7e:	0152      	lsls	r2, r2, #5
 8002b80:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b82:	003a      	movs	r2, r7
 8002b84:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb8 <MX_ADC_Init+0xd8>)
 8002b86:	0011      	movs	r1, r2
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 fd55 	bl	8003638 <HAL_ADC_ConfigChannel>
 8002b8e:	1e03      	subs	r3, r0, #0
 8002b90:	d001      	beq.n	8002b96 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8002b92:	f000 f8ab 	bl	8002cec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002b96:	003b      	movs	r3, r7
 8002b98:	4a09      	ldr	r2, [pc, #36]	@ (8002bc0 <MX_ADC_Init+0xe0>)
 8002b9a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b9c:	003a      	movs	r2, r7
 8002b9e:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <MX_ADC_Init+0xd8>)
 8002ba0:	0011      	movs	r1, r2
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f000 fd48 	bl	8003638 <HAL_ADC_ConfigChannel>
 8002ba8:	1e03      	subs	r3, r0, #0
 8002baa:	d001      	beq.n	8002bb0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8002bac:	f000 f89e 	bl	8002cec <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002bb0:	46c0      	nop			@ (mov r8, r8)
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b002      	add	sp, #8
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	200001f4 	.word	0x200001f4
 8002bbc:	40012400 	.word	0x40012400
 8002bc0:	04000002 	.word	0x04000002

08002bc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bc8:	4b14      	ldr	r3, [pc, #80]	@ (8002c1c <MX_USART2_UART_Init+0x58>)
 8002bca:	4a15      	ldr	r2, [pc, #84]	@ (8002c20 <MX_USART2_UART_Init+0x5c>)
 8002bcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bce:	4b13      	ldr	r3, [pc, #76]	@ (8002c1c <MX_USART2_UART_Init+0x58>)
 8002bd0:	22e1      	movs	r2, #225	@ 0xe1
 8002bd2:	0252      	lsls	r2, r2, #9
 8002bd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bd6:	4b11      	ldr	r3, [pc, #68]	@ (8002c1c <MX_USART2_UART_Init+0x58>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8002c1c <MX_USART2_UART_Init+0x58>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002be2:	4b0e      	ldr	r3, [pc, #56]	@ (8002c1c <MX_USART2_UART_Init+0x58>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002be8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c1c <MX_USART2_UART_Init+0x58>)
 8002bea:	220c      	movs	r2, #12
 8002bec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bee:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <MX_USART2_UART_Init+0x58>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bf4:	4b09      	ldr	r3, [pc, #36]	@ (8002c1c <MX_USART2_UART_Init+0x58>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bfa:	4b08      	ldr	r3, [pc, #32]	@ (8002c1c <MX_USART2_UART_Init+0x58>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c00:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <MX_USART2_UART_Init+0x58>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c06:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <MX_USART2_UART_Init+0x58>)
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f002 f80d 	bl	8004c28 <HAL_UART_Init>
 8002c0e:	1e03      	subs	r3, r0, #0
 8002c10:	d001      	beq.n	8002c16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002c12:	f000 f86b 	bl	8002cec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c16:	46c0      	nop			@ (mov r8, r8)
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20000250 	.word	0x20000250
 8002c20:	40004400 	.word	0x40004400

08002c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b089      	sub	sp, #36	@ 0x24
 8002c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2a:	240c      	movs	r4, #12
 8002c2c:	193b      	adds	r3, r7, r4
 8002c2e:	0018      	movs	r0, r3
 8002c30:	2314      	movs	r3, #20
 8002c32:	001a      	movs	r2, r3
 8002c34:	2100      	movs	r1, #0
 8002c36:	f003 fb4b 	bl	80062d0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ce4 <MX_GPIO_Init+0xc0>)
 8002c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c3e:	4b29      	ldr	r3, [pc, #164]	@ (8002ce4 <MX_GPIO_Init+0xc0>)
 8002c40:	2104      	movs	r1, #4
 8002c42:	430a      	orrs	r2, r1
 8002c44:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002c46:	4b27      	ldr	r3, [pc, #156]	@ (8002ce4 <MX_GPIO_Init+0xc0>)
 8002c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c52:	4b24      	ldr	r3, [pc, #144]	@ (8002ce4 <MX_GPIO_Init+0xc0>)
 8002c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c56:	4b23      	ldr	r3, [pc, #140]	@ (8002ce4 <MX_GPIO_Init+0xc0>)
 8002c58:	2180      	movs	r1, #128	@ 0x80
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002c5e:	4b21      	ldr	r3, [pc, #132]	@ (8002ce4 <MX_GPIO_Init+0xc0>)
 8002c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c62:	2280      	movs	r2, #128	@ 0x80
 8002c64:	4013      	ands	r3, r2
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce4 <MX_GPIO_Init+0xc0>)
 8002c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce4 <MX_GPIO_Init+0xc0>)
 8002c70:	2101      	movs	r1, #1
 8002c72:	430a      	orrs	r2, r1
 8002c74:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002c76:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce4 <MX_GPIO_Init+0xc0>)
 8002c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002c82:	23a0      	movs	r3, #160	@ 0xa0
 8002c84:	05db      	lsls	r3, r3, #23
 8002c86:	2200      	movs	r2, #0
 8002c88:	2120      	movs	r1, #32
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f001 f838 	bl	8003d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c90:	193b      	adds	r3, r7, r4
 8002c92:	2280      	movs	r2, #128	@ 0x80
 8002c94:	0192      	lsls	r2, r2, #6
 8002c96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c98:	193b      	adds	r3, r7, r4
 8002c9a:	2284      	movs	r2, #132	@ 0x84
 8002c9c:	0392      	lsls	r2, r2, #14
 8002c9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca0:	193b      	adds	r3, r7, r4
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ca6:	193b      	adds	r3, r7, r4
 8002ca8:	4a0f      	ldr	r2, [pc, #60]	@ (8002ce8 <MX_GPIO_Init+0xc4>)
 8002caa:	0019      	movs	r1, r3
 8002cac:	0010      	movs	r0, r2
 8002cae:	f000 fea9 	bl	8003a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002cb2:	0021      	movs	r1, r4
 8002cb4:	187b      	adds	r3, r7, r1
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cba:	187b      	adds	r3, r7, r1
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc6:	187b      	adds	r3, r7, r1
 8002cc8:	2200      	movs	r2, #0
 8002cca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002ccc:	187a      	adds	r2, r7, r1
 8002cce:	23a0      	movs	r3, #160	@ 0xa0
 8002cd0:	05db      	lsls	r3, r3, #23
 8002cd2:	0011      	movs	r1, r2
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f000 fe95 	bl	8003a04 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002cda:	46c0      	nop			@ (mov r8, r8)
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b009      	add	sp, #36	@ 0x24
 8002ce0:	bd90      	pop	{r4, r7, pc}
 8002ce2:	46c0      	nop			@ (mov r8, r8)
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	50000800 	.word	0x50000800

08002cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cf0:	b672      	cpsid	i
}
 8002cf2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cf4:	46c0      	nop			@ (mov r8, r8)
 8002cf6:	e7fd      	b.n	8002cf4 <Error_Handler+0x8>

08002cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfc:	4b07      	ldr	r3, [pc, #28]	@ (8002d1c <HAL_MspInit+0x24>)
 8002cfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d00:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <HAL_MspInit+0x24>)
 8002d02:	2101      	movs	r1, #1
 8002d04:	430a      	orrs	r2, r1
 8002d06:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d08:	4b04      	ldr	r3, [pc, #16]	@ (8002d1c <HAL_MspInit+0x24>)
 8002d0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d0c:	4b03      	ldr	r3, [pc, #12]	@ (8002d1c <HAL_MspInit+0x24>)
 8002d0e:	2180      	movs	r1, #128	@ 0x80
 8002d10:	0549      	lsls	r1, r1, #21
 8002d12:	430a      	orrs	r2, r1
 8002d14:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40021000 	.word	0x40021000

08002d20 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d20:	b590      	push	{r4, r7, lr}
 8002d22:	b089      	sub	sp, #36	@ 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d28:	240c      	movs	r4, #12
 8002d2a:	193b      	adds	r3, r7, r4
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	2314      	movs	r3, #20
 8002d30:	001a      	movs	r2, r3
 8002d32:	2100      	movs	r1, #0
 8002d34:	f003 facc 	bl	80062d0 <memset>
  if(hadc->Instance==ADC1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a14      	ldr	r2, [pc, #80]	@ (8002d90 <HAL_ADC_MspInit+0x70>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d122      	bne.n	8002d88 <HAL_ADC_MspInit+0x68>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d42:	4b14      	ldr	r3, [pc, #80]	@ (8002d94 <HAL_ADC_MspInit+0x74>)
 8002d44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d46:	4b13      	ldr	r3, [pc, #76]	@ (8002d94 <HAL_ADC_MspInit+0x74>)
 8002d48:	2180      	movs	r1, #128	@ 0x80
 8002d4a:	0089      	lsls	r1, r1, #2
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d50:	4b10      	ldr	r3, [pc, #64]	@ (8002d94 <HAL_ADC_MspInit+0x74>)
 8002d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d54:	4b0f      	ldr	r3, [pc, #60]	@ (8002d94 <HAL_ADC_MspInit+0x74>)
 8002d56:	2101      	movs	r1, #1
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d94 <HAL_ADC_MspInit+0x74>)
 8002d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d60:	2201      	movs	r2, #1
 8002d62:	4013      	ands	r3, r2
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d68:	193b      	adds	r3, r7, r4
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	2203      	movs	r2, #3
 8002d72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	193b      	adds	r3, r7, r4
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7a:	193a      	adds	r2, r7, r4
 8002d7c:	23a0      	movs	r3, #160	@ 0xa0
 8002d7e:	05db      	lsls	r3, r3, #23
 8002d80:	0011      	movs	r1, r2
 8002d82:	0018      	movs	r0, r3
 8002d84:	f000 fe3e 	bl	8003a04 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002d88:	46c0      	nop			@ (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b009      	add	sp, #36	@ 0x24
 8002d8e:	bd90      	pop	{r4, r7, pc}
 8002d90:	40012400 	.word	0x40012400
 8002d94:	40021000 	.word	0x40021000

08002d98 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b089      	sub	sp, #36	@ 0x24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da0:	240c      	movs	r4, #12
 8002da2:	193b      	adds	r3, r7, r4
 8002da4:	0018      	movs	r0, r3
 8002da6:	2314      	movs	r3, #20
 8002da8:	001a      	movs	r2, r3
 8002daa:	2100      	movs	r1, #0
 8002dac:	f003 fa90 	bl	80062d0 <memset>
  if(huart->Instance==USART2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a18      	ldr	r2, [pc, #96]	@ (8002e18 <HAL_UART_MspInit+0x80>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d129      	bne.n	8002e0e <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dba:	4b18      	ldr	r3, [pc, #96]	@ (8002e1c <HAL_UART_MspInit+0x84>)
 8002dbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dbe:	4b17      	ldr	r3, [pc, #92]	@ (8002e1c <HAL_UART_MspInit+0x84>)
 8002dc0:	2180      	movs	r1, #128	@ 0x80
 8002dc2:	0289      	lsls	r1, r1, #10
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc8:	4b14      	ldr	r3, [pc, #80]	@ (8002e1c <HAL_UART_MspInit+0x84>)
 8002dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dcc:	4b13      	ldr	r3, [pc, #76]	@ (8002e1c <HAL_UART_MspInit+0x84>)
 8002dce:	2101      	movs	r1, #1
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002dd4:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <HAL_UART_MspInit+0x84>)
 8002dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4013      	ands	r3, r2
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002de0:	0021      	movs	r1, r4
 8002de2:	187b      	adds	r3, r7, r1
 8002de4:	220c      	movs	r2, #12
 8002de6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de8:	187b      	adds	r3, r7, r1
 8002dea:	2202      	movs	r2, #2
 8002dec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	187b      	adds	r3, r7, r1
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df4:	187b      	adds	r3, r7, r1
 8002df6:	2203      	movs	r2, #3
 8002df8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002dfa:	187b      	adds	r3, r7, r1
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e00:	187a      	adds	r2, r7, r1
 8002e02:	23a0      	movs	r3, #160	@ 0xa0
 8002e04:	05db      	lsls	r3, r3, #23
 8002e06:	0011      	movs	r1, r2
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f000 fdfb 	bl	8003a04 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002e0e:	46c0      	nop			@ (mov r8, r8)
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b009      	add	sp, #36	@ 0x24
 8002e14:	bd90      	pop	{r4, r7, pc}
 8002e16:	46c0      	nop			@ (mov r8, r8)
 8002e18:	40004400 	.word	0x40004400
 8002e1c:	40021000 	.word	0x40021000

08002e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e24:	46c0      	nop			@ (mov r8, r8)
 8002e26:	e7fd      	b.n	8002e24 <NMI_Handler+0x4>

08002e28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e2c:	46c0      	nop			@ (mov r8, r8)
 8002e2e:	e7fd      	b.n	8002e2c <HardFault_Handler+0x4>

08002e30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e34:	46c0      	nop			@ (mov r8, r8)
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e3e:	46c0      	nop			@ (mov r8, r8)
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e48:	f000 f946 	bl	80030d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e4c:	46c0      	nop			@ (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	af00      	add	r7, sp, #0
  return 1;
 8002e56:	2301      	movs	r3, #1
}
 8002e58:	0018      	movs	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <_kill>:

int _kill(int pid, int sig)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b082      	sub	sp, #8
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e68:	f003 fa8c 	bl	8006384 <__errno>
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	2216      	movs	r2, #22
 8002e70:	601a      	str	r2, [r3, #0]
  return -1;
 8002e72:	2301      	movs	r3, #1
 8002e74:	425b      	negs	r3, r3
}
 8002e76:	0018      	movs	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b002      	add	sp, #8
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <_exit>:

void _exit (int status)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e86:	2301      	movs	r3, #1
 8002e88:	425a      	negs	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	0011      	movs	r1, r2
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f7ff ffe5 	bl	8002e5e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e94:	46c0      	nop			@ (mov r8, r8)
 8002e96:	e7fd      	b.n	8002e94 <_exit+0x16>

08002e98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	e00a      	b.n	8002ec0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002eaa:	e000      	b.n	8002eae <_read+0x16>
 8002eac:	bf00      	nop
 8002eae:	0001      	movs	r1, r0
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	60ba      	str	r2, [r7, #8]
 8002eb6:	b2ca      	uxtb	r2, r1
 8002eb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	dbf0      	blt.n	8002eaa <_read+0x12>
  }

  return len;
 8002ec8:	687b      	ldr	r3, [r7, #4]
}
 8002eca:	0018      	movs	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b006      	add	sp, #24
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b086      	sub	sp, #24
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	e009      	b.n	8002ef8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	60ba      	str	r2, [r7, #8]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	0018      	movs	r0, r3
 8002eee:	e000      	b.n	8002ef2 <_write+0x20>
 8002ef0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	dbf1      	blt.n	8002ee4 <_write+0x12>
  }
  return len;
 8002f00:	687b      	ldr	r3, [r7, #4]
}
 8002f02:	0018      	movs	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b006      	add	sp, #24
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <_close>:

int _close(int file)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f12:	2301      	movs	r3, #1
 8002f14:	425b      	negs	r3, r3
}
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b002      	add	sp, #8
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b082      	sub	sp, #8
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2280      	movs	r2, #128	@ 0x80
 8002f2c:	0192      	lsls	r2, r2, #6
 8002f2e:	605a      	str	r2, [r3, #4]
  return 0;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	0018      	movs	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	b002      	add	sp, #8
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <_isatty>:

int _isatty(int file)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f42:	2301      	movs	r3, #1
}
 8002f44:	0018      	movs	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b002      	add	sp, #8
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b004      	add	sp, #16
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f6c:	4a14      	ldr	r2, [pc, #80]	@ (8002fc0 <_sbrk+0x5c>)
 8002f6e:	4b15      	ldr	r3, [pc, #84]	@ (8002fc4 <_sbrk+0x60>)
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f78:	4b13      	ldr	r3, [pc, #76]	@ (8002fc8 <_sbrk+0x64>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d102      	bne.n	8002f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f80:	4b11      	ldr	r3, [pc, #68]	@ (8002fc8 <_sbrk+0x64>)
 8002f82:	4a12      	ldr	r2, [pc, #72]	@ (8002fcc <_sbrk+0x68>)
 8002f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f86:	4b10      	ldr	r3, [pc, #64]	@ (8002fc8 <_sbrk+0x64>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	18d3      	adds	r3, r2, r3
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d207      	bcs.n	8002fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f94:	f003 f9f6 	bl	8006384 <__errno>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	220c      	movs	r2, #12
 8002f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	425b      	negs	r3, r3
 8002fa2:	e009      	b.n	8002fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fa4:	4b08      	ldr	r3, [pc, #32]	@ (8002fc8 <_sbrk+0x64>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002faa:	4b07      	ldr	r3, [pc, #28]	@ (8002fc8 <_sbrk+0x64>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	18d2      	adds	r2, r2, r3
 8002fb2:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <_sbrk+0x64>)
 8002fb4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b006      	add	sp, #24
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20005000 	.word	0x20005000
 8002fc4:	00000400 	.word	0x00000400
 8002fc8:	200002ec 	.word	0x200002ec
 8002fcc:	20000440 	.word	0x20000440

08002fd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fd4:	46c0      	nop			@ (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002fdc:	480d      	ldr	r0, [pc, #52]	@ (8003014 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002fde:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fe0:	f7ff fff6 	bl	8002fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fe4:	480c      	ldr	r0, [pc, #48]	@ (8003018 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fe6:	490d      	ldr	r1, [pc, #52]	@ (800301c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8003020 <LoopForever+0xe>)
  movs r3, #0
 8002fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fec:	e002      	b.n	8002ff4 <LoopCopyDataInit>

08002fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ff2:	3304      	adds	r3, #4

08002ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ff8:	d3f9      	bcc.n	8002fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8003024 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ffc:	4c0a      	ldr	r4, [pc, #40]	@ (8003028 <LoopForever+0x16>)
  movs r3, #0
 8002ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003000:	e001      	b.n	8003006 <LoopFillZerobss>

08003002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003004:	3204      	adds	r2, #4

08003006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003008:	d3fb      	bcc.n	8003002 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800300a:	f003 f9c1 	bl	8006390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800300e:	f7ff fccd 	bl	80029ac <main>

08003012 <LoopForever>:

LoopForever:
    b LoopForever
 8003012:	e7fe      	b.n	8003012 <LoopForever>
   ldr   r0, =_estack
 8003014:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800301c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003020:	08009c28 	.word	0x08009c28
  ldr r2, =_sbss
 8003024:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003028:	20000440 	.word	0x20000440

0800302c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800302c:	e7fe      	b.n	800302c <ADC1_COMP_IRQHandler>
	...

08003030 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003036:	1dfb      	adds	r3, r7, #7
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800303c:	4b0b      	ldr	r3, [pc, #44]	@ (800306c <HAL_Init+0x3c>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b0a      	ldr	r3, [pc, #40]	@ (800306c <HAL_Init+0x3c>)
 8003042:	2140      	movs	r1, #64	@ 0x40
 8003044:	430a      	orrs	r2, r1
 8003046:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003048:	2000      	movs	r0, #0
 800304a:	f000 f811 	bl	8003070 <HAL_InitTick>
 800304e:	1e03      	subs	r3, r0, #0
 8003050:	d003      	beq.n	800305a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003052:	1dfb      	adds	r3, r7, #7
 8003054:	2201      	movs	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]
 8003058:	e001      	b.n	800305e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800305a:	f7ff fe4d 	bl	8002cf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800305e:	1dfb      	adds	r3, r7, #7
 8003060:	781b      	ldrb	r3, [r3, #0]
}
 8003062:	0018      	movs	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	b002      	add	sp, #8
 8003068:	bd80      	pop	{r7, pc}
 800306a:	46c0      	nop			@ (mov r8, r8)
 800306c:	40022000 	.word	0x40022000

08003070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003070:	b590      	push	{r4, r7, lr}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003078:	4b14      	ldr	r3, [pc, #80]	@ (80030cc <HAL_InitTick+0x5c>)
 800307a:	681c      	ldr	r4, [r3, #0]
 800307c:	4b14      	ldr	r3, [pc, #80]	@ (80030d0 <HAL_InitTick+0x60>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	0019      	movs	r1, r3
 8003082:	23fa      	movs	r3, #250	@ 0xfa
 8003084:	0098      	lsls	r0, r3, #2
 8003086:	f7fd f85b 	bl	8000140 <__udivsi3>
 800308a:	0003      	movs	r3, r0
 800308c:	0019      	movs	r1, r3
 800308e:	0020      	movs	r0, r4
 8003090:	f7fd f856 	bl	8000140 <__udivsi3>
 8003094:	0003      	movs	r3, r0
 8003096:	0018      	movs	r0, r3
 8003098:	f000 fca7 	bl	80039ea <HAL_SYSTICK_Config>
 800309c:	1e03      	subs	r3, r0, #0
 800309e:	d001      	beq.n	80030a4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e00f      	b.n	80030c4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d80b      	bhi.n	80030c2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	2301      	movs	r3, #1
 80030ae:	425b      	negs	r3, r3
 80030b0:	2200      	movs	r2, #0
 80030b2:	0018      	movs	r0, r3
 80030b4:	f000 fc84 	bl	80039c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030b8:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <HAL_InitTick+0x64>)
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	e000      	b.n	80030c4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
}
 80030c4:	0018      	movs	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b003      	add	sp, #12
 80030ca:	bd90      	pop	{r4, r7, pc}
 80030cc:	20000004 	.word	0x20000004
 80030d0:	2000000c 	.word	0x2000000c
 80030d4:	20000008 	.word	0x20000008

080030d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030dc:	4b05      	ldr	r3, [pc, #20]	@ (80030f4 <HAL_IncTick+0x1c>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	001a      	movs	r2, r3
 80030e2:	4b05      	ldr	r3, [pc, #20]	@ (80030f8 <HAL_IncTick+0x20>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	18d2      	adds	r2, r2, r3
 80030e8:	4b03      	ldr	r3, [pc, #12]	@ (80030f8 <HAL_IncTick+0x20>)
 80030ea:	601a      	str	r2, [r3, #0]
}
 80030ec:	46c0      	nop			@ (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	46c0      	nop			@ (mov r8, r8)
 80030f4:	2000000c 	.word	0x2000000c
 80030f8:	200002f0 	.word	0x200002f0

080030fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003100:	4b02      	ldr	r3, [pc, #8]	@ (800310c <HAL_GetTick+0x10>)
 8003102:	681b      	ldr	r3, [r3, #0]
}
 8003104:	0018      	movs	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	46c0      	nop			@ (mov r8, r8)
 800310c:	200002f0 	.word	0x200002f0

08003110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003118:	f7ff fff0 	bl	80030fc <HAL_GetTick>
 800311c:	0003      	movs	r3, r0
 800311e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3301      	adds	r3, #1
 8003128:	d005      	beq.n	8003136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800312a:	4b0a      	ldr	r3, [pc, #40]	@ (8003154 <HAL_Delay+0x44>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	001a      	movs	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	189b      	adds	r3, r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003136:	46c0      	nop			@ (mov r8, r8)
 8003138:	f7ff ffe0 	bl	80030fc <HAL_GetTick>
 800313c:	0002      	movs	r2, r0
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	429a      	cmp	r2, r3
 8003146:	d8f7      	bhi.n	8003138 <HAL_Delay+0x28>
  {
  }
}
 8003148:	46c0      	nop			@ (mov r8, r8)
 800314a:	46c0      	nop			@ (mov r8, r8)
 800314c:	46bd      	mov	sp, r7
 800314e:	b004      	add	sp, #16
 8003150:	bd80      	pop	{r7, pc}
 8003152:	46c0      	nop			@ (mov r8, r8)
 8003154:	2000000c 	.word	0x2000000c

08003158 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e159      	b.n	800341e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10a      	bne.n	8003188 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2250      	movs	r2, #80	@ 0x50
 800317c:	2100      	movs	r1, #0
 800317e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	0018      	movs	r0, r3
 8003184:	f7ff fdcc 	bl	8002d20 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800318c:	2210      	movs	r2, #16
 800318e:	4013      	ands	r3, r2
 8003190:	2b10      	cmp	r3, #16
 8003192:	d005      	beq.n	80031a0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2204      	movs	r2, #4
 800319c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800319e:	d00b      	beq.n	80031b8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a4:	2210      	movs	r2, #16
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2250      	movs	r2, #80	@ 0x50
 80031b0:	2100      	movs	r1, #0
 80031b2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e132      	b.n	800341e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031bc:	4a9a      	ldr	r2, [pc, #616]	@ (8003428 <HAL_ADC_Init+0x2d0>)
 80031be:	4013      	ands	r3, r2
 80031c0:	2202      	movs	r2, #2
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2203      	movs	r2, #3
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d108      	bne.n	80031e8 <HAL_ADC_Init+0x90>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2201      	movs	r2, #1
 80031de:	4013      	ands	r3, r2
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_ADC_Init+0x90>
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <HAL_ADC_Init+0x92>
 80031e8:	2300      	movs	r3, #0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d149      	bne.n	8003282 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	23c0      	movs	r3, #192	@ 0xc0
 80031f4:	061b      	lsls	r3, r3, #24
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d00b      	beq.n	8003212 <HAL_ADC_Init+0xba>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	2380      	movs	r3, #128	@ 0x80
 8003200:	05db      	lsls	r3, r3, #23
 8003202:	429a      	cmp	r2, r3
 8003204:	d005      	beq.n	8003212 <HAL_ADC_Init+0xba>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	2380      	movs	r3, #128	@ 0x80
 800320c:	061b      	lsls	r3, r3, #24
 800320e:	429a      	cmp	r2, r3
 8003210:	d111      	bne.n	8003236 <HAL_ADC_Init+0xde>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	0092      	lsls	r2, r2, #2
 800321e:	0892      	lsrs	r2, r2, #2
 8003220:	611a      	str	r2, [r3, #16]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6919      	ldr	r1, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	611a      	str	r2, [r3, #16]
 8003234:	e014      	b.n	8003260 <HAL_ADC_Init+0x108>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	0092      	lsls	r2, r2, #2
 8003242:	0892      	lsrs	r2, r2, #2
 8003244:	611a      	str	r2, [r3, #16]
 8003246:	4b79      	ldr	r3, [pc, #484]	@ (800342c <HAL_ADC_Init+0x2d4>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4b78      	ldr	r3, [pc, #480]	@ (800342c <HAL_ADC_Init+0x2d4>)
 800324c:	4978      	ldr	r1, [pc, #480]	@ (8003430 <HAL_ADC_Init+0x2d8>)
 800324e:	400a      	ands	r2, r1
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	4b76      	ldr	r3, [pc, #472]	@ (800342c <HAL_ADC_Init+0x2d4>)
 8003254:	6819      	ldr	r1, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	4b74      	ldr	r3, [pc, #464]	@ (800342c <HAL_ADC_Init+0x2d4>)
 800325c:	430a      	orrs	r2, r1
 800325e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2118      	movs	r1, #24
 800326c:	438a      	bics	r2, r1
 800326e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68d9      	ldr	r1, [r3, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003282:	4b6a      	ldr	r3, [pc, #424]	@ (800342c <HAL_ADC_Init+0x2d4>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4b69      	ldr	r3, [pc, #420]	@ (800342c <HAL_ADC_Init+0x2d4>)
 8003288:	496a      	ldr	r1, [pc, #424]	@ (8003434 <HAL_ADC_Init+0x2dc>)
 800328a:	400a      	ands	r2, r1
 800328c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800328e:	4b67      	ldr	r3, [pc, #412]	@ (800342c <HAL_ADC_Init+0x2d4>)
 8003290:	6819      	ldr	r1, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003296:	065a      	lsls	r2, r3, #25
 8003298:	4b64      	ldr	r3, [pc, #400]	@ (800342c <HAL_ADC_Init+0x2d4>)
 800329a:	430a      	orrs	r2, r1
 800329c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	2380      	movs	r3, #128	@ 0x80
 80032a6:	055b      	lsls	r3, r3, #21
 80032a8:	4013      	ands	r3, r2
 80032aa:	d108      	bne.n	80032be <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2180      	movs	r1, #128	@ 0x80
 80032b8:	0549      	lsls	r1, r1, #21
 80032ba:	430a      	orrs	r2, r1
 80032bc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	495b      	ldr	r1, [pc, #364]	@ (8003438 <HAL_ADC_Init+0x2e0>)
 80032ca:	400a      	ands	r2, r1
 80032cc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68d9      	ldr	r1, [r3, #12]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d101      	bne.n	80032e4 <HAL_ADC_Init+0x18c>
 80032e0:	2304      	movs	r3, #4
 80032e2:	e000      	b.n	80032e6 <HAL_ADC_Init+0x18e>
 80032e4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80032e6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2020      	movs	r0, #32
 80032ec:	5c1b      	ldrb	r3, [r3, r0]
 80032ee:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80032f0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	202c      	movs	r0, #44	@ 0x2c
 80032f6:	5c1b      	ldrb	r3, [r3, r0]
 80032f8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80032fa:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003300:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003308:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003310:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800331e:	23c2      	movs	r3, #194	@ 0xc2
 8003320:	33ff      	adds	r3, #255	@ 0xff
 8003322:	429a      	cmp	r2, r3
 8003324:	d00b      	beq.n	800333e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68d9      	ldr	r1, [r3, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2221      	movs	r2, #33	@ 0x21
 8003342:	5c9b      	ldrb	r3, [r3, r2]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d11a      	bne.n	800337e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2220      	movs	r2, #32
 800334c:	5c9b      	ldrb	r3, [r3, r2]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2180      	movs	r1, #128	@ 0x80
 800335e:	0249      	lsls	r1, r1, #9
 8003360:	430a      	orrs	r2, r1
 8003362:	60da      	str	r2, [r3, #12]
 8003364:	e00b      	b.n	800337e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336a:	2220      	movs	r2, #32
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003376:	2201      	movs	r2, #1
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003382:	2b01      	cmp	r3, #1
 8003384:	d11f      	bne.n	80033c6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	492a      	ldr	r1, [pc, #168]	@ (800343c <HAL_ADC_Init+0x2e4>)
 8003392:	400a      	ands	r2, r1
 8003394:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6919      	ldr	r1, [r3, #16]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80033a4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80033aa:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2101      	movs	r1, #1
 80033c0:	430a      	orrs	r2, r1
 80033c2:	611a      	str	r2, [r3, #16]
 80033c4:	e00e      	b.n	80033e4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	2201      	movs	r2, #1
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d107      	bne.n	80033e4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2101      	movs	r1, #1
 80033e0:	438a      	bics	r2, r1
 80033e2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2107      	movs	r1, #7
 80033f0:	438a      	bics	r2, r1
 80033f2:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6959      	ldr	r1, [r3, #20]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003410:	2203      	movs	r2, #3
 8003412:	4393      	bics	r3, r2
 8003414:	2201      	movs	r2, #1
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	0018      	movs	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	b002      	add	sp, #8
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	fffffefd 	.word	0xfffffefd
 800342c:	40012708 	.word	0x40012708
 8003430:	ffc3ffff 	.word	0xffc3ffff
 8003434:	fdffffff 	.word	0xfdffffff
 8003438:	fffe0219 	.word	0xfffe0219
 800343c:	fffffc03 	.word	0xfffffc03

08003440 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003440:	b590      	push	{r4, r7, lr}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003448:	230f      	movs	r3, #15
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2204      	movs	r2, #4
 8003458:	4013      	ands	r3, r2
 800345a:	d138      	bne.n	80034ce <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2250      	movs	r2, #80	@ 0x50
 8003460:	5c9b      	ldrb	r3, [r3, r2]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_ADC_Start+0x2a>
 8003466:	2302      	movs	r3, #2
 8003468:	e038      	b.n	80034dc <HAL_ADC_Start+0x9c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2250      	movs	r2, #80	@ 0x50
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d007      	beq.n	800348a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800347a:	230f      	movs	r3, #15
 800347c:	18fc      	adds	r4, r7, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	0018      	movs	r0, r3
 8003482:	f000 f983 	bl	800378c <ADC_Enable>
 8003486:	0003      	movs	r3, r0
 8003488:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800348a:	230f      	movs	r3, #15
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d120      	bne.n	80034d6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003498:	4a12      	ldr	r2, [pc, #72]	@ (80034e4 <HAL_ADC_Start+0xa4>)
 800349a:	4013      	ands	r3, r2
 800349c:	2280      	movs	r2, #128	@ 0x80
 800349e:	0052      	lsls	r2, r2, #1
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2250      	movs	r2, #80	@ 0x50
 80034b0:	2100      	movs	r1, #0
 80034b2:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	221c      	movs	r2, #28
 80034ba:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2104      	movs	r1, #4
 80034c8:	430a      	orrs	r2, r1
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	e003      	b.n	80034d6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034ce:	230f      	movs	r3, #15
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	2202      	movs	r2, #2
 80034d4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80034d6:	230f      	movs	r3, #15
 80034d8:	18fb      	adds	r3, r7, r3
 80034da:	781b      	ldrb	r3, [r3, #0]
}
 80034dc:	0018      	movs	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	b005      	add	sp, #20
 80034e2:	bd90      	pop	{r4, r7, pc}
 80034e4:	fffff0fe 	.word	0xfffff0fe

080034e8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d102      	bne.n	8003508 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003502:	2308      	movs	r3, #8
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	e014      	b.n	8003532 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	2201      	movs	r2, #1
 8003510:	4013      	ands	r3, r2
 8003512:	2b01      	cmp	r3, #1
 8003514:	d10b      	bne.n	800352e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800351a:	2220      	movs	r2, #32
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2250      	movs	r2, #80	@ 0x50
 8003526:	2100      	movs	r1, #0
 8003528:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e072      	b.n	8003614 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800352e:	230c      	movs	r3, #12
 8003530:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003532:	f7ff fde3 	bl	80030fc <HAL_GetTick>
 8003536:	0003      	movs	r3, r0
 8003538:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800353a:	e01f      	b.n	800357c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	3301      	adds	r3, #1
 8003540:	d01c      	beq.n	800357c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d007      	beq.n	8003558 <HAL_ADC_PollForConversion+0x70>
 8003548:	f7ff fdd8 	bl	80030fc <HAL_GetTick>
 800354c:	0002      	movs	r2, r0
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d211      	bcs.n	800357c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4013      	ands	r3, r2
 8003562:	d10b      	bne.n	800357c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003568:	2204      	movs	r2, #4
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2250      	movs	r2, #80	@ 0x50
 8003574:	2100      	movs	r1, #0
 8003576:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e04b      	b.n	8003614 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4013      	ands	r3, r2
 8003586:	d0d9      	beq.n	800353c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800358c:	2280      	movs	r2, #128	@ 0x80
 800358e:	0092      	lsls	r2, r2, #2
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	23c0      	movs	r3, #192	@ 0xc0
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	4013      	ands	r3, r2
 80035a2:	d12e      	bne.n	8003602 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2220      	movs	r2, #32
 80035a8:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d129      	bne.n	8003602 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2208      	movs	r2, #8
 80035b6:	4013      	ands	r3, r2
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d122      	bne.n	8003602 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2204      	movs	r2, #4
 80035c4:	4013      	ands	r3, r2
 80035c6:	d110      	bne.n	80035ea <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	210c      	movs	r1, #12
 80035d4:	438a      	bics	r2, r1
 80035d6:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035dc:	4a0f      	ldr	r2, [pc, #60]	@ (800361c <HAL_ADC_PollForConversion+0x134>)
 80035de:	4013      	ands	r3, r2
 80035e0:	2201      	movs	r2, #1
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80035e8:	e00b      	b.n	8003602 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ee:	2220      	movs	r2, #32
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fa:	2201      	movs	r2, #1
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d103      	bne.n	8003612 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	220c      	movs	r2, #12
 8003610:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	0018      	movs	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	b004      	add	sp, #16
 800361a:	bd80      	pop	{r7, pc}
 800361c:	fffffefe 	.word	0xfffffefe

08003620 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800362e:	0018      	movs	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	b002      	add	sp, #8
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2250      	movs	r2, #80	@ 0x50
 8003646:	5c9b      	ldrb	r3, [r3, r2]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x18>
 800364c:	2302      	movs	r3, #2
 800364e:	e085      	b.n	800375c <HAL_ADC_ConfigChannel+0x124>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2250      	movs	r2, #80	@ 0x50
 8003654:	2101      	movs	r1, #1
 8003656:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2204      	movs	r2, #4
 8003660:	4013      	ands	r3, r2
 8003662:	d00b      	beq.n	800367c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003668:	2220      	movs	r2, #32
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2250      	movs	r2, #80	@ 0x50
 8003674:	2100      	movs	r1, #0
 8003676:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e06f      	b.n	800375c <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	4a38      	ldr	r2, [pc, #224]	@ (8003764 <HAL_ADC_ConfigChannel+0x12c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d035      	beq.n	80036f2 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	035b      	lsls	r3, r3, #13
 8003692:	0b5a      	lsrs	r2, r3, #13
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	2380      	movs	r3, #128	@ 0x80
 80036a2:	02db      	lsls	r3, r3, #11
 80036a4:	4013      	ands	r3, r2
 80036a6:	d009      	beq.n	80036bc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80036a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003768 <HAL_ADC_ConfigChannel+0x130>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003768 <HAL_ADC_ConfigChannel+0x130>)
 80036ae:	2180      	movs	r1, #128	@ 0x80
 80036b0:	0409      	lsls	r1, r1, #16
 80036b2:	430a      	orrs	r2, r1
 80036b4:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80036b6:	200a      	movs	r0, #10
 80036b8:	f000 f8d0 	bl	800385c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	2380      	movs	r3, #128	@ 0x80
 80036c2:	029b      	lsls	r3, r3, #10
 80036c4:	4013      	ands	r3, r2
 80036c6:	d006      	beq.n	80036d6 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80036c8:	4b27      	ldr	r3, [pc, #156]	@ (8003768 <HAL_ADC_ConfigChannel+0x130>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b26      	ldr	r3, [pc, #152]	@ (8003768 <HAL_ADC_ConfigChannel+0x130>)
 80036ce:	2180      	movs	r1, #128	@ 0x80
 80036d0:	03c9      	lsls	r1, r1, #15
 80036d2:	430a      	orrs	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	2380      	movs	r3, #128	@ 0x80
 80036dc:	025b      	lsls	r3, r3, #9
 80036de:	4013      	ands	r3, r2
 80036e0:	d037      	beq.n	8003752 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 80036e2:	4b21      	ldr	r3, [pc, #132]	@ (8003768 <HAL_ADC_ConfigChannel+0x130>)
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	4b20      	ldr	r3, [pc, #128]	@ (8003768 <HAL_ADC_ConfigChannel+0x130>)
 80036e8:	2180      	movs	r1, #128	@ 0x80
 80036ea:	0449      	lsls	r1, r1, #17
 80036ec:	430a      	orrs	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	e02f      	b.n	8003752 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	035b      	lsls	r3, r3, #13
 80036fe:	0b5b      	lsrs	r3, r3, #13
 8003700:	43d9      	mvns	r1, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	400a      	ands	r2, r1
 8003708:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	2380      	movs	r3, #128	@ 0x80
 8003710:	02db      	lsls	r3, r3, #11
 8003712:	4013      	ands	r3, r2
 8003714:	d005      	beq.n	8003722 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8003716:	4b14      	ldr	r3, [pc, #80]	@ (8003768 <HAL_ADC_ConfigChannel+0x130>)
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	4b13      	ldr	r3, [pc, #76]	@ (8003768 <HAL_ADC_ConfigChannel+0x130>)
 800371c:	4913      	ldr	r1, [pc, #76]	@ (800376c <HAL_ADC_ConfigChannel+0x134>)
 800371e:	400a      	ands	r2, r1
 8003720:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	2380      	movs	r3, #128	@ 0x80
 8003728:	029b      	lsls	r3, r3, #10
 800372a:	4013      	ands	r3, r2
 800372c:	d005      	beq.n	800373a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800372e:	4b0e      	ldr	r3, [pc, #56]	@ (8003768 <HAL_ADC_ConfigChannel+0x130>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	4b0d      	ldr	r3, [pc, #52]	@ (8003768 <HAL_ADC_ConfigChannel+0x130>)
 8003734:	490e      	ldr	r1, [pc, #56]	@ (8003770 <HAL_ADC_ConfigChannel+0x138>)
 8003736:	400a      	ands	r2, r1
 8003738:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	2380      	movs	r3, #128	@ 0x80
 8003740:	025b      	lsls	r3, r3, #9
 8003742:	4013      	ands	r3, r2
 8003744:	d005      	beq.n	8003752 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8003746:	4b08      	ldr	r3, [pc, #32]	@ (8003768 <HAL_ADC_ConfigChannel+0x130>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	4b07      	ldr	r3, [pc, #28]	@ (8003768 <HAL_ADC_ConfigChannel+0x130>)
 800374c:	4909      	ldr	r1, [pc, #36]	@ (8003774 <HAL_ADC_ConfigChannel+0x13c>)
 800374e:	400a      	ands	r2, r1
 8003750:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2250      	movs	r2, #80	@ 0x50
 8003756:	2100      	movs	r1, #0
 8003758:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	b002      	add	sp, #8
 8003762:	bd80      	pop	{r7, pc}
 8003764:	00001001 	.word	0x00001001
 8003768:	40012708 	.word	0x40012708
 800376c:	ff7fffff 	.word	0xff7fffff
 8003770:	ffbfffff 	.word	0xffbfffff
 8003774:	feffffff 	.word	0xfeffffff

08003778 <HAL_ADC_GetState>:
  *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
  * @param  hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003784:	0018      	movs	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	b002      	add	sp, #8
 800378a:	bd80      	pop	{r7, pc}

0800378c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2203      	movs	r2, #3
 80037a0:	4013      	ands	r3, r2
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d108      	bne.n	80037b8 <ADC_Enable+0x2c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2201      	movs	r2, #1
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <ADC_Enable+0x2c>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <ADC_Enable+0x2e>
 80037b8:	2300      	movs	r3, #0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d146      	bne.n	800384c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	4a24      	ldr	r2, [pc, #144]	@ (8003858 <ADC_Enable+0xcc>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	d00d      	beq.n	80037e6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ce:	2210      	movs	r2, #16
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037da:	2201      	movs	r2, #1
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e033      	b.n	800384e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2101      	movs	r1, #1
 80037f2:	430a      	orrs	r2, r1
 80037f4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80037f6:	2001      	movs	r0, #1
 80037f8:	f000 f830 	bl	800385c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80037fc:	f7ff fc7e 	bl	80030fc <HAL_GetTick>
 8003800:	0003      	movs	r3, r0
 8003802:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003804:	e01b      	b.n	800383e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003806:	f7ff fc79 	bl	80030fc <HAL_GetTick>
 800380a:	0002      	movs	r2, r0
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b0a      	cmp	r3, #10
 8003812:	d914      	bls.n	800383e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2201      	movs	r2, #1
 800381c:	4013      	ands	r3, r2
 800381e:	2b01      	cmp	r3, #1
 8003820:	d00d      	beq.n	800383e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003826:	2210      	movs	r2, #16
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003832:	2201      	movs	r2, #1
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e007      	b.n	800384e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2201      	movs	r2, #1
 8003846:	4013      	ands	r3, r2
 8003848:	2b01      	cmp	r3, #1
 800384a:	d1dc      	bne.n	8003806 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b004      	add	sp, #16
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	80000017 	.word	0x80000017

0800385c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003864:	4b0b      	ldr	r3, [pc, #44]	@ (8003894 <ADC_DelayMicroSecond+0x38>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	490b      	ldr	r1, [pc, #44]	@ (8003898 <ADC_DelayMicroSecond+0x3c>)
 800386a:	0018      	movs	r0, r3
 800386c:	f7fc fc68 	bl	8000140 <__udivsi3>
 8003870:	0003      	movs	r3, r0
 8003872:	001a      	movs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4353      	muls	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800387a:	e002      	b.n	8003882 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3b01      	subs	r3, #1
 8003880:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1f9      	bne.n	800387c <ADC_DelayMicroSecond+0x20>
  }
}
 8003888:	46c0      	nop			@ (mov r8, r8)
 800388a:	46c0      	nop			@ (mov r8, r8)
 800388c:	46bd      	mov	sp, r7
 800388e:	b004      	add	sp, #16
 8003890:	bd80      	pop	{r7, pc}
 8003892:	46c0      	nop			@ (mov r8, r8)
 8003894:	20000004 	.word	0x20000004
 8003898:	000f4240 	.word	0x000f4240

0800389c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800389c:	b590      	push	{r4, r7, lr}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	0002      	movs	r2, r0
 80038a4:	6039      	str	r1, [r7, #0]
 80038a6:	1dfb      	adds	r3, r7, #7
 80038a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038aa:	1dfb      	adds	r3, r7, #7
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80038b0:	d828      	bhi.n	8003904 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038b2:	4a2f      	ldr	r2, [pc, #188]	@ (8003970 <__NVIC_SetPriority+0xd4>)
 80038b4:	1dfb      	adds	r3, r7, #7
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	b25b      	sxtb	r3, r3
 80038ba:	089b      	lsrs	r3, r3, #2
 80038bc:	33c0      	adds	r3, #192	@ 0xc0
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	589b      	ldr	r3, [r3, r2]
 80038c2:	1dfa      	adds	r2, r7, #7
 80038c4:	7812      	ldrb	r2, [r2, #0]
 80038c6:	0011      	movs	r1, r2
 80038c8:	2203      	movs	r2, #3
 80038ca:	400a      	ands	r2, r1
 80038cc:	00d2      	lsls	r2, r2, #3
 80038ce:	21ff      	movs	r1, #255	@ 0xff
 80038d0:	4091      	lsls	r1, r2
 80038d2:	000a      	movs	r2, r1
 80038d4:	43d2      	mvns	r2, r2
 80038d6:	401a      	ands	r2, r3
 80038d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	019b      	lsls	r3, r3, #6
 80038de:	22ff      	movs	r2, #255	@ 0xff
 80038e0:	401a      	ands	r2, r3
 80038e2:	1dfb      	adds	r3, r7, #7
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	0018      	movs	r0, r3
 80038e8:	2303      	movs	r3, #3
 80038ea:	4003      	ands	r3, r0
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038f0:	481f      	ldr	r0, [pc, #124]	@ (8003970 <__NVIC_SetPriority+0xd4>)
 80038f2:	1dfb      	adds	r3, r7, #7
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	b25b      	sxtb	r3, r3
 80038f8:	089b      	lsrs	r3, r3, #2
 80038fa:	430a      	orrs	r2, r1
 80038fc:	33c0      	adds	r3, #192	@ 0xc0
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003902:	e031      	b.n	8003968 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003904:	4a1b      	ldr	r2, [pc, #108]	@ (8003974 <__NVIC_SetPriority+0xd8>)
 8003906:	1dfb      	adds	r3, r7, #7
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	0019      	movs	r1, r3
 800390c:	230f      	movs	r3, #15
 800390e:	400b      	ands	r3, r1
 8003910:	3b08      	subs	r3, #8
 8003912:	089b      	lsrs	r3, r3, #2
 8003914:	3306      	adds	r3, #6
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	18d3      	adds	r3, r2, r3
 800391a:	3304      	adds	r3, #4
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	1dfa      	adds	r2, r7, #7
 8003920:	7812      	ldrb	r2, [r2, #0]
 8003922:	0011      	movs	r1, r2
 8003924:	2203      	movs	r2, #3
 8003926:	400a      	ands	r2, r1
 8003928:	00d2      	lsls	r2, r2, #3
 800392a:	21ff      	movs	r1, #255	@ 0xff
 800392c:	4091      	lsls	r1, r2
 800392e:	000a      	movs	r2, r1
 8003930:	43d2      	mvns	r2, r2
 8003932:	401a      	ands	r2, r3
 8003934:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	019b      	lsls	r3, r3, #6
 800393a:	22ff      	movs	r2, #255	@ 0xff
 800393c:	401a      	ands	r2, r3
 800393e:	1dfb      	adds	r3, r7, #7
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	0018      	movs	r0, r3
 8003944:	2303      	movs	r3, #3
 8003946:	4003      	ands	r3, r0
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800394c:	4809      	ldr	r0, [pc, #36]	@ (8003974 <__NVIC_SetPriority+0xd8>)
 800394e:	1dfb      	adds	r3, r7, #7
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	001c      	movs	r4, r3
 8003954:	230f      	movs	r3, #15
 8003956:	4023      	ands	r3, r4
 8003958:	3b08      	subs	r3, #8
 800395a:	089b      	lsrs	r3, r3, #2
 800395c:	430a      	orrs	r2, r1
 800395e:	3306      	adds	r3, #6
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	18c3      	adds	r3, r0, r3
 8003964:	3304      	adds	r3, #4
 8003966:	601a      	str	r2, [r3, #0]
}
 8003968:	46c0      	nop			@ (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b003      	add	sp, #12
 800396e:	bd90      	pop	{r4, r7, pc}
 8003970:	e000e100 	.word	0xe000e100
 8003974:	e000ed00 	.word	0xe000ed00

08003978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	1e5a      	subs	r2, r3, #1
 8003984:	2380      	movs	r3, #128	@ 0x80
 8003986:	045b      	lsls	r3, r3, #17
 8003988:	429a      	cmp	r2, r3
 800398a:	d301      	bcc.n	8003990 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800398c:	2301      	movs	r3, #1
 800398e:	e010      	b.n	80039b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003990:	4b0a      	ldr	r3, [pc, #40]	@ (80039bc <SysTick_Config+0x44>)
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	3a01      	subs	r2, #1
 8003996:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003998:	2301      	movs	r3, #1
 800399a:	425b      	negs	r3, r3
 800399c:	2103      	movs	r1, #3
 800399e:	0018      	movs	r0, r3
 80039a0:	f7ff ff7c 	bl	800389c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039a4:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <SysTick_Config+0x44>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039aa:	4b04      	ldr	r3, [pc, #16]	@ (80039bc <SysTick_Config+0x44>)
 80039ac:	2207      	movs	r2, #7
 80039ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	0018      	movs	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	b002      	add	sp, #8
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	e000e010 	.word	0xe000e010

080039c0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	607a      	str	r2, [r7, #4]
 80039ca:	210f      	movs	r1, #15
 80039cc:	187b      	adds	r3, r7, r1
 80039ce:	1c02      	adds	r2, r0, #0
 80039d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	187b      	adds	r3, r7, r1
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	b25b      	sxtb	r3, r3
 80039da:	0011      	movs	r1, r2
 80039dc:	0018      	movs	r0, r3
 80039de:	f7ff ff5d 	bl	800389c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80039e2:	46c0      	nop			@ (mov r8, r8)
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b004      	add	sp, #16
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	0018      	movs	r0, r3
 80039f6:	f7ff ffbf 	bl	8003978 <SysTick_Config>
 80039fa:	0003      	movs	r3, r0
}
 80039fc:	0018      	movs	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b002      	add	sp, #8
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003a1a:	e155      	b.n	8003cc8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2101      	movs	r1, #1
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4091      	lsls	r1, r2
 8003a26:	000a      	movs	r2, r1
 8003a28:	4013      	ands	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d100      	bne.n	8003a34 <HAL_GPIO_Init+0x30>
 8003a32:	e146      	b.n	8003cc2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2203      	movs	r2, #3
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d005      	beq.n	8003a4c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2203      	movs	r2, #3
 8003a46:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d130      	bne.n	8003aae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	2203      	movs	r2, #3
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	0013      	movs	r3, r2
 8003a5c:	43da      	mvns	r2, r3
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4013      	ands	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	0013      	movs	r3, r2
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a82:	2201      	movs	r2, #1
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	409a      	lsls	r2, r3
 8003a88:	0013      	movs	r3, r2
 8003a8a:	43da      	mvns	r2, r3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	091b      	lsrs	r3, r3, #4
 8003a98:	2201      	movs	r2, #1
 8003a9a:	401a      	ands	r2, r3
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	0013      	movs	r3, r2
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d017      	beq.n	8003aea <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	0013      	movs	r3, r2
 8003aca:	43da      	mvns	r2, r3
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	409a      	lsls	r2, r3
 8003adc:	0013      	movs	r3, r2
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2203      	movs	r2, #3
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d123      	bne.n	8003b3e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	08da      	lsrs	r2, r3, #3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3208      	adds	r2, #8
 8003afe:	0092      	lsls	r2, r2, #2
 8003b00:	58d3      	ldr	r3, [r2, r3]
 8003b02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2207      	movs	r2, #7
 8003b08:	4013      	ands	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	220f      	movs	r2, #15
 8003b0e:	409a      	lsls	r2, r3
 8003b10:	0013      	movs	r3, r2
 8003b12:	43da      	mvns	r2, r3
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	4013      	ands	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2107      	movs	r1, #7
 8003b22:	400b      	ands	r3, r1
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	409a      	lsls	r2, r3
 8003b28:	0013      	movs	r3, r2
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	08da      	lsrs	r2, r3, #3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3208      	adds	r2, #8
 8003b38:	0092      	lsls	r2, r2, #2
 8003b3a:	6939      	ldr	r1, [r7, #16]
 8003b3c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	2203      	movs	r2, #3
 8003b4a:	409a      	lsls	r2, r3
 8003b4c:	0013      	movs	r3, r2
 8003b4e:	43da      	mvns	r2, r3
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4013      	ands	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	401a      	ands	r2, r3
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	409a      	lsls	r2, r3
 8003b64:	0013      	movs	r3, r2
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	23c0      	movs	r3, #192	@ 0xc0
 8003b78:	029b      	lsls	r3, r3, #10
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d100      	bne.n	8003b80 <HAL_GPIO_Init+0x17c>
 8003b7e:	e0a0      	b.n	8003cc2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b80:	4b57      	ldr	r3, [pc, #348]	@ (8003ce0 <HAL_GPIO_Init+0x2dc>)
 8003b82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b84:	4b56      	ldr	r3, [pc, #344]	@ (8003ce0 <HAL_GPIO_Init+0x2dc>)
 8003b86:	2101      	movs	r1, #1
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b8c:	4a55      	ldr	r2, [pc, #340]	@ (8003ce4 <HAL_GPIO_Init+0x2e0>)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	089b      	lsrs	r3, r3, #2
 8003b92:	3302      	adds	r3, #2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	589b      	ldr	r3, [r3, r2]
 8003b98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	220f      	movs	r2, #15
 8003ba4:	409a      	lsls	r2, r3
 8003ba6:	0013      	movs	r3, r2
 8003ba8:	43da      	mvns	r2, r3
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4013      	ands	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	23a0      	movs	r3, #160	@ 0xa0
 8003bb4:	05db      	lsls	r3, r3, #23
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d01f      	beq.n	8003bfa <HAL_GPIO_Init+0x1f6>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a4a      	ldr	r2, [pc, #296]	@ (8003ce8 <HAL_GPIO_Init+0x2e4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d019      	beq.n	8003bf6 <HAL_GPIO_Init+0x1f2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a49      	ldr	r2, [pc, #292]	@ (8003cec <HAL_GPIO_Init+0x2e8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <HAL_GPIO_Init+0x1ee>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a48      	ldr	r2, [pc, #288]	@ (8003cf0 <HAL_GPIO_Init+0x2ec>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00d      	beq.n	8003bee <HAL_GPIO_Init+0x1ea>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a47      	ldr	r2, [pc, #284]	@ (8003cf4 <HAL_GPIO_Init+0x2f0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d007      	beq.n	8003bea <HAL_GPIO_Init+0x1e6>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a46      	ldr	r2, [pc, #280]	@ (8003cf8 <HAL_GPIO_Init+0x2f4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d101      	bne.n	8003be6 <HAL_GPIO_Init+0x1e2>
 8003be2:	2305      	movs	r3, #5
 8003be4:	e00a      	b.n	8003bfc <HAL_GPIO_Init+0x1f8>
 8003be6:	2306      	movs	r3, #6
 8003be8:	e008      	b.n	8003bfc <HAL_GPIO_Init+0x1f8>
 8003bea:	2304      	movs	r3, #4
 8003bec:	e006      	b.n	8003bfc <HAL_GPIO_Init+0x1f8>
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e004      	b.n	8003bfc <HAL_GPIO_Init+0x1f8>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e002      	b.n	8003bfc <HAL_GPIO_Init+0x1f8>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <HAL_GPIO_Init+0x1f8>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	2103      	movs	r1, #3
 8003c00:	400a      	ands	r2, r1
 8003c02:	0092      	lsls	r2, r2, #2
 8003c04:	4093      	lsls	r3, r2
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c0c:	4935      	ldr	r1, [pc, #212]	@ (8003ce4 <HAL_GPIO_Init+0x2e0>)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	089b      	lsrs	r3, r3, #2
 8003c12:	3302      	adds	r3, #2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c1a:	4b38      	ldr	r3, [pc, #224]	@ (8003cfc <HAL_GPIO_Init+0x2f8>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	43da      	mvns	r2, r3
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4013      	ands	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	2380      	movs	r3, #128	@ 0x80
 8003c30:	035b      	lsls	r3, r3, #13
 8003c32:	4013      	ands	r3, r2
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8003cfc <HAL_GPIO_Init+0x2f8>)
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003c44:	4b2d      	ldr	r3, [pc, #180]	@ (8003cfc <HAL_GPIO_Init+0x2f8>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	43da      	mvns	r2, r3
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	4013      	ands	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	2380      	movs	r3, #128	@ 0x80
 8003c5a:	039b      	lsls	r3, r3, #14
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	d003      	beq.n	8003c68 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c68:	4b24      	ldr	r3, [pc, #144]	@ (8003cfc <HAL_GPIO_Init+0x2f8>)
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003c6e:	4b23      	ldr	r3, [pc, #140]	@ (8003cfc <HAL_GPIO_Init+0x2f8>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	43da      	mvns	r2, r3
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	2380      	movs	r3, #128	@ 0x80
 8003c84:	029b      	lsls	r3, r3, #10
 8003c86:	4013      	ands	r3, r2
 8003c88:	d003      	beq.n	8003c92 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003c92:	4b1a      	ldr	r3, [pc, #104]	@ (8003cfc <HAL_GPIO_Init+0x2f8>)
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c98:	4b18      	ldr	r3, [pc, #96]	@ (8003cfc <HAL_GPIO_Init+0x2f8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	43da      	mvns	r2, r3
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	2380      	movs	r3, #128	@ 0x80
 8003cae:	025b      	lsls	r3, r3, #9
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d003      	beq.n	8003cbc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003cfc <HAL_GPIO_Init+0x2f8>)
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	40da      	lsrs	r2, r3
 8003cd0:	1e13      	subs	r3, r2, #0
 8003cd2:	d000      	beq.n	8003cd6 <HAL_GPIO_Init+0x2d2>
 8003cd4:	e6a2      	b.n	8003a1c <HAL_GPIO_Init+0x18>
  }
}
 8003cd6:	46c0      	nop			@ (mov r8, r8)
 8003cd8:	46c0      	nop			@ (mov r8, r8)
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b006      	add	sp, #24
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	40010000 	.word	0x40010000
 8003ce8:	50000400 	.word	0x50000400
 8003cec:	50000800 	.word	0x50000800
 8003cf0:	50000c00 	.word	0x50000c00
 8003cf4:	50001000 	.word	0x50001000
 8003cf8:	50001c00 	.word	0x50001c00
 8003cfc:	40010400 	.word	0x40010400

08003d00 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	0008      	movs	r0, r1
 8003d0a:	0011      	movs	r1, r2
 8003d0c:	1cbb      	adds	r3, r7, #2
 8003d0e:	1c02      	adds	r2, r0, #0
 8003d10:	801a      	strh	r2, [r3, #0]
 8003d12:	1c7b      	adds	r3, r7, #1
 8003d14:	1c0a      	adds	r2, r1, #0
 8003d16:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d18:	1c7b      	adds	r3, r7, #1
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d004      	beq.n	8003d2a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d20:	1cbb      	adds	r3, r7, #2
 8003d22:	881a      	ldrh	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003d28:	e003      	b.n	8003d32 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003d2a:	1cbb      	adds	r3, r7, #2
 8003d2c:	881a      	ldrh	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d32:	46c0      	nop			@ (mov r8, r8)
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b002      	add	sp, #8
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d3c:	b5b0      	push	{r4, r5, r7, lr}
 8003d3e:	b08a      	sub	sp, #40	@ 0x28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d102      	bne.n	8003d50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f000 fbbf 	bl	80044ce <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d50:	4bc9      	ldr	r3, [pc, #804]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	220c      	movs	r2, #12
 8003d56:	4013      	ands	r3, r2
 8003d58:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d5a:	4bc7      	ldr	r3, [pc, #796]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	2380      	movs	r3, #128	@ 0x80
 8003d60:	025b      	lsls	r3, r3, #9
 8003d62:	4013      	ands	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d100      	bne.n	8003d72 <HAL_RCC_OscConfig+0x36>
 8003d70:	e07e      	b.n	8003e70 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d007      	beq.n	8003d88 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	2b0c      	cmp	r3, #12
 8003d7c:	d112      	bne.n	8003da4 <HAL_RCC_OscConfig+0x68>
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	2380      	movs	r3, #128	@ 0x80
 8003d82:	025b      	lsls	r3, r3, #9
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d10d      	bne.n	8003da4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d88:	4bbb      	ldr	r3, [pc, #748]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	2380      	movs	r3, #128	@ 0x80
 8003d8e:	029b      	lsls	r3, r3, #10
 8003d90:	4013      	ands	r3, r2
 8003d92:	d100      	bne.n	8003d96 <HAL_RCC_OscConfig+0x5a>
 8003d94:	e06b      	b.n	8003e6e <HAL_RCC_OscConfig+0x132>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d167      	bne.n	8003e6e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f000 fb95 	bl	80044ce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	2380      	movs	r3, #128	@ 0x80
 8003daa:	025b      	lsls	r3, r3, #9
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d107      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x84>
 8003db0:	4bb1      	ldr	r3, [pc, #708]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	4bb0      	ldr	r3, [pc, #704]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003db6:	2180      	movs	r1, #128	@ 0x80
 8003db8:	0249      	lsls	r1, r1, #9
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	e027      	b.n	8003e10 <HAL_RCC_OscConfig+0xd4>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	23a0      	movs	r3, #160	@ 0xa0
 8003dc6:	02db      	lsls	r3, r3, #11
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d10e      	bne.n	8003dea <HAL_RCC_OscConfig+0xae>
 8003dcc:	4baa      	ldr	r3, [pc, #680]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4ba9      	ldr	r3, [pc, #676]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003dd2:	2180      	movs	r1, #128	@ 0x80
 8003dd4:	02c9      	lsls	r1, r1, #11
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	4ba7      	ldr	r3, [pc, #668]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	4ba6      	ldr	r3, [pc, #664]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003de0:	2180      	movs	r1, #128	@ 0x80
 8003de2:	0249      	lsls	r1, r1, #9
 8003de4:	430a      	orrs	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	e012      	b.n	8003e10 <HAL_RCC_OscConfig+0xd4>
 8003dea:	4ba3      	ldr	r3, [pc, #652]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4ba2      	ldr	r3, [pc, #648]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003df0:	49a2      	ldr	r1, [pc, #648]	@ (800407c <HAL_RCC_OscConfig+0x340>)
 8003df2:	400a      	ands	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	4ba0      	ldr	r3, [pc, #640]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	2380      	movs	r3, #128	@ 0x80
 8003dfc:	025b      	lsls	r3, r3, #9
 8003dfe:	4013      	ands	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4b9c      	ldr	r3, [pc, #624]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	4b9b      	ldr	r3, [pc, #620]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003e0a:	499d      	ldr	r1, [pc, #628]	@ (8004080 <HAL_RCC_OscConfig+0x344>)
 8003e0c:	400a      	ands	r2, r1
 8003e0e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d015      	beq.n	8003e44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e18:	f7ff f970 	bl	80030fc <HAL_GetTick>
 8003e1c:	0003      	movs	r3, r0
 8003e1e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e20:	e009      	b.n	8003e36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e22:	f7ff f96b 	bl	80030fc <HAL_GetTick>
 8003e26:	0002      	movs	r2, r0
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b64      	cmp	r3, #100	@ 0x64
 8003e2e:	d902      	bls.n	8003e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	f000 fb4c 	bl	80044ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e36:	4b90      	ldr	r3, [pc, #576]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	2380      	movs	r3, #128	@ 0x80
 8003e3c:	029b      	lsls	r3, r3, #10
 8003e3e:	4013      	ands	r3, r2
 8003e40:	d0ef      	beq.n	8003e22 <HAL_RCC_OscConfig+0xe6>
 8003e42:	e015      	b.n	8003e70 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e44:	f7ff f95a 	bl	80030fc <HAL_GetTick>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e4e:	f7ff f955 	bl	80030fc <HAL_GetTick>
 8003e52:	0002      	movs	r2, r0
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b64      	cmp	r3, #100	@ 0x64
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e336      	b.n	80044ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e60:	4b85      	ldr	r3, [pc, #532]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	2380      	movs	r3, #128	@ 0x80
 8003e66:	029b      	lsls	r3, r3, #10
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d1f0      	bne.n	8003e4e <HAL_RCC_OscConfig+0x112>
 8003e6c:	e000      	b.n	8003e70 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2202      	movs	r2, #2
 8003e76:	4013      	ands	r3, r2
 8003e78:	d100      	bne.n	8003e7c <HAL_RCC_OscConfig+0x140>
 8003e7a:	e099      	b.n	8003fb0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	2220      	movs	r2, #32
 8003e86:	4013      	ands	r3, r2
 8003e88:	d009      	beq.n	8003e9e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003e8a:	4b7b      	ldr	r3, [pc, #492]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	4b7a      	ldr	r3, [pc, #488]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003e90:	2120      	movs	r1, #32
 8003e92:	430a      	orrs	r2, r1
 8003e94:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e98:	2220      	movs	r2, #32
 8003e9a:	4393      	bics	r3, r2
 8003e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d005      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	2b0c      	cmp	r3, #12
 8003ea8:	d13e      	bne.n	8003f28 <HAL_RCC_OscConfig+0x1ec>
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d13b      	bne.n	8003f28 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003eb0:	4b71      	ldr	r3, [pc, #452]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d004      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x188>
 8003eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e304      	b.n	80044ce <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec4:	4b6c      	ldr	r3, [pc, #432]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4a6e      	ldr	r2, [pc, #440]	@ (8004084 <HAL_RCC_OscConfig+0x348>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	0019      	movs	r1, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	021a      	lsls	r2, r3, #8
 8003ed4:	4b68      	ldr	r3, [pc, #416]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003eda:	4b67      	ldr	r3, [pc, #412]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2209      	movs	r2, #9
 8003ee0:	4393      	bics	r3, r2
 8003ee2:	0019      	movs	r1, r3
 8003ee4:	4b64      	ldr	r3, [pc, #400]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eec:	f000 fc42 	bl	8004774 <HAL_RCC_GetSysClockFreq>
 8003ef0:	0001      	movs	r1, r0
 8003ef2:	4b61      	ldr	r3, [pc, #388]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	091b      	lsrs	r3, r3, #4
 8003ef8:	220f      	movs	r2, #15
 8003efa:	4013      	ands	r3, r2
 8003efc:	4a62      	ldr	r2, [pc, #392]	@ (8004088 <HAL_RCC_OscConfig+0x34c>)
 8003efe:	5cd3      	ldrb	r3, [r2, r3]
 8003f00:	000a      	movs	r2, r1
 8003f02:	40da      	lsrs	r2, r3
 8003f04:	4b61      	ldr	r3, [pc, #388]	@ (800408c <HAL_RCC_OscConfig+0x350>)
 8003f06:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003f08:	4b61      	ldr	r3, [pc, #388]	@ (8004090 <HAL_RCC_OscConfig+0x354>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2513      	movs	r5, #19
 8003f0e:	197c      	adds	r4, r7, r5
 8003f10:	0018      	movs	r0, r3
 8003f12:	f7ff f8ad 	bl	8003070 <HAL_InitTick>
 8003f16:	0003      	movs	r3, r0
 8003f18:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003f1a:	197b      	adds	r3, r7, r5
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d046      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003f22:	197b      	adds	r3, r7, r5
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	e2d2      	b.n	80044ce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d027      	beq.n	8003f7e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f2e:	4b52      	ldr	r3, [pc, #328]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2209      	movs	r2, #9
 8003f34:	4393      	bics	r3, r2
 8003f36:	0019      	movs	r1, r3
 8003f38:	4b4f      	ldr	r3, [pc, #316]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f40:	f7ff f8dc 	bl	80030fc <HAL_GetTick>
 8003f44:	0003      	movs	r3, r0
 8003f46:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f4a:	f7ff f8d7 	bl	80030fc <HAL_GetTick>
 8003f4e:	0002      	movs	r2, r0
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e2b8      	b.n	80044ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f5c:	4b46      	ldr	r3, [pc, #280]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2204      	movs	r2, #4
 8003f62:	4013      	ands	r3, r2
 8003f64:	d0f1      	beq.n	8003f4a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f66:	4b44      	ldr	r3, [pc, #272]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4a46      	ldr	r2, [pc, #280]	@ (8004084 <HAL_RCC_OscConfig+0x348>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	0019      	movs	r1, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	021a      	lsls	r2, r3, #8
 8003f76:	4b40      	ldr	r3, [pc, #256]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	605a      	str	r2, [r3, #4]
 8003f7c:	e018      	b.n	8003fb0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f7e:	4b3e      	ldr	r3, [pc, #248]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	4b3d      	ldr	r3, [pc, #244]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003f84:	2101      	movs	r1, #1
 8003f86:	438a      	bics	r2, r1
 8003f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8a:	f7ff f8b7 	bl	80030fc <HAL_GetTick>
 8003f8e:	0003      	movs	r3, r0
 8003f90:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f94:	f7ff f8b2 	bl	80030fc <HAL_GetTick>
 8003f98:	0002      	movs	r2, r0
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e293      	b.n	80044ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fa6:	4b34      	ldr	r3, [pc, #208]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2204      	movs	r2, #4
 8003fac:	4013      	ands	r3, r2
 8003fae:	d1f1      	bne.n	8003f94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	d100      	bne.n	8003fbc <HAL_RCC_OscConfig+0x280>
 8003fba:	e0a2      	b.n	8004102 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d140      	bne.n	8004044 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fc2:	4b2d      	ldr	r3, [pc, #180]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	2380      	movs	r3, #128	@ 0x80
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4013      	ands	r3, r2
 8003fcc:	d005      	beq.n	8003fda <HAL_RCC_OscConfig+0x29e>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e279      	b.n	80044ce <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fda:	4b27      	ldr	r3, [pc, #156]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	4a2d      	ldr	r2, [pc, #180]	@ (8004094 <HAL_RCC_OscConfig+0x358>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	0019      	movs	r1, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fe8:	4b23      	ldr	r3, [pc, #140]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fee:	4b22      	ldr	r3, [pc, #136]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	0a19      	lsrs	r1, r3, #8
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	061a      	lsls	r2, r3, #24
 8003ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	0b5b      	lsrs	r3, r3, #13
 8004008:	3301      	adds	r3, #1
 800400a:	2280      	movs	r2, #128	@ 0x80
 800400c:	0212      	lsls	r2, r2, #8
 800400e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004010:	4b19      	ldr	r3, [pc, #100]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	091b      	lsrs	r3, r3, #4
 8004016:	210f      	movs	r1, #15
 8004018:	400b      	ands	r3, r1
 800401a:	491b      	ldr	r1, [pc, #108]	@ (8004088 <HAL_RCC_OscConfig+0x34c>)
 800401c:	5ccb      	ldrb	r3, [r1, r3]
 800401e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004020:	4b1a      	ldr	r3, [pc, #104]	@ (800408c <HAL_RCC_OscConfig+0x350>)
 8004022:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004024:	4b1a      	ldr	r3, [pc, #104]	@ (8004090 <HAL_RCC_OscConfig+0x354>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2513      	movs	r5, #19
 800402a:	197c      	adds	r4, r7, r5
 800402c:	0018      	movs	r0, r3
 800402e:	f7ff f81f 	bl	8003070 <HAL_InitTick>
 8004032:	0003      	movs	r3, r0
 8004034:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004036:	197b      	adds	r3, r7, r5
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d061      	beq.n	8004102 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800403e:	197b      	adds	r3, r7, r5
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	e244      	b.n	80044ce <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d040      	beq.n	80040ce <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800404c:	4b0a      	ldr	r3, [pc, #40]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4b09      	ldr	r3, [pc, #36]	@ (8004078 <HAL_RCC_OscConfig+0x33c>)
 8004052:	2180      	movs	r1, #128	@ 0x80
 8004054:	0049      	lsls	r1, r1, #1
 8004056:	430a      	orrs	r2, r1
 8004058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405a:	f7ff f84f 	bl	80030fc <HAL_GetTick>
 800405e:	0003      	movs	r3, r0
 8004060:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004062:	e019      	b.n	8004098 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004064:	f7ff f84a 	bl	80030fc <HAL_GetTick>
 8004068:	0002      	movs	r2, r0
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d912      	bls.n	8004098 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e22b      	b.n	80044ce <HAL_RCC_OscConfig+0x792>
 8004076:	46c0      	nop			@ (mov r8, r8)
 8004078:	40021000 	.word	0x40021000
 800407c:	fffeffff 	.word	0xfffeffff
 8004080:	fffbffff 	.word	0xfffbffff
 8004084:	ffffe0ff 	.word	0xffffe0ff
 8004088:	080097f4 	.word	0x080097f4
 800408c:	20000004 	.word	0x20000004
 8004090:	20000008 	.word	0x20000008
 8004094:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004098:	4bca      	ldr	r3, [pc, #808]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	2380      	movs	r3, #128	@ 0x80
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4013      	ands	r3, r2
 80040a2:	d0df      	beq.n	8004064 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040a4:	4bc7      	ldr	r3, [pc, #796]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	4ac7      	ldr	r2, [pc, #796]	@ (80043c8 <HAL_RCC_OscConfig+0x68c>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	0019      	movs	r1, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040b2:	4bc4      	ldr	r3, [pc, #784]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 80040b4:	430a      	orrs	r2, r1
 80040b6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040b8:	4bc2      	ldr	r3, [pc, #776]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	021b      	lsls	r3, r3, #8
 80040be:	0a19      	lsrs	r1, r3, #8
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	061a      	lsls	r2, r3, #24
 80040c6:	4bbf      	ldr	r3, [pc, #764]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 80040c8:	430a      	orrs	r2, r1
 80040ca:	605a      	str	r2, [r3, #4]
 80040cc:	e019      	b.n	8004102 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040ce:	4bbd      	ldr	r3, [pc, #756]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4bbc      	ldr	r3, [pc, #752]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 80040d4:	49bd      	ldr	r1, [pc, #756]	@ (80043cc <HAL_RCC_OscConfig+0x690>)
 80040d6:	400a      	ands	r2, r1
 80040d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040da:	f7ff f80f 	bl	80030fc <HAL_GetTick>
 80040de:	0003      	movs	r3, r0
 80040e0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040e4:	f7ff f80a 	bl	80030fc <HAL_GetTick>
 80040e8:	0002      	movs	r2, r0
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e1eb      	b.n	80044ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80040f6:	4bb3      	ldr	r3, [pc, #716]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	2380      	movs	r3, #128	@ 0x80
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4013      	ands	r3, r2
 8004100:	d1f0      	bne.n	80040e4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2208      	movs	r2, #8
 8004108:	4013      	ands	r3, r2
 800410a:	d036      	beq.n	800417a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d019      	beq.n	8004148 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004114:	4bab      	ldr	r3, [pc, #684]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 8004116:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004118:	4baa      	ldr	r3, [pc, #680]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 800411a:	2101      	movs	r1, #1
 800411c:	430a      	orrs	r2, r1
 800411e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004120:	f7fe ffec 	bl	80030fc <HAL_GetTick>
 8004124:	0003      	movs	r3, r0
 8004126:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800412a:	f7fe ffe7 	bl	80030fc <HAL_GetTick>
 800412e:	0002      	movs	r2, r0
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e1c8      	b.n	80044ce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800413c:	4ba1      	ldr	r3, [pc, #644]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 800413e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004140:	2202      	movs	r2, #2
 8004142:	4013      	ands	r3, r2
 8004144:	d0f1      	beq.n	800412a <HAL_RCC_OscConfig+0x3ee>
 8004146:	e018      	b.n	800417a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004148:	4b9e      	ldr	r3, [pc, #632]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 800414a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800414c:	4b9d      	ldr	r3, [pc, #628]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 800414e:	2101      	movs	r1, #1
 8004150:	438a      	bics	r2, r1
 8004152:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004154:	f7fe ffd2 	bl	80030fc <HAL_GetTick>
 8004158:	0003      	movs	r3, r0
 800415a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800415e:	f7fe ffcd 	bl	80030fc <HAL_GetTick>
 8004162:	0002      	movs	r2, r0
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e1ae      	b.n	80044ce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004170:	4b94      	ldr	r3, [pc, #592]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 8004172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004174:	2202      	movs	r2, #2
 8004176:	4013      	ands	r3, r2
 8004178:	d1f1      	bne.n	800415e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2204      	movs	r2, #4
 8004180:	4013      	ands	r3, r2
 8004182:	d100      	bne.n	8004186 <HAL_RCC_OscConfig+0x44a>
 8004184:	e0ae      	b.n	80042e4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004186:	2023      	movs	r0, #35	@ 0x23
 8004188:	183b      	adds	r3, r7, r0
 800418a:	2200      	movs	r2, #0
 800418c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800418e:	4b8d      	ldr	r3, [pc, #564]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 8004190:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004192:	2380      	movs	r3, #128	@ 0x80
 8004194:	055b      	lsls	r3, r3, #21
 8004196:	4013      	ands	r3, r2
 8004198:	d109      	bne.n	80041ae <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800419a:	4b8a      	ldr	r3, [pc, #552]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 800419c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800419e:	4b89      	ldr	r3, [pc, #548]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 80041a0:	2180      	movs	r1, #128	@ 0x80
 80041a2:	0549      	lsls	r1, r1, #21
 80041a4:	430a      	orrs	r2, r1
 80041a6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80041a8:	183b      	adds	r3, r7, r0
 80041aa:	2201      	movs	r2, #1
 80041ac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ae:	4b88      	ldr	r3, [pc, #544]	@ (80043d0 <HAL_RCC_OscConfig+0x694>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	2380      	movs	r3, #128	@ 0x80
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	4013      	ands	r3, r2
 80041b8:	d11a      	bne.n	80041f0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ba:	4b85      	ldr	r3, [pc, #532]	@ (80043d0 <HAL_RCC_OscConfig+0x694>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4b84      	ldr	r3, [pc, #528]	@ (80043d0 <HAL_RCC_OscConfig+0x694>)
 80041c0:	2180      	movs	r1, #128	@ 0x80
 80041c2:	0049      	lsls	r1, r1, #1
 80041c4:	430a      	orrs	r2, r1
 80041c6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041c8:	f7fe ff98 	bl	80030fc <HAL_GetTick>
 80041cc:	0003      	movs	r3, r0
 80041ce:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d2:	f7fe ff93 	bl	80030fc <HAL_GetTick>
 80041d6:	0002      	movs	r2, r0
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b64      	cmp	r3, #100	@ 0x64
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e174      	b.n	80044ce <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e4:	4b7a      	ldr	r3, [pc, #488]	@ (80043d0 <HAL_RCC_OscConfig+0x694>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	2380      	movs	r3, #128	@ 0x80
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	4013      	ands	r3, r2
 80041ee:	d0f0      	beq.n	80041d2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	2380      	movs	r3, #128	@ 0x80
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d107      	bne.n	800420c <HAL_RCC_OscConfig+0x4d0>
 80041fc:	4b71      	ldr	r3, [pc, #452]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 80041fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004200:	4b70      	ldr	r3, [pc, #448]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 8004202:	2180      	movs	r1, #128	@ 0x80
 8004204:	0049      	lsls	r1, r1, #1
 8004206:	430a      	orrs	r2, r1
 8004208:	651a      	str	r2, [r3, #80]	@ 0x50
 800420a:	e031      	b.n	8004270 <HAL_RCC_OscConfig+0x534>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10c      	bne.n	800422e <HAL_RCC_OscConfig+0x4f2>
 8004214:	4b6b      	ldr	r3, [pc, #428]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 8004216:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004218:	4b6a      	ldr	r3, [pc, #424]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 800421a:	496c      	ldr	r1, [pc, #432]	@ (80043cc <HAL_RCC_OscConfig+0x690>)
 800421c:	400a      	ands	r2, r1
 800421e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004220:	4b68      	ldr	r3, [pc, #416]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 8004222:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004224:	4b67      	ldr	r3, [pc, #412]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 8004226:	496b      	ldr	r1, [pc, #428]	@ (80043d4 <HAL_RCC_OscConfig+0x698>)
 8004228:	400a      	ands	r2, r1
 800422a:	651a      	str	r2, [r3, #80]	@ 0x50
 800422c:	e020      	b.n	8004270 <HAL_RCC_OscConfig+0x534>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	23a0      	movs	r3, #160	@ 0xa0
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	429a      	cmp	r2, r3
 8004238:	d10e      	bne.n	8004258 <HAL_RCC_OscConfig+0x51c>
 800423a:	4b62      	ldr	r3, [pc, #392]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 800423c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800423e:	4b61      	ldr	r3, [pc, #388]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 8004240:	2180      	movs	r1, #128	@ 0x80
 8004242:	00c9      	lsls	r1, r1, #3
 8004244:	430a      	orrs	r2, r1
 8004246:	651a      	str	r2, [r3, #80]	@ 0x50
 8004248:	4b5e      	ldr	r3, [pc, #376]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 800424a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800424c:	4b5d      	ldr	r3, [pc, #372]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 800424e:	2180      	movs	r1, #128	@ 0x80
 8004250:	0049      	lsls	r1, r1, #1
 8004252:	430a      	orrs	r2, r1
 8004254:	651a      	str	r2, [r3, #80]	@ 0x50
 8004256:	e00b      	b.n	8004270 <HAL_RCC_OscConfig+0x534>
 8004258:	4b5a      	ldr	r3, [pc, #360]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 800425a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800425c:	4b59      	ldr	r3, [pc, #356]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 800425e:	495b      	ldr	r1, [pc, #364]	@ (80043cc <HAL_RCC_OscConfig+0x690>)
 8004260:	400a      	ands	r2, r1
 8004262:	651a      	str	r2, [r3, #80]	@ 0x50
 8004264:	4b57      	ldr	r3, [pc, #348]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 8004266:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004268:	4b56      	ldr	r3, [pc, #344]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 800426a:	495a      	ldr	r1, [pc, #360]	@ (80043d4 <HAL_RCC_OscConfig+0x698>)
 800426c:	400a      	ands	r2, r1
 800426e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d015      	beq.n	80042a4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004278:	f7fe ff40 	bl	80030fc <HAL_GetTick>
 800427c:	0003      	movs	r3, r0
 800427e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004280:	e009      	b.n	8004296 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004282:	f7fe ff3b 	bl	80030fc <HAL_GetTick>
 8004286:	0002      	movs	r2, r0
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	4a52      	ldr	r2, [pc, #328]	@ (80043d8 <HAL_RCC_OscConfig+0x69c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e11b      	b.n	80044ce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004296:	4b4b      	ldr	r3, [pc, #300]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 8004298:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800429a:	2380      	movs	r3, #128	@ 0x80
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4013      	ands	r3, r2
 80042a0:	d0ef      	beq.n	8004282 <HAL_RCC_OscConfig+0x546>
 80042a2:	e014      	b.n	80042ce <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a4:	f7fe ff2a 	bl	80030fc <HAL_GetTick>
 80042a8:	0003      	movs	r3, r0
 80042aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042ac:	e009      	b.n	80042c2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ae:	f7fe ff25 	bl	80030fc <HAL_GetTick>
 80042b2:	0002      	movs	r2, r0
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	4a47      	ldr	r2, [pc, #284]	@ (80043d8 <HAL_RCC_OscConfig+0x69c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e105      	b.n	80044ce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042c2:	4b40      	ldr	r3, [pc, #256]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 80042c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042c6:	2380      	movs	r3, #128	@ 0x80
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4013      	ands	r3, r2
 80042cc:	d1ef      	bne.n	80042ae <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042ce:	2323      	movs	r3, #35	@ 0x23
 80042d0:	18fb      	adds	r3, r7, r3
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d105      	bne.n	80042e4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d8:	4b3a      	ldr	r3, [pc, #232]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 80042da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042dc:	4b39      	ldr	r3, [pc, #228]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 80042de:	493f      	ldr	r1, [pc, #252]	@ (80043dc <HAL_RCC_OscConfig+0x6a0>)
 80042e0:	400a      	ands	r2, r1
 80042e2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2220      	movs	r2, #32
 80042ea:	4013      	ands	r3, r2
 80042ec:	d049      	beq.n	8004382 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d026      	beq.n	8004344 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80042f6:	4b33      	ldr	r3, [pc, #204]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	4b32      	ldr	r3, [pc, #200]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 80042fc:	2101      	movs	r1, #1
 80042fe:	430a      	orrs	r2, r1
 8004300:	609a      	str	r2, [r3, #8]
 8004302:	4b30      	ldr	r3, [pc, #192]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 8004304:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004306:	4b2f      	ldr	r3, [pc, #188]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 8004308:	2101      	movs	r1, #1
 800430a:	430a      	orrs	r2, r1
 800430c:	635a      	str	r2, [r3, #52]	@ 0x34
 800430e:	4b34      	ldr	r3, [pc, #208]	@ (80043e0 <HAL_RCC_OscConfig+0x6a4>)
 8004310:	6a1a      	ldr	r2, [r3, #32]
 8004312:	4b33      	ldr	r3, [pc, #204]	@ (80043e0 <HAL_RCC_OscConfig+0x6a4>)
 8004314:	2180      	movs	r1, #128	@ 0x80
 8004316:	0189      	lsls	r1, r1, #6
 8004318:	430a      	orrs	r2, r1
 800431a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431c:	f7fe feee 	bl	80030fc <HAL_GetTick>
 8004320:	0003      	movs	r3, r0
 8004322:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004326:	f7fe fee9 	bl	80030fc <HAL_GetTick>
 800432a:	0002      	movs	r2, r0
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e0ca      	b.n	80044ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004338:	4b22      	ldr	r3, [pc, #136]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2202      	movs	r2, #2
 800433e:	4013      	ands	r3, r2
 8004340:	d0f1      	beq.n	8004326 <HAL_RCC_OscConfig+0x5ea>
 8004342:	e01e      	b.n	8004382 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004344:	4b1f      	ldr	r3, [pc, #124]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	4b1e      	ldr	r3, [pc, #120]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 800434a:	2101      	movs	r1, #1
 800434c:	438a      	bics	r2, r1
 800434e:	609a      	str	r2, [r3, #8]
 8004350:	4b23      	ldr	r3, [pc, #140]	@ (80043e0 <HAL_RCC_OscConfig+0x6a4>)
 8004352:	6a1a      	ldr	r2, [r3, #32]
 8004354:	4b22      	ldr	r3, [pc, #136]	@ (80043e0 <HAL_RCC_OscConfig+0x6a4>)
 8004356:	4923      	ldr	r1, [pc, #140]	@ (80043e4 <HAL_RCC_OscConfig+0x6a8>)
 8004358:	400a      	ands	r2, r1
 800435a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435c:	f7fe fece 	bl	80030fc <HAL_GetTick>
 8004360:	0003      	movs	r3, r0
 8004362:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004366:	f7fe fec9 	bl	80030fc <HAL_GetTick>
 800436a:	0002      	movs	r2, r0
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e0aa      	b.n	80044ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004378:	4b12      	ldr	r3, [pc, #72]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2202      	movs	r2, #2
 800437e:	4013      	ands	r3, r2
 8004380:	d1f1      	bne.n	8004366 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004386:	2b00      	cmp	r3, #0
 8004388:	d100      	bne.n	800438c <HAL_RCC_OscConfig+0x650>
 800438a:	e09f      	b.n	80044cc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	2b0c      	cmp	r3, #12
 8004390:	d100      	bne.n	8004394 <HAL_RCC_OscConfig+0x658>
 8004392:	e078      	b.n	8004486 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	2b02      	cmp	r3, #2
 800439a:	d159      	bne.n	8004450 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439c:	4b09      	ldr	r3, [pc, #36]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	4b08      	ldr	r3, [pc, #32]	@ (80043c4 <HAL_RCC_OscConfig+0x688>)
 80043a2:	4911      	ldr	r1, [pc, #68]	@ (80043e8 <HAL_RCC_OscConfig+0x6ac>)
 80043a4:	400a      	ands	r2, r1
 80043a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a8:	f7fe fea8 	bl	80030fc <HAL_GetTick>
 80043ac:	0003      	movs	r3, r0
 80043ae:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043b0:	e01c      	b.n	80043ec <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b2:	f7fe fea3 	bl	80030fc <HAL_GetTick>
 80043b6:	0002      	movs	r2, r0
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d915      	bls.n	80043ec <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e084      	b.n	80044ce <HAL_RCC_OscConfig+0x792>
 80043c4:	40021000 	.word	0x40021000
 80043c8:	ffff1fff 	.word	0xffff1fff
 80043cc:	fffffeff 	.word	0xfffffeff
 80043d0:	40007000 	.word	0x40007000
 80043d4:	fffffbff 	.word	0xfffffbff
 80043d8:	00001388 	.word	0x00001388
 80043dc:	efffffff 	.word	0xefffffff
 80043e0:	40010000 	.word	0x40010000
 80043e4:	ffffdfff 	.word	0xffffdfff
 80043e8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043ec:	4b3a      	ldr	r3, [pc, #232]	@ (80044d8 <HAL_RCC_OscConfig+0x79c>)
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	2380      	movs	r3, #128	@ 0x80
 80043f2:	049b      	lsls	r3, r3, #18
 80043f4:	4013      	ands	r3, r2
 80043f6:	d1dc      	bne.n	80043b2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043f8:	4b37      	ldr	r3, [pc, #220]	@ (80044d8 <HAL_RCC_OscConfig+0x79c>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4a37      	ldr	r2, [pc, #220]	@ (80044dc <HAL_RCC_OscConfig+0x7a0>)
 80043fe:	4013      	ands	r3, r2
 8004400:	0019      	movs	r1, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004410:	431a      	orrs	r2, r3
 8004412:	4b31      	ldr	r3, [pc, #196]	@ (80044d8 <HAL_RCC_OscConfig+0x79c>)
 8004414:	430a      	orrs	r2, r1
 8004416:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004418:	4b2f      	ldr	r3, [pc, #188]	@ (80044d8 <HAL_RCC_OscConfig+0x79c>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	4b2e      	ldr	r3, [pc, #184]	@ (80044d8 <HAL_RCC_OscConfig+0x79c>)
 800441e:	2180      	movs	r1, #128	@ 0x80
 8004420:	0449      	lsls	r1, r1, #17
 8004422:	430a      	orrs	r2, r1
 8004424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004426:	f7fe fe69 	bl	80030fc <HAL_GetTick>
 800442a:	0003      	movs	r3, r0
 800442c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004430:	f7fe fe64 	bl	80030fc <HAL_GetTick>
 8004434:	0002      	movs	r2, r0
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e045      	b.n	80044ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004442:	4b25      	ldr	r3, [pc, #148]	@ (80044d8 <HAL_RCC_OscConfig+0x79c>)
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	2380      	movs	r3, #128	@ 0x80
 8004448:	049b      	lsls	r3, r3, #18
 800444a:	4013      	ands	r3, r2
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0x6f4>
 800444e:	e03d      	b.n	80044cc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004450:	4b21      	ldr	r3, [pc, #132]	@ (80044d8 <HAL_RCC_OscConfig+0x79c>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	4b20      	ldr	r3, [pc, #128]	@ (80044d8 <HAL_RCC_OscConfig+0x79c>)
 8004456:	4922      	ldr	r1, [pc, #136]	@ (80044e0 <HAL_RCC_OscConfig+0x7a4>)
 8004458:	400a      	ands	r2, r1
 800445a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445c:	f7fe fe4e 	bl	80030fc <HAL_GetTick>
 8004460:	0003      	movs	r3, r0
 8004462:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004466:	f7fe fe49 	bl	80030fc <HAL_GetTick>
 800446a:	0002      	movs	r2, r0
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e02a      	b.n	80044ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004478:	4b17      	ldr	r3, [pc, #92]	@ (80044d8 <HAL_RCC_OscConfig+0x79c>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	2380      	movs	r3, #128	@ 0x80
 800447e:	049b      	lsls	r3, r3, #18
 8004480:	4013      	ands	r3, r2
 8004482:	d1f0      	bne.n	8004466 <HAL_RCC_OscConfig+0x72a>
 8004484:	e022      	b.n	80044cc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448a:	2b01      	cmp	r3, #1
 800448c:	d101      	bne.n	8004492 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e01d      	b.n	80044ce <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004492:	4b11      	ldr	r3, [pc, #68]	@ (80044d8 <HAL_RCC_OscConfig+0x79c>)
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	2380      	movs	r3, #128	@ 0x80
 800449c:	025b      	lsls	r3, r3, #9
 800449e:	401a      	ands	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d10f      	bne.n	80044c8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	23f0      	movs	r3, #240	@ 0xf0
 80044ac:	039b      	lsls	r3, r3, #14
 80044ae:	401a      	ands	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d107      	bne.n	80044c8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	23c0      	movs	r3, #192	@ 0xc0
 80044bc:	041b      	lsls	r3, r3, #16
 80044be:	401a      	ands	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	0018      	movs	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b00a      	add	sp, #40	@ 0x28
 80044d4:	bdb0      	pop	{r4, r5, r7, pc}
 80044d6:	46c0      	nop			@ (mov r8, r8)
 80044d8:	40021000 	.word	0x40021000
 80044dc:	ff02ffff 	.word	0xff02ffff
 80044e0:	feffffff 	.word	0xfeffffff

080044e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e4:	b5b0      	push	{r4, r5, r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e128      	b.n	800474a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044f8:	4b96      	ldr	r3, [pc, #600]	@ (8004754 <HAL_RCC_ClockConfig+0x270>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2201      	movs	r2, #1
 80044fe:	4013      	ands	r3, r2
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d91e      	bls.n	8004544 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004506:	4b93      	ldr	r3, [pc, #588]	@ (8004754 <HAL_RCC_ClockConfig+0x270>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2201      	movs	r2, #1
 800450c:	4393      	bics	r3, r2
 800450e:	0019      	movs	r1, r3
 8004510:	4b90      	ldr	r3, [pc, #576]	@ (8004754 <HAL_RCC_ClockConfig+0x270>)
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004518:	f7fe fdf0 	bl	80030fc <HAL_GetTick>
 800451c:	0003      	movs	r3, r0
 800451e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004520:	e009      	b.n	8004536 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004522:	f7fe fdeb 	bl	80030fc <HAL_GetTick>
 8004526:	0002      	movs	r2, r0
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	4a8a      	ldr	r2, [pc, #552]	@ (8004758 <HAL_RCC_ClockConfig+0x274>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e109      	b.n	800474a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004536:	4b87      	ldr	r3, [pc, #540]	@ (8004754 <HAL_RCC_ClockConfig+0x270>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2201      	movs	r2, #1
 800453c:	4013      	ands	r3, r2
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	429a      	cmp	r2, r3
 8004542:	d1ee      	bne.n	8004522 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2202      	movs	r2, #2
 800454a:	4013      	ands	r3, r2
 800454c:	d009      	beq.n	8004562 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800454e:	4b83      	ldr	r3, [pc, #524]	@ (800475c <HAL_RCC_ClockConfig+0x278>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	22f0      	movs	r2, #240	@ 0xf0
 8004554:	4393      	bics	r3, r2
 8004556:	0019      	movs	r1, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	4b7f      	ldr	r3, [pc, #508]	@ (800475c <HAL_RCC_ClockConfig+0x278>)
 800455e:	430a      	orrs	r2, r1
 8004560:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2201      	movs	r2, #1
 8004568:	4013      	ands	r3, r2
 800456a:	d100      	bne.n	800456e <HAL_RCC_ClockConfig+0x8a>
 800456c:	e089      	b.n	8004682 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d107      	bne.n	8004586 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004576:	4b79      	ldr	r3, [pc, #484]	@ (800475c <HAL_RCC_ClockConfig+0x278>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	2380      	movs	r3, #128	@ 0x80
 800457c:	029b      	lsls	r3, r3, #10
 800457e:	4013      	ands	r3, r2
 8004580:	d120      	bne.n	80045c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e0e1      	b.n	800474a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b03      	cmp	r3, #3
 800458c:	d107      	bne.n	800459e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800458e:	4b73      	ldr	r3, [pc, #460]	@ (800475c <HAL_RCC_ClockConfig+0x278>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	2380      	movs	r3, #128	@ 0x80
 8004594:	049b      	lsls	r3, r3, #18
 8004596:	4013      	ands	r3, r2
 8004598:	d114      	bne.n	80045c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e0d5      	b.n	800474a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d106      	bne.n	80045b4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045a6:	4b6d      	ldr	r3, [pc, #436]	@ (800475c <HAL_RCC_ClockConfig+0x278>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2204      	movs	r2, #4
 80045ac:	4013      	ands	r3, r2
 80045ae:	d109      	bne.n	80045c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0ca      	b.n	800474a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045b4:	4b69      	ldr	r3, [pc, #420]	@ (800475c <HAL_RCC_ClockConfig+0x278>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	2380      	movs	r3, #128	@ 0x80
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4013      	ands	r3, r2
 80045be:	d101      	bne.n	80045c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0c2      	b.n	800474a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045c4:	4b65      	ldr	r3, [pc, #404]	@ (800475c <HAL_RCC_ClockConfig+0x278>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	2203      	movs	r2, #3
 80045ca:	4393      	bics	r3, r2
 80045cc:	0019      	movs	r1, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	4b62      	ldr	r3, [pc, #392]	@ (800475c <HAL_RCC_ClockConfig+0x278>)
 80045d4:	430a      	orrs	r2, r1
 80045d6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045d8:	f7fe fd90 	bl	80030fc <HAL_GetTick>
 80045dc:	0003      	movs	r3, r0
 80045de:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d111      	bne.n	800460c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80045e8:	e009      	b.n	80045fe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ea:	f7fe fd87 	bl	80030fc <HAL_GetTick>
 80045ee:	0002      	movs	r2, r0
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	4a58      	ldr	r2, [pc, #352]	@ (8004758 <HAL_RCC_ClockConfig+0x274>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e0a5      	b.n	800474a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80045fe:	4b57      	ldr	r3, [pc, #348]	@ (800475c <HAL_RCC_ClockConfig+0x278>)
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	220c      	movs	r2, #12
 8004604:	4013      	ands	r3, r2
 8004606:	2b08      	cmp	r3, #8
 8004608:	d1ef      	bne.n	80045ea <HAL_RCC_ClockConfig+0x106>
 800460a:	e03a      	b.n	8004682 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2b03      	cmp	r3, #3
 8004612:	d111      	bne.n	8004638 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004614:	e009      	b.n	800462a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004616:	f7fe fd71 	bl	80030fc <HAL_GetTick>
 800461a:	0002      	movs	r2, r0
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	4a4d      	ldr	r2, [pc, #308]	@ (8004758 <HAL_RCC_ClockConfig+0x274>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e08f      	b.n	800474a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800462a:	4b4c      	ldr	r3, [pc, #304]	@ (800475c <HAL_RCC_ClockConfig+0x278>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	220c      	movs	r2, #12
 8004630:	4013      	ands	r3, r2
 8004632:	2b0c      	cmp	r3, #12
 8004634:	d1ef      	bne.n	8004616 <HAL_RCC_ClockConfig+0x132>
 8004636:	e024      	b.n	8004682 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d11b      	bne.n	8004678 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004640:	e009      	b.n	8004656 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004642:	f7fe fd5b 	bl	80030fc <HAL_GetTick>
 8004646:	0002      	movs	r2, r0
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	4a42      	ldr	r2, [pc, #264]	@ (8004758 <HAL_RCC_ClockConfig+0x274>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e079      	b.n	800474a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004656:	4b41      	ldr	r3, [pc, #260]	@ (800475c <HAL_RCC_ClockConfig+0x278>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	220c      	movs	r2, #12
 800465c:	4013      	ands	r3, r2
 800465e:	2b04      	cmp	r3, #4
 8004660:	d1ef      	bne.n	8004642 <HAL_RCC_ClockConfig+0x15e>
 8004662:	e00e      	b.n	8004682 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004664:	f7fe fd4a 	bl	80030fc <HAL_GetTick>
 8004668:	0002      	movs	r2, r0
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	4a3a      	ldr	r2, [pc, #232]	@ (8004758 <HAL_RCC_ClockConfig+0x274>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e068      	b.n	800474a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004678:	4b38      	ldr	r3, [pc, #224]	@ (800475c <HAL_RCC_ClockConfig+0x278>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	220c      	movs	r2, #12
 800467e:	4013      	ands	r3, r2
 8004680:	d1f0      	bne.n	8004664 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004682:	4b34      	ldr	r3, [pc, #208]	@ (8004754 <HAL_RCC_ClockConfig+0x270>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2201      	movs	r2, #1
 8004688:	4013      	ands	r3, r2
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d21e      	bcs.n	80046ce <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004690:	4b30      	ldr	r3, [pc, #192]	@ (8004754 <HAL_RCC_ClockConfig+0x270>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2201      	movs	r2, #1
 8004696:	4393      	bics	r3, r2
 8004698:	0019      	movs	r1, r3
 800469a:	4b2e      	ldr	r3, [pc, #184]	@ (8004754 <HAL_RCC_ClockConfig+0x270>)
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046a2:	f7fe fd2b 	bl	80030fc <HAL_GetTick>
 80046a6:	0003      	movs	r3, r0
 80046a8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046aa:	e009      	b.n	80046c0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ac:	f7fe fd26 	bl	80030fc <HAL_GetTick>
 80046b0:	0002      	movs	r2, r0
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	4a28      	ldr	r2, [pc, #160]	@ (8004758 <HAL_RCC_ClockConfig+0x274>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e044      	b.n	800474a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c0:	4b24      	ldr	r3, [pc, #144]	@ (8004754 <HAL_RCC_ClockConfig+0x270>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2201      	movs	r2, #1
 80046c6:	4013      	ands	r3, r2
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d1ee      	bne.n	80046ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2204      	movs	r2, #4
 80046d4:	4013      	ands	r3, r2
 80046d6:	d009      	beq.n	80046ec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d8:	4b20      	ldr	r3, [pc, #128]	@ (800475c <HAL_RCC_ClockConfig+0x278>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4a20      	ldr	r2, [pc, #128]	@ (8004760 <HAL_RCC_ClockConfig+0x27c>)
 80046de:	4013      	ands	r3, r2
 80046e0:	0019      	movs	r1, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	4b1d      	ldr	r3, [pc, #116]	@ (800475c <HAL_RCC_ClockConfig+0x278>)
 80046e8:	430a      	orrs	r2, r1
 80046ea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2208      	movs	r2, #8
 80046f2:	4013      	ands	r3, r2
 80046f4:	d00a      	beq.n	800470c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046f6:	4b19      	ldr	r3, [pc, #100]	@ (800475c <HAL_RCC_ClockConfig+0x278>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004764 <HAL_RCC_ClockConfig+0x280>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	0019      	movs	r1, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	00da      	lsls	r2, r3, #3
 8004706:	4b15      	ldr	r3, [pc, #84]	@ (800475c <HAL_RCC_ClockConfig+0x278>)
 8004708:	430a      	orrs	r2, r1
 800470a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800470c:	f000 f832 	bl	8004774 <HAL_RCC_GetSysClockFreq>
 8004710:	0001      	movs	r1, r0
 8004712:	4b12      	ldr	r3, [pc, #72]	@ (800475c <HAL_RCC_ClockConfig+0x278>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	091b      	lsrs	r3, r3, #4
 8004718:	220f      	movs	r2, #15
 800471a:	4013      	ands	r3, r2
 800471c:	4a12      	ldr	r2, [pc, #72]	@ (8004768 <HAL_RCC_ClockConfig+0x284>)
 800471e:	5cd3      	ldrb	r3, [r2, r3]
 8004720:	000a      	movs	r2, r1
 8004722:	40da      	lsrs	r2, r3
 8004724:	4b11      	ldr	r3, [pc, #68]	@ (800476c <HAL_RCC_ClockConfig+0x288>)
 8004726:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004728:	4b11      	ldr	r3, [pc, #68]	@ (8004770 <HAL_RCC_ClockConfig+0x28c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	250b      	movs	r5, #11
 800472e:	197c      	adds	r4, r7, r5
 8004730:	0018      	movs	r0, r3
 8004732:	f7fe fc9d 	bl	8003070 <HAL_InitTick>
 8004736:	0003      	movs	r3, r0
 8004738:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800473a:	197b      	adds	r3, r7, r5
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004742:	197b      	adds	r3, r7, r5
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	e000      	b.n	800474a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	0018      	movs	r0, r3
 800474c:	46bd      	mov	sp, r7
 800474e:	b004      	add	sp, #16
 8004750:	bdb0      	pop	{r4, r5, r7, pc}
 8004752:	46c0      	nop			@ (mov r8, r8)
 8004754:	40022000 	.word	0x40022000
 8004758:	00001388 	.word	0x00001388
 800475c:	40021000 	.word	0x40021000
 8004760:	fffff8ff 	.word	0xfffff8ff
 8004764:	ffffc7ff 	.word	0xffffc7ff
 8004768:	080097f4 	.word	0x080097f4
 800476c:	20000004 	.word	0x20000004
 8004770:	20000008 	.word	0x20000008

08004774 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800477a:	4b3c      	ldr	r3, [pc, #240]	@ (800486c <HAL_RCC_GetSysClockFreq+0xf8>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	220c      	movs	r2, #12
 8004784:	4013      	ands	r3, r2
 8004786:	2b0c      	cmp	r3, #12
 8004788:	d013      	beq.n	80047b2 <HAL_RCC_GetSysClockFreq+0x3e>
 800478a:	d85c      	bhi.n	8004846 <HAL_RCC_GetSysClockFreq+0xd2>
 800478c:	2b04      	cmp	r3, #4
 800478e:	d002      	beq.n	8004796 <HAL_RCC_GetSysClockFreq+0x22>
 8004790:	2b08      	cmp	r3, #8
 8004792:	d00b      	beq.n	80047ac <HAL_RCC_GetSysClockFreq+0x38>
 8004794:	e057      	b.n	8004846 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004796:	4b35      	ldr	r3, [pc, #212]	@ (800486c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2210      	movs	r2, #16
 800479c:	4013      	ands	r3, r2
 800479e:	d002      	beq.n	80047a6 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80047a0:	4b33      	ldr	r3, [pc, #204]	@ (8004870 <HAL_RCC_GetSysClockFreq+0xfc>)
 80047a2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80047a4:	e05d      	b.n	8004862 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80047a6:	4b33      	ldr	r3, [pc, #204]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x100>)
 80047a8:	613b      	str	r3, [r7, #16]
      break;
 80047aa:	e05a      	b.n	8004862 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047ac:	4b32      	ldr	r3, [pc, #200]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x104>)
 80047ae:	613b      	str	r3, [r7, #16]
      break;
 80047b0:	e057      	b.n	8004862 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	0c9b      	lsrs	r3, r3, #18
 80047b6:	220f      	movs	r2, #15
 80047b8:	4013      	ands	r3, r2
 80047ba:	4a30      	ldr	r2, [pc, #192]	@ (800487c <HAL_RCC_GetSysClockFreq+0x108>)
 80047bc:	5cd3      	ldrb	r3, [r2, r3]
 80047be:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	0d9b      	lsrs	r3, r3, #22
 80047c4:	2203      	movs	r2, #3
 80047c6:	4013      	ands	r3, r2
 80047c8:	3301      	adds	r3, #1
 80047ca:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047cc:	4b27      	ldr	r3, [pc, #156]	@ (800486c <HAL_RCC_GetSysClockFreq+0xf8>)
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	2380      	movs	r3, #128	@ 0x80
 80047d2:	025b      	lsls	r3, r3, #9
 80047d4:	4013      	ands	r3, r2
 80047d6:	d00f      	beq.n	80047f8 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	000a      	movs	r2, r1
 80047dc:	0152      	lsls	r2, r2, #5
 80047de:	1a52      	subs	r2, r2, r1
 80047e0:	0193      	lsls	r3, r2, #6
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	185b      	adds	r3, r3, r1
 80047e8:	025b      	lsls	r3, r3, #9
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	0018      	movs	r0, r3
 80047ee:	f7fb fca7 	bl	8000140 <__udivsi3>
 80047f2:	0003      	movs	r3, r0
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	e023      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80047f8:	4b1c      	ldr	r3, [pc, #112]	@ (800486c <HAL_RCC_GetSysClockFreq+0xf8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2210      	movs	r2, #16
 80047fe:	4013      	ands	r3, r2
 8004800:	d00f      	beq.n	8004822 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8004802:	68b9      	ldr	r1, [r7, #8]
 8004804:	000a      	movs	r2, r1
 8004806:	0152      	lsls	r2, r2, #5
 8004808:	1a52      	subs	r2, r2, r1
 800480a:	0193      	lsls	r3, r2, #6
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	185b      	adds	r3, r3, r1
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	0018      	movs	r0, r3
 8004818:	f7fb fc92 	bl	8000140 <__udivsi3>
 800481c:	0003      	movs	r3, r0
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	e00e      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8004822:	68b9      	ldr	r1, [r7, #8]
 8004824:	000a      	movs	r2, r1
 8004826:	0152      	lsls	r2, r2, #5
 8004828:	1a52      	subs	r2, r2, r1
 800482a:	0193      	lsls	r3, r2, #6
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	185b      	adds	r3, r3, r1
 8004832:	029b      	lsls	r3, r3, #10
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	0018      	movs	r0, r3
 8004838:	f7fb fc82 	bl	8000140 <__udivsi3>
 800483c:	0003      	movs	r3, r0
 800483e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	613b      	str	r3, [r7, #16]
      break;
 8004844:	e00d      	b.n	8004862 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004846:	4b09      	ldr	r3, [pc, #36]	@ (800486c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	0b5b      	lsrs	r3, r3, #13
 800484c:	2207      	movs	r2, #7
 800484e:	4013      	ands	r3, r2
 8004850:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	3301      	adds	r3, #1
 8004856:	2280      	movs	r2, #128	@ 0x80
 8004858:	0212      	lsls	r2, r2, #8
 800485a:	409a      	lsls	r2, r3
 800485c:	0013      	movs	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
      break;
 8004860:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004862:	693b      	ldr	r3, [r7, #16]
}
 8004864:	0018      	movs	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	b006      	add	sp, #24
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40021000 	.word	0x40021000
 8004870:	003d0900 	.word	0x003d0900
 8004874:	00f42400 	.word	0x00f42400
 8004878:	007a1200 	.word	0x007a1200
 800487c:	0800980c 	.word	0x0800980c

08004880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004884:	4b02      	ldr	r3, [pc, #8]	@ (8004890 <HAL_RCC_GetHCLKFreq+0x10>)
 8004886:	681b      	ldr	r3, [r3, #0]
}
 8004888:	0018      	movs	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	46c0      	nop			@ (mov r8, r8)
 8004890:	20000004 	.word	0x20000004

08004894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004898:	f7ff fff2 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 800489c:	0001      	movs	r1, r0
 800489e:	4b06      	ldr	r3, [pc, #24]	@ (80048b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	0a1b      	lsrs	r3, r3, #8
 80048a4:	2207      	movs	r2, #7
 80048a6:	4013      	ands	r3, r2
 80048a8:	4a04      	ldr	r2, [pc, #16]	@ (80048bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80048aa:	5cd3      	ldrb	r3, [r2, r3]
 80048ac:	40d9      	lsrs	r1, r3
 80048ae:	000b      	movs	r3, r1
}
 80048b0:	0018      	movs	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	46c0      	nop			@ (mov r8, r8)
 80048b8:	40021000 	.word	0x40021000
 80048bc:	08009804 	.word	0x08009804

080048c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048c4:	f7ff ffdc 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 80048c8:	0001      	movs	r1, r0
 80048ca:	4b06      	ldr	r3, [pc, #24]	@ (80048e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	0adb      	lsrs	r3, r3, #11
 80048d0:	2207      	movs	r2, #7
 80048d2:	4013      	ands	r3, r2
 80048d4:	4a04      	ldr	r2, [pc, #16]	@ (80048e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048d6:	5cd3      	ldrb	r3, [r2, r3]
 80048d8:	40d9      	lsrs	r1, r3
 80048da:	000b      	movs	r3, r1
}
 80048dc:	0018      	movs	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	46c0      	nop			@ (mov r8, r8)
 80048e4:	40021000 	.word	0x40021000
 80048e8:	08009804 	.word	0x08009804

080048ec <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80048f4:	2317      	movs	r3, #23
 80048f6:	18fb      	adds	r3, r7, r3
 80048f8:	2200      	movs	r2, #0
 80048fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2220      	movs	r2, #32
 8004902:	4013      	ands	r3, r2
 8004904:	d106      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	2380      	movs	r3, #128	@ 0x80
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	4013      	ands	r3, r2
 8004910:	d100      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004912:	e104      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004914:	4bb9      	ldr	r3, [pc, #740]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004916:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004918:	2380      	movs	r3, #128	@ 0x80
 800491a:	055b      	lsls	r3, r3, #21
 800491c:	4013      	ands	r3, r2
 800491e:	d10a      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004920:	4bb6      	ldr	r3, [pc, #728]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004922:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004924:	4bb5      	ldr	r3, [pc, #724]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004926:	2180      	movs	r1, #128	@ 0x80
 8004928:	0549      	lsls	r1, r1, #21
 800492a:	430a      	orrs	r2, r1
 800492c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800492e:	2317      	movs	r3, #23
 8004930:	18fb      	adds	r3, r7, r3
 8004932:	2201      	movs	r2, #1
 8004934:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004936:	4bb2      	ldr	r3, [pc, #712]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	2380      	movs	r3, #128	@ 0x80
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	4013      	ands	r3, r2
 8004940:	d11a      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004942:	4baf      	ldr	r3, [pc, #700]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4bae      	ldr	r3, [pc, #696]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004948:	2180      	movs	r1, #128	@ 0x80
 800494a:	0049      	lsls	r1, r1, #1
 800494c:	430a      	orrs	r2, r1
 800494e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004950:	f7fe fbd4 	bl	80030fc <HAL_GetTick>
 8004954:	0003      	movs	r3, r0
 8004956:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004958:	e008      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800495a:	f7fe fbcf 	bl	80030fc <HAL_GetTick>
 800495e:	0002      	movs	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b64      	cmp	r3, #100	@ 0x64
 8004966:	d901      	bls.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e143      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496c:	4ba4      	ldr	r3, [pc, #656]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	2380      	movs	r3, #128	@ 0x80
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	4013      	ands	r3, r2
 8004976:	d0f0      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004978:	4ba0      	ldr	r3, [pc, #640]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	23c0      	movs	r3, #192	@ 0xc0
 800497e:	039b      	lsls	r3, r3, #14
 8004980:	4013      	ands	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	23c0      	movs	r3, #192	@ 0xc0
 800498a:	039b      	lsls	r3, r3, #14
 800498c:	4013      	ands	r3, r2
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	429a      	cmp	r2, r3
 8004992:	d107      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	23c0      	movs	r3, #192	@ 0xc0
 800499a:	039b      	lsls	r3, r3, #14
 800499c:	4013      	ands	r3, r2
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d013      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	23c0      	movs	r3, #192	@ 0xc0
 80049aa:	029b      	lsls	r3, r3, #10
 80049ac:	401a      	ands	r2, r3
 80049ae:	23c0      	movs	r3, #192	@ 0xc0
 80049b0:	029b      	lsls	r3, r3, #10
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d10a      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80049b6:	4b91      	ldr	r3, [pc, #580]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	2380      	movs	r3, #128	@ 0x80
 80049bc:	029b      	lsls	r3, r3, #10
 80049be:	401a      	ands	r2, r3
 80049c0:	2380      	movs	r3, #128	@ 0x80
 80049c2:	029b      	lsls	r3, r3, #10
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d101      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e113      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80049cc:	4b8b      	ldr	r3, [pc, #556]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80049ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049d0:	23c0      	movs	r3, #192	@ 0xc0
 80049d2:	029b      	lsls	r3, r3, #10
 80049d4:	4013      	ands	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d049      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	23c0      	movs	r3, #192	@ 0xc0
 80049e4:	029b      	lsls	r3, r3, #10
 80049e6:	4013      	ands	r3, r2
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d004      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2220      	movs	r2, #32
 80049f4:	4013      	ands	r3, r2
 80049f6:	d10d      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	23c0      	movs	r3, #192	@ 0xc0
 80049fe:	029b      	lsls	r3, r3, #10
 8004a00:	4013      	ands	r3, r2
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d034      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	2380      	movs	r3, #128	@ 0x80
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	4013      	ands	r3, r2
 8004a12:	d02e      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004a14:	4b79      	ldr	r3, [pc, #484]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a18:	4a7a      	ldr	r2, [pc, #488]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a1e:	4b77      	ldr	r3, [pc, #476]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a22:	4b76      	ldr	r3, [pc, #472]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a24:	2180      	movs	r1, #128	@ 0x80
 8004a26:	0309      	lsls	r1, r1, #12
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a2c:	4b73      	ldr	r3, [pc, #460]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a30:	4b72      	ldr	r3, [pc, #456]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a32:	4975      	ldr	r1, [pc, #468]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004a34:	400a      	ands	r2, r1
 8004a36:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004a38:	4b70      	ldr	r3, [pc, #448]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	2380      	movs	r3, #128	@ 0x80
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	4013      	ands	r3, r2
 8004a46:	d014      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a48:	f7fe fb58 	bl	80030fc <HAL_GetTick>
 8004a4c:	0003      	movs	r3, r0
 8004a4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a50:	e009      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a52:	f7fe fb53 	bl	80030fc <HAL_GetTick>
 8004a56:	0002      	movs	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	4a6b      	ldr	r2, [pc, #428]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e0c6      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a66:	4b65      	ldr	r3, [pc, #404]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a6a:	2380      	movs	r3, #128	@ 0x80
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d0ef      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	2380      	movs	r3, #128	@ 0x80
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d01f      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	23c0      	movs	r3, #192	@ 0xc0
 8004a84:	029b      	lsls	r3, r3, #10
 8004a86:	401a      	ands	r2, r3
 8004a88:	23c0      	movs	r3, #192	@ 0xc0
 8004a8a:	029b      	lsls	r3, r3, #10
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d10c      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004a90:	4b5a      	ldr	r3, [pc, #360]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a5e      	ldr	r2, [pc, #376]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	0019      	movs	r1, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	23c0      	movs	r3, #192	@ 0xc0
 8004aa0:	039b      	lsls	r3, r3, #14
 8004aa2:	401a      	ands	r2, r3
 8004aa4:	4b55      	ldr	r3, [pc, #340]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	4b54      	ldr	r3, [pc, #336]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004aac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	23c0      	movs	r3, #192	@ 0xc0
 8004ab4:	029b      	lsls	r3, r3, #10
 8004ab6:	401a      	ands	r2, r3
 8004ab8:	4b50      	ldr	r3, [pc, #320]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004aba:	430a      	orrs	r2, r1
 8004abc:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	d01f      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	23c0      	movs	r3, #192	@ 0xc0
 8004ace:	029b      	lsls	r3, r3, #10
 8004ad0:	401a      	ands	r2, r3
 8004ad2:	23c0      	movs	r3, #192	@ 0xc0
 8004ad4:	029b      	lsls	r3, r3, #10
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d10c      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004ada:	4b48      	ldr	r3, [pc, #288]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a4c      	ldr	r2, [pc, #304]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	0019      	movs	r1, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	23c0      	movs	r3, #192	@ 0xc0
 8004aea:	039b      	lsls	r3, r3, #14
 8004aec:	401a      	ands	r2, r3
 8004aee:	4b43      	ldr	r3, [pc, #268]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004af0:	430a      	orrs	r2, r1
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	4b41      	ldr	r3, [pc, #260]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004af6:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	23c0      	movs	r3, #192	@ 0xc0
 8004afe:	029b      	lsls	r3, r3, #10
 8004b00:	401a      	ands	r2, r3
 8004b02:	4b3e      	ldr	r3, [pc, #248]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b04:	430a      	orrs	r2, r1
 8004b06:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b08:	2317      	movs	r3, #23
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d105      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b12:	4b3a      	ldr	r3, [pc, #232]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b16:	4b39      	ldr	r3, [pc, #228]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b18:	493e      	ldr	r1, [pc, #248]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004b1a:	400a      	ands	r2, r1
 8004b1c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2201      	movs	r2, #1
 8004b24:	4013      	ands	r3, r2
 8004b26:	d009      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b28:	4b34      	ldr	r3, [pc, #208]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b2c:	2203      	movs	r2, #3
 8004b2e:	4393      	bics	r3, r2
 8004b30:	0019      	movs	r1, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	4b31      	ldr	r3, [pc, #196]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2202      	movs	r2, #2
 8004b42:	4013      	ands	r3, r2
 8004b44:	d009      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b46:	4b2d      	ldr	r3, [pc, #180]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b4a:	220c      	movs	r2, #12
 8004b4c:	4393      	bics	r3, r2
 8004b4e:	0019      	movs	r1, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	4b29      	ldr	r3, [pc, #164]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b56:	430a      	orrs	r2, r1
 8004b58:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2204      	movs	r2, #4
 8004b60:	4013      	ands	r3, r2
 8004b62:	d009      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b64:	4b25      	ldr	r3, [pc, #148]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b68:	4a2b      	ldr	r2, [pc, #172]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	0019      	movs	r1, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695a      	ldr	r2, [r3, #20]
 8004b72:	4b22      	ldr	r3, [pc, #136]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b74:	430a      	orrs	r2, r1
 8004b76:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2208      	movs	r2, #8
 8004b7e:	4013      	ands	r3, r2
 8004b80:	d009      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b82:	4b1e      	ldr	r3, [pc, #120]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b86:	4a25      	ldr	r2, [pc, #148]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	0019      	movs	r1, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699a      	ldr	r2, [r3, #24]
 8004b90:	4b1a      	ldr	r3, [pc, #104]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b92:	430a      	orrs	r2, r1
 8004b94:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	2380      	movs	r3, #128	@ 0x80
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d009      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ba2:	4b16      	ldr	r3, [pc, #88]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba6:	4a17      	ldr	r2, [pc, #92]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	0019      	movs	r1, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	4b12      	ldr	r3, [pc, #72]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2240      	movs	r2, #64	@ 0x40
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d009      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bc4:	4a16      	ldr	r2, [pc, #88]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	0019      	movs	r1, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bce:	4b0b      	ldr	r3, [pc, #44]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2280      	movs	r2, #128	@ 0x80
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d009      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004bde:	4b07      	ldr	r3, [pc, #28]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004be2:	4a10      	ldr	r2, [pc, #64]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	0019      	movs	r1, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a1a      	ldr	r2, [r3, #32]
 8004bec:	4b03      	ldr	r3, [pc, #12]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b006      	add	sp, #24
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	40007000 	.word	0x40007000
 8004c04:	fffcffff 	.word	0xfffcffff
 8004c08:	fff7ffff 	.word	0xfff7ffff
 8004c0c:	00001388 	.word	0x00001388
 8004c10:	ffcfffff 	.word	0xffcfffff
 8004c14:	efffffff 	.word	0xefffffff
 8004c18:	fffff3ff 	.word	0xfffff3ff
 8004c1c:	ffffcfff 	.word	0xffffcfff
 8004c20:	fbffffff 	.word	0xfbffffff
 8004c24:	fff3ffff 	.word	0xfff3ffff

08004c28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e044      	b.n	8004cc4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d107      	bne.n	8004c52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2278      	movs	r2, #120	@ 0x78
 8004c46:	2100      	movs	r1, #0
 8004c48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f7fe f8a3 	bl	8002d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2224      	movs	r2, #36	@ 0x24
 8004c56:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2101      	movs	r1, #1
 8004c64:	438a      	bics	r2, r1
 8004c66:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	0018      	movs	r0, r3
 8004c74:	f000 fb6a 	bl	800534c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	f000 f8c8 	bl	8004e10 <UART_SetConfig>
 8004c80:	0003      	movs	r3, r0
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d101      	bne.n	8004c8a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e01c      	b.n	8004cc4 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	490d      	ldr	r1, [pc, #52]	@ (8004ccc <HAL_UART_Init+0xa4>)
 8004c96:	400a      	ands	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	212a      	movs	r1, #42	@ 0x2a
 8004ca6:	438a      	bics	r2, r1
 8004ca8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f000 fbf9 	bl	80054b4 <UART_CheckIdleState>
 8004cc2:	0003      	movs	r3, r0
}
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	b002      	add	sp, #8
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	ffffb7ff 	.word	0xffffb7ff

08004cd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	@ 0x28
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	1dbb      	adds	r3, r7, #6
 8004cde:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	d000      	beq.n	8004cea <HAL_UART_Transmit+0x1a>
 8004ce8:	e08c      	b.n	8004e04 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_UART_Transmit+0x28>
 8004cf0:	1dbb      	adds	r3, r7, #6
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e084      	b.n	8004e06 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	2380      	movs	r3, #128	@ 0x80
 8004d02:	015b      	lsls	r3, r3, #5
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d109      	bne.n	8004d1c <HAL_UART_Transmit+0x4c>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d105      	bne.n	8004d1c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2201      	movs	r2, #1
 8004d14:	4013      	ands	r3, r2
 8004d16:	d001      	beq.n	8004d1c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e074      	b.n	8004e06 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2284      	movs	r2, #132	@ 0x84
 8004d20:	2100      	movs	r1, #0
 8004d22:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2221      	movs	r2, #33	@ 0x21
 8004d28:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d2a:	f7fe f9e7 	bl	80030fc <HAL_GetTick>
 8004d2e:	0003      	movs	r3, r0
 8004d30:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1dba      	adds	r2, r7, #6
 8004d36:	2150      	movs	r1, #80	@ 0x50
 8004d38:	8812      	ldrh	r2, [r2, #0]
 8004d3a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	1dba      	adds	r2, r7, #6
 8004d40:	2152      	movs	r1, #82	@ 0x52
 8004d42:	8812      	ldrh	r2, [r2, #0]
 8004d44:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	2380      	movs	r3, #128	@ 0x80
 8004d4c:	015b      	lsls	r3, r3, #5
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d108      	bne.n	8004d64 <HAL_UART_Transmit+0x94>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d104      	bne.n	8004d64 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	e003      	b.n	8004d6c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d6c:	e02f      	b.n	8004dce <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	0013      	movs	r3, r2
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2180      	movs	r1, #128	@ 0x80
 8004d7c:	f000 fc42 	bl	8005604 <UART_WaitOnFlagUntilTimeout>
 8004d80:	1e03      	subs	r3, r0, #0
 8004d82:	d004      	beq.n	8004d8e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2220      	movs	r2, #32
 8004d88:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e03b      	b.n	8004e06 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10b      	bne.n	8004dac <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	001a      	movs	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	05d2      	lsls	r2, r2, #23
 8004da0:	0dd2      	lsrs	r2, r2, #23
 8004da2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	3302      	adds	r3, #2
 8004da8:	61bb      	str	r3, [r7, #24]
 8004daa:	e007      	b.n	8004dbc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	781a      	ldrb	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	3301      	adds	r3, #1
 8004dba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2252      	movs	r2, #82	@ 0x52
 8004dc0:	5a9b      	ldrh	r3, [r3, r2]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b299      	uxth	r1, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2252      	movs	r2, #82	@ 0x52
 8004dcc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2252      	movs	r2, #82	@ 0x52
 8004dd2:	5a9b      	ldrh	r3, [r3, r2]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1c9      	bne.n	8004d6e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	0013      	movs	r3, r2
 8004de4:	2200      	movs	r2, #0
 8004de6:	2140      	movs	r1, #64	@ 0x40
 8004de8:	f000 fc0c 	bl	8005604 <UART_WaitOnFlagUntilTimeout>
 8004dec:	1e03      	subs	r3, r0, #0
 8004dee:	d004      	beq.n	8004dfa <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2220      	movs	r2, #32
 8004df4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e005      	b.n	8004e06 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	e000      	b.n	8004e06 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004e04:	2302      	movs	r3, #2
  }
}
 8004e06:	0018      	movs	r0, r3
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	b008      	add	sp, #32
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e10:	b5b0      	push	{r4, r5, r7, lr}
 8004e12:	b08e      	sub	sp, #56	@ 0x38
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e18:	231a      	movs	r3, #26
 8004e1a:	2218      	movs	r2, #24
 8004e1c:	189b      	adds	r3, r3, r2
 8004e1e:	19db      	adds	r3, r3, r7
 8004e20:	2200      	movs	r2, #0
 8004e22:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4ac3      	ldr	r2, [pc, #780]	@ (8005150 <UART_SetConfig+0x340>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	0019      	movs	r1, r3
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	4abe      	ldr	r2, [pc, #760]	@ (8005154 <UART_SetConfig+0x344>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	0019      	movs	r1, r3
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4ab8      	ldr	r2, [pc, #736]	@ (8005158 <UART_SetConfig+0x348>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d004      	beq.n	8004e84 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e80:	4313      	orrs	r3, r2
 8004e82:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	4ab4      	ldr	r2, [pc, #720]	@ (800515c <UART_SetConfig+0x34c>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	0019      	movs	r1, r3
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e96:	430a      	orrs	r2, r1
 8004e98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4ab0      	ldr	r2, [pc, #704]	@ (8005160 <UART_SetConfig+0x350>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d131      	bne.n	8004f08 <UART_SetConfig+0xf8>
 8004ea4:	4baf      	ldr	r3, [pc, #700]	@ (8005164 <UART_SetConfig+0x354>)
 8004ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ea8:	2203      	movs	r2, #3
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d01d      	beq.n	8004eec <UART_SetConfig+0xdc>
 8004eb0:	d823      	bhi.n	8004efa <UART_SetConfig+0xea>
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d00c      	beq.n	8004ed0 <UART_SetConfig+0xc0>
 8004eb6:	d820      	bhi.n	8004efa <UART_SetConfig+0xea>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <UART_SetConfig+0xb2>
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d00e      	beq.n	8004ede <UART_SetConfig+0xce>
 8004ec0:	e01b      	b.n	8004efa <UART_SetConfig+0xea>
 8004ec2:	231b      	movs	r3, #27
 8004ec4:	2218      	movs	r2, #24
 8004ec6:	189b      	adds	r3, r3, r2
 8004ec8:	19db      	adds	r3, r3, r7
 8004eca:	2201      	movs	r2, #1
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	e0b4      	b.n	800503a <UART_SetConfig+0x22a>
 8004ed0:	231b      	movs	r3, #27
 8004ed2:	2218      	movs	r2, #24
 8004ed4:	189b      	adds	r3, r3, r2
 8004ed6:	19db      	adds	r3, r3, r7
 8004ed8:	2202      	movs	r2, #2
 8004eda:	701a      	strb	r2, [r3, #0]
 8004edc:	e0ad      	b.n	800503a <UART_SetConfig+0x22a>
 8004ede:	231b      	movs	r3, #27
 8004ee0:	2218      	movs	r2, #24
 8004ee2:	189b      	adds	r3, r3, r2
 8004ee4:	19db      	adds	r3, r3, r7
 8004ee6:	2204      	movs	r2, #4
 8004ee8:	701a      	strb	r2, [r3, #0]
 8004eea:	e0a6      	b.n	800503a <UART_SetConfig+0x22a>
 8004eec:	231b      	movs	r3, #27
 8004eee:	2218      	movs	r2, #24
 8004ef0:	189b      	adds	r3, r3, r2
 8004ef2:	19db      	adds	r3, r3, r7
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	701a      	strb	r2, [r3, #0]
 8004ef8:	e09f      	b.n	800503a <UART_SetConfig+0x22a>
 8004efa:	231b      	movs	r3, #27
 8004efc:	2218      	movs	r2, #24
 8004efe:	189b      	adds	r3, r3, r2
 8004f00:	19db      	adds	r3, r3, r7
 8004f02:	2210      	movs	r2, #16
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	e098      	b.n	800503a <UART_SetConfig+0x22a>
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a96      	ldr	r2, [pc, #600]	@ (8005168 <UART_SetConfig+0x358>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d131      	bne.n	8004f76 <UART_SetConfig+0x166>
 8004f12:	4b94      	ldr	r3, [pc, #592]	@ (8005164 <UART_SetConfig+0x354>)
 8004f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f16:	220c      	movs	r2, #12
 8004f18:	4013      	ands	r3, r2
 8004f1a:	2b0c      	cmp	r3, #12
 8004f1c:	d01d      	beq.n	8004f5a <UART_SetConfig+0x14a>
 8004f1e:	d823      	bhi.n	8004f68 <UART_SetConfig+0x158>
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d00c      	beq.n	8004f3e <UART_SetConfig+0x12e>
 8004f24:	d820      	bhi.n	8004f68 <UART_SetConfig+0x158>
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <UART_SetConfig+0x120>
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d00e      	beq.n	8004f4c <UART_SetConfig+0x13c>
 8004f2e:	e01b      	b.n	8004f68 <UART_SetConfig+0x158>
 8004f30:	231b      	movs	r3, #27
 8004f32:	2218      	movs	r2, #24
 8004f34:	189b      	adds	r3, r3, r2
 8004f36:	19db      	adds	r3, r3, r7
 8004f38:	2200      	movs	r2, #0
 8004f3a:	701a      	strb	r2, [r3, #0]
 8004f3c:	e07d      	b.n	800503a <UART_SetConfig+0x22a>
 8004f3e:	231b      	movs	r3, #27
 8004f40:	2218      	movs	r2, #24
 8004f42:	189b      	adds	r3, r3, r2
 8004f44:	19db      	adds	r3, r3, r7
 8004f46:	2202      	movs	r2, #2
 8004f48:	701a      	strb	r2, [r3, #0]
 8004f4a:	e076      	b.n	800503a <UART_SetConfig+0x22a>
 8004f4c:	231b      	movs	r3, #27
 8004f4e:	2218      	movs	r2, #24
 8004f50:	189b      	adds	r3, r3, r2
 8004f52:	19db      	adds	r3, r3, r7
 8004f54:	2204      	movs	r2, #4
 8004f56:	701a      	strb	r2, [r3, #0]
 8004f58:	e06f      	b.n	800503a <UART_SetConfig+0x22a>
 8004f5a:	231b      	movs	r3, #27
 8004f5c:	2218      	movs	r2, #24
 8004f5e:	189b      	adds	r3, r3, r2
 8004f60:	19db      	adds	r3, r3, r7
 8004f62:	2208      	movs	r2, #8
 8004f64:	701a      	strb	r2, [r3, #0]
 8004f66:	e068      	b.n	800503a <UART_SetConfig+0x22a>
 8004f68:	231b      	movs	r3, #27
 8004f6a:	2218      	movs	r2, #24
 8004f6c:	189b      	adds	r3, r3, r2
 8004f6e:	19db      	adds	r3, r3, r7
 8004f70:	2210      	movs	r2, #16
 8004f72:	701a      	strb	r2, [r3, #0]
 8004f74:	e061      	b.n	800503a <UART_SetConfig+0x22a>
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a7c      	ldr	r2, [pc, #496]	@ (800516c <UART_SetConfig+0x35c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d106      	bne.n	8004f8e <UART_SetConfig+0x17e>
 8004f80:	231b      	movs	r3, #27
 8004f82:	2218      	movs	r2, #24
 8004f84:	189b      	adds	r3, r3, r2
 8004f86:	19db      	adds	r3, r3, r7
 8004f88:	2200      	movs	r2, #0
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	e055      	b.n	800503a <UART_SetConfig+0x22a>
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a77      	ldr	r2, [pc, #476]	@ (8005170 <UART_SetConfig+0x360>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d106      	bne.n	8004fa6 <UART_SetConfig+0x196>
 8004f98:	231b      	movs	r3, #27
 8004f9a:	2218      	movs	r2, #24
 8004f9c:	189b      	adds	r3, r3, r2
 8004f9e:	19db      	adds	r3, r3, r7
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	e049      	b.n	800503a <UART_SetConfig+0x22a>
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a6b      	ldr	r2, [pc, #428]	@ (8005158 <UART_SetConfig+0x348>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d13e      	bne.n	800502e <UART_SetConfig+0x21e>
 8004fb0:	4b6c      	ldr	r3, [pc, #432]	@ (8005164 <UART_SetConfig+0x354>)
 8004fb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fb4:	23c0      	movs	r3, #192	@ 0xc0
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	4013      	ands	r3, r2
 8004fba:	22c0      	movs	r2, #192	@ 0xc0
 8004fbc:	0112      	lsls	r2, r2, #4
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d027      	beq.n	8005012 <UART_SetConfig+0x202>
 8004fc2:	22c0      	movs	r2, #192	@ 0xc0
 8004fc4:	0112      	lsls	r2, r2, #4
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d82a      	bhi.n	8005020 <UART_SetConfig+0x210>
 8004fca:	2280      	movs	r2, #128	@ 0x80
 8004fcc:	0112      	lsls	r2, r2, #4
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d011      	beq.n	8004ff6 <UART_SetConfig+0x1e6>
 8004fd2:	2280      	movs	r2, #128	@ 0x80
 8004fd4:	0112      	lsls	r2, r2, #4
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d822      	bhi.n	8005020 <UART_SetConfig+0x210>
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d004      	beq.n	8004fe8 <UART_SetConfig+0x1d8>
 8004fde:	2280      	movs	r2, #128	@ 0x80
 8004fe0:	00d2      	lsls	r2, r2, #3
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00e      	beq.n	8005004 <UART_SetConfig+0x1f4>
 8004fe6:	e01b      	b.n	8005020 <UART_SetConfig+0x210>
 8004fe8:	231b      	movs	r3, #27
 8004fea:	2218      	movs	r2, #24
 8004fec:	189b      	adds	r3, r3, r2
 8004fee:	19db      	adds	r3, r3, r7
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	701a      	strb	r2, [r3, #0]
 8004ff4:	e021      	b.n	800503a <UART_SetConfig+0x22a>
 8004ff6:	231b      	movs	r3, #27
 8004ff8:	2218      	movs	r2, #24
 8004ffa:	189b      	adds	r3, r3, r2
 8004ffc:	19db      	adds	r3, r3, r7
 8004ffe:	2202      	movs	r2, #2
 8005000:	701a      	strb	r2, [r3, #0]
 8005002:	e01a      	b.n	800503a <UART_SetConfig+0x22a>
 8005004:	231b      	movs	r3, #27
 8005006:	2218      	movs	r2, #24
 8005008:	189b      	adds	r3, r3, r2
 800500a:	19db      	adds	r3, r3, r7
 800500c:	2204      	movs	r2, #4
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	e013      	b.n	800503a <UART_SetConfig+0x22a>
 8005012:	231b      	movs	r3, #27
 8005014:	2218      	movs	r2, #24
 8005016:	189b      	adds	r3, r3, r2
 8005018:	19db      	adds	r3, r3, r7
 800501a:	2208      	movs	r2, #8
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	e00c      	b.n	800503a <UART_SetConfig+0x22a>
 8005020:	231b      	movs	r3, #27
 8005022:	2218      	movs	r2, #24
 8005024:	189b      	adds	r3, r3, r2
 8005026:	19db      	adds	r3, r3, r7
 8005028:	2210      	movs	r2, #16
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	e005      	b.n	800503a <UART_SetConfig+0x22a>
 800502e:	231b      	movs	r3, #27
 8005030:	2218      	movs	r2, #24
 8005032:	189b      	adds	r3, r3, r2
 8005034:	19db      	adds	r3, r3, r7
 8005036:	2210      	movs	r2, #16
 8005038:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a46      	ldr	r2, [pc, #280]	@ (8005158 <UART_SetConfig+0x348>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d000      	beq.n	8005046 <UART_SetConfig+0x236>
 8005044:	e09a      	b.n	800517c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005046:	231b      	movs	r3, #27
 8005048:	2218      	movs	r2, #24
 800504a:	189b      	adds	r3, r3, r2
 800504c:	19db      	adds	r3, r3, r7
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b08      	cmp	r3, #8
 8005052:	d01d      	beq.n	8005090 <UART_SetConfig+0x280>
 8005054:	dc20      	bgt.n	8005098 <UART_SetConfig+0x288>
 8005056:	2b04      	cmp	r3, #4
 8005058:	d015      	beq.n	8005086 <UART_SetConfig+0x276>
 800505a:	dc1d      	bgt.n	8005098 <UART_SetConfig+0x288>
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <UART_SetConfig+0x256>
 8005060:	2b02      	cmp	r3, #2
 8005062:	d005      	beq.n	8005070 <UART_SetConfig+0x260>
 8005064:	e018      	b.n	8005098 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005066:	f7ff fc15 	bl	8004894 <HAL_RCC_GetPCLK1Freq>
 800506a:	0003      	movs	r3, r0
 800506c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800506e:	e01c      	b.n	80050aa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005070:	4b3c      	ldr	r3, [pc, #240]	@ (8005164 <UART_SetConfig+0x354>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2210      	movs	r2, #16
 8005076:	4013      	ands	r3, r2
 8005078:	d002      	beq.n	8005080 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800507a:	4b3e      	ldr	r3, [pc, #248]	@ (8005174 <UART_SetConfig+0x364>)
 800507c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800507e:	e014      	b.n	80050aa <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8005080:	4b3d      	ldr	r3, [pc, #244]	@ (8005178 <UART_SetConfig+0x368>)
 8005082:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005084:	e011      	b.n	80050aa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005086:	f7ff fb75 	bl	8004774 <HAL_RCC_GetSysClockFreq>
 800508a:	0003      	movs	r3, r0
 800508c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800508e:	e00c      	b.n	80050aa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005090:	2380      	movs	r3, #128	@ 0x80
 8005092:	021b      	lsls	r3, r3, #8
 8005094:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005096:	e008      	b.n	80050aa <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800509c:	231a      	movs	r3, #26
 800509e:	2218      	movs	r2, #24
 80050a0:	189b      	adds	r3, r3, r2
 80050a2:	19db      	adds	r3, r3, r7
 80050a4:	2201      	movs	r2, #1
 80050a6:	701a      	strb	r2, [r3, #0]
        break;
 80050a8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d100      	bne.n	80050b2 <UART_SetConfig+0x2a2>
 80050b0:	e133      	b.n	800531a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	0013      	movs	r3, r2
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	189b      	adds	r3, r3, r2
 80050bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050be:	429a      	cmp	r2, r3
 80050c0:	d305      	bcc.n	80050ce <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d906      	bls.n	80050dc <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80050ce:	231a      	movs	r3, #26
 80050d0:	2218      	movs	r2, #24
 80050d2:	189b      	adds	r3, r3, r2
 80050d4:	19db      	adds	r3, r3, r7
 80050d6:	2201      	movs	r2, #1
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	e11e      	b.n	800531a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	6939      	ldr	r1, [r7, #16]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	000b      	movs	r3, r1
 80050ea:	0e1b      	lsrs	r3, r3, #24
 80050ec:	0010      	movs	r0, r2
 80050ee:	0205      	lsls	r5, r0, #8
 80050f0:	431d      	orrs	r5, r3
 80050f2:	000b      	movs	r3, r1
 80050f4:	021c      	lsls	r4, r3, #8
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	085b      	lsrs	r3, r3, #1
 80050fc:	60bb      	str	r3, [r7, #8]
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	68b8      	ldr	r0, [r7, #8]
 8005104:	68f9      	ldr	r1, [r7, #12]
 8005106:	1900      	adds	r0, r0, r4
 8005108:	4169      	adcs	r1, r5
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	603b      	str	r3, [r7, #0]
 8005110:	2300      	movs	r3, #0
 8005112:	607b      	str	r3, [r7, #4]
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f7fb f9c6 	bl	80004a8 <__aeabi_uldivmod>
 800511c:	0002      	movs	r2, r0
 800511e:	000b      	movs	r3, r1
 8005120:	0013      	movs	r3, r2
 8005122:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005124:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005126:	23c0      	movs	r3, #192	@ 0xc0
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	429a      	cmp	r2, r3
 800512c:	d309      	bcc.n	8005142 <UART_SetConfig+0x332>
 800512e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005130:	2380      	movs	r3, #128	@ 0x80
 8005132:	035b      	lsls	r3, r3, #13
 8005134:	429a      	cmp	r2, r3
 8005136:	d204      	bcs.n	8005142 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800513e:	60da      	str	r2, [r3, #12]
 8005140:	e0eb      	b.n	800531a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8005142:	231a      	movs	r3, #26
 8005144:	2218      	movs	r2, #24
 8005146:	189b      	adds	r3, r3, r2
 8005148:	19db      	adds	r3, r3, r7
 800514a:	2201      	movs	r2, #1
 800514c:	701a      	strb	r2, [r3, #0]
 800514e:	e0e4      	b.n	800531a <UART_SetConfig+0x50a>
 8005150:	efff69f3 	.word	0xefff69f3
 8005154:	ffffcfff 	.word	0xffffcfff
 8005158:	40004800 	.word	0x40004800
 800515c:	fffff4ff 	.word	0xfffff4ff
 8005160:	40013800 	.word	0x40013800
 8005164:	40021000 	.word	0x40021000
 8005168:	40004400 	.word	0x40004400
 800516c:	40004c00 	.word	0x40004c00
 8005170:	40005000 	.word	0x40005000
 8005174:	003d0900 	.word	0x003d0900
 8005178:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	2380      	movs	r3, #128	@ 0x80
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	429a      	cmp	r2, r3
 8005186:	d000      	beq.n	800518a <UART_SetConfig+0x37a>
 8005188:	e070      	b.n	800526c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800518a:	231b      	movs	r3, #27
 800518c:	2218      	movs	r2, #24
 800518e:	189b      	adds	r3, r3, r2
 8005190:	19db      	adds	r3, r3, r7
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b08      	cmp	r3, #8
 8005196:	d822      	bhi.n	80051de <UART_SetConfig+0x3ce>
 8005198:	009a      	lsls	r2, r3, #2
 800519a:	4b67      	ldr	r3, [pc, #412]	@ (8005338 <UART_SetConfig+0x528>)
 800519c:	18d3      	adds	r3, r2, r3
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a2:	f7ff fb77 	bl	8004894 <HAL_RCC_GetPCLK1Freq>
 80051a6:	0003      	movs	r3, r0
 80051a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80051aa:	e021      	b.n	80051f0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051ac:	f7ff fb88 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 80051b0:	0003      	movs	r3, r0
 80051b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80051b4:	e01c      	b.n	80051f0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051b6:	4b61      	ldr	r3, [pc, #388]	@ (800533c <UART_SetConfig+0x52c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2210      	movs	r2, #16
 80051bc:	4013      	ands	r3, r2
 80051be:	d002      	beq.n	80051c6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80051c0:	4b5f      	ldr	r3, [pc, #380]	@ (8005340 <UART_SetConfig+0x530>)
 80051c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80051c4:	e014      	b.n	80051f0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80051c6:	4b5f      	ldr	r3, [pc, #380]	@ (8005344 <UART_SetConfig+0x534>)
 80051c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80051ca:	e011      	b.n	80051f0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051cc:	f7ff fad2 	bl	8004774 <HAL_RCC_GetSysClockFreq>
 80051d0:	0003      	movs	r3, r0
 80051d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80051d4:	e00c      	b.n	80051f0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051d6:	2380      	movs	r3, #128	@ 0x80
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80051dc:	e008      	b.n	80051f0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80051e2:	231a      	movs	r3, #26
 80051e4:	2218      	movs	r2, #24
 80051e6:	189b      	adds	r3, r3, r2
 80051e8:	19db      	adds	r3, r3, r7
 80051ea:	2201      	movs	r2, #1
 80051ec:	701a      	strb	r2, [r3, #0]
        break;
 80051ee:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d100      	bne.n	80051f8 <UART_SetConfig+0x3e8>
 80051f6:	e090      	b.n	800531a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051fa:	005a      	lsls	r2, r3, #1
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	085b      	lsrs	r3, r3, #1
 8005202:	18d2      	adds	r2, r2, r3
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	0019      	movs	r1, r3
 800520a:	0010      	movs	r0, r2
 800520c:	f7fa ff98 	bl	8000140 <__udivsi3>
 8005210:	0003      	movs	r3, r0
 8005212:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005216:	2b0f      	cmp	r3, #15
 8005218:	d921      	bls.n	800525e <UART_SetConfig+0x44e>
 800521a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800521c:	2380      	movs	r3, #128	@ 0x80
 800521e:	025b      	lsls	r3, r3, #9
 8005220:	429a      	cmp	r2, r3
 8005222:	d21c      	bcs.n	800525e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005226:	b29a      	uxth	r2, r3
 8005228:	200e      	movs	r0, #14
 800522a:	2418      	movs	r4, #24
 800522c:	1903      	adds	r3, r0, r4
 800522e:	19db      	adds	r3, r3, r7
 8005230:	210f      	movs	r1, #15
 8005232:	438a      	bics	r2, r1
 8005234:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005238:	085b      	lsrs	r3, r3, #1
 800523a:	b29b      	uxth	r3, r3
 800523c:	2207      	movs	r2, #7
 800523e:	4013      	ands	r3, r2
 8005240:	b299      	uxth	r1, r3
 8005242:	1903      	adds	r3, r0, r4
 8005244:	19db      	adds	r3, r3, r7
 8005246:	1902      	adds	r2, r0, r4
 8005248:	19d2      	adds	r2, r2, r7
 800524a:	8812      	ldrh	r2, [r2, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	1902      	adds	r2, r0, r4
 8005256:	19d2      	adds	r2, r2, r7
 8005258:	8812      	ldrh	r2, [r2, #0]
 800525a:	60da      	str	r2, [r3, #12]
 800525c:	e05d      	b.n	800531a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800525e:	231a      	movs	r3, #26
 8005260:	2218      	movs	r2, #24
 8005262:	189b      	adds	r3, r3, r2
 8005264:	19db      	adds	r3, r3, r7
 8005266:	2201      	movs	r2, #1
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	e056      	b.n	800531a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800526c:	231b      	movs	r3, #27
 800526e:	2218      	movs	r2, #24
 8005270:	189b      	adds	r3, r3, r2
 8005272:	19db      	adds	r3, r3, r7
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	2b08      	cmp	r3, #8
 8005278:	d822      	bhi.n	80052c0 <UART_SetConfig+0x4b0>
 800527a:	009a      	lsls	r2, r3, #2
 800527c:	4b32      	ldr	r3, [pc, #200]	@ (8005348 <UART_SetConfig+0x538>)
 800527e:	18d3      	adds	r3, r2, r3
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005284:	f7ff fb06 	bl	8004894 <HAL_RCC_GetPCLK1Freq>
 8005288:	0003      	movs	r3, r0
 800528a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800528c:	e021      	b.n	80052d2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800528e:	f7ff fb17 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 8005292:	0003      	movs	r3, r0
 8005294:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005296:	e01c      	b.n	80052d2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005298:	4b28      	ldr	r3, [pc, #160]	@ (800533c <UART_SetConfig+0x52c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2210      	movs	r2, #16
 800529e:	4013      	ands	r3, r2
 80052a0:	d002      	beq.n	80052a8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80052a2:	4b27      	ldr	r3, [pc, #156]	@ (8005340 <UART_SetConfig+0x530>)
 80052a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052a6:	e014      	b.n	80052d2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80052a8:	4b26      	ldr	r3, [pc, #152]	@ (8005344 <UART_SetConfig+0x534>)
 80052aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052ac:	e011      	b.n	80052d2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ae:	f7ff fa61 	bl	8004774 <HAL_RCC_GetSysClockFreq>
 80052b2:	0003      	movs	r3, r0
 80052b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052b6:	e00c      	b.n	80052d2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052b8:	2380      	movs	r3, #128	@ 0x80
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052be:	e008      	b.n	80052d2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80052c4:	231a      	movs	r3, #26
 80052c6:	2218      	movs	r2, #24
 80052c8:	189b      	adds	r3, r3, r2
 80052ca:	19db      	adds	r3, r3, r7
 80052cc:	2201      	movs	r2, #1
 80052ce:	701a      	strb	r2, [r3, #0]
        break;
 80052d0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80052d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d020      	beq.n	800531a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	085a      	lsrs	r2, r3, #1
 80052de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052e0:	18d2      	adds	r2, r2, r3
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	0019      	movs	r1, r3
 80052e8:	0010      	movs	r0, r2
 80052ea:	f7fa ff29 	bl	8000140 <__udivsi3>
 80052ee:	0003      	movs	r3, r0
 80052f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f4:	2b0f      	cmp	r3, #15
 80052f6:	d90a      	bls.n	800530e <UART_SetConfig+0x4fe>
 80052f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052fa:	2380      	movs	r3, #128	@ 0x80
 80052fc:	025b      	lsls	r3, r3, #9
 80052fe:	429a      	cmp	r2, r3
 8005300:	d205      	bcs.n	800530e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005304:	b29a      	uxth	r2, r3
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60da      	str	r2, [r3, #12]
 800530c:	e005      	b.n	800531a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800530e:	231a      	movs	r3, #26
 8005310:	2218      	movs	r2, #24
 8005312:	189b      	adds	r3, r3, r2
 8005314:	19db      	adds	r3, r3, r7
 8005316:	2201      	movs	r2, #1
 8005318:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	2200      	movs	r2, #0
 800531e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	2200      	movs	r2, #0
 8005324:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005326:	231a      	movs	r3, #26
 8005328:	2218      	movs	r2, #24
 800532a:	189b      	adds	r3, r3, r2
 800532c:	19db      	adds	r3, r3, r7
 800532e:	781b      	ldrb	r3, [r3, #0]
}
 8005330:	0018      	movs	r0, r3
 8005332:	46bd      	mov	sp, r7
 8005334:	b00e      	add	sp, #56	@ 0x38
 8005336:	bdb0      	pop	{r4, r5, r7, pc}
 8005338:	08009818 	.word	0x08009818
 800533c:	40021000 	.word	0x40021000
 8005340:	003d0900 	.word	0x003d0900
 8005344:	00f42400 	.word	0x00f42400
 8005348:	0800983c 	.word	0x0800983c

0800534c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005358:	2208      	movs	r2, #8
 800535a:	4013      	ands	r3, r2
 800535c:	d00b      	beq.n	8005376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	4a4a      	ldr	r2, [pc, #296]	@ (8005490 <UART_AdvFeatureConfig+0x144>)
 8005366:	4013      	ands	r3, r2
 8005368:	0019      	movs	r1, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537a:	2201      	movs	r2, #1
 800537c:	4013      	ands	r3, r2
 800537e:	d00b      	beq.n	8005398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	4a43      	ldr	r2, [pc, #268]	@ (8005494 <UART_AdvFeatureConfig+0x148>)
 8005388:	4013      	ands	r3, r2
 800538a:	0019      	movs	r1, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539c:	2202      	movs	r2, #2
 800539e:	4013      	ands	r3, r2
 80053a0:	d00b      	beq.n	80053ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	4a3b      	ldr	r2, [pc, #236]	@ (8005498 <UART_AdvFeatureConfig+0x14c>)
 80053aa:	4013      	ands	r3, r2
 80053ac:	0019      	movs	r1, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053be:	2204      	movs	r2, #4
 80053c0:	4013      	ands	r3, r2
 80053c2:	d00b      	beq.n	80053dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	4a34      	ldr	r2, [pc, #208]	@ (800549c <UART_AdvFeatureConfig+0x150>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	0019      	movs	r1, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e0:	2210      	movs	r2, #16
 80053e2:	4013      	ands	r3, r2
 80053e4:	d00b      	beq.n	80053fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	4a2c      	ldr	r2, [pc, #176]	@ (80054a0 <UART_AdvFeatureConfig+0x154>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	0019      	movs	r1, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005402:	2220      	movs	r2, #32
 8005404:	4013      	ands	r3, r2
 8005406:	d00b      	beq.n	8005420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	4a25      	ldr	r2, [pc, #148]	@ (80054a4 <UART_AdvFeatureConfig+0x158>)
 8005410:	4013      	ands	r3, r2
 8005412:	0019      	movs	r1, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005424:	2240      	movs	r2, #64	@ 0x40
 8005426:	4013      	ands	r3, r2
 8005428:	d01d      	beq.n	8005466 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	4a1d      	ldr	r2, [pc, #116]	@ (80054a8 <UART_AdvFeatureConfig+0x15c>)
 8005432:	4013      	ands	r3, r2
 8005434:	0019      	movs	r1, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005446:	2380      	movs	r3, #128	@ 0x80
 8005448:	035b      	lsls	r3, r3, #13
 800544a:	429a      	cmp	r2, r3
 800544c:	d10b      	bne.n	8005466 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	4a15      	ldr	r2, [pc, #84]	@ (80054ac <UART_AdvFeatureConfig+0x160>)
 8005456:	4013      	ands	r3, r2
 8005458:	0019      	movs	r1, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546a:	2280      	movs	r2, #128	@ 0x80
 800546c:	4013      	ands	r3, r2
 800546e:	d00b      	beq.n	8005488 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	4a0e      	ldr	r2, [pc, #56]	@ (80054b0 <UART_AdvFeatureConfig+0x164>)
 8005478:	4013      	ands	r3, r2
 800547a:	0019      	movs	r1, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	605a      	str	r2, [r3, #4]
  }
}
 8005488:	46c0      	nop			@ (mov r8, r8)
 800548a:	46bd      	mov	sp, r7
 800548c:	b002      	add	sp, #8
 800548e:	bd80      	pop	{r7, pc}
 8005490:	ffff7fff 	.word	0xffff7fff
 8005494:	fffdffff 	.word	0xfffdffff
 8005498:	fffeffff 	.word	0xfffeffff
 800549c:	fffbffff 	.word	0xfffbffff
 80054a0:	ffffefff 	.word	0xffffefff
 80054a4:	ffffdfff 	.word	0xffffdfff
 80054a8:	ffefffff 	.word	0xffefffff
 80054ac:	ff9fffff 	.word	0xff9fffff
 80054b0:	fff7ffff 	.word	0xfff7ffff

080054b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b092      	sub	sp, #72	@ 0x48
 80054b8:	af02      	add	r7, sp, #8
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2284      	movs	r2, #132	@ 0x84
 80054c0:	2100      	movs	r1, #0
 80054c2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054c4:	f7fd fe1a 	bl	80030fc <HAL_GetTick>
 80054c8:	0003      	movs	r3, r0
 80054ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2208      	movs	r2, #8
 80054d4:	4013      	ands	r3, r2
 80054d6:	2b08      	cmp	r3, #8
 80054d8:	d12c      	bne.n	8005534 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054dc:	2280      	movs	r2, #128	@ 0x80
 80054de:	0391      	lsls	r1, r2, #14
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	4a46      	ldr	r2, [pc, #280]	@ (80055fc <UART_CheckIdleState+0x148>)
 80054e4:	9200      	str	r2, [sp, #0]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f000 f88c 	bl	8005604 <UART_WaitOnFlagUntilTimeout>
 80054ec:	1e03      	subs	r3, r0, #0
 80054ee:	d021      	beq.n	8005534 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054f0:	f3ef 8310 	mrs	r3, PRIMASK
 80054f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80054f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054fa:	2301      	movs	r3, #1
 80054fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005500:	f383 8810 	msr	PRIMASK, r3
}
 8005504:	46c0      	nop			@ (mov r8, r8)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2180      	movs	r1, #128	@ 0x80
 8005512:	438a      	bics	r2, r1
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005518:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800551a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551c:	f383 8810 	msr	PRIMASK, r3
}
 8005520:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2220      	movs	r2, #32
 8005526:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2278      	movs	r2, #120	@ 0x78
 800552c:	2100      	movs	r1, #0
 800552e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e05f      	b.n	80055f4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2204      	movs	r2, #4
 800553c:	4013      	ands	r3, r2
 800553e:	2b04      	cmp	r3, #4
 8005540:	d146      	bne.n	80055d0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005544:	2280      	movs	r2, #128	@ 0x80
 8005546:	03d1      	lsls	r1, r2, #15
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	4a2c      	ldr	r2, [pc, #176]	@ (80055fc <UART_CheckIdleState+0x148>)
 800554c:	9200      	str	r2, [sp, #0]
 800554e:	2200      	movs	r2, #0
 8005550:	f000 f858 	bl	8005604 <UART_WaitOnFlagUntilTimeout>
 8005554:	1e03      	subs	r3, r0, #0
 8005556:	d03b      	beq.n	80055d0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005558:	f3ef 8310 	mrs	r3, PRIMASK
 800555c:	60fb      	str	r3, [r7, #12]
  return(result);
 800555e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005560:	637b      	str	r3, [r7, #52]	@ 0x34
 8005562:	2301      	movs	r3, #1
 8005564:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f383 8810 	msr	PRIMASK, r3
}
 800556c:	46c0      	nop			@ (mov r8, r8)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4921      	ldr	r1, [pc, #132]	@ (8005600 <UART_CheckIdleState+0x14c>)
 800557a:	400a      	ands	r2, r1
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005580:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f383 8810 	msr	PRIMASK, r3
}
 8005588:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800558a:	f3ef 8310 	mrs	r3, PRIMASK
 800558e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005590:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005592:	633b      	str	r3, [r7, #48]	@ 0x30
 8005594:	2301      	movs	r3, #1
 8005596:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	f383 8810 	msr	PRIMASK, r3
}
 800559e:	46c0      	nop			@ (mov r8, r8)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2101      	movs	r1, #1
 80055ac:	438a      	bics	r2, r1
 80055ae:	609a      	str	r2, [r3, #8]
 80055b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	f383 8810 	msr	PRIMASK, r3
}
 80055ba:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2280      	movs	r2, #128	@ 0x80
 80055c0:	2120      	movs	r1, #32
 80055c2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2278      	movs	r2, #120	@ 0x78
 80055c8:	2100      	movs	r1, #0
 80055ca:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e011      	b.n	80055f4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2280      	movs	r2, #128	@ 0x80
 80055da:	2120      	movs	r1, #32
 80055dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2278      	movs	r2, #120	@ 0x78
 80055ee:	2100      	movs	r1, #0
 80055f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	0018      	movs	r0, r3
 80055f6:	46bd      	mov	sp, r7
 80055f8:	b010      	add	sp, #64	@ 0x40
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	01ffffff 	.word	0x01ffffff
 8005600:	fffffedf 	.word	0xfffffedf

08005604 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	1dfb      	adds	r3, r7, #7
 8005612:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005614:	e051      	b.n	80056ba <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	3301      	adds	r3, #1
 800561a:	d04e      	beq.n	80056ba <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561c:	f7fd fd6e 	bl	80030fc <HAL_GetTick>
 8005620:	0002      	movs	r2, r0
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	429a      	cmp	r2, r3
 800562a:	d302      	bcc.n	8005632 <UART_WaitOnFlagUntilTimeout+0x2e>
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e051      	b.n	80056da <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2204      	movs	r2, #4
 800563e:	4013      	ands	r3, r2
 8005640:	d03b      	beq.n	80056ba <UART_WaitOnFlagUntilTimeout+0xb6>
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b80      	cmp	r3, #128	@ 0x80
 8005646:	d038      	beq.n	80056ba <UART_WaitOnFlagUntilTimeout+0xb6>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b40      	cmp	r3, #64	@ 0x40
 800564c:	d035      	beq.n	80056ba <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	2208      	movs	r2, #8
 8005656:	4013      	ands	r3, r2
 8005658:	2b08      	cmp	r3, #8
 800565a:	d111      	bne.n	8005680 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2208      	movs	r2, #8
 8005662:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	0018      	movs	r0, r3
 8005668:	f000 f83c 	bl	80056e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2284      	movs	r2, #132	@ 0x84
 8005670:	2108      	movs	r1, #8
 8005672:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2278      	movs	r2, #120	@ 0x78
 8005678:	2100      	movs	r1, #0
 800567a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e02c      	b.n	80056da <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69da      	ldr	r2, [r3, #28]
 8005686:	2380      	movs	r3, #128	@ 0x80
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	401a      	ands	r2, r3
 800568c:	2380      	movs	r3, #128	@ 0x80
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	429a      	cmp	r2, r3
 8005692:	d112      	bne.n	80056ba <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2280      	movs	r2, #128	@ 0x80
 800569a:	0112      	lsls	r2, r2, #4
 800569c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	0018      	movs	r0, r3
 80056a2:	f000 f81f 	bl	80056e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2284      	movs	r2, #132	@ 0x84
 80056aa:	2120      	movs	r1, #32
 80056ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2278      	movs	r2, #120	@ 0x78
 80056b2:	2100      	movs	r1, #0
 80056b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e00f      	b.n	80056da <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	4013      	ands	r3, r2
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	425a      	negs	r2, r3
 80056ca:	4153      	adcs	r3, r2
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	001a      	movs	r2, r3
 80056d0:	1dfb      	adds	r3, r7, #7
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d09e      	beq.n	8005616 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	0018      	movs	r0, r3
 80056dc:	46bd      	mov	sp, r7
 80056de:	b004      	add	sp, #16
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b08e      	sub	sp, #56	@ 0x38
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ec:	f3ef 8310 	mrs	r3, PRIMASK
 80056f0:	617b      	str	r3, [r7, #20]
  return(result);
 80056f2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80056f6:	2301      	movs	r3, #1
 80056f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	f383 8810 	msr	PRIMASK, r3
}
 8005700:	46c0      	nop			@ (mov r8, r8)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4926      	ldr	r1, [pc, #152]	@ (80057a8 <UART_EndRxTransfer+0xc4>)
 800570e:	400a      	ands	r2, r1
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005714:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	f383 8810 	msr	PRIMASK, r3
}
 800571c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800571e:	f3ef 8310 	mrs	r3, PRIMASK
 8005722:	623b      	str	r3, [r7, #32]
  return(result);
 8005724:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005726:	633b      	str	r3, [r7, #48]	@ 0x30
 8005728:	2301      	movs	r3, #1
 800572a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572e:	f383 8810 	msr	PRIMASK, r3
}
 8005732:	46c0      	nop			@ (mov r8, r8)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2101      	movs	r1, #1
 8005740:	438a      	bics	r2, r1
 8005742:	609a      	str	r2, [r3, #8]
 8005744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005746:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574a:	f383 8810 	msr	PRIMASK, r3
}
 800574e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005754:	2b01      	cmp	r3, #1
 8005756:	d118      	bne.n	800578a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005758:	f3ef 8310 	mrs	r3, PRIMASK
 800575c:	60bb      	str	r3, [r7, #8]
  return(result);
 800575e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005762:	2301      	movs	r3, #1
 8005764:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f383 8810 	msr	PRIMASK, r3
}
 800576c:	46c0      	nop			@ (mov r8, r8)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2110      	movs	r1, #16
 800577a:	438a      	bics	r2, r1
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005780:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f383 8810 	msr	PRIMASK, r3
}
 8005788:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2280      	movs	r2, #128	@ 0x80
 800578e:	2120      	movs	r1, #32
 8005790:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800579e:	46c0      	nop			@ (mov r8, r8)
 80057a0:	46bd      	mov	sp, r7
 80057a2:	b00e      	add	sp, #56	@ 0x38
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	46c0      	nop			@ (mov r8, r8)
 80057a8:	fffffedf 	.word	0xfffffedf

080057ac <__cvt>:
 80057ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ae:	001f      	movs	r7, r3
 80057b0:	2300      	movs	r3, #0
 80057b2:	0016      	movs	r6, r2
 80057b4:	b08b      	sub	sp, #44	@ 0x2c
 80057b6:	429f      	cmp	r7, r3
 80057b8:	da04      	bge.n	80057c4 <__cvt+0x18>
 80057ba:	2180      	movs	r1, #128	@ 0x80
 80057bc:	0609      	lsls	r1, r1, #24
 80057be:	187b      	adds	r3, r7, r1
 80057c0:	001f      	movs	r7, r3
 80057c2:	232d      	movs	r3, #45	@ 0x2d
 80057c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80057c6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80057c8:	7013      	strb	r3, [r2, #0]
 80057ca:	2320      	movs	r3, #32
 80057cc:	2203      	movs	r2, #3
 80057ce:	439d      	bics	r5, r3
 80057d0:	2d46      	cmp	r5, #70	@ 0x46
 80057d2:	d007      	beq.n	80057e4 <__cvt+0x38>
 80057d4:	002b      	movs	r3, r5
 80057d6:	3b45      	subs	r3, #69	@ 0x45
 80057d8:	4259      	negs	r1, r3
 80057da:	414b      	adcs	r3, r1
 80057dc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80057de:	3a01      	subs	r2, #1
 80057e0:	18cb      	adds	r3, r1, r3
 80057e2:	9310      	str	r3, [sp, #64]	@ 0x40
 80057e4:	ab09      	add	r3, sp, #36	@ 0x24
 80057e6:	9304      	str	r3, [sp, #16]
 80057e8:	ab08      	add	r3, sp, #32
 80057ea:	9303      	str	r3, [sp, #12]
 80057ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80057ee:	9200      	str	r2, [sp, #0]
 80057f0:	9302      	str	r3, [sp, #8]
 80057f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80057f4:	0032      	movs	r2, r6
 80057f6:	9301      	str	r3, [sp, #4]
 80057f8:	003b      	movs	r3, r7
 80057fa:	f000 fe81 	bl	8006500 <_dtoa_r>
 80057fe:	0004      	movs	r4, r0
 8005800:	2d47      	cmp	r5, #71	@ 0x47
 8005802:	d11b      	bne.n	800583c <__cvt+0x90>
 8005804:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005806:	07db      	lsls	r3, r3, #31
 8005808:	d511      	bpl.n	800582e <__cvt+0x82>
 800580a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800580c:	18c3      	adds	r3, r0, r3
 800580e:	9307      	str	r3, [sp, #28]
 8005810:	2200      	movs	r2, #0
 8005812:	2300      	movs	r3, #0
 8005814:	0030      	movs	r0, r6
 8005816:	0039      	movs	r1, r7
 8005818:	f7fa fe18 	bl	800044c <__aeabi_dcmpeq>
 800581c:	2800      	cmp	r0, #0
 800581e:	d001      	beq.n	8005824 <__cvt+0x78>
 8005820:	9b07      	ldr	r3, [sp, #28]
 8005822:	9309      	str	r3, [sp, #36]	@ 0x24
 8005824:	2230      	movs	r2, #48	@ 0x30
 8005826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005828:	9907      	ldr	r1, [sp, #28]
 800582a:	428b      	cmp	r3, r1
 800582c:	d320      	bcc.n	8005870 <__cvt+0xc4>
 800582e:	0020      	movs	r0, r4
 8005830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005832:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005834:	1b1b      	subs	r3, r3, r4
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	b00b      	add	sp, #44	@ 0x2c
 800583a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800583c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800583e:	18c3      	adds	r3, r0, r3
 8005840:	9307      	str	r3, [sp, #28]
 8005842:	2d46      	cmp	r5, #70	@ 0x46
 8005844:	d1e4      	bne.n	8005810 <__cvt+0x64>
 8005846:	7803      	ldrb	r3, [r0, #0]
 8005848:	2b30      	cmp	r3, #48	@ 0x30
 800584a:	d10c      	bne.n	8005866 <__cvt+0xba>
 800584c:	2200      	movs	r2, #0
 800584e:	2300      	movs	r3, #0
 8005850:	0030      	movs	r0, r6
 8005852:	0039      	movs	r1, r7
 8005854:	f7fa fdfa 	bl	800044c <__aeabi_dcmpeq>
 8005858:	2800      	cmp	r0, #0
 800585a:	d104      	bne.n	8005866 <__cvt+0xba>
 800585c:	2301      	movs	r3, #1
 800585e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005860:	1a9b      	subs	r3, r3, r2
 8005862:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005868:	9a07      	ldr	r2, [sp, #28]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	18d3      	adds	r3, r2, r3
 800586e:	e7ce      	b.n	800580e <__cvt+0x62>
 8005870:	1c59      	adds	r1, r3, #1
 8005872:	9109      	str	r1, [sp, #36]	@ 0x24
 8005874:	701a      	strb	r2, [r3, #0]
 8005876:	e7d6      	b.n	8005826 <__cvt+0x7a>

08005878 <__exponent>:
 8005878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800587a:	232b      	movs	r3, #43	@ 0x2b
 800587c:	b085      	sub	sp, #20
 800587e:	0005      	movs	r5, r0
 8005880:	1e0c      	subs	r4, r1, #0
 8005882:	7002      	strb	r2, [r0, #0]
 8005884:	da01      	bge.n	800588a <__exponent+0x12>
 8005886:	424c      	negs	r4, r1
 8005888:	3302      	adds	r3, #2
 800588a:	706b      	strb	r3, [r5, #1]
 800588c:	2c09      	cmp	r4, #9
 800588e:	dd2c      	ble.n	80058ea <__exponent+0x72>
 8005890:	ab02      	add	r3, sp, #8
 8005892:	1dde      	adds	r6, r3, #7
 8005894:	0020      	movs	r0, r4
 8005896:	210a      	movs	r1, #10
 8005898:	f7fa fdc2 	bl	8000420 <__aeabi_idivmod>
 800589c:	0037      	movs	r7, r6
 800589e:	3130      	adds	r1, #48	@ 0x30
 80058a0:	3e01      	subs	r6, #1
 80058a2:	0020      	movs	r0, r4
 80058a4:	7031      	strb	r1, [r6, #0]
 80058a6:	210a      	movs	r1, #10
 80058a8:	9401      	str	r4, [sp, #4]
 80058aa:	f7fa fcd3 	bl	8000254 <__divsi3>
 80058ae:	9b01      	ldr	r3, [sp, #4]
 80058b0:	0004      	movs	r4, r0
 80058b2:	2b63      	cmp	r3, #99	@ 0x63
 80058b4:	dcee      	bgt.n	8005894 <__exponent+0x1c>
 80058b6:	1eba      	subs	r2, r7, #2
 80058b8:	1ca8      	adds	r0, r5, #2
 80058ba:	0001      	movs	r1, r0
 80058bc:	0013      	movs	r3, r2
 80058be:	3430      	adds	r4, #48	@ 0x30
 80058c0:	7014      	strb	r4, [r2, #0]
 80058c2:	ac02      	add	r4, sp, #8
 80058c4:	3407      	adds	r4, #7
 80058c6:	429c      	cmp	r4, r3
 80058c8:	d80a      	bhi.n	80058e0 <__exponent+0x68>
 80058ca:	2300      	movs	r3, #0
 80058cc:	4294      	cmp	r4, r2
 80058ce:	d303      	bcc.n	80058d8 <__exponent+0x60>
 80058d0:	3309      	adds	r3, #9
 80058d2:	aa02      	add	r2, sp, #8
 80058d4:	189b      	adds	r3, r3, r2
 80058d6:	1bdb      	subs	r3, r3, r7
 80058d8:	18c0      	adds	r0, r0, r3
 80058da:	1b40      	subs	r0, r0, r5
 80058dc:	b005      	add	sp, #20
 80058de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058e0:	781c      	ldrb	r4, [r3, #0]
 80058e2:	3301      	adds	r3, #1
 80058e4:	700c      	strb	r4, [r1, #0]
 80058e6:	3101      	adds	r1, #1
 80058e8:	e7eb      	b.n	80058c2 <__exponent+0x4a>
 80058ea:	2330      	movs	r3, #48	@ 0x30
 80058ec:	18e4      	adds	r4, r4, r3
 80058ee:	70ab      	strb	r3, [r5, #2]
 80058f0:	1d28      	adds	r0, r5, #4
 80058f2:	70ec      	strb	r4, [r5, #3]
 80058f4:	e7f1      	b.n	80058da <__exponent+0x62>
	...

080058f8 <_printf_float>:
 80058f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058fa:	b097      	sub	sp, #92	@ 0x5c
 80058fc:	000d      	movs	r5, r1
 80058fe:	920a      	str	r2, [sp, #40]	@ 0x28
 8005900:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8005902:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005904:	9009      	str	r0, [sp, #36]	@ 0x24
 8005906:	f000 fceb 	bl	80062e0 <_localeconv_r>
 800590a:	6803      	ldr	r3, [r0, #0]
 800590c:	0018      	movs	r0, r3
 800590e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005910:	f7fa fbfa 	bl	8000108 <strlen>
 8005914:	2300      	movs	r3, #0
 8005916:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005918:	9314      	str	r3, [sp, #80]	@ 0x50
 800591a:	7e2b      	ldrb	r3, [r5, #24]
 800591c:	2207      	movs	r2, #7
 800591e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005920:	682b      	ldr	r3, [r5, #0]
 8005922:	930e      	str	r3, [sp, #56]	@ 0x38
 8005924:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	05c9      	lsls	r1, r1, #23
 800592a:	d545      	bpl.n	80059b8 <_printf_float+0xc0>
 800592c:	189b      	adds	r3, r3, r2
 800592e:	4393      	bics	r3, r2
 8005930:	001a      	movs	r2, r3
 8005932:	3208      	adds	r2, #8
 8005934:	6022      	str	r2, [r4, #0]
 8005936:	2201      	movs	r2, #1
 8005938:	681e      	ldr	r6, [r3, #0]
 800593a:	685f      	ldr	r7, [r3, #4]
 800593c:	007b      	lsls	r3, r7, #1
 800593e:	085b      	lsrs	r3, r3, #1
 8005940:	9311      	str	r3, [sp, #68]	@ 0x44
 8005942:	9610      	str	r6, [sp, #64]	@ 0x40
 8005944:	64ae      	str	r6, [r5, #72]	@ 0x48
 8005946:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8005948:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800594a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800594c:	4ba7      	ldr	r3, [pc, #668]	@ (8005bec <_printf_float+0x2f4>)
 800594e:	4252      	negs	r2, r2
 8005950:	f7fc fd86 	bl	8002460 <__aeabi_dcmpun>
 8005954:	2800      	cmp	r0, #0
 8005956:	d131      	bne.n	80059bc <_printf_float+0xc4>
 8005958:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800595a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800595c:	2201      	movs	r2, #1
 800595e:	4ba3      	ldr	r3, [pc, #652]	@ (8005bec <_printf_float+0x2f4>)
 8005960:	4252      	negs	r2, r2
 8005962:	f7fa fd83 	bl	800046c <__aeabi_dcmple>
 8005966:	2800      	cmp	r0, #0
 8005968:	d128      	bne.n	80059bc <_printf_float+0xc4>
 800596a:	2200      	movs	r2, #0
 800596c:	2300      	movs	r3, #0
 800596e:	0030      	movs	r0, r6
 8005970:	0039      	movs	r1, r7
 8005972:	f7fa fd71 	bl	8000458 <__aeabi_dcmplt>
 8005976:	2800      	cmp	r0, #0
 8005978:	d003      	beq.n	8005982 <_printf_float+0x8a>
 800597a:	002b      	movs	r3, r5
 800597c:	222d      	movs	r2, #45	@ 0x2d
 800597e:	3343      	adds	r3, #67	@ 0x43
 8005980:	701a      	strb	r2, [r3, #0]
 8005982:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005984:	4f9a      	ldr	r7, [pc, #616]	@ (8005bf0 <_printf_float+0x2f8>)
 8005986:	2b47      	cmp	r3, #71	@ 0x47
 8005988:	d800      	bhi.n	800598c <_printf_float+0x94>
 800598a:	4f9a      	ldr	r7, [pc, #616]	@ (8005bf4 <_printf_float+0x2fc>)
 800598c:	2303      	movs	r3, #3
 800598e:	2400      	movs	r4, #0
 8005990:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005992:	612b      	str	r3, [r5, #16]
 8005994:	3301      	adds	r3, #1
 8005996:	439a      	bics	r2, r3
 8005998:	602a      	str	r2, [r5, #0]
 800599a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800599c:	0029      	movs	r1, r5
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059a4:	aa15      	add	r2, sp, #84	@ 0x54
 80059a6:	f000 f9e5 	bl	8005d74 <_printf_common>
 80059aa:	3001      	adds	r0, #1
 80059ac:	d000      	beq.n	80059b0 <_printf_float+0xb8>
 80059ae:	e09e      	b.n	8005aee <_printf_float+0x1f6>
 80059b0:	2001      	movs	r0, #1
 80059b2:	4240      	negs	r0, r0
 80059b4:	b017      	add	sp, #92	@ 0x5c
 80059b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b8:	3307      	adds	r3, #7
 80059ba:	e7b8      	b.n	800592e <_printf_float+0x36>
 80059bc:	0032      	movs	r2, r6
 80059be:	003b      	movs	r3, r7
 80059c0:	0030      	movs	r0, r6
 80059c2:	0039      	movs	r1, r7
 80059c4:	f7fc fd4c 	bl	8002460 <__aeabi_dcmpun>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d00b      	beq.n	80059e4 <_printf_float+0xec>
 80059cc:	2f00      	cmp	r7, #0
 80059ce:	da03      	bge.n	80059d8 <_printf_float+0xe0>
 80059d0:	002b      	movs	r3, r5
 80059d2:	222d      	movs	r2, #45	@ 0x2d
 80059d4:	3343      	adds	r3, #67	@ 0x43
 80059d6:	701a      	strb	r2, [r3, #0]
 80059d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80059da:	4f87      	ldr	r7, [pc, #540]	@ (8005bf8 <_printf_float+0x300>)
 80059dc:	2b47      	cmp	r3, #71	@ 0x47
 80059de:	d8d5      	bhi.n	800598c <_printf_float+0x94>
 80059e0:	4f86      	ldr	r7, [pc, #536]	@ (8005bfc <_printf_float+0x304>)
 80059e2:	e7d3      	b.n	800598c <_printf_float+0x94>
 80059e4:	2220      	movs	r2, #32
 80059e6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80059e8:	686b      	ldr	r3, [r5, #4]
 80059ea:	4394      	bics	r4, r2
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	d146      	bne.n	8005a7e <_printf_float+0x186>
 80059f0:	3307      	adds	r3, #7
 80059f2:	606b      	str	r3, [r5, #4]
 80059f4:	2380      	movs	r3, #128	@ 0x80
 80059f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	4313      	orrs	r3, r2
 80059fc:	2200      	movs	r2, #0
 80059fe:	602b      	str	r3, [r5, #0]
 8005a00:	9206      	str	r2, [sp, #24]
 8005a02:	aa14      	add	r2, sp, #80	@ 0x50
 8005a04:	9205      	str	r2, [sp, #20]
 8005a06:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005a08:	a90a      	add	r1, sp, #40	@ 0x28
 8005a0a:	9204      	str	r2, [sp, #16]
 8005a0c:	aa13      	add	r2, sp, #76	@ 0x4c
 8005a0e:	9203      	str	r2, [sp, #12]
 8005a10:	2223      	movs	r2, #35	@ 0x23
 8005a12:	1852      	adds	r2, r2, r1
 8005a14:	9202      	str	r2, [sp, #8]
 8005a16:	9301      	str	r3, [sp, #4]
 8005a18:	686b      	ldr	r3, [r5, #4]
 8005a1a:	0032      	movs	r2, r6
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a20:	003b      	movs	r3, r7
 8005a22:	f7ff fec3 	bl	80057ac <__cvt>
 8005a26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005a28:	0007      	movs	r7, r0
 8005a2a:	2c47      	cmp	r4, #71	@ 0x47
 8005a2c:	d12d      	bne.n	8005a8a <_printf_float+0x192>
 8005a2e:	1cd3      	adds	r3, r2, #3
 8005a30:	db02      	blt.n	8005a38 <_printf_float+0x140>
 8005a32:	686b      	ldr	r3, [r5, #4]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	dd47      	ble.n	8005ac8 <_printf_float+0x1d0>
 8005a38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a3a:	3b02      	subs	r3, #2
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005a40:	0028      	movs	r0, r5
 8005a42:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005a44:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005a46:	3901      	subs	r1, #1
 8005a48:	3050      	adds	r0, #80	@ 0x50
 8005a4a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005a4c:	f7ff ff14 	bl	8005878 <__exponent>
 8005a50:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005a52:	0004      	movs	r4, r0
 8005a54:	1813      	adds	r3, r2, r0
 8005a56:	612b      	str	r3, [r5, #16]
 8005a58:	2a01      	cmp	r2, #1
 8005a5a:	dc02      	bgt.n	8005a62 <_printf_float+0x16a>
 8005a5c:	682a      	ldr	r2, [r5, #0]
 8005a5e:	07d2      	lsls	r2, r2, #31
 8005a60:	d501      	bpl.n	8005a66 <_printf_float+0x16e>
 8005a62:	3301      	adds	r3, #1
 8005a64:	612b      	str	r3, [r5, #16]
 8005a66:	2323      	movs	r3, #35	@ 0x23
 8005a68:	aa0a      	add	r2, sp, #40	@ 0x28
 8005a6a:	189b      	adds	r3, r3, r2
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d100      	bne.n	8005a74 <_printf_float+0x17c>
 8005a72:	e792      	b.n	800599a <_printf_float+0xa2>
 8005a74:	002b      	movs	r3, r5
 8005a76:	222d      	movs	r2, #45	@ 0x2d
 8005a78:	3343      	adds	r3, #67	@ 0x43
 8005a7a:	701a      	strb	r2, [r3, #0]
 8005a7c:	e78d      	b.n	800599a <_printf_float+0xa2>
 8005a7e:	2c47      	cmp	r4, #71	@ 0x47
 8005a80:	d1b8      	bne.n	80059f4 <_printf_float+0xfc>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1b6      	bne.n	80059f4 <_printf_float+0xfc>
 8005a86:	3301      	adds	r3, #1
 8005a88:	e7b3      	b.n	80059f2 <_printf_float+0xfa>
 8005a8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a8c:	2b65      	cmp	r3, #101	@ 0x65
 8005a8e:	d9d7      	bls.n	8005a40 <_printf_float+0x148>
 8005a90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a92:	2b66      	cmp	r3, #102	@ 0x66
 8005a94:	d11a      	bne.n	8005acc <_printf_float+0x1d4>
 8005a96:	686b      	ldr	r3, [r5, #4]
 8005a98:	2a00      	cmp	r2, #0
 8005a9a:	dd09      	ble.n	8005ab0 <_printf_float+0x1b8>
 8005a9c:	612a      	str	r2, [r5, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d102      	bne.n	8005aa8 <_printf_float+0x1b0>
 8005aa2:	6829      	ldr	r1, [r5, #0]
 8005aa4:	07c9      	lsls	r1, r1, #31
 8005aa6:	d50b      	bpl.n	8005ac0 <_printf_float+0x1c8>
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	189b      	adds	r3, r3, r2
 8005aac:	612b      	str	r3, [r5, #16]
 8005aae:	e007      	b.n	8005ac0 <_printf_float+0x1c8>
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d103      	bne.n	8005abc <_printf_float+0x1c4>
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	6829      	ldr	r1, [r5, #0]
 8005ab8:	4211      	tst	r1, r2
 8005aba:	d000      	beq.n	8005abe <_printf_float+0x1c6>
 8005abc:	1c9a      	adds	r2, r3, #2
 8005abe:	612a      	str	r2, [r5, #16]
 8005ac0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005ac2:	2400      	movs	r4, #0
 8005ac4:	65ab      	str	r3, [r5, #88]	@ 0x58
 8005ac6:	e7ce      	b.n	8005a66 <_printf_float+0x16e>
 8005ac8:	2367      	movs	r3, #103	@ 0x67
 8005aca:	930c      	str	r3, [sp, #48]	@ 0x30
 8005acc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005ace:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005ad0:	4299      	cmp	r1, r3
 8005ad2:	db06      	blt.n	8005ae2 <_printf_float+0x1ea>
 8005ad4:	682b      	ldr	r3, [r5, #0]
 8005ad6:	6129      	str	r1, [r5, #16]
 8005ad8:	07db      	lsls	r3, r3, #31
 8005ada:	d5f1      	bpl.n	8005ac0 <_printf_float+0x1c8>
 8005adc:	3101      	adds	r1, #1
 8005ade:	6129      	str	r1, [r5, #16]
 8005ae0:	e7ee      	b.n	8005ac0 <_printf_float+0x1c8>
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	2900      	cmp	r1, #0
 8005ae6:	dce0      	bgt.n	8005aaa <_printf_float+0x1b2>
 8005ae8:	1892      	adds	r2, r2, r2
 8005aea:	1a52      	subs	r2, r2, r1
 8005aec:	e7dd      	b.n	8005aaa <_printf_float+0x1b2>
 8005aee:	682a      	ldr	r2, [r5, #0]
 8005af0:	0553      	lsls	r3, r2, #21
 8005af2:	d408      	bmi.n	8005b06 <_printf_float+0x20e>
 8005af4:	692b      	ldr	r3, [r5, #16]
 8005af6:	003a      	movs	r2, r7
 8005af8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005afa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005afc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005afe:	47a0      	blx	r4
 8005b00:	3001      	adds	r0, #1
 8005b02:	d129      	bne.n	8005b58 <_printf_float+0x260>
 8005b04:	e754      	b.n	80059b0 <_printf_float+0xb8>
 8005b06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b08:	2b65      	cmp	r3, #101	@ 0x65
 8005b0a:	d800      	bhi.n	8005b0e <_printf_float+0x216>
 8005b0c:	e0db      	b.n	8005cc6 <_printf_float+0x3ce>
 8005b0e:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8005b10:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005b12:	2200      	movs	r2, #0
 8005b14:	2300      	movs	r3, #0
 8005b16:	f7fa fc99 	bl	800044c <__aeabi_dcmpeq>
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	d033      	beq.n	8005b86 <_printf_float+0x28e>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	4a37      	ldr	r2, [pc, #220]	@ (8005c00 <_printf_float+0x308>)
 8005b22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005b24:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b26:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005b28:	47a0      	blx	r4
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	d100      	bne.n	8005b30 <_printf_float+0x238>
 8005b2e:	e73f      	b.n	80059b0 <_printf_float+0xb8>
 8005b30:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8005b32:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005b34:	42b3      	cmp	r3, r6
 8005b36:	db02      	blt.n	8005b3e <_printf_float+0x246>
 8005b38:	682b      	ldr	r3, [r5, #0]
 8005b3a:	07db      	lsls	r3, r3, #31
 8005b3c:	d50c      	bpl.n	8005b58 <_printf_float+0x260>
 8005b3e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005b40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b42:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005b44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005b46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b48:	47a0      	blx	r4
 8005b4a:	2400      	movs	r4, #0
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	d100      	bne.n	8005b52 <_printf_float+0x25a>
 8005b50:	e72e      	b.n	80059b0 <_printf_float+0xb8>
 8005b52:	1e73      	subs	r3, r6, #1
 8005b54:	42a3      	cmp	r3, r4
 8005b56:	dc0a      	bgt.n	8005b6e <_printf_float+0x276>
 8005b58:	682b      	ldr	r3, [r5, #0]
 8005b5a:	079b      	lsls	r3, r3, #30
 8005b5c:	d500      	bpl.n	8005b60 <_printf_float+0x268>
 8005b5e:	e106      	b.n	8005d6e <_printf_float+0x476>
 8005b60:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005b62:	68e8      	ldr	r0, [r5, #12]
 8005b64:	4298      	cmp	r0, r3
 8005b66:	db00      	blt.n	8005b6a <_printf_float+0x272>
 8005b68:	e724      	b.n	80059b4 <_printf_float+0xbc>
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	e722      	b.n	80059b4 <_printf_float+0xbc>
 8005b6e:	002a      	movs	r2, r5
 8005b70:	2301      	movs	r3, #1
 8005b72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005b74:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b76:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005b78:	321a      	adds	r2, #26
 8005b7a:	47b8      	blx	r7
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d100      	bne.n	8005b82 <_printf_float+0x28a>
 8005b80:	e716      	b.n	80059b0 <_printf_float+0xb8>
 8005b82:	3401      	adds	r4, #1
 8005b84:	e7e5      	b.n	8005b52 <_printf_float+0x25a>
 8005b86:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	dc3b      	bgt.n	8005c04 <_printf_float+0x30c>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8005c00 <_printf_float+0x308>)
 8005b90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005b92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b94:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005b96:	47a0      	blx	r4
 8005b98:	3001      	adds	r0, #1
 8005b9a:	d100      	bne.n	8005b9e <_printf_float+0x2a6>
 8005b9c:	e708      	b.n	80059b0 <_printf_float+0xb8>
 8005b9e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8005ba0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005ba2:	4333      	orrs	r3, r6
 8005ba4:	d102      	bne.n	8005bac <_printf_float+0x2b4>
 8005ba6:	682b      	ldr	r3, [r5, #0]
 8005ba8:	07db      	lsls	r3, r3, #31
 8005baa:	d5d5      	bpl.n	8005b58 <_printf_float+0x260>
 8005bac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005bae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005bb0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005bb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bb4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005bb6:	47a0      	blx	r4
 8005bb8:	2300      	movs	r3, #0
 8005bba:	3001      	adds	r0, #1
 8005bbc:	d100      	bne.n	8005bc0 <_printf_float+0x2c8>
 8005bbe:	e6f7      	b.n	80059b0 <_printf_float+0xb8>
 8005bc0:	930c      	str	r3, [sp, #48]	@ 0x30
 8005bc2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005bc4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005bc6:	425b      	negs	r3, r3
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	dc01      	bgt.n	8005bd0 <_printf_float+0x2d8>
 8005bcc:	0033      	movs	r3, r6
 8005bce:	e792      	b.n	8005af6 <_printf_float+0x1fe>
 8005bd0:	002a      	movs	r2, r5
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005bd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bd8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005bda:	321a      	adds	r2, #26
 8005bdc:	47a0      	blx	r4
 8005bde:	3001      	adds	r0, #1
 8005be0:	d100      	bne.n	8005be4 <_printf_float+0x2ec>
 8005be2:	e6e5      	b.n	80059b0 <_printf_float+0xb8>
 8005be4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005be6:	3301      	adds	r3, #1
 8005be8:	e7ea      	b.n	8005bc0 <_printf_float+0x2c8>
 8005bea:	46c0      	nop			@ (mov r8, r8)
 8005bec:	7fefffff 	.word	0x7fefffff
 8005bf0:	08009864 	.word	0x08009864
 8005bf4:	08009860 	.word	0x08009860
 8005bf8:	0800986c 	.word	0x0800986c
 8005bfc:	08009868 	.word	0x08009868
 8005c00:	08009870 	.word	0x08009870
 8005c04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005c06:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8005c08:	930c      	str	r3, [sp, #48]	@ 0x30
 8005c0a:	429e      	cmp	r6, r3
 8005c0c:	dd00      	ble.n	8005c10 <_printf_float+0x318>
 8005c0e:	001e      	movs	r6, r3
 8005c10:	2e00      	cmp	r6, #0
 8005c12:	dc31      	bgt.n	8005c78 <_printf_float+0x380>
 8005c14:	43f3      	mvns	r3, r6
 8005c16:	2400      	movs	r4, #0
 8005c18:	17db      	asrs	r3, r3, #31
 8005c1a:	4033      	ands	r3, r6
 8005c1c:	930e      	str	r3, [sp, #56]	@ 0x38
 8005c1e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8005c20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c22:	1af3      	subs	r3, r6, r3
 8005c24:	42a3      	cmp	r3, r4
 8005c26:	dc30      	bgt.n	8005c8a <_printf_float+0x392>
 8005c28:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005c2a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	dc38      	bgt.n	8005ca2 <_printf_float+0x3aa>
 8005c30:	682b      	ldr	r3, [r5, #0]
 8005c32:	07db      	lsls	r3, r3, #31
 8005c34:	d435      	bmi.n	8005ca2 <_printf_float+0x3aa>
 8005c36:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8005c38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005c3a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005c3c:	1b9b      	subs	r3, r3, r6
 8005c3e:	1b14      	subs	r4, r2, r4
 8005c40:	429c      	cmp	r4, r3
 8005c42:	dd00      	ble.n	8005c46 <_printf_float+0x34e>
 8005c44:	001c      	movs	r4, r3
 8005c46:	2c00      	cmp	r4, #0
 8005c48:	dc34      	bgt.n	8005cb4 <_printf_float+0x3bc>
 8005c4a:	43e3      	mvns	r3, r4
 8005c4c:	2600      	movs	r6, #0
 8005c4e:	17db      	asrs	r3, r3, #31
 8005c50:	401c      	ands	r4, r3
 8005c52:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005c54:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	1b1b      	subs	r3, r3, r4
 8005c5a:	42b3      	cmp	r3, r6
 8005c5c:	dc00      	bgt.n	8005c60 <_printf_float+0x368>
 8005c5e:	e77b      	b.n	8005b58 <_printf_float+0x260>
 8005c60:	002a      	movs	r2, r5
 8005c62:	2301      	movs	r3, #1
 8005c64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005c66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c68:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005c6a:	321a      	adds	r2, #26
 8005c6c:	47b8      	blx	r7
 8005c6e:	3001      	adds	r0, #1
 8005c70:	d100      	bne.n	8005c74 <_printf_float+0x37c>
 8005c72:	e69d      	b.n	80059b0 <_printf_float+0xb8>
 8005c74:	3601      	adds	r6, #1
 8005c76:	e7ec      	b.n	8005c52 <_printf_float+0x35a>
 8005c78:	0033      	movs	r3, r6
 8005c7a:	003a      	movs	r2, r7
 8005c7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005c7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c80:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005c82:	47a0      	blx	r4
 8005c84:	3001      	adds	r0, #1
 8005c86:	d1c5      	bne.n	8005c14 <_printf_float+0x31c>
 8005c88:	e692      	b.n	80059b0 <_printf_float+0xb8>
 8005c8a:	002a      	movs	r2, r5
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005c90:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c92:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005c94:	321a      	adds	r2, #26
 8005c96:	47b0      	blx	r6
 8005c98:	3001      	adds	r0, #1
 8005c9a:	d100      	bne.n	8005c9e <_printf_float+0x3a6>
 8005c9c:	e688      	b.n	80059b0 <_printf_float+0xb8>
 8005c9e:	3401      	adds	r4, #1
 8005ca0:	e7bd      	b.n	8005c1e <_printf_float+0x326>
 8005ca2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ca4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005ca6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ca8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005caa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005cac:	47a0      	blx	r4
 8005cae:	3001      	adds	r0, #1
 8005cb0:	d1c1      	bne.n	8005c36 <_printf_float+0x33e>
 8005cb2:	e67d      	b.n	80059b0 <_printf_float+0xb8>
 8005cb4:	19ba      	adds	r2, r7, r6
 8005cb6:	0023      	movs	r3, r4
 8005cb8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005cba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cbc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005cbe:	47b0      	blx	r6
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d1c2      	bne.n	8005c4a <_printf_float+0x352>
 8005cc4:	e674      	b.n	80059b0 <_printf_float+0xb8>
 8005cc6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005cc8:	930c      	str	r3, [sp, #48]	@ 0x30
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	dc02      	bgt.n	8005cd4 <_printf_float+0x3dc>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	421a      	tst	r2, r3
 8005cd2:	d039      	beq.n	8005d48 <_printf_float+0x450>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	003a      	movs	r2, r7
 8005cd8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005cda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cdc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005cde:	47b0      	blx	r6
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	d100      	bne.n	8005ce6 <_printf_float+0x3ee>
 8005ce4:	e664      	b.n	80059b0 <_printf_float+0xb8>
 8005ce6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ce8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005cea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005cec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cee:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005cf0:	47b0      	blx	r6
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	d100      	bne.n	8005cf8 <_printf_float+0x400>
 8005cf6:	e65b      	b.n	80059b0 <_printf_float+0xb8>
 8005cf8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8005cfa:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005cfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005cfe:	2200      	movs	r2, #0
 8005d00:	3b01      	subs	r3, #1
 8005d02:	930c      	str	r3, [sp, #48]	@ 0x30
 8005d04:	2300      	movs	r3, #0
 8005d06:	f7fa fba1 	bl	800044c <__aeabi_dcmpeq>
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	d11a      	bne.n	8005d44 <_printf_float+0x44c>
 8005d0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005d10:	1c7a      	adds	r2, r7, #1
 8005d12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005d14:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d16:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005d18:	47b0      	blx	r6
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	d10e      	bne.n	8005d3c <_printf_float+0x444>
 8005d1e:	e647      	b.n	80059b0 <_printf_float+0xb8>
 8005d20:	002a      	movs	r2, r5
 8005d22:	2301      	movs	r3, #1
 8005d24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005d26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d28:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005d2a:	321a      	adds	r2, #26
 8005d2c:	47b8      	blx	r7
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d100      	bne.n	8005d34 <_printf_float+0x43c>
 8005d32:	e63d      	b.n	80059b0 <_printf_float+0xb8>
 8005d34:	3601      	adds	r6, #1
 8005d36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005d38:	429e      	cmp	r6, r3
 8005d3a:	dbf1      	blt.n	8005d20 <_printf_float+0x428>
 8005d3c:	002a      	movs	r2, r5
 8005d3e:	0023      	movs	r3, r4
 8005d40:	3250      	adds	r2, #80	@ 0x50
 8005d42:	e6d9      	b.n	8005af8 <_printf_float+0x200>
 8005d44:	2600      	movs	r6, #0
 8005d46:	e7f6      	b.n	8005d36 <_printf_float+0x43e>
 8005d48:	003a      	movs	r2, r7
 8005d4a:	e7e2      	b.n	8005d12 <_printf_float+0x41a>
 8005d4c:	002a      	movs	r2, r5
 8005d4e:	2301      	movs	r3, #1
 8005d50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005d52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d54:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005d56:	3219      	adds	r2, #25
 8005d58:	47b0      	blx	r6
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	d100      	bne.n	8005d60 <_printf_float+0x468>
 8005d5e:	e627      	b.n	80059b0 <_printf_float+0xb8>
 8005d60:	3401      	adds	r4, #1
 8005d62:	68eb      	ldr	r3, [r5, #12]
 8005d64:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005d66:	1a9b      	subs	r3, r3, r2
 8005d68:	42a3      	cmp	r3, r4
 8005d6a:	dcef      	bgt.n	8005d4c <_printf_float+0x454>
 8005d6c:	e6f8      	b.n	8005b60 <_printf_float+0x268>
 8005d6e:	2400      	movs	r4, #0
 8005d70:	e7f7      	b.n	8005d62 <_printf_float+0x46a>
 8005d72:	46c0      	nop			@ (mov r8, r8)

08005d74 <_printf_common>:
 8005d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d76:	0016      	movs	r6, r2
 8005d78:	9301      	str	r3, [sp, #4]
 8005d7a:	688a      	ldr	r2, [r1, #8]
 8005d7c:	690b      	ldr	r3, [r1, #16]
 8005d7e:	000c      	movs	r4, r1
 8005d80:	9000      	str	r0, [sp, #0]
 8005d82:	4293      	cmp	r3, r2
 8005d84:	da00      	bge.n	8005d88 <_printf_common+0x14>
 8005d86:	0013      	movs	r3, r2
 8005d88:	0022      	movs	r2, r4
 8005d8a:	6033      	str	r3, [r6, #0]
 8005d8c:	3243      	adds	r2, #67	@ 0x43
 8005d8e:	7812      	ldrb	r2, [r2, #0]
 8005d90:	2a00      	cmp	r2, #0
 8005d92:	d001      	beq.n	8005d98 <_printf_common+0x24>
 8005d94:	3301      	adds	r3, #1
 8005d96:	6033      	str	r3, [r6, #0]
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	069b      	lsls	r3, r3, #26
 8005d9c:	d502      	bpl.n	8005da4 <_printf_common+0x30>
 8005d9e:	6833      	ldr	r3, [r6, #0]
 8005da0:	3302      	adds	r3, #2
 8005da2:	6033      	str	r3, [r6, #0]
 8005da4:	6822      	ldr	r2, [r4, #0]
 8005da6:	2306      	movs	r3, #6
 8005da8:	0015      	movs	r5, r2
 8005daa:	401d      	ands	r5, r3
 8005dac:	421a      	tst	r2, r3
 8005dae:	d027      	beq.n	8005e00 <_printf_common+0x8c>
 8005db0:	0023      	movs	r3, r4
 8005db2:	3343      	adds	r3, #67	@ 0x43
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	1e5a      	subs	r2, r3, #1
 8005db8:	4193      	sbcs	r3, r2
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	0692      	lsls	r2, r2, #26
 8005dbe:	d430      	bmi.n	8005e22 <_printf_common+0xae>
 8005dc0:	0022      	movs	r2, r4
 8005dc2:	9901      	ldr	r1, [sp, #4]
 8005dc4:	9800      	ldr	r0, [sp, #0]
 8005dc6:	9d08      	ldr	r5, [sp, #32]
 8005dc8:	3243      	adds	r2, #67	@ 0x43
 8005dca:	47a8      	blx	r5
 8005dcc:	3001      	adds	r0, #1
 8005dce:	d025      	beq.n	8005e1c <_printf_common+0xa8>
 8005dd0:	2206      	movs	r2, #6
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	2500      	movs	r5, #0
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	d105      	bne.n	8005de8 <_printf_common+0x74>
 8005ddc:	6833      	ldr	r3, [r6, #0]
 8005dde:	68e5      	ldr	r5, [r4, #12]
 8005de0:	1aed      	subs	r5, r5, r3
 8005de2:	43eb      	mvns	r3, r5
 8005de4:	17db      	asrs	r3, r3, #31
 8005de6:	401d      	ands	r5, r3
 8005de8:	68a3      	ldr	r3, [r4, #8]
 8005dea:	6922      	ldr	r2, [r4, #16]
 8005dec:	4293      	cmp	r3, r2
 8005dee:	dd01      	ble.n	8005df4 <_printf_common+0x80>
 8005df0:	1a9b      	subs	r3, r3, r2
 8005df2:	18ed      	adds	r5, r5, r3
 8005df4:	2600      	movs	r6, #0
 8005df6:	42b5      	cmp	r5, r6
 8005df8:	d120      	bne.n	8005e3c <_printf_common+0xc8>
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	e010      	b.n	8005e20 <_printf_common+0xac>
 8005dfe:	3501      	adds	r5, #1
 8005e00:	68e3      	ldr	r3, [r4, #12]
 8005e02:	6832      	ldr	r2, [r6, #0]
 8005e04:	1a9b      	subs	r3, r3, r2
 8005e06:	42ab      	cmp	r3, r5
 8005e08:	ddd2      	ble.n	8005db0 <_printf_common+0x3c>
 8005e0a:	0022      	movs	r2, r4
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	9901      	ldr	r1, [sp, #4]
 8005e10:	9800      	ldr	r0, [sp, #0]
 8005e12:	9f08      	ldr	r7, [sp, #32]
 8005e14:	3219      	adds	r2, #25
 8005e16:	47b8      	blx	r7
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d1f0      	bne.n	8005dfe <_printf_common+0x8a>
 8005e1c:	2001      	movs	r0, #1
 8005e1e:	4240      	negs	r0, r0
 8005e20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e22:	2030      	movs	r0, #48	@ 0x30
 8005e24:	18e1      	adds	r1, r4, r3
 8005e26:	3143      	adds	r1, #67	@ 0x43
 8005e28:	7008      	strb	r0, [r1, #0]
 8005e2a:	0021      	movs	r1, r4
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	3145      	adds	r1, #69	@ 0x45
 8005e30:	7809      	ldrb	r1, [r1, #0]
 8005e32:	18a2      	adds	r2, r4, r2
 8005e34:	3243      	adds	r2, #67	@ 0x43
 8005e36:	3302      	adds	r3, #2
 8005e38:	7011      	strb	r1, [r2, #0]
 8005e3a:	e7c1      	b.n	8005dc0 <_printf_common+0x4c>
 8005e3c:	0022      	movs	r2, r4
 8005e3e:	2301      	movs	r3, #1
 8005e40:	9901      	ldr	r1, [sp, #4]
 8005e42:	9800      	ldr	r0, [sp, #0]
 8005e44:	9f08      	ldr	r7, [sp, #32]
 8005e46:	321a      	adds	r2, #26
 8005e48:	47b8      	blx	r7
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	d0e6      	beq.n	8005e1c <_printf_common+0xa8>
 8005e4e:	3601      	adds	r6, #1
 8005e50:	e7d1      	b.n	8005df6 <_printf_common+0x82>
	...

08005e54 <_printf_i>:
 8005e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e56:	b08b      	sub	sp, #44	@ 0x2c
 8005e58:	9206      	str	r2, [sp, #24]
 8005e5a:	000a      	movs	r2, r1
 8005e5c:	3243      	adds	r2, #67	@ 0x43
 8005e5e:	9307      	str	r3, [sp, #28]
 8005e60:	9005      	str	r0, [sp, #20]
 8005e62:	9203      	str	r2, [sp, #12]
 8005e64:	7e0a      	ldrb	r2, [r1, #24]
 8005e66:	000c      	movs	r4, r1
 8005e68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005e6a:	2a78      	cmp	r2, #120	@ 0x78
 8005e6c:	d809      	bhi.n	8005e82 <_printf_i+0x2e>
 8005e6e:	2a62      	cmp	r2, #98	@ 0x62
 8005e70:	d80b      	bhi.n	8005e8a <_printf_i+0x36>
 8005e72:	2a00      	cmp	r2, #0
 8005e74:	d100      	bne.n	8005e78 <_printf_i+0x24>
 8005e76:	e0ba      	b.n	8005fee <_printf_i+0x19a>
 8005e78:	497a      	ldr	r1, [pc, #488]	@ (8006064 <_printf_i+0x210>)
 8005e7a:	9104      	str	r1, [sp, #16]
 8005e7c:	2a58      	cmp	r2, #88	@ 0x58
 8005e7e:	d100      	bne.n	8005e82 <_printf_i+0x2e>
 8005e80:	e08e      	b.n	8005fa0 <_printf_i+0x14c>
 8005e82:	0025      	movs	r5, r4
 8005e84:	3542      	adds	r5, #66	@ 0x42
 8005e86:	702a      	strb	r2, [r5, #0]
 8005e88:	e022      	b.n	8005ed0 <_printf_i+0x7c>
 8005e8a:	0010      	movs	r0, r2
 8005e8c:	3863      	subs	r0, #99	@ 0x63
 8005e8e:	2815      	cmp	r0, #21
 8005e90:	d8f7      	bhi.n	8005e82 <_printf_i+0x2e>
 8005e92:	f7fa f94b 	bl	800012c <__gnu_thumb1_case_shi>
 8005e96:	0016      	.short	0x0016
 8005e98:	fff6001f 	.word	0xfff6001f
 8005e9c:	fff6fff6 	.word	0xfff6fff6
 8005ea0:	001ffff6 	.word	0x001ffff6
 8005ea4:	fff6fff6 	.word	0xfff6fff6
 8005ea8:	fff6fff6 	.word	0xfff6fff6
 8005eac:	0036009f 	.word	0x0036009f
 8005eb0:	fff6007e 	.word	0xfff6007e
 8005eb4:	00b0fff6 	.word	0x00b0fff6
 8005eb8:	0036fff6 	.word	0x0036fff6
 8005ebc:	fff6fff6 	.word	0xfff6fff6
 8005ec0:	0082      	.short	0x0082
 8005ec2:	0025      	movs	r5, r4
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	3542      	adds	r5, #66	@ 0x42
 8005ec8:	1d11      	adds	r1, r2, #4
 8005eca:	6019      	str	r1, [r3, #0]
 8005ecc:	6813      	ldr	r3, [r2, #0]
 8005ece:	702b      	strb	r3, [r5, #0]
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e09e      	b.n	8006012 <_printf_i+0x1be>
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	6809      	ldr	r1, [r1, #0]
 8005ed8:	1d02      	adds	r2, r0, #4
 8005eda:	060d      	lsls	r5, r1, #24
 8005edc:	d50b      	bpl.n	8005ef6 <_printf_i+0xa2>
 8005ede:	6806      	ldr	r6, [r0, #0]
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	2e00      	cmp	r6, #0
 8005ee4:	da03      	bge.n	8005eee <_printf_i+0x9a>
 8005ee6:	232d      	movs	r3, #45	@ 0x2d
 8005ee8:	9a03      	ldr	r2, [sp, #12]
 8005eea:	4276      	negs	r6, r6
 8005eec:	7013      	strb	r3, [r2, #0]
 8005eee:	4b5d      	ldr	r3, [pc, #372]	@ (8006064 <_printf_i+0x210>)
 8005ef0:	270a      	movs	r7, #10
 8005ef2:	9304      	str	r3, [sp, #16]
 8005ef4:	e018      	b.n	8005f28 <_printf_i+0xd4>
 8005ef6:	6806      	ldr	r6, [r0, #0]
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	0649      	lsls	r1, r1, #25
 8005efc:	d5f1      	bpl.n	8005ee2 <_printf_i+0x8e>
 8005efe:	b236      	sxth	r6, r6
 8005f00:	e7ef      	b.n	8005ee2 <_printf_i+0x8e>
 8005f02:	6808      	ldr	r0, [r1, #0]
 8005f04:	6819      	ldr	r1, [r3, #0]
 8005f06:	c940      	ldmia	r1!, {r6}
 8005f08:	0605      	lsls	r5, r0, #24
 8005f0a:	d402      	bmi.n	8005f12 <_printf_i+0xbe>
 8005f0c:	0640      	lsls	r0, r0, #25
 8005f0e:	d500      	bpl.n	8005f12 <_printf_i+0xbe>
 8005f10:	b2b6      	uxth	r6, r6
 8005f12:	6019      	str	r1, [r3, #0]
 8005f14:	4b53      	ldr	r3, [pc, #332]	@ (8006064 <_printf_i+0x210>)
 8005f16:	270a      	movs	r7, #10
 8005f18:	9304      	str	r3, [sp, #16]
 8005f1a:	2a6f      	cmp	r2, #111	@ 0x6f
 8005f1c:	d100      	bne.n	8005f20 <_printf_i+0xcc>
 8005f1e:	3f02      	subs	r7, #2
 8005f20:	0023      	movs	r3, r4
 8005f22:	2200      	movs	r2, #0
 8005f24:	3343      	adds	r3, #67	@ 0x43
 8005f26:	701a      	strb	r2, [r3, #0]
 8005f28:	6863      	ldr	r3, [r4, #4]
 8005f2a:	60a3      	str	r3, [r4, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	db06      	blt.n	8005f3e <_printf_i+0xea>
 8005f30:	2104      	movs	r1, #4
 8005f32:	6822      	ldr	r2, [r4, #0]
 8005f34:	9d03      	ldr	r5, [sp, #12]
 8005f36:	438a      	bics	r2, r1
 8005f38:	6022      	str	r2, [r4, #0]
 8005f3a:	4333      	orrs	r3, r6
 8005f3c:	d00c      	beq.n	8005f58 <_printf_i+0x104>
 8005f3e:	9d03      	ldr	r5, [sp, #12]
 8005f40:	0030      	movs	r0, r6
 8005f42:	0039      	movs	r1, r7
 8005f44:	f7fa f982 	bl	800024c <__aeabi_uidivmod>
 8005f48:	9b04      	ldr	r3, [sp, #16]
 8005f4a:	3d01      	subs	r5, #1
 8005f4c:	5c5b      	ldrb	r3, [r3, r1]
 8005f4e:	702b      	strb	r3, [r5, #0]
 8005f50:	0033      	movs	r3, r6
 8005f52:	0006      	movs	r6, r0
 8005f54:	429f      	cmp	r7, r3
 8005f56:	d9f3      	bls.n	8005f40 <_printf_i+0xec>
 8005f58:	2f08      	cmp	r7, #8
 8005f5a:	d109      	bne.n	8005f70 <_printf_i+0x11c>
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	07db      	lsls	r3, r3, #31
 8005f60:	d506      	bpl.n	8005f70 <_printf_i+0x11c>
 8005f62:	6862      	ldr	r2, [r4, #4]
 8005f64:	6923      	ldr	r3, [r4, #16]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	dc02      	bgt.n	8005f70 <_printf_i+0x11c>
 8005f6a:	2330      	movs	r3, #48	@ 0x30
 8005f6c:	3d01      	subs	r5, #1
 8005f6e:	702b      	strb	r3, [r5, #0]
 8005f70:	9b03      	ldr	r3, [sp, #12]
 8005f72:	1b5b      	subs	r3, r3, r5
 8005f74:	6123      	str	r3, [r4, #16]
 8005f76:	9b07      	ldr	r3, [sp, #28]
 8005f78:	0021      	movs	r1, r4
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	9805      	ldr	r0, [sp, #20]
 8005f7e:	9b06      	ldr	r3, [sp, #24]
 8005f80:	aa09      	add	r2, sp, #36	@ 0x24
 8005f82:	f7ff fef7 	bl	8005d74 <_printf_common>
 8005f86:	3001      	adds	r0, #1
 8005f88:	d148      	bne.n	800601c <_printf_i+0x1c8>
 8005f8a:	2001      	movs	r0, #1
 8005f8c:	4240      	negs	r0, r0
 8005f8e:	b00b      	add	sp, #44	@ 0x2c
 8005f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f92:	2220      	movs	r2, #32
 8005f94:	6809      	ldr	r1, [r1, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	6022      	str	r2, [r4, #0]
 8005f9a:	2278      	movs	r2, #120	@ 0x78
 8005f9c:	4932      	ldr	r1, [pc, #200]	@ (8006068 <_printf_i+0x214>)
 8005f9e:	9104      	str	r1, [sp, #16]
 8005fa0:	0021      	movs	r1, r4
 8005fa2:	3145      	adds	r1, #69	@ 0x45
 8005fa4:	700a      	strb	r2, [r1, #0]
 8005fa6:	6819      	ldr	r1, [r3, #0]
 8005fa8:	6822      	ldr	r2, [r4, #0]
 8005faa:	c940      	ldmia	r1!, {r6}
 8005fac:	0610      	lsls	r0, r2, #24
 8005fae:	d402      	bmi.n	8005fb6 <_printf_i+0x162>
 8005fb0:	0650      	lsls	r0, r2, #25
 8005fb2:	d500      	bpl.n	8005fb6 <_printf_i+0x162>
 8005fb4:	b2b6      	uxth	r6, r6
 8005fb6:	6019      	str	r1, [r3, #0]
 8005fb8:	07d3      	lsls	r3, r2, #31
 8005fba:	d502      	bpl.n	8005fc2 <_printf_i+0x16e>
 8005fbc:	2320      	movs	r3, #32
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	2e00      	cmp	r6, #0
 8005fc4:	d001      	beq.n	8005fca <_printf_i+0x176>
 8005fc6:	2710      	movs	r7, #16
 8005fc8:	e7aa      	b.n	8005f20 <_printf_i+0xcc>
 8005fca:	2220      	movs	r2, #32
 8005fcc:	6823      	ldr	r3, [r4, #0]
 8005fce:	4393      	bics	r3, r2
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	e7f8      	b.n	8005fc6 <_printf_i+0x172>
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	680d      	ldr	r5, [r1, #0]
 8005fd8:	1d10      	adds	r0, r2, #4
 8005fda:	6949      	ldr	r1, [r1, #20]
 8005fdc:	6018      	str	r0, [r3, #0]
 8005fde:	6813      	ldr	r3, [r2, #0]
 8005fe0:	062e      	lsls	r6, r5, #24
 8005fe2:	d501      	bpl.n	8005fe8 <_printf_i+0x194>
 8005fe4:	6019      	str	r1, [r3, #0]
 8005fe6:	e002      	b.n	8005fee <_printf_i+0x19a>
 8005fe8:	066d      	lsls	r5, r5, #25
 8005fea:	d5fb      	bpl.n	8005fe4 <_printf_i+0x190>
 8005fec:	8019      	strh	r1, [r3, #0]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	9d03      	ldr	r5, [sp, #12]
 8005ff2:	6123      	str	r3, [r4, #16]
 8005ff4:	e7bf      	b.n	8005f76 <_printf_i+0x122>
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	1d11      	adds	r1, r2, #4
 8005ffa:	6019      	str	r1, [r3, #0]
 8005ffc:	6815      	ldr	r5, [r2, #0]
 8005ffe:	2100      	movs	r1, #0
 8006000:	0028      	movs	r0, r5
 8006002:	6862      	ldr	r2, [r4, #4]
 8006004:	f000 f9eb 	bl	80063de <memchr>
 8006008:	2800      	cmp	r0, #0
 800600a:	d001      	beq.n	8006010 <_printf_i+0x1bc>
 800600c:	1b40      	subs	r0, r0, r5
 800600e:	6060      	str	r0, [r4, #4]
 8006010:	6863      	ldr	r3, [r4, #4]
 8006012:	6123      	str	r3, [r4, #16]
 8006014:	2300      	movs	r3, #0
 8006016:	9a03      	ldr	r2, [sp, #12]
 8006018:	7013      	strb	r3, [r2, #0]
 800601a:	e7ac      	b.n	8005f76 <_printf_i+0x122>
 800601c:	002a      	movs	r2, r5
 800601e:	6923      	ldr	r3, [r4, #16]
 8006020:	9906      	ldr	r1, [sp, #24]
 8006022:	9805      	ldr	r0, [sp, #20]
 8006024:	9d07      	ldr	r5, [sp, #28]
 8006026:	47a8      	blx	r5
 8006028:	3001      	adds	r0, #1
 800602a:	d0ae      	beq.n	8005f8a <_printf_i+0x136>
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	079b      	lsls	r3, r3, #30
 8006030:	d415      	bmi.n	800605e <_printf_i+0x20a>
 8006032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006034:	68e0      	ldr	r0, [r4, #12]
 8006036:	4298      	cmp	r0, r3
 8006038:	daa9      	bge.n	8005f8e <_printf_i+0x13a>
 800603a:	0018      	movs	r0, r3
 800603c:	e7a7      	b.n	8005f8e <_printf_i+0x13a>
 800603e:	0022      	movs	r2, r4
 8006040:	2301      	movs	r3, #1
 8006042:	9906      	ldr	r1, [sp, #24]
 8006044:	9805      	ldr	r0, [sp, #20]
 8006046:	9e07      	ldr	r6, [sp, #28]
 8006048:	3219      	adds	r2, #25
 800604a:	47b0      	blx	r6
 800604c:	3001      	adds	r0, #1
 800604e:	d09c      	beq.n	8005f8a <_printf_i+0x136>
 8006050:	3501      	adds	r5, #1
 8006052:	68e3      	ldr	r3, [r4, #12]
 8006054:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006056:	1a9b      	subs	r3, r3, r2
 8006058:	42ab      	cmp	r3, r5
 800605a:	dcf0      	bgt.n	800603e <_printf_i+0x1ea>
 800605c:	e7e9      	b.n	8006032 <_printf_i+0x1de>
 800605e:	2500      	movs	r5, #0
 8006060:	e7f7      	b.n	8006052 <_printf_i+0x1fe>
 8006062:	46c0      	nop			@ (mov r8, r8)
 8006064:	08009872 	.word	0x08009872
 8006068:	08009883 	.word	0x08009883

0800606c <std>:
 800606c:	2300      	movs	r3, #0
 800606e:	b510      	push	{r4, lr}
 8006070:	0004      	movs	r4, r0
 8006072:	6003      	str	r3, [r0, #0]
 8006074:	6043      	str	r3, [r0, #4]
 8006076:	6083      	str	r3, [r0, #8]
 8006078:	8181      	strh	r1, [r0, #12]
 800607a:	6643      	str	r3, [r0, #100]	@ 0x64
 800607c:	81c2      	strh	r2, [r0, #14]
 800607e:	6103      	str	r3, [r0, #16]
 8006080:	6143      	str	r3, [r0, #20]
 8006082:	6183      	str	r3, [r0, #24]
 8006084:	0019      	movs	r1, r3
 8006086:	2208      	movs	r2, #8
 8006088:	305c      	adds	r0, #92	@ 0x5c
 800608a:	f000 f921 	bl	80062d0 <memset>
 800608e:	4b0b      	ldr	r3, [pc, #44]	@ (80060bc <std+0x50>)
 8006090:	6224      	str	r4, [r4, #32]
 8006092:	6263      	str	r3, [r4, #36]	@ 0x24
 8006094:	4b0a      	ldr	r3, [pc, #40]	@ (80060c0 <std+0x54>)
 8006096:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006098:	4b0a      	ldr	r3, [pc, #40]	@ (80060c4 <std+0x58>)
 800609a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800609c:	4b0a      	ldr	r3, [pc, #40]	@ (80060c8 <std+0x5c>)
 800609e:	6323      	str	r3, [r4, #48]	@ 0x30
 80060a0:	4b0a      	ldr	r3, [pc, #40]	@ (80060cc <std+0x60>)
 80060a2:	429c      	cmp	r4, r3
 80060a4:	d005      	beq.n	80060b2 <std+0x46>
 80060a6:	4b0a      	ldr	r3, [pc, #40]	@ (80060d0 <std+0x64>)
 80060a8:	429c      	cmp	r4, r3
 80060aa:	d002      	beq.n	80060b2 <std+0x46>
 80060ac:	4b09      	ldr	r3, [pc, #36]	@ (80060d4 <std+0x68>)
 80060ae:	429c      	cmp	r4, r3
 80060b0:	d103      	bne.n	80060ba <std+0x4e>
 80060b2:	0020      	movs	r0, r4
 80060b4:	3058      	adds	r0, #88	@ 0x58
 80060b6:	f000 f98f 	bl	80063d8 <__retarget_lock_init_recursive>
 80060ba:	bd10      	pop	{r4, pc}
 80060bc:	08006239 	.word	0x08006239
 80060c0:	08006261 	.word	0x08006261
 80060c4:	08006299 	.word	0x08006299
 80060c8:	080062c5 	.word	0x080062c5
 80060cc:	200002f4 	.word	0x200002f4
 80060d0:	2000035c 	.word	0x2000035c
 80060d4:	200003c4 	.word	0x200003c4

080060d8 <stdio_exit_handler>:
 80060d8:	b510      	push	{r4, lr}
 80060da:	4a03      	ldr	r2, [pc, #12]	@ (80060e8 <stdio_exit_handler+0x10>)
 80060dc:	4903      	ldr	r1, [pc, #12]	@ (80060ec <stdio_exit_handler+0x14>)
 80060de:	4804      	ldr	r0, [pc, #16]	@ (80060f0 <stdio_exit_handler+0x18>)
 80060e0:	f000 f86c 	bl	80061bc <_fwalk_sglue>
 80060e4:	bd10      	pop	{r4, pc}
 80060e6:	46c0      	nop			@ (mov r8, r8)
 80060e8:	20000010 	.word	0x20000010
 80060ec:	08007ded 	.word	0x08007ded
 80060f0:	20000020 	.word	0x20000020

080060f4 <cleanup_stdio>:
 80060f4:	6841      	ldr	r1, [r0, #4]
 80060f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006124 <cleanup_stdio+0x30>)
 80060f8:	b510      	push	{r4, lr}
 80060fa:	0004      	movs	r4, r0
 80060fc:	4299      	cmp	r1, r3
 80060fe:	d001      	beq.n	8006104 <cleanup_stdio+0x10>
 8006100:	f001 fe74 	bl	8007dec <_fflush_r>
 8006104:	68a1      	ldr	r1, [r4, #8]
 8006106:	4b08      	ldr	r3, [pc, #32]	@ (8006128 <cleanup_stdio+0x34>)
 8006108:	4299      	cmp	r1, r3
 800610a:	d002      	beq.n	8006112 <cleanup_stdio+0x1e>
 800610c:	0020      	movs	r0, r4
 800610e:	f001 fe6d 	bl	8007dec <_fflush_r>
 8006112:	68e1      	ldr	r1, [r4, #12]
 8006114:	4b05      	ldr	r3, [pc, #20]	@ (800612c <cleanup_stdio+0x38>)
 8006116:	4299      	cmp	r1, r3
 8006118:	d002      	beq.n	8006120 <cleanup_stdio+0x2c>
 800611a:	0020      	movs	r0, r4
 800611c:	f001 fe66 	bl	8007dec <_fflush_r>
 8006120:	bd10      	pop	{r4, pc}
 8006122:	46c0      	nop			@ (mov r8, r8)
 8006124:	200002f4 	.word	0x200002f4
 8006128:	2000035c 	.word	0x2000035c
 800612c:	200003c4 	.word	0x200003c4

08006130 <global_stdio_init.part.0>:
 8006130:	b510      	push	{r4, lr}
 8006132:	4b09      	ldr	r3, [pc, #36]	@ (8006158 <global_stdio_init.part.0+0x28>)
 8006134:	4a09      	ldr	r2, [pc, #36]	@ (800615c <global_stdio_init.part.0+0x2c>)
 8006136:	2104      	movs	r1, #4
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	4809      	ldr	r0, [pc, #36]	@ (8006160 <global_stdio_init.part.0+0x30>)
 800613c:	2200      	movs	r2, #0
 800613e:	f7ff ff95 	bl	800606c <std>
 8006142:	2201      	movs	r2, #1
 8006144:	2109      	movs	r1, #9
 8006146:	4807      	ldr	r0, [pc, #28]	@ (8006164 <global_stdio_init.part.0+0x34>)
 8006148:	f7ff ff90 	bl	800606c <std>
 800614c:	2202      	movs	r2, #2
 800614e:	2112      	movs	r1, #18
 8006150:	4805      	ldr	r0, [pc, #20]	@ (8006168 <global_stdio_init.part.0+0x38>)
 8006152:	f7ff ff8b 	bl	800606c <std>
 8006156:	bd10      	pop	{r4, pc}
 8006158:	2000042c 	.word	0x2000042c
 800615c:	080060d9 	.word	0x080060d9
 8006160:	200002f4 	.word	0x200002f4
 8006164:	2000035c 	.word	0x2000035c
 8006168:	200003c4 	.word	0x200003c4

0800616c <__sfp_lock_acquire>:
 800616c:	b510      	push	{r4, lr}
 800616e:	4802      	ldr	r0, [pc, #8]	@ (8006178 <__sfp_lock_acquire+0xc>)
 8006170:	f000 f933 	bl	80063da <__retarget_lock_acquire_recursive>
 8006174:	bd10      	pop	{r4, pc}
 8006176:	46c0      	nop			@ (mov r8, r8)
 8006178:	20000435 	.word	0x20000435

0800617c <__sfp_lock_release>:
 800617c:	b510      	push	{r4, lr}
 800617e:	4802      	ldr	r0, [pc, #8]	@ (8006188 <__sfp_lock_release+0xc>)
 8006180:	f000 f92c 	bl	80063dc <__retarget_lock_release_recursive>
 8006184:	bd10      	pop	{r4, pc}
 8006186:	46c0      	nop			@ (mov r8, r8)
 8006188:	20000435 	.word	0x20000435

0800618c <__sinit>:
 800618c:	b510      	push	{r4, lr}
 800618e:	0004      	movs	r4, r0
 8006190:	f7ff ffec 	bl	800616c <__sfp_lock_acquire>
 8006194:	6a23      	ldr	r3, [r4, #32]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <__sinit+0x14>
 800619a:	f7ff ffef 	bl	800617c <__sfp_lock_release>
 800619e:	bd10      	pop	{r4, pc}
 80061a0:	4b04      	ldr	r3, [pc, #16]	@ (80061b4 <__sinit+0x28>)
 80061a2:	6223      	str	r3, [r4, #32]
 80061a4:	4b04      	ldr	r3, [pc, #16]	@ (80061b8 <__sinit+0x2c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1f6      	bne.n	800619a <__sinit+0xe>
 80061ac:	f7ff ffc0 	bl	8006130 <global_stdio_init.part.0>
 80061b0:	e7f3      	b.n	800619a <__sinit+0xe>
 80061b2:	46c0      	nop			@ (mov r8, r8)
 80061b4:	080060f5 	.word	0x080060f5
 80061b8:	2000042c 	.word	0x2000042c

080061bc <_fwalk_sglue>:
 80061bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061be:	0014      	movs	r4, r2
 80061c0:	2600      	movs	r6, #0
 80061c2:	9000      	str	r0, [sp, #0]
 80061c4:	9101      	str	r1, [sp, #4]
 80061c6:	68a5      	ldr	r5, [r4, #8]
 80061c8:	6867      	ldr	r7, [r4, #4]
 80061ca:	3f01      	subs	r7, #1
 80061cc:	d504      	bpl.n	80061d8 <_fwalk_sglue+0x1c>
 80061ce:	6824      	ldr	r4, [r4, #0]
 80061d0:	2c00      	cmp	r4, #0
 80061d2:	d1f8      	bne.n	80061c6 <_fwalk_sglue+0xa>
 80061d4:	0030      	movs	r0, r6
 80061d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061d8:	89ab      	ldrh	r3, [r5, #12]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d908      	bls.n	80061f0 <_fwalk_sglue+0x34>
 80061de:	220e      	movs	r2, #14
 80061e0:	5eab      	ldrsh	r3, [r5, r2]
 80061e2:	3301      	adds	r3, #1
 80061e4:	d004      	beq.n	80061f0 <_fwalk_sglue+0x34>
 80061e6:	0029      	movs	r1, r5
 80061e8:	9800      	ldr	r0, [sp, #0]
 80061ea:	9b01      	ldr	r3, [sp, #4]
 80061ec:	4798      	blx	r3
 80061ee:	4306      	orrs	r6, r0
 80061f0:	3568      	adds	r5, #104	@ 0x68
 80061f2:	e7ea      	b.n	80061ca <_fwalk_sglue+0xe>

080061f4 <siprintf>:
 80061f4:	b40e      	push	{r1, r2, r3}
 80061f6:	b510      	push	{r4, lr}
 80061f8:	2400      	movs	r4, #0
 80061fa:	490c      	ldr	r1, [pc, #48]	@ (800622c <siprintf+0x38>)
 80061fc:	b09d      	sub	sp, #116	@ 0x74
 80061fe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006200:	9002      	str	r0, [sp, #8]
 8006202:	9006      	str	r0, [sp, #24]
 8006204:	9107      	str	r1, [sp, #28]
 8006206:	9104      	str	r1, [sp, #16]
 8006208:	4809      	ldr	r0, [pc, #36]	@ (8006230 <siprintf+0x3c>)
 800620a:	490a      	ldr	r1, [pc, #40]	@ (8006234 <siprintf+0x40>)
 800620c:	cb04      	ldmia	r3!, {r2}
 800620e:	9105      	str	r1, [sp, #20]
 8006210:	6800      	ldr	r0, [r0, #0]
 8006212:	a902      	add	r1, sp, #8
 8006214:	9301      	str	r3, [sp, #4]
 8006216:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006218:	f001 fc64 	bl	8007ae4 <_svfiprintf_r>
 800621c:	9b02      	ldr	r3, [sp, #8]
 800621e:	701c      	strb	r4, [r3, #0]
 8006220:	b01d      	add	sp, #116	@ 0x74
 8006222:	bc10      	pop	{r4}
 8006224:	bc08      	pop	{r3}
 8006226:	b003      	add	sp, #12
 8006228:	4718      	bx	r3
 800622a:	46c0      	nop			@ (mov r8, r8)
 800622c:	7fffffff 	.word	0x7fffffff
 8006230:	2000001c 	.word	0x2000001c
 8006234:	ffff0208 	.word	0xffff0208

08006238 <__sread>:
 8006238:	b570      	push	{r4, r5, r6, lr}
 800623a:	000c      	movs	r4, r1
 800623c:	250e      	movs	r5, #14
 800623e:	5f49      	ldrsh	r1, [r1, r5]
 8006240:	f000 f878 	bl	8006334 <_read_r>
 8006244:	2800      	cmp	r0, #0
 8006246:	db03      	blt.n	8006250 <__sread+0x18>
 8006248:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800624a:	181b      	adds	r3, r3, r0
 800624c:	6563      	str	r3, [r4, #84]	@ 0x54
 800624e:	bd70      	pop	{r4, r5, r6, pc}
 8006250:	89a3      	ldrh	r3, [r4, #12]
 8006252:	4a02      	ldr	r2, [pc, #8]	@ (800625c <__sread+0x24>)
 8006254:	4013      	ands	r3, r2
 8006256:	81a3      	strh	r3, [r4, #12]
 8006258:	e7f9      	b.n	800624e <__sread+0x16>
 800625a:	46c0      	nop			@ (mov r8, r8)
 800625c:	ffffefff 	.word	0xffffefff

08006260 <__swrite>:
 8006260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006262:	001f      	movs	r7, r3
 8006264:	898b      	ldrh	r3, [r1, #12]
 8006266:	0005      	movs	r5, r0
 8006268:	000c      	movs	r4, r1
 800626a:	0016      	movs	r6, r2
 800626c:	05db      	lsls	r3, r3, #23
 800626e:	d505      	bpl.n	800627c <__swrite+0x1c>
 8006270:	230e      	movs	r3, #14
 8006272:	5ec9      	ldrsh	r1, [r1, r3]
 8006274:	2200      	movs	r2, #0
 8006276:	2302      	movs	r3, #2
 8006278:	f000 f848 	bl	800630c <_lseek_r>
 800627c:	89a3      	ldrh	r3, [r4, #12]
 800627e:	4a05      	ldr	r2, [pc, #20]	@ (8006294 <__swrite+0x34>)
 8006280:	0028      	movs	r0, r5
 8006282:	4013      	ands	r3, r2
 8006284:	81a3      	strh	r3, [r4, #12]
 8006286:	0032      	movs	r2, r6
 8006288:	230e      	movs	r3, #14
 800628a:	5ee1      	ldrsh	r1, [r4, r3]
 800628c:	003b      	movs	r3, r7
 800628e:	f000 f865 	bl	800635c <_write_r>
 8006292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006294:	ffffefff 	.word	0xffffefff

08006298 <__sseek>:
 8006298:	b570      	push	{r4, r5, r6, lr}
 800629a:	000c      	movs	r4, r1
 800629c:	250e      	movs	r5, #14
 800629e:	5f49      	ldrsh	r1, [r1, r5]
 80062a0:	f000 f834 	bl	800630c <_lseek_r>
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	1c42      	adds	r2, r0, #1
 80062a8:	d103      	bne.n	80062b2 <__sseek+0x1a>
 80062aa:	4a05      	ldr	r2, [pc, #20]	@ (80062c0 <__sseek+0x28>)
 80062ac:	4013      	ands	r3, r2
 80062ae:	81a3      	strh	r3, [r4, #12]
 80062b0:	bd70      	pop	{r4, r5, r6, pc}
 80062b2:	2280      	movs	r2, #128	@ 0x80
 80062b4:	0152      	lsls	r2, r2, #5
 80062b6:	4313      	orrs	r3, r2
 80062b8:	81a3      	strh	r3, [r4, #12]
 80062ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80062bc:	e7f8      	b.n	80062b0 <__sseek+0x18>
 80062be:	46c0      	nop			@ (mov r8, r8)
 80062c0:	ffffefff 	.word	0xffffefff

080062c4 <__sclose>:
 80062c4:	b510      	push	{r4, lr}
 80062c6:	230e      	movs	r3, #14
 80062c8:	5ec9      	ldrsh	r1, [r1, r3]
 80062ca:	f000 f80d 	bl	80062e8 <_close_r>
 80062ce:	bd10      	pop	{r4, pc}

080062d0 <memset>:
 80062d0:	0003      	movs	r3, r0
 80062d2:	1882      	adds	r2, r0, r2
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d100      	bne.n	80062da <memset+0xa>
 80062d8:	4770      	bx	lr
 80062da:	7019      	strb	r1, [r3, #0]
 80062dc:	3301      	adds	r3, #1
 80062de:	e7f9      	b.n	80062d4 <memset+0x4>

080062e0 <_localeconv_r>:
 80062e0:	4800      	ldr	r0, [pc, #0]	@ (80062e4 <_localeconv_r+0x4>)
 80062e2:	4770      	bx	lr
 80062e4:	2000015c 	.word	0x2000015c

080062e8 <_close_r>:
 80062e8:	2300      	movs	r3, #0
 80062ea:	b570      	push	{r4, r5, r6, lr}
 80062ec:	4d06      	ldr	r5, [pc, #24]	@ (8006308 <_close_r+0x20>)
 80062ee:	0004      	movs	r4, r0
 80062f0:	0008      	movs	r0, r1
 80062f2:	602b      	str	r3, [r5, #0]
 80062f4:	f7fc fe09 	bl	8002f0a <_close>
 80062f8:	1c43      	adds	r3, r0, #1
 80062fa:	d103      	bne.n	8006304 <_close_r+0x1c>
 80062fc:	682b      	ldr	r3, [r5, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d000      	beq.n	8006304 <_close_r+0x1c>
 8006302:	6023      	str	r3, [r4, #0]
 8006304:	bd70      	pop	{r4, r5, r6, pc}
 8006306:	46c0      	nop			@ (mov r8, r8)
 8006308:	20000430 	.word	0x20000430

0800630c <_lseek_r>:
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	0004      	movs	r4, r0
 8006310:	0008      	movs	r0, r1
 8006312:	0011      	movs	r1, r2
 8006314:	001a      	movs	r2, r3
 8006316:	2300      	movs	r3, #0
 8006318:	4d05      	ldr	r5, [pc, #20]	@ (8006330 <_lseek_r+0x24>)
 800631a:	602b      	str	r3, [r5, #0]
 800631c:	f7fc fe16 	bl	8002f4c <_lseek>
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d103      	bne.n	800632c <_lseek_r+0x20>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d000      	beq.n	800632c <_lseek_r+0x20>
 800632a:	6023      	str	r3, [r4, #0]
 800632c:	bd70      	pop	{r4, r5, r6, pc}
 800632e:	46c0      	nop			@ (mov r8, r8)
 8006330:	20000430 	.word	0x20000430

08006334 <_read_r>:
 8006334:	b570      	push	{r4, r5, r6, lr}
 8006336:	0004      	movs	r4, r0
 8006338:	0008      	movs	r0, r1
 800633a:	0011      	movs	r1, r2
 800633c:	001a      	movs	r2, r3
 800633e:	2300      	movs	r3, #0
 8006340:	4d05      	ldr	r5, [pc, #20]	@ (8006358 <_read_r+0x24>)
 8006342:	602b      	str	r3, [r5, #0]
 8006344:	f7fc fda8 	bl	8002e98 <_read>
 8006348:	1c43      	adds	r3, r0, #1
 800634a:	d103      	bne.n	8006354 <_read_r+0x20>
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d000      	beq.n	8006354 <_read_r+0x20>
 8006352:	6023      	str	r3, [r4, #0]
 8006354:	bd70      	pop	{r4, r5, r6, pc}
 8006356:	46c0      	nop			@ (mov r8, r8)
 8006358:	20000430 	.word	0x20000430

0800635c <_write_r>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	0004      	movs	r4, r0
 8006360:	0008      	movs	r0, r1
 8006362:	0011      	movs	r1, r2
 8006364:	001a      	movs	r2, r3
 8006366:	2300      	movs	r3, #0
 8006368:	4d05      	ldr	r5, [pc, #20]	@ (8006380 <_write_r+0x24>)
 800636a:	602b      	str	r3, [r5, #0]
 800636c:	f7fc fdb1 	bl	8002ed2 <_write>
 8006370:	1c43      	adds	r3, r0, #1
 8006372:	d103      	bne.n	800637c <_write_r+0x20>
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d000      	beq.n	800637c <_write_r+0x20>
 800637a:	6023      	str	r3, [r4, #0]
 800637c:	bd70      	pop	{r4, r5, r6, pc}
 800637e:	46c0      	nop			@ (mov r8, r8)
 8006380:	20000430 	.word	0x20000430

08006384 <__errno>:
 8006384:	4b01      	ldr	r3, [pc, #4]	@ (800638c <__errno+0x8>)
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	4770      	bx	lr
 800638a:	46c0      	nop			@ (mov r8, r8)
 800638c:	2000001c 	.word	0x2000001c

08006390 <__libc_init_array>:
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	2600      	movs	r6, #0
 8006394:	4c0c      	ldr	r4, [pc, #48]	@ (80063c8 <__libc_init_array+0x38>)
 8006396:	4d0d      	ldr	r5, [pc, #52]	@ (80063cc <__libc_init_array+0x3c>)
 8006398:	1b64      	subs	r4, r4, r5
 800639a:	10a4      	asrs	r4, r4, #2
 800639c:	42a6      	cmp	r6, r4
 800639e:	d109      	bne.n	80063b4 <__libc_init_array+0x24>
 80063a0:	2600      	movs	r6, #0
 80063a2:	f003 f9f1 	bl	8009788 <_init>
 80063a6:	4c0a      	ldr	r4, [pc, #40]	@ (80063d0 <__libc_init_array+0x40>)
 80063a8:	4d0a      	ldr	r5, [pc, #40]	@ (80063d4 <__libc_init_array+0x44>)
 80063aa:	1b64      	subs	r4, r4, r5
 80063ac:	10a4      	asrs	r4, r4, #2
 80063ae:	42a6      	cmp	r6, r4
 80063b0:	d105      	bne.n	80063be <__libc_init_array+0x2e>
 80063b2:	bd70      	pop	{r4, r5, r6, pc}
 80063b4:	00b3      	lsls	r3, r6, #2
 80063b6:	58eb      	ldr	r3, [r5, r3]
 80063b8:	4798      	blx	r3
 80063ba:	3601      	adds	r6, #1
 80063bc:	e7ee      	b.n	800639c <__libc_init_array+0xc>
 80063be:	00b3      	lsls	r3, r6, #2
 80063c0:	58eb      	ldr	r3, [r5, r3]
 80063c2:	4798      	blx	r3
 80063c4:	3601      	adds	r6, #1
 80063c6:	e7f2      	b.n	80063ae <__libc_init_array+0x1e>
 80063c8:	08009c20 	.word	0x08009c20
 80063cc:	08009c20 	.word	0x08009c20
 80063d0:	08009c24 	.word	0x08009c24
 80063d4:	08009c20 	.word	0x08009c20

080063d8 <__retarget_lock_init_recursive>:
 80063d8:	4770      	bx	lr

080063da <__retarget_lock_acquire_recursive>:
 80063da:	4770      	bx	lr

080063dc <__retarget_lock_release_recursive>:
 80063dc:	4770      	bx	lr

080063de <memchr>:
 80063de:	b2c9      	uxtb	r1, r1
 80063e0:	1882      	adds	r2, r0, r2
 80063e2:	4290      	cmp	r0, r2
 80063e4:	d101      	bne.n	80063ea <memchr+0xc>
 80063e6:	2000      	movs	r0, #0
 80063e8:	4770      	bx	lr
 80063ea:	7803      	ldrb	r3, [r0, #0]
 80063ec:	428b      	cmp	r3, r1
 80063ee:	d0fb      	beq.n	80063e8 <memchr+0xa>
 80063f0:	3001      	adds	r0, #1
 80063f2:	e7f6      	b.n	80063e2 <memchr+0x4>

080063f4 <quorem>:
 80063f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063f6:	6903      	ldr	r3, [r0, #16]
 80063f8:	690c      	ldr	r4, [r1, #16]
 80063fa:	b089      	sub	sp, #36	@ 0x24
 80063fc:	9003      	str	r0, [sp, #12]
 80063fe:	9106      	str	r1, [sp, #24]
 8006400:	2000      	movs	r0, #0
 8006402:	42a3      	cmp	r3, r4
 8006404:	db63      	blt.n	80064ce <quorem+0xda>
 8006406:	000b      	movs	r3, r1
 8006408:	3c01      	subs	r4, #1
 800640a:	3314      	adds	r3, #20
 800640c:	00a5      	lsls	r5, r4, #2
 800640e:	9304      	str	r3, [sp, #16]
 8006410:	195b      	adds	r3, r3, r5
 8006412:	9305      	str	r3, [sp, #20]
 8006414:	9b03      	ldr	r3, [sp, #12]
 8006416:	3314      	adds	r3, #20
 8006418:	9301      	str	r3, [sp, #4]
 800641a:	195d      	adds	r5, r3, r5
 800641c:	9b05      	ldr	r3, [sp, #20]
 800641e:	682f      	ldr	r7, [r5, #0]
 8006420:	681e      	ldr	r6, [r3, #0]
 8006422:	0038      	movs	r0, r7
 8006424:	3601      	adds	r6, #1
 8006426:	0031      	movs	r1, r6
 8006428:	f7f9 fe8a 	bl	8000140 <__udivsi3>
 800642c:	9002      	str	r0, [sp, #8]
 800642e:	42b7      	cmp	r7, r6
 8006430:	d327      	bcc.n	8006482 <quorem+0x8e>
 8006432:	9b04      	ldr	r3, [sp, #16]
 8006434:	2700      	movs	r7, #0
 8006436:	469c      	mov	ip, r3
 8006438:	9e01      	ldr	r6, [sp, #4]
 800643a:	9707      	str	r7, [sp, #28]
 800643c:	4662      	mov	r2, ip
 800643e:	ca08      	ldmia	r2!, {r3}
 8006440:	6830      	ldr	r0, [r6, #0]
 8006442:	4694      	mov	ip, r2
 8006444:	9a02      	ldr	r2, [sp, #8]
 8006446:	b299      	uxth	r1, r3
 8006448:	4351      	muls	r1, r2
 800644a:	0c1b      	lsrs	r3, r3, #16
 800644c:	4353      	muls	r3, r2
 800644e:	19c9      	adds	r1, r1, r7
 8006450:	0c0a      	lsrs	r2, r1, #16
 8006452:	189b      	adds	r3, r3, r2
 8006454:	b289      	uxth	r1, r1
 8006456:	b282      	uxth	r2, r0
 8006458:	1a52      	subs	r2, r2, r1
 800645a:	9907      	ldr	r1, [sp, #28]
 800645c:	0c1f      	lsrs	r7, r3, #16
 800645e:	1852      	adds	r2, r2, r1
 8006460:	0c00      	lsrs	r0, r0, #16
 8006462:	b29b      	uxth	r3, r3
 8006464:	1411      	asrs	r1, r2, #16
 8006466:	1ac3      	subs	r3, r0, r3
 8006468:	185b      	adds	r3, r3, r1
 800646a:	1419      	asrs	r1, r3, #16
 800646c:	b292      	uxth	r2, r2
 800646e:	041b      	lsls	r3, r3, #16
 8006470:	431a      	orrs	r2, r3
 8006472:	9b05      	ldr	r3, [sp, #20]
 8006474:	9107      	str	r1, [sp, #28]
 8006476:	c604      	stmia	r6!, {r2}
 8006478:	4563      	cmp	r3, ip
 800647a:	d2df      	bcs.n	800643c <quorem+0x48>
 800647c:	682b      	ldr	r3, [r5, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d02b      	beq.n	80064da <quorem+0xe6>
 8006482:	9906      	ldr	r1, [sp, #24]
 8006484:	9803      	ldr	r0, [sp, #12]
 8006486:	f001 f9b7 	bl	80077f8 <__mcmp>
 800648a:	2800      	cmp	r0, #0
 800648c:	db1e      	blt.n	80064cc <quorem+0xd8>
 800648e:	2600      	movs	r6, #0
 8006490:	9d01      	ldr	r5, [sp, #4]
 8006492:	9904      	ldr	r1, [sp, #16]
 8006494:	c901      	ldmia	r1!, {r0}
 8006496:	682b      	ldr	r3, [r5, #0]
 8006498:	b287      	uxth	r7, r0
 800649a:	b29a      	uxth	r2, r3
 800649c:	1bd2      	subs	r2, r2, r7
 800649e:	1992      	adds	r2, r2, r6
 80064a0:	0c00      	lsrs	r0, r0, #16
 80064a2:	0c1b      	lsrs	r3, r3, #16
 80064a4:	1a1b      	subs	r3, r3, r0
 80064a6:	1410      	asrs	r0, r2, #16
 80064a8:	181b      	adds	r3, r3, r0
 80064aa:	141e      	asrs	r6, r3, #16
 80064ac:	b292      	uxth	r2, r2
 80064ae:	041b      	lsls	r3, r3, #16
 80064b0:	431a      	orrs	r2, r3
 80064b2:	9b05      	ldr	r3, [sp, #20]
 80064b4:	c504      	stmia	r5!, {r2}
 80064b6:	428b      	cmp	r3, r1
 80064b8:	d2ec      	bcs.n	8006494 <quorem+0xa0>
 80064ba:	9a01      	ldr	r2, [sp, #4]
 80064bc:	00a3      	lsls	r3, r4, #2
 80064be:	18d3      	adds	r3, r2, r3
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	2a00      	cmp	r2, #0
 80064c4:	d014      	beq.n	80064f0 <quorem+0xfc>
 80064c6:	9b02      	ldr	r3, [sp, #8]
 80064c8:	3301      	adds	r3, #1
 80064ca:	9302      	str	r3, [sp, #8]
 80064cc:	9802      	ldr	r0, [sp, #8]
 80064ce:	b009      	add	sp, #36	@ 0x24
 80064d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064d2:	682b      	ldr	r3, [r5, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d104      	bne.n	80064e2 <quorem+0xee>
 80064d8:	3c01      	subs	r4, #1
 80064da:	9b01      	ldr	r3, [sp, #4]
 80064dc:	3d04      	subs	r5, #4
 80064de:	42ab      	cmp	r3, r5
 80064e0:	d3f7      	bcc.n	80064d2 <quorem+0xde>
 80064e2:	9b03      	ldr	r3, [sp, #12]
 80064e4:	611c      	str	r4, [r3, #16]
 80064e6:	e7cc      	b.n	8006482 <quorem+0x8e>
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	2a00      	cmp	r2, #0
 80064ec:	d104      	bne.n	80064f8 <quorem+0x104>
 80064ee:	3c01      	subs	r4, #1
 80064f0:	9a01      	ldr	r2, [sp, #4]
 80064f2:	3b04      	subs	r3, #4
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d3f7      	bcc.n	80064e8 <quorem+0xf4>
 80064f8:	9b03      	ldr	r3, [sp, #12]
 80064fa:	611c      	str	r4, [r3, #16]
 80064fc:	e7e3      	b.n	80064c6 <quorem+0xd2>
	...

08006500 <_dtoa_r>:
 8006500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006502:	0014      	movs	r4, r2
 8006504:	001d      	movs	r5, r3
 8006506:	69c6      	ldr	r6, [r0, #28]
 8006508:	b09d      	sub	sp, #116	@ 0x74
 800650a:	940a      	str	r4, [sp, #40]	@ 0x28
 800650c:	950b      	str	r5, [sp, #44]	@ 0x2c
 800650e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8006510:	9003      	str	r0, [sp, #12]
 8006512:	2e00      	cmp	r6, #0
 8006514:	d10f      	bne.n	8006536 <_dtoa_r+0x36>
 8006516:	2010      	movs	r0, #16
 8006518:	f000 fe2c 	bl	8007174 <malloc>
 800651c:	9b03      	ldr	r3, [sp, #12]
 800651e:	1e02      	subs	r2, r0, #0
 8006520:	61d8      	str	r0, [r3, #28]
 8006522:	d104      	bne.n	800652e <_dtoa_r+0x2e>
 8006524:	21ef      	movs	r1, #239	@ 0xef
 8006526:	4bc7      	ldr	r3, [pc, #796]	@ (8006844 <_dtoa_r+0x344>)
 8006528:	48c7      	ldr	r0, [pc, #796]	@ (8006848 <_dtoa_r+0x348>)
 800652a:	f001 fcb9 	bl	8007ea0 <__assert_func>
 800652e:	6046      	str	r6, [r0, #4]
 8006530:	6086      	str	r6, [r0, #8]
 8006532:	6006      	str	r6, [r0, #0]
 8006534:	60c6      	str	r6, [r0, #12]
 8006536:	9b03      	ldr	r3, [sp, #12]
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	6819      	ldr	r1, [r3, #0]
 800653c:	2900      	cmp	r1, #0
 800653e:	d00b      	beq.n	8006558 <_dtoa_r+0x58>
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	2301      	movs	r3, #1
 8006544:	4093      	lsls	r3, r2
 8006546:	604a      	str	r2, [r1, #4]
 8006548:	608b      	str	r3, [r1, #8]
 800654a:	9803      	ldr	r0, [sp, #12]
 800654c:	f000 ff12 	bl	8007374 <_Bfree>
 8006550:	2200      	movs	r2, #0
 8006552:	9b03      	ldr	r3, [sp, #12]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	601a      	str	r2, [r3, #0]
 8006558:	2d00      	cmp	r5, #0
 800655a:	da1e      	bge.n	800659a <_dtoa_r+0x9a>
 800655c:	2301      	movs	r3, #1
 800655e:	603b      	str	r3, [r7, #0]
 8006560:	006b      	lsls	r3, r5, #1
 8006562:	085b      	lsrs	r3, r3, #1
 8006564:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006566:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006568:	4bb8      	ldr	r3, [pc, #736]	@ (800684c <_dtoa_r+0x34c>)
 800656a:	4ab8      	ldr	r2, [pc, #736]	@ (800684c <_dtoa_r+0x34c>)
 800656c:	403b      	ands	r3, r7
 800656e:	4293      	cmp	r3, r2
 8006570:	d116      	bne.n	80065a0 <_dtoa_r+0xa0>
 8006572:	4bb7      	ldr	r3, [pc, #732]	@ (8006850 <_dtoa_r+0x350>)
 8006574:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	033b      	lsls	r3, r7, #12
 800657a:	0b1b      	lsrs	r3, r3, #12
 800657c:	4323      	orrs	r3, r4
 800657e:	d101      	bne.n	8006584 <_dtoa_r+0x84>
 8006580:	f000 fd80 	bl	8007084 <_dtoa_r+0xb84>
 8006584:	4bb3      	ldr	r3, [pc, #716]	@ (8006854 <_dtoa_r+0x354>)
 8006586:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006588:	9308      	str	r3, [sp, #32]
 800658a:	2a00      	cmp	r2, #0
 800658c:	d002      	beq.n	8006594 <_dtoa_r+0x94>
 800658e:	4bb2      	ldr	r3, [pc, #712]	@ (8006858 <_dtoa_r+0x358>)
 8006590:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006592:	6013      	str	r3, [r2, #0]
 8006594:	9808      	ldr	r0, [sp, #32]
 8006596:	b01d      	add	sp, #116	@ 0x74
 8006598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800659a:	2300      	movs	r3, #0
 800659c:	603b      	str	r3, [r7, #0]
 800659e:	e7e2      	b.n	8006566 <_dtoa_r+0x66>
 80065a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065a4:	9212      	str	r2, [sp, #72]	@ 0x48
 80065a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80065a8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80065aa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80065ac:	2200      	movs	r2, #0
 80065ae:	2300      	movs	r3, #0
 80065b0:	f7f9 ff4c 	bl	800044c <__aeabi_dcmpeq>
 80065b4:	1e06      	subs	r6, r0, #0
 80065b6:	d00b      	beq.n	80065d0 <_dtoa_r+0xd0>
 80065b8:	2301      	movs	r3, #1
 80065ba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <_dtoa_r+0xca>
 80065c4:	4ba5      	ldr	r3, [pc, #660]	@ (800685c <_dtoa_r+0x35c>)
 80065c6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	4ba5      	ldr	r3, [pc, #660]	@ (8006860 <_dtoa_r+0x360>)
 80065cc:	9308      	str	r3, [sp, #32]
 80065ce:	e7e1      	b.n	8006594 <_dtoa_r+0x94>
 80065d0:	ab1a      	add	r3, sp, #104	@ 0x68
 80065d2:	9301      	str	r3, [sp, #4]
 80065d4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	9803      	ldr	r0, [sp, #12]
 80065da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80065dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80065de:	f001 f9c1 	bl	8007964 <__d2b>
 80065e2:	007a      	lsls	r2, r7, #1
 80065e4:	9005      	str	r0, [sp, #20]
 80065e6:	0d52      	lsrs	r2, r2, #21
 80065e8:	d100      	bne.n	80065ec <_dtoa_r+0xec>
 80065ea:	e07b      	b.n	80066e4 <_dtoa_r+0x1e4>
 80065ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80065ee:	9618      	str	r6, [sp, #96]	@ 0x60
 80065f0:	0319      	lsls	r1, r3, #12
 80065f2:	4b9c      	ldr	r3, [pc, #624]	@ (8006864 <_dtoa_r+0x364>)
 80065f4:	0b09      	lsrs	r1, r1, #12
 80065f6:	430b      	orrs	r3, r1
 80065f8:	499b      	ldr	r1, [pc, #620]	@ (8006868 <_dtoa_r+0x368>)
 80065fa:	1857      	adds	r7, r2, r1
 80065fc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80065fe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006600:	0019      	movs	r1, r3
 8006602:	2200      	movs	r2, #0
 8006604:	4b99      	ldr	r3, [pc, #612]	@ (800686c <_dtoa_r+0x36c>)
 8006606:	f7fb fb21 	bl	8001c4c <__aeabi_dsub>
 800660a:	4a99      	ldr	r2, [pc, #612]	@ (8006870 <_dtoa_r+0x370>)
 800660c:	4b99      	ldr	r3, [pc, #612]	@ (8006874 <_dtoa_r+0x374>)
 800660e:	f7fb f837 	bl	8001680 <__aeabi_dmul>
 8006612:	4a99      	ldr	r2, [pc, #612]	@ (8006878 <_dtoa_r+0x378>)
 8006614:	4b99      	ldr	r3, [pc, #612]	@ (800687c <_dtoa_r+0x37c>)
 8006616:	f7fa f833 	bl	8000680 <__aeabi_dadd>
 800661a:	0004      	movs	r4, r0
 800661c:	0038      	movs	r0, r7
 800661e:	000d      	movs	r5, r1
 8006620:	f7fb ff7c 	bl	800251c <__aeabi_i2d>
 8006624:	4a96      	ldr	r2, [pc, #600]	@ (8006880 <_dtoa_r+0x380>)
 8006626:	4b97      	ldr	r3, [pc, #604]	@ (8006884 <_dtoa_r+0x384>)
 8006628:	f7fb f82a 	bl	8001680 <__aeabi_dmul>
 800662c:	0002      	movs	r2, r0
 800662e:	000b      	movs	r3, r1
 8006630:	0020      	movs	r0, r4
 8006632:	0029      	movs	r1, r5
 8006634:	f7fa f824 	bl	8000680 <__aeabi_dadd>
 8006638:	0004      	movs	r4, r0
 800663a:	000d      	movs	r5, r1
 800663c:	f7fb ff32 	bl	80024a4 <__aeabi_d2iz>
 8006640:	2200      	movs	r2, #0
 8006642:	9004      	str	r0, [sp, #16]
 8006644:	2300      	movs	r3, #0
 8006646:	0020      	movs	r0, r4
 8006648:	0029      	movs	r1, r5
 800664a:	f7f9 ff05 	bl	8000458 <__aeabi_dcmplt>
 800664e:	2800      	cmp	r0, #0
 8006650:	d00b      	beq.n	800666a <_dtoa_r+0x16a>
 8006652:	9804      	ldr	r0, [sp, #16]
 8006654:	f7fb ff62 	bl	800251c <__aeabi_i2d>
 8006658:	002b      	movs	r3, r5
 800665a:	0022      	movs	r2, r4
 800665c:	f7f9 fef6 	bl	800044c <__aeabi_dcmpeq>
 8006660:	4243      	negs	r3, r0
 8006662:	4158      	adcs	r0, r3
 8006664:	9b04      	ldr	r3, [sp, #16]
 8006666:	1a1b      	subs	r3, r3, r0
 8006668:	9304      	str	r3, [sp, #16]
 800666a:	2301      	movs	r3, #1
 800666c:	9315      	str	r3, [sp, #84]	@ 0x54
 800666e:	9b04      	ldr	r3, [sp, #16]
 8006670:	2b16      	cmp	r3, #22
 8006672:	d810      	bhi.n	8006696 <_dtoa_r+0x196>
 8006674:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006676:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006678:	9a04      	ldr	r2, [sp, #16]
 800667a:	4b83      	ldr	r3, [pc, #524]	@ (8006888 <_dtoa_r+0x388>)
 800667c:	00d2      	lsls	r2, r2, #3
 800667e:	189b      	adds	r3, r3, r2
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f7f9 fee8 	bl	8000458 <__aeabi_dcmplt>
 8006688:	2800      	cmp	r0, #0
 800668a:	d047      	beq.n	800671c <_dtoa_r+0x21c>
 800668c:	9b04      	ldr	r3, [sp, #16]
 800668e:	3b01      	subs	r3, #1
 8006690:	9304      	str	r3, [sp, #16]
 8006692:	2300      	movs	r3, #0
 8006694:	9315      	str	r3, [sp, #84]	@ 0x54
 8006696:	2200      	movs	r2, #0
 8006698:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800669a:	9206      	str	r2, [sp, #24]
 800669c:	1bdb      	subs	r3, r3, r7
 800669e:	1e5a      	subs	r2, r3, #1
 80066a0:	d53e      	bpl.n	8006720 <_dtoa_r+0x220>
 80066a2:	2201      	movs	r2, #1
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	9306      	str	r3, [sp, #24]
 80066a8:	2300      	movs	r3, #0
 80066aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80066ac:	9b04      	ldr	r3, [sp, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	db38      	blt.n	8006724 <_dtoa_r+0x224>
 80066b2:	9a04      	ldr	r2, [sp, #16]
 80066b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066b6:	4694      	mov	ip, r2
 80066b8:	4463      	add	r3, ip
 80066ba:	930d      	str	r3, [sp, #52]	@ 0x34
 80066bc:	2300      	movs	r3, #0
 80066be:	9214      	str	r2, [sp, #80]	@ 0x50
 80066c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80066c2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80066c4:	2401      	movs	r4, #1
 80066c6:	2b09      	cmp	r3, #9
 80066c8:	d862      	bhi.n	8006790 <_dtoa_r+0x290>
 80066ca:	2b05      	cmp	r3, #5
 80066cc:	dd02      	ble.n	80066d4 <_dtoa_r+0x1d4>
 80066ce:	2400      	movs	r4, #0
 80066d0:	3b04      	subs	r3, #4
 80066d2:	9322      	str	r3, [sp, #136]	@ 0x88
 80066d4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80066d6:	1e98      	subs	r0, r3, #2
 80066d8:	2803      	cmp	r0, #3
 80066da:	d863      	bhi.n	80067a4 <_dtoa_r+0x2a4>
 80066dc:	f7f9 fd1c 	bl	8000118 <__gnu_thumb1_case_uqi>
 80066e0:	2b385654 	.word	0x2b385654
 80066e4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80066e6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80066e8:	18f6      	adds	r6, r6, r3
 80066ea:	4b68      	ldr	r3, [pc, #416]	@ (800688c <_dtoa_r+0x38c>)
 80066ec:	18f2      	adds	r2, r6, r3
 80066ee:	2a20      	cmp	r2, #32
 80066f0:	dd0f      	ble.n	8006712 <_dtoa_r+0x212>
 80066f2:	2340      	movs	r3, #64	@ 0x40
 80066f4:	1a9b      	subs	r3, r3, r2
 80066f6:	409f      	lsls	r7, r3
 80066f8:	4b65      	ldr	r3, [pc, #404]	@ (8006890 <_dtoa_r+0x390>)
 80066fa:	0038      	movs	r0, r7
 80066fc:	18f3      	adds	r3, r6, r3
 80066fe:	40dc      	lsrs	r4, r3
 8006700:	4320      	orrs	r0, r4
 8006702:	f7fb ff39 	bl	8002578 <__aeabi_ui2d>
 8006706:	2201      	movs	r2, #1
 8006708:	4b62      	ldr	r3, [pc, #392]	@ (8006894 <_dtoa_r+0x394>)
 800670a:	1e77      	subs	r7, r6, #1
 800670c:	18cb      	adds	r3, r1, r3
 800670e:	9218      	str	r2, [sp, #96]	@ 0x60
 8006710:	e776      	b.n	8006600 <_dtoa_r+0x100>
 8006712:	2320      	movs	r3, #32
 8006714:	0020      	movs	r0, r4
 8006716:	1a9b      	subs	r3, r3, r2
 8006718:	4098      	lsls	r0, r3
 800671a:	e7f2      	b.n	8006702 <_dtoa_r+0x202>
 800671c:	9015      	str	r0, [sp, #84]	@ 0x54
 800671e:	e7ba      	b.n	8006696 <_dtoa_r+0x196>
 8006720:	920d      	str	r2, [sp, #52]	@ 0x34
 8006722:	e7c3      	b.n	80066ac <_dtoa_r+0x1ac>
 8006724:	9b06      	ldr	r3, [sp, #24]
 8006726:	9a04      	ldr	r2, [sp, #16]
 8006728:	1a9b      	subs	r3, r3, r2
 800672a:	9306      	str	r3, [sp, #24]
 800672c:	4253      	negs	r3, r2
 800672e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006730:	2300      	movs	r3, #0
 8006732:	9314      	str	r3, [sp, #80]	@ 0x50
 8006734:	e7c5      	b.n	80066c2 <_dtoa_r+0x1c2>
 8006736:	2301      	movs	r3, #1
 8006738:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800673a:	9310      	str	r3, [sp, #64]	@ 0x40
 800673c:	4694      	mov	ip, r2
 800673e:	9b04      	ldr	r3, [sp, #16]
 8006740:	4463      	add	r3, ip
 8006742:	930e      	str	r3, [sp, #56]	@ 0x38
 8006744:	3301      	adds	r3, #1
 8006746:	9309      	str	r3, [sp, #36]	@ 0x24
 8006748:	2b00      	cmp	r3, #0
 800674a:	dc08      	bgt.n	800675e <_dtoa_r+0x25e>
 800674c:	2301      	movs	r3, #1
 800674e:	e006      	b.n	800675e <_dtoa_r+0x25e>
 8006750:	2301      	movs	r3, #1
 8006752:	9310      	str	r3, [sp, #64]	@ 0x40
 8006754:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006756:	2b00      	cmp	r3, #0
 8006758:	dd28      	ble.n	80067ac <_dtoa_r+0x2ac>
 800675a:	930e      	str	r3, [sp, #56]	@ 0x38
 800675c:	9309      	str	r3, [sp, #36]	@ 0x24
 800675e:	9a03      	ldr	r2, [sp, #12]
 8006760:	2100      	movs	r1, #0
 8006762:	69d0      	ldr	r0, [r2, #28]
 8006764:	2204      	movs	r2, #4
 8006766:	0015      	movs	r5, r2
 8006768:	3514      	adds	r5, #20
 800676a:	429d      	cmp	r5, r3
 800676c:	d923      	bls.n	80067b6 <_dtoa_r+0x2b6>
 800676e:	6041      	str	r1, [r0, #4]
 8006770:	9803      	ldr	r0, [sp, #12]
 8006772:	f000 fdbb 	bl	80072ec <_Balloc>
 8006776:	9008      	str	r0, [sp, #32]
 8006778:	2800      	cmp	r0, #0
 800677a:	d11f      	bne.n	80067bc <_dtoa_r+0x2bc>
 800677c:	21b0      	movs	r1, #176	@ 0xb0
 800677e:	4b46      	ldr	r3, [pc, #280]	@ (8006898 <_dtoa_r+0x398>)
 8006780:	4831      	ldr	r0, [pc, #196]	@ (8006848 <_dtoa_r+0x348>)
 8006782:	9a08      	ldr	r2, [sp, #32]
 8006784:	31ff      	adds	r1, #255	@ 0xff
 8006786:	e6d0      	b.n	800652a <_dtoa_r+0x2a>
 8006788:	2300      	movs	r3, #0
 800678a:	e7e2      	b.n	8006752 <_dtoa_r+0x252>
 800678c:	2300      	movs	r3, #0
 800678e:	e7d3      	b.n	8006738 <_dtoa_r+0x238>
 8006790:	2300      	movs	r3, #0
 8006792:	9410      	str	r4, [sp, #64]	@ 0x40
 8006794:	9322      	str	r3, [sp, #136]	@ 0x88
 8006796:	3b01      	subs	r3, #1
 8006798:	2200      	movs	r2, #0
 800679a:	930e      	str	r3, [sp, #56]	@ 0x38
 800679c:	9309      	str	r3, [sp, #36]	@ 0x24
 800679e:	3313      	adds	r3, #19
 80067a0:	9223      	str	r2, [sp, #140]	@ 0x8c
 80067a2:	e7dc      	b.n	800675e <_dtoa_r+0x25e>
 80067a4:	2301      	movs	r3, #1
 80067a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80067a8:	3b02      	subs	r3, #2
 80067aa:	e7f5      	b.n	8006798 <_dtoa_r+0x298>
 80067ac:	2301      	movs	r3, #1
 80067ae:	001a      	movs	r2, r3
 80067b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80067b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067b4:	e7f4      	b.n	80067a0 <_dtoa_r+0x2a0>
 80067b6:	3101      	adds	r1, #1
 80067b8:	0052      	lsls	r2, r2, #1
 80067ba:	e7d4      	b.n	8006766 <_dtoa_r+0x266>
 80067bc:	9b03      	ldr	r3, [sp, #12]
 80067be:	9a08      	ldr	r2, [sp, #32]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c6:	2b0e      	cmp	r3, #14
 80067c8:	d900      	bls.n	80067cc <_dtoa_r+0x2cc>
 80067ca:	e0d6      	b.n	800697a <_dtoa_r+0x47a>
 80067cc:	2c00      	cmp	r4, #0
 80067ce:	d100      	bne.n	80067d2 <_dtoa_r+0x2d2>
 80067d0:	e0d3      	b.n	800697a <_dtoa_r+0x47a>
 80067d2:	9b04      	ldr	r3, [sp, #16]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	dd63      	ble.n	80068a0 <_dtoa_r+0x3a0>
 80067d8:	210f      	movs	r1, #15
 80067da:	9a04      	ldr	r2, [sp, #16]
 80067dc:	4b2a      	ldr	r3, [pc, #168]	@ (8006888 <_dtoa_r+0x388>)
 80067de:	400a      	ands	r2, r1
 80067e0:	00d2      	lsls	r2, r2, #3
 80067e2:	189b      	adds	r3, r3, r2
 80067e4:	681e      	ldr	r6, [r3, #0]
 80067e6:	685f      	ldr	r7, [r3, #4]
 80067e8:	9b04      	ldr	r3, [sp, #16]
 80067ea:	2402      	movs	r4, #2
 80067ec:	111d      	asrs	r5, r3, #4
 80067ee:	05db      	lsls	r3, r3, #23
 80067f0:	d50a      	bpl.n	8006808 <_dtoa_r+0x308>
 80067f2:	4b2a      	ldr	r3, [pc, #168]	@ (800689c <_dtoa_r+0x39c>)
 80067f4:	400d      	ands	r5, r1
 80067f6:	6a1a      	ldr	r2, [r3, #32]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067fa:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80067fc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80067fe:	f7fa fb05 	bl	8000e0c <__aeabi_ddiv>
 8006802:	900a      	str	r0, [sp, #40]	@ 0x28
 8006804:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006806:	3401      	adds	r4, #1
 8006808:	4b24      	ldr	r3, [pc, #144]	@ (800689c <_dtoa_r+0x39c>)
 800680a:	930c      	str	r3, [sp, #48]	@ 0x30
 800680c:	2d00      	cmp	r5, #0
 800680e:	d108      	bne.n	8006822 <_dtoa_r+0x322>
 8006810:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006812:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006814:	0032      	movs	r2, r6
 8006816:	003b      	movs	r3, r7
 8006818:	f7fa faf8 	bl	8000e0c <__aeabi_ddiv>
 800681c:	900a      	str	r0, [sp, #40]	@ 0x28
 800681e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006820:	e059      	b.n	80068d6 <_dtoa_r+0x3d6>
 8006822:	2301      	movs	r3, #1
 8006824:	421d      	tst	r5, r3
 8006826:	d009      	beq.n	800683c <_dtoa_r+0x33c>
 8006828:	18e4      	adds	r4, r4, r3
 800682a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800682c:	0030      	movs	r0, r6
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	0039      	movs	r1, r7
 8006834:	f7fa ff24 	bl	8001680 <__aeabi_dmul>
 8006838:	0006      	movs	r6, r0
 800683a:	000f      	movs	r7, r1
 800683c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800683e:	106d      	asrs	r5, r5, #1
 8006840:	3308      	adds	r3, #8
 8006842:	e7e2      	b.n	800680a <_dtoa_r+0x30a>
 8006844:	080098a1 	.word	0x080098a1
 8006848:	080098b8 	.word	0x080098b8
 800684c:	7ff00000 	.word	0x7ff00000
 8006850:	0000270f 	.word	0x0000270f
 8006854:	0800989d 	.word	0x0800989d
 8006858:	080098a0 	.word	0x080098a0
 800685c:	08009871 	.word	0x08009871
 8006860:	08009870 	.word	0x08009870
 8006864:	3ff00000 	.word	0x3ff00000
 8006868:	fffffc01 	.word	0xfffffc01
 800686c:	3ff80000 	.word	0x3ff80000
 8006870:	636f4361 	.word	0x636f4361
 8006874:	3fd287a7 	.word	0x3fd287a7
 8006878:	8b60c8b3 	.word	0x8b60c8b3
 800687c:	3fc68a28 	.word	0x3fc68a28
 8006880:	509f79fb 	.word	0x509f79fb
 8006884:	3fd34413 	.word	0x3fd34413
 8006888:	08009a08 	.word	0x08009a08
 800688c:	00000432 	.word	0x00000432
 8006890:	00000412 	.word	0x00000412
 8006894:	fe100000 	.word	0xfe100000
 8006898:	08009910 	.word	0x08009910
 800689c:	080099e0 	.word	0x080099e0
 80068a0:	9b04      	ldr	r3, [sp, #16]
 80068a2:	2402      	movs	r4, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d016      	beq.n	80068d6 <_dtoa_r+0x3d6>
 80068a8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80068aa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80068ac:	220f      	movs	r2, #15
 80068ae:	425d      	negs	r5, r3
 80068b0:	402a      	ands	r2, r5
 80068b2:	4bd5      	ldr	r3, [pc, #852]	@ (8006c08 <_dtoa_r+0x708>)
 80068b4:	00d2      	lsls	r2, r2, #3
 80068b6:	189b      	adds	r3, r3, r2
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f7fa fee0 	bl	8001680 <__aeabi_dmul>
 80068c0:	2701      	movs	r7, #1
 80068c2:	2300      	movs	r3, #0
 80068c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80068c6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80068c8:	4ed0      	ldr	r6, [pc, #832]	@ (8006c0c <_dtoa_r+0x70c>)
 80068ca:	112d      	asrs	r5, r5, #4
 80068cc:	2d00      	cmp	r5, #0
 80068ce:	d000      	beq.n	80068d2 <_dtoa_r+0x3d2>
 80068d0:	e095      	b.n	80069fe <_dtoa_r+0x4fe>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1a2      	bne.n	800681c <_dtoa_r+0x31c>
 80068d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80068d8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80068da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d100      	bne.n	80068e2 <_dtoa_r+0x3e2>
 80068e0:	e098      	b.n	8006a14 <_dtoa_r+0x514>
 80068e2:	2200      	movs	r2, #0
 80068e4:	0030      	movs	r0, r6
 80068e6:	0039      	movs	r1, r7
 80068e8:	4bc9      	ldr	r3, [pc, #804]	@ (8006c10 <_dtoa_r+0x710>)
 80068ea:	f7f9 fdb5 	bl	8000458 <__aeabi_dcmplt>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	d100      	bne.n	80068f4 <_dtoa_r+0x3f4>
 80068f2:	e08f      	b.n	8006a14 <_dtoa_r+0x514>
 80068f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d100      	bne.n	80068fc <_dtoa_r+0x3fc>
 80068fa:	e08b      	b.n	8006a14 <_dtoa_r+0x514>
 80068fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068fe:	2b00      	cmp	r3, #0
 8006900:	dd37      	ble.n	8006972 <_dtoa_r+0x472>
 8006902:	9b04      	ldr	r3, [sp, #16]
 8006904:	2200      	movs	r2, #0
 8006906:	3b01      	subs	r3, #1
 8006908:	930c      	str	r3, [sp, #48]	@ 0x30
 800690a:	0030      	movs	r0, r6
 800690c:	4bc1      	ldr	r3, [pc, #772]	@ (8006c14 <_dtoa_r+0x714>)
 800690e:	0039      	movs	r1, r7
 8006910:	f7fa feb6 	bl	8001680 <__aeabi_dmul>
 8006914:	900a      	str	r0, [sp, #40]	@ 0x28
 8006916:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006918:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800691a:	3401      	adds	r4, #1
 800691c:	0020      	movs	r0, r4
 800691e:	9311      	str	r3, [sp, #68]	@ 0x44
 8006920:	f7fb fdfc 	bl	800251c <__aeabi_i2d>
 8006924:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006926:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006928:	f7fa feaa 	bl	8001680 <__aeabi_dmul>
 800692c:	4bba      	ldr	r3, [pc, #744]	@ (8006c18 <_dtoa_r+0x718>)
 800692e:	2200      	movs	r2, #0
 8006930:	f7f9 fea6 	bl	8000680 <__aeabi_dadd>
 8006934:	4bb9      	ldr	r3, [pc, #740]	@ (8006c1c <_dtoa_r+0x71c>)
 8006936:	0006      	movs	r6, r0
 8006938:	18cf      	adds	r7, r1, r3
 800693a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800693c:	2b00      	cmp	r3, #0
 800693e:	d16d      	bne.n	8006a1c <_dtoa_r+0x51c>
 8006940:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006942:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006944:	2200      	movs	r2, #0
 8006946:	4bb6      	ldr	r3, [pc, #728]	@ (8006c20 <_dtoa_r+0x720>)
 8006948:	f7fb f980 	bl	8001c4c <__aeabi_dsub>
 800694c:	0032      	movs	r2, r6
 800694e:	003b      	movs	r3, r7
 8006950:	0004      	movs	r4, r0
 8006952:	000d      	movs	r5, r1
 8006954:	f7f9 fd94 	bl	8000480 <__aeabi_dcmpgt>
 8006958:	2800      	cmp	r0, #0
 800695a:	d000      	beq.n	800695e <_dtoa_r+0x45e>
 800695c:	e2b6      	b.n	8006ecc <_dtoa_r+0x9cc>
 800695e:	2180      	movs	r1, #128	@ 0x80
 8006960:	0609      	lsls	r1, r1, #24
 8006962:	187b      	adds	r3, r7, r1
 8006964:	0032      	movs	r2, r6
 8006966:	0020      	movs	r0, r4
 8006968:	0029      	movs	r1, r5
 800696a:	f7f9 fd75 	bl	8000458 <__aeabi_dcmplt>
 800696e:	2800      	cmp	r0, #0
 8006970:	d128      	bne.n	80069c4 <_dtoa_r+0x4c4>
 8006972:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006974:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006976:	930a      	str	r3, [sp, #40]	@ 0x28
 8006978:	940b      	str	r4, [sp, #44]	@ 0x2c
 800697a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800697c:	2b00      	cmp	r3, #0
 800697e:	da00      	bge.n	8006982 <_dtoa_r+0x482>
 8006980:	e174      	b.n	8006c6c <_dtoa_r+0x76c>
 8006982:	9a04      	ldr	r2, [sp, #16]
 8006984:	2a0e      	cmp	r2, #14
 8006986:	dd00      	ble.n	800698a <_dtoa_r+0x48a>
 8006988:	e170      	b.n	8006c6c <_dtoa_r+0x76c>
 800698a:	4b9f      	ldr	r3, [pc, #636]	@ (8006c08 <_dtoa_r+0x708>)
 800698c:	00d2      	lsls	r2, r2, #3
 800698e:	189b      	adds	r3, r3, r2
 8006990:	685c      	ldr	r4, [r3, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	9306      	str	r3, [sp, #24]
 8006996:	9407      	str	r4, [sp, #28]
 8006998:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800699a:	2b00      	cmp	r3, #0
 800699c:	db00      	blt.n	80069a0 <_dtoa_r+0x4a0>
 800699e:	e0e7      	b.n	8006b70 <_dtoa_r+0x670>
 80069a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	dd00      	ble.n	80069a8 <_dtoa_r+0x4a8>
 80069a6:	e0e3      	b.n	8006b70 <_dtoa_r+0x670>
 80069a8:	d10c      	bne.n	80069c4 <_dtoa_r+0x4c4>
 80069aa:	9806      	ldr	r0, [sp, #24]
 80069ac:	9907      	ldr	r1, [sp, #28]
 80069ae:	2200      	movs	r2, #0
 80069b0:	4b9b      	ldr	r3, [pc, #620]	@ (8006c20 <_dtoa_r+0x720>)
 80069b2:	f7fa fe65 	bl	8001680 <__aeabi_dmul>
 80069b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069ba:	f7f9 fd6b 	bl	8000494 <__aeabi_dcmpge>
 80069be:	2800      	cmp	r0, #0
 80069c0:	d100      	bne.n	80069c4 <_dtoa_r+0x4c4>
 80069c2:	e286      	b.n	8006ed2 <_dtoa_r+0x9d2>
 80069c4:	2600      	movs	r6, #0
 80069c6:	0037      	movs	r7, r6
 80069c8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069ca:	9c08      	ldr	r4, [sp, #32]
 80069cc:	43db      	mvns	r3, r3
 80069ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80069d0:	9704      	str	r7, [sp, #16]
 80069d2:	2700      	movs	r7, #0
 80069d4:	0031      	movs	r1, r6
 80069d6:	9803      	ldr	r0, [sp, #12]
 80069d8:	f000 fccc 	bl	8007374 <_Bfree>
 80069dc:	9b04      	ldr	r3, [sp, #16]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d100      	bne.n	80069e4 <_dtoa_r+0x4e4>
 80069e2:	e0bb      	b.n	8006b5c <_dtoa_r+0x65c>
 80069e4:	2f00      	cmp	r7, #0
 80069e6:	d005      	beq.n	80069f4 <_dtoa_r+0x4f4>
 80069e8:	429f      	cmp	r7, r3
 80069ea:	d003      	beq.n	80069f4 <_dtoa_r+0x4f4>
 80069ec:	0039      	movs	r1, r7
 80069ee:	9803      	ldr	r0, [sp, #12]
 80069f0:	f000 fcc0 	bl	8007374 <_Bfree>
 80069f4:	9904      	ldr	r1, [sp, #16]
 80069f6:	9803      	ldr	r0, [sp, #12]
 80069f8:	f000 fcbc 	bl	8007374 <_Bfree>
 80069fc:	e0ae      	b.n	8006b5c <_dtoa_r+0x65c>
 80069fe:	423d      	tst	r5, r7
 8006a00:	d005      	beq.n	8006a0e <_dtoa_r+0x50e>
 8006a02:	6832      	ldr	r2, [r6, #0]
 8006a04:	6873      	ldr	r3, [r6, #4]
 8006a06:	f7fa fe3b 	bl	8001680 <__aeabi_dmul>
 8006a0a:	003b      	movs	r3, r7
 8006a0c:	3401      	adds	r4, #1
 8006a0e:	106d      	asrs	r5, r5, #1
 8006a10:	3608      	adds	r6, #8
 8006a12:	e75b      	b.n	80068cc <_dtoa_r+0x3cc>
 8006a14:	9b04      	ldr	r3, [sp, #16]
 8006a16:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a1a:	e77f      	b.n	800691c <_dtoa_r+0x41c>
 8006a1c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006a1e:	4b7a      	ldr	r3, [pc, #488]	@ (8006c08 <_dtoa_r+0x708>)
 8006a20:	3a01      	subs	r2, #1
 8006a22:	00d2      	lsls	r2, r2, #3
 8006a24:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006a26:	189b      	adds	r3, r3, r2
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	2900      	cmp	r1, #0
 8006a2e:	d04c      	beq.n	8006aca <_dtoa_r+0x5ca>
 8006a30:	2000      	movs	r0, #0
 8006a32:	497c      	ldr	r1, [pc, #496]	@ (8006c24 <_dtoa_r+0x724>)
 8006a34:	f7fa f9ea 	bl	8000e0c <__aeabi_ddiv>
 8006a38:	0032      	movs	r2, r6
 8006a3a:	003b      	movs	r3, r7
 8006a3c:	f7fb f906 	bl	8001c4c <__aeabi_dsub>
 8006a40:	9a08      	ldr	r2, [sp, #32]
 8006a42:	0006      	movs	r6, r0
 8006a44:	4694      	mov	ip, r2
 8006a46:	000f      	movs	r7, r1
 8006a48:	9b08      	ldr	r3, [sp, #32]
 8006a4a:	9316      	str	r3, [sp, #88]	@ 0x58
 8006a4c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006a4e:	4463      	add	r3, ip
 8006a50:	9311      	str	r3, [sp, #68]	@ 0x44
 8006a52:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006a54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a56:	f7fb fd25 	bl	80024a4 <__aeabi_d2iz>
 8006a5a:	0005      	movs	r5, r0
 8006a5c:	f7fb fd5e 	bl	800251c <__aeabi_i2d>
 8006a60:	0002      	movs	r2, r0
 8006a62:	000b      	movs	r3, r1
 8006a64:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006a66:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a68:	f7fb f8f0 	bl	8001c4c <__aeabi_dsub>
 8006a6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006a6e:	3530      	adds	r5, #48	@ 0x30
 8006a70:	1c5c      	adds	r4, r3, #1
 8006a72:	701d      	strb	r5, [r3, #0]
 8006a74:	0032      	movs	r2, r6
 8006a76:	003b      	movs	r3, r7
 8006a78:	900a      	str	r0, [sp, #40]	@ 0x28
 8006a7a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006a7c:	f7f9 fcec 	bl	8000458 <__aeabi_dcmplt>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d16b      	bne.n	8006b5c <_dtoa_r+0x65c>
 8006a84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a88:	2000      	movs	r0, #0
 8006a8a:	4961      	ldr	r1, [pc, #388]	@ (8006c10 <_dtoa_r+0x710>)
 8006a8c:	f7fb f8de 	bl	8001c4c <__aeabi_dsub>
 8006a90:	0032      	movs	r2, r6
 8006a92:	003b      	movs	r3, r7
 8006a94:	f7f9 fce0 	bl	8000458 <__aeabi_dcmplt>
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	d000      	beq.n	8006a9e <_dtoa_r+0x59e>
 8006a9c:	e0c6      	b.n	8006c2c <_dtoa_r+0x72c>
 8006a9e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006aa0:	42a3      	cmp	r3, r4
 8006aa2:	d100      	bne.n	8006aa6 <_dtoa_r+0x5a6>
 8006aa4:	e765      	b.n	8006972 <_dtoa_r+0x472>
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	0030      	movs	r0, r6
 8006aaa:	0039      	movs	r1, r7
 8006aac:	4b59      	ldr	r3, [pc, #356]	@ (8006c14 <_dtoa_r+0x714>)
 8006aae:	f7fa fde7 	bl	8001680 <__aeabi_dmul>
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	0006      	movs	r6, r0
 8006ab6:	000f      	movs	r7, r1
 8006ab8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006aba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006abc:	4b55      	ldr	r3, [pc, #340]	@ (8006c14 <_dtoa_r+0x714>)
 8006abe:	f7fa fddf 	bl	8001680 <__aeabi_dmul>
 8006ac2:	9416      	str	r4, [sp, #88]	@ 0x58
 8006ac4:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ac6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006ac8:	e7c3      	b.n	8006a52 <_dtoa_r+0x552>
 8006aca:	0030      	movs	r0, r6
 8006acc:	0039      	movs	r1, r7
 8006ace:	f7fa fdd7 	bl	8001680 <__aeabi_dmul>
 8006ad2:	9d08      	ldr	r5, [sp, #32]
 8006ad4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006ad6:	002b      	movs	r3, r5
 8006ad8:	4694      	mov	ip, r2
 8006ada:	9016      	str	r0, [sp, #88]	@ 0x58
 8006adc:	9117      	str	r1, [sp, #92]	@ 0x5c
 8006ade:	4463      	add	r3, ip
 8006ae0:	9319      	str	r3, [sp, #100]	@ 0x64
 8006ae2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006ae4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ae6:	f7fb fcdd 	bl	80024a4 <__aeabi_d2iz>
 8006aea:	0004      	movs	r4, r0
 8006aec:	f7fb fd16 	bl	800251c <__aeabi_i2d>
 8006af0:	000b      	movs	r3, r1
 8006af2:	0002      	movs	r2, r0
 8006af4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006af6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006af8:	f7fb f8a8 	bl	8001c4c <__aeabi_dsub>
 8006afc:	3430      	adds	r4, #48	@ 0x30
 8006afe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b00:	702c      	strb	r4, [r5, #0]
 8006b02:	3501      	adds	r5, #1
 8006b04:	0006      	movs	r6, r0
 8006b06:	000f      	movs	r7, r1
 8006b08:	42ab      	cmp	r3, r5
 8006b0a:	d12a      	bne.n	8006b62 <_dtoa_r+0x662>
 8006b0c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8006b0e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8006b10:	9b08      	ldr	r3, [sp, #32]
 8006b12:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8006b14:	469c      	mov	ip, r3
 8006b16:	2200      	movs	r2, #0
 8006b18:	4b42      	ldr	r3, [pc, #264]	@ (8006c24 <_dtoa_r+0x724>)
 8006b1a:	4464      	add	r4, ip
 8006b1c:	f7f9 fdb0 	bl	8000680 <__aeabi_dadd>
 8006b20:	0002      	movs	r2, r0
 8006b22:	000b      	movs	r3, r1
 8006b24:	0030      	movs	r0, r6
 8006b26:	0039      	movs	r1, r7
 8006b28:	f7f9 fcaa 	bl	8000480 <__aeabi_dcmpgt>
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	d000      	beq.n	8006b32 <_dtoa_r+0x632>
 8006b30:	e07c      	b.n	8006c2c <_dtoa_r+0x72c>
 8006b32:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006b34:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006b36:	2000      	movs	r0, #0
 8006b38:	493a      	ldr	r1, [pc, #232]	@ (8006c24 <_dtoa_r+0x724>)
 8006b3a:	f7fb f887 	bl	8001c4c <__aeabi_dsub>
 8006b3e:	0002      	movs	r2, r0
 8006b40:	000b      	movs	r3, r1
 8006b42:	0030      	movs	r0, r6
 8006b44:	0039      	movs	r1, r7
 8006b46:	f7f9 fc87 	bl	8000458 <__aeabi_dcmplt>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	d100      	bne.n	8006b50 <_dtoa_r+0x650>
 8006b4e:	e710      	b.n	8006972 <_dtoa_r+0x472>
 8006b50:	0023      	movs	r3, r4
 8006b52:	3c01      	subs	r4, #1
 8006b54:	7822      	ldrb	r2, [r4, #0]
 8006b56:	2a30      	cmp	r2, #48	@ 0x30
 8006b58:	d0fa      	beq.n	8006b50 <_dtoa_r+0x650>
 8006b5a:	001c      	movs	r4, r3
 8006b5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b5e:	9304      	str	r3, [sp, #16]
 8006b60:	e042      	b.n	8006be8 <_dtoa_r+0x6e8>
 8006b62:	2200      	movs	r2, #0
 8006b64:	4b2b      	ldr	r3, [pc, #172]	@ (8006c14 <_dtoa_r+0x714>)
 8006b66:	f7fa fd8b 	bl	8001680 <__aeabi_dmul>
 8006b6a:	900a      	str	r0, [sp, #40]	@ 0x28
 8006b6c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006b6e:	e7b8      	b.n	8006ae2 <_dtoa_r+0x5e2>
 8006b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b72:	9d08      	ldr	r5, [sp, #32]
 8006b74:	3b01      	subs	r3, #1
 8006b76:	195b      	adds	r3, r3, r5
 8006b78:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006b7a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006b7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b7e:	9a06      	ldr	r2, [sp, #24]
 8006b80:	9b07      	ldr	r3, [sp, #28]
 8006b82:	0030      	movs	r0, r6
 8006b84:	0039      	movs	r1, r7
 8006b86:	f7fa f941 	bl	8000e0c <__aeabi_ddiv>
 8006b8a:	f7fb fc8b 	bl	80024a4 <__aeabi_d2iz>
 8006b8e:	9009      	str	r0, [sp, #36]	@ 0x24
 8006b90:	f7fb fcc4 	bl	800251c <__aeabi_i2d>
 8006b94:	9a06      	ldr	r2, [sp, #24]
 8006b96:	9b07      	ldr	r3, [sp, #28]
 8006b98:	f7fa fd72 	bl	8001680 <__aeabi_dmul>
 8006b9c:	0002      	movs	r2, r0
 8006b9e:	000b      	movs	r3, r1
 8006ba0:	0030      	movs	r0, r6
 8006ba2:	0039      	movs	r1, r7
 8006ba4:	f7fb f852 	bl	8001c4c <__aeabi_dsub>
 8006ba8:	002b      	movs	r3, r5
 8006baa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bac:	3501      	adds	r5, #1
 8006bae:	3230      	adds	r2, #48	@ 0x30
 8006bb0:	701a      	strb	r2, [r3, #0]
 8006bb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006bb4:	002c      	movs	r4, r5
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d14b      	bne.n	8006c52 <_dtoa_r+0x752>
 8006bba:	0002      	movs	r2, r0
 8006bbc:	000b      	movs	r3, r1
 8006bbe:	f7f9 fd5f 	bl	8000680 <__aeabi_dadd>
 8006bc2:	9a06      	ldr	r2, [sp, #24]
 8006bc4:	9b07      	ldr	r3, [sp, #28]
 8006bc6:	0006      	movs	r6, r0
 8006bc8:	000f      	movs	r7, r1
 8006bca:	f7f9 fc59 	bl	8000480 <__aeabi_dcmpgt>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d12a      	bne.n	8006c28 <_dtoa_r+0x728>
 8006bd2:	9a06      	ldr	r2, [sp, #24]
 8006bd4:	9b07      	ldr	r3, [sp, #28]
 8006bd6:	0030      	movs	r0, r6
 8006bd8:	0039      	movs	r1, r7
 8006bda:	f7f9 fc37 	bl	800044c <__aeabi_dcmpeq>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d002      	beq.n	8006be8 <_dtoa_r+0x6e8>
 8006be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be4:	07dd      	lsls	r5, r3, #31
 8006be6:	d41f      	bmi.n	8006c28 <_dtoa_r+0x728>
 8006be8:	9905      	ldr	r1, [sp, #20]
 8006bea:	9803      	ldr	r0, [sp, #12]
 8006bec:	f000 fbc2 	bl	8007374 <_Bfree>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	7023      	strb	r3, [r4, #0]
 8006bf4:	9b04      	ldr	r3, [sp, #16]
 8006bf6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d100      	bne.n	8006c04 <_dtoa_r+0x704>
 8006c02:	e4c7      	b.n	8006594 <_dtoa_r+0x94>
 8006c04:	601c      	str	r4, [r3, #0]
 8006c06:	e4c5      	b.n	8006594 <_dtoa_r+0x94>
 8006c08:	08009a08 	.word	0x08009a08
 8006c0c:	080099e0 	.word	0x080099e0
 8006c10:	3ff00000 	.word	0x3ff00000
 8006c14:	40240000 	.word	0x40240000
 8006c18:	401c0000 	.word	0x401c0000
 8006c1c:	fcc00000 	.word	0xfcc00000
 8006c20:	40140000 	.word	0x40140000
 8006c24:	3fe00000 	.word	0x3fe00000
 8006c28:	9b04      	ldr	r3, [sp, #16]
 8006c2a:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c2c:	0023      	movs	r3, r4
 8006c2e:	001c      	movs	r4, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	781a      	ldrb	r2, [r3, #0]
 8006c34:	2a39      	cmp	r2, #57	@ 0x39
 8006c36:	d108      	bne.n	8006c4a <_dtoa_r+0x74a>
 8006c38:	9a08      	ldr	r2, [sp, #32]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d1f7      	bne.n	8006c2e <_dtoa_r+0x72e>
 8006c3e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006c40:	9908      	ldr	r1, [sp, #32]
 8006c42:	3201      	adds	r2, #1
 8006c44:	920c      	str	r2, [sp, #48]	@ 0x30
 8006c46:	2230      	movs	r2, #48	@ 0x30
 8006c48:	700a      	strb	r2, [r1, #0]
 8006c4a:	781a      	ldrb	r2, [r3, #0]
 8006c4c:	3201      	adds	r2, #1
 8006c4e:	701a      	strb	r2, [r3, #0]
 8006c50:	e784      	b.n	8006b5c <_dtoa_r+0x65c>
 8006c52:	2200      	movs	r2, #0
 8006c54:	4bc6      	ldr	r3, [pc, #792]	@ (8006f70 <_dtoa_r+0xa70>)
 8006c56:	f7fa fd13 	bl	8001680 <__aeabi_dmul>
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	0006      	movs	r6, r0
 8006c60:	000f      	movs	r7, r1
 8006c62:	f7f9 fbf3 	bl	800044c <__aeabi_dcmpeq>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d089      	beq.n	8006b7e <_dtoa_r+0x67e>
 8006c6a:	e7bd      	b.n	8006be8 <_dtoa_r+0x6e8>
 8006c6c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8006c6e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8006c70:	9c06      	ldr	r4, [sp, #24]
 8006c72:	2f00      	cmp	r7, #0
 8006c74:	d014      	beq.n	8006ca0 <_dtoa_r+0x7a0>
 8006c76:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006c78:	2a01      	cmp	r2, #1
 8006c7a:	dd00      	ble.n	8006c7e <_dtoa_r+0x77e>
 8006c7c:	e0e4      	b.n	8006e48 <_dtoa_r+0x948>
 8006c7e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8006c80:	2a00      	cmp	r2, #0
 8006c82:	d100      	bne.n	8006c86 <_dtoa_r+0x786>
 8006c84:	e0da      	b.n	8006e3c <_dtoa_r+0x93c>
 8006c86:	4abb      	ldr	r2, [pc, #748]	@ (8006f74 <_dtoa_r+0xa74>)
 8006c88:	189b      	adds	r3, r3, r2
 8006c8a:	9a06      	ldr	r2, [sp, #24]
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	18d2      	adds	r2, r2, r3
 8006c90:	9206      	str	r2, [sp, #24]
 8006c92:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006c94:	9803      	ldr	r0, [sp, #12]
 8006c96:	18d3      	adds	r3, r2, r3
 8006c98:	930d      	str	r3, [sp, #52]	@ 0x34
 8006c9a:	f000 fc23 	bl	80074e4 <__i2b>
 8006c9e:	0007      	movs	r7, r0
 8006ca0:	2c00      	cmp	r4, #0
 8006ca2:	d00e      	beq.n	8006cc2 <_dtoa_r+0x7c2>
 8006ca4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	dd0b      	ble.n	8006cc2 <_dtoa_r+0x7c2>
 8006caa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006cac:	0023      	movs	r3, r4
 8006cae:	4294      	cmp	r4, r2
 8006cb0:	dd00      	ble.n	8006cb4 <_dtoa_r+0x7b4>
 8006cb2:	0013      	movs	r3, r2
 8006cb4:	9a06      	ldr	r2, [sp, #24]
 8006cb6:	1ae4      	subs	r4, r4, r3
 8006cb8:	1ad2      	subs	r2, r2, r3
 8006cba:	9206      	str	r2, [sp, #24]
 8006cbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	930d      	str	r3, [sp, #52]	@ 0x34
 8006cc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d021      	beq.n	8006d0c <_dtoa_r+0x80c>
 8006cc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d100      	bne.n	8006cd0 <_dtoa_r+0x7d0>
 8006cce:	e0d3      	b.n	8006e78 <_dtoa_r+0x978>
 8006cd0:	9e05      	ldr	r6, [sp, #20]
 8006cd2:	2d00      	cmp	r5, #0
 8006cd4:	d014      	beq.n	8006d00 <_dtoa_r+0x800>
 8006cd6:	0039      	movs	r1, r7
 8006cd8:	002a      	movs	r2, r5
 8006cda:	9803      	ldr	r0, [sp, #12]
 8006cdc:	f000 fcc4 	bl	8007668 <__pow5mult>
 8006ce0:	9a05      	ldr	r2, [sp, #20]
 8006ce2:	0001      	movs	r1, r0
 8006ce4:	0007      	movs	r7, r0
 8006ce6:	9803      	ldr	r0, [sp, #12]
 8006ce8:	f000 fc14 	bl	8007514 <__multiply>
 8006cec:	0006      	movs	r6, r0
 8006cee:	9905      	ldr	r1, [sp, #20]
 8006cf0:	9803      	ldr	r0, [sp, #12]
 8006cf2:	f000 fb3f 	bl	8007374 <_Bfree>
 8006cf6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cf8:	9605      	str	r6, [sp, #20]
 8006cfa:	1b5b      	subs	r3, r3, r5
 8006cfc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006cfe:	d005      	beq.n	8006d0c <_dtoa_r+0x80c>
 8006d00:	0031      	movs	r1, r6
 8006d02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006d04:	9803      	ldr	r0, [sp, #12]
 8006d06:	f000 fcaf 	bl	8007668 <__pow5mult>
 8006d0a:	9005      	str	r0, [sp, #20]
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	9803      	ldr	r0, [sp, #12]
 8006d10:	f000 fbe8 	bl	80074e4 <__i2b>
 8006d14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d16:	0006      	movs	r6, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d100      	bne.n	8006d1e <_dtoa_r+0x81e>
 8006d1c:	e1bc      	b.n	8007098 <_dtoa_r+0xb98>
 8006d1e:	001a      	movs	r2, r3
 8006d20:	0001      	movs	r1, r0
 8006d22:	9803      	ldr	r0, [sp, #12]
 8006d24:	f000 fca0 	bl	8007668 <__pow5mult>
 8006d28:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006d2a:	0006      	movs	r6, r0
 8006d2c:	2500      	movs	r5, #0
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	dc16      	bgt.n	8006d60 <_dtoa_r+0x860>
 8006d32:	2500      	movs	r5, #0
 8006d34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d36:	42ab      	cmp	r3, r5
 8006d38:	d10e      	bne.n	8006d58 <_dtoa_r+0x858>
 8006d3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d3c:	031b      	lsls	r3, r3, #12
 8006d3e:	42ab      	cmp	r3, r5
 8006d40:	d10a      	bne.n	8006d58 <_dtoa_r+0x858>
 8006d42:	4b8d      	ldr	r3, [pc, #564]	@ (8006f78 <_dtoa_r+0xa78>)
 8006d44:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006d46:	4213      	tst	r3, r2
 8006d48:	d006      	beq.n	8006d58 <_dtoa_r+0x858>
 8006d4a:	9b06      	ldr	r3, [sp, #24]
 8006d4c:	3501      	adds	r5, #1
 8006d4e:	3301      	adds	r3, #1
 8006d50:	9306      	str	r3, [sp, #24]
 8006d52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d54:	3301      	adds	r3, #1
 8006d56:	930d      	str	r3, [sp, #52]	@ 0x34
 8006d58:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d5a:	2001      	movs	r0, #1
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d008      	beq.n	8006d72 <_dtoa_r+0x872>
 8006d60:	6933      	ldr	r3, [r6, #16]
 8006d62:	3303      	adds	r3, #3
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	18f3      	adds	r3, r6, r3
 8006d68:	6858      	ldr	r0, [r3, #4]
 8006d6a:	f000 fb6b 	bl	8007444 <__hi0bits>
 8006d6e:	2320      	movs	r3, #32
 8006d70:	1a18      	subs	r0, r3, r0
 8006d72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d74:	1818      	adds	r0, r3, r0
 8006d76:	0002      	movs	r2, r0
 8006d78:	231f      	movs	r3, #31
 8006d7a:	401a      	ands	r2, r3
 8006d7c:	4218      	tst	r0, r3
 8006d7e:	d100      	bne.n	8006d82 <_dtoa_r+0x882>
 8006d80:	e081      	b.n	8006e86 <_dtoa_r+0x986>
 8006d82:	3301      	adds	r3, #1
 8006d84:	1a9b      	subs	r3, r3, r2
 8006d86:	2b04      	cmp	r3, #4
 8006d88:	dd79      	ble.n	8006e7e <_dtoa_r+0x97e>
 8006d8a:	231c      	movs	r3, #28
 8006d8c:	1a9b      	subs	r3, r3, r2
 8006d8e:	9a06      	ldr	r2, [sp, #24]
 8006d90:	18e4      	adds	r4, r4, r3
 8006d92:	18d2      	adds	r2, r2, r3
 8006d94:	9206      	str	r2, [sp, #24]
 8006d96:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006d98:	18d3      	adds	r3, r2, r3
 8006d9a:	930d      	str	r3, [sp, #52]	@ 0x34
 8006d9c:	9b06      	ldr	r3, [sp, #24]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	dd05      	ble.n	8006dae <_dtoa_r+0x8ae>
 8006da2:	001a      	movs	r2, r3
 8006da4:	9905      	ldr	r1, [sp, #20]
 8006da6:	9803      	ldr	r0, [sp, #12]
 8006da8:	f000 fcba 	bl	8007720 <__lshift>
 8006dac:	9005      	str	r0, [sp, #20]
 8006dae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	dd05      	ble.n	8006dc0 <_dtoa_r+0x8c0>
 8006db4:	0031      	movs	r1, r6
 8006db6:	001a      	movs	r2, r3
 8006db8:	9803      	ldr	r0, [sp, #12]
 8006dba:	f000 fcb1 	bl	8007720 <__lshift>
 8006dbe:	0006      	movs	r6, r0
 8006dc0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d061      	beq.n	8006e8a <_dtoa_r+0x98a>
 8006dc6:	0031      	movs	r1, r6
 8006dc8:	9805      	ldr	r0, [sp, #20]
 8006dca:	f000 fd15 	bl	80077f8 <__mcmp>
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	da5b      	bge.n	8006e8a <_dtoa_r+0x98a>
 8006dd2:	9b04      	ldr	r3, [sp, #16]
 8006dd4:	220a      	movs	r2, #10
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	930c      	str	r3, [sp, #48]	@ 0x30
 8006dda:	9905      	ldr	r1, [sp, #20]
 8006ddc:	2300      	movs	r3, #0
 8006dde:	9803      	ldr	r0, [sp, #12]
 8006de0:	f000 faec 	bl	80073bc <__multadd>
 8006de4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006de6:	9005      	str	r0, [sp, #20]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d100      	bne.n	8006dee <_dtoa_r+0x8ee>
 8006dec:	e15b      	b.n	80070a6 <_dtoa_r+0xba6>
 8006dee:	2300      	movs	r3, #0
 8006df0:	0039      	movs	r1, r7
 8006df2:	220a      	movs	r2, #10
 8006df4:	9803      	ldr	r0, [sp, #12]
 8006df6:	f000 fae1 	bl	80073bc <__multadd>
 8006dfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dfc:	0007      	movs	r7, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	dc4d      	bgt.n	8006e9e <_dtoa_r+0x99e>
 8006e02:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	dd46      	ble.n	8006e96 <_dtoa_r+0x996>
 8006e08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d000      	beq.n	8006e10 <_dtoa_r+0x910>
 8006e0e:	e5db      	b.n	80069c8 <_dtoa_r+0x4c8>
 8006e10:	0031      	movs	r1, r6
 8006e12:	2205      	movs	r2, #5
 8006e14:	9803      	ldr	r0, [sp, #12]
 8006e16:	f000 fad1 	bl	80073bc <__multadd>
 8006e1a:	0006      	movs	r6, r0
 8006e1c:	0001      	movs	r1, r0
 8006e1e:	9805      	ldr	r0, [sp, #20]
 8006e20:	f000 fcea 	bl	80077f8 <__mcmp>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	dc00      	bgt.n	8006e2a <_dtoa_r+0x92a>
 8006e28:	e5ce      	b.n	80069c8 <_dtoa_r+0x4c8>
 8006e2a:	9b08      	ldr	r3, [sp, #32]
 8006e2c:	9a08      	ldr	r2, [sp, #32]
 8006e2e:	1c5c      	adds	r4, r3, #1
 8006e30:	2331      	movs	r3, #49	@ 0x31
 8006e32:	7013      	strb	r3, [r2, #0]
 8006e34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e36:	3301      	adds	r3, #1
 8006e38:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e3a:	e5c9      	b.n	80069d0 <_dtoa_r+0x4d0>
 8006e3c:	2336      	movs	r3, #54	@ 0x36
 8006e3e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006e40:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8006e42:	1a9b      	subs	r3, r3, r2
 8006e44:	9c06      	ldr	r4, [sp, #24]
 8006e46:	e720      	b.n	8006c8a <_dtoa_r+0x78a>
 8006e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e4a:	1e5d      	subs	r5, r3, #1
 8006e4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e4e:	42ab      	cmp	r3, r5
 8006e50:	db08      	blt.n	8006e64 <_dtoa_r+0x964>
 8006e52:	1b5d      	subs	r5, r3, r5
 8006e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	daf4      	bge.n	8006e44 <_dtoa_r+0x944>
 8006e5a:	9b06      	ldr	r3, [sp, #24]
 8006e5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e5e:	1a9c      	subs	r4, r3, r2
 8006e60:	2300      	movs	r3, #0
 8006e62:	e712      	b.n	8006c8a <_dtoa_r+0x78a>
 8006e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006e68:	1aeb      	subs	r3, r5, r3
 8006e6a:	18d3      	adds	r3, r2, r3
 8006e6c:	9314      	str	r3, [sp, #80]	@ 0x50
 8006e6e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8006e70:	9c06      	ldr	r4, [sp, #24]
 8006e72:	2500      	movs	r5, #0
 8006e74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e76:	e708      	b.n	8006c8a <_dtoa_r+0x78a>
 8006e78:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006e7a:	9905      	ldr	r1, [sp, #20]
 8006e7c:	e742      	b.n	8006d04 <_dtoa_r+0x804>
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	d08c      	beq.n	8006d9c <_dtoa_r+0x89c>
 8006e82:	331c      	adds	r3, #28
 8006e84:	e783      	b.n	8006d8e <_dtoa_r+0x88e>
 8006e86:	0013      	movs	r3, r2
 8006e88:	e7fb      	b.n	8006e82 <_dtoa_r+0x982>
 8006e8a:	9b04      	ldr	r3, [sp, #16]
 8006e8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e90:	930e      	str	r3, [sp, #56]	@ 0x38
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	ddb5      	ble.n	8006e02 <_dtoa_r+0x902>
 8006e96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d100      	bne.n	8006e9e <_dtoa_r+0x99e>
 8006e9c:	e107      	b.n	80070ae <_dtoa_r+0xbae>
 8006e9e:	2c00      	cmp	r4, #0
 8006ea0:	dd05      	ble.n	8006eae <_dtoa_r+0x9ae>
 8006ea2:	0039      	movs	r1, r7
 8006ea4:	0022      	movs	r2, r4
 8006ea6:	9803      	ldr	r0, [sp, #12]
 8006ea8:	f000 fc3a 	bl	8007720 <__lshift>
 8006eac:	0007      	movs	r7, r0
 8006eae:	9704      	str	r7, [sp, #16]
 8006eb0:	2d00      	cmp	r5, #0
 8006eb2:	d020      	beq.n	8006ef6 <_dtoa_r+0x9f6>
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	9803      	ldr	r0, [sp, #12]
 8006eb8:	f000 fa18 	bl	80072ec <_Balloc>
 8006ebc:	1e04      	subs	r4, r0, #0
 8006ebe:	d10c      	bne.n	8006eda <_dtoa_r+0x9da>
 8006ec0:	0022      	movs	r2, r4
 8006ec2:	4b2e      	ldr	r3, [pc, #184]	@ (8006f7c <_dtoa_r+0xa7c>)
 8006ec4:	482e      	ldr	r0, [pc, #184]	@ (8006f80 <_dtoa_r+0xa80>)
 8006ec6:	492f      	ldr	r1, [pc, #188]	@ (8006f84 <_dtoa_r+0xa84>)
 8006ec8:	f7ff fb2f 	bl	800652a <_dtoa_r+0x2a>
 8006ecc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8006ece:	0037      	movs	r7, r6
 8006ed0:	e7ab      	b.n	8006e2a <_dtoa_r+0x92a>
 8006ed2:	9b04      	ldr	r3, [sp, #16]
 8006ed4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8006ed6:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ed8:	e7f9      	b.n	8006ece <_dtoa_r+0x9ce>
 8006eda:	0039      	movs	r1, r7
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	310c      	adds	r1, #12
 8006ee0:	3202      	adds	r2, #2
 8006ee2:	0092      	lsls	r2, r2, #2
 8006ee4:	300c      	adds	r0, #12
 8006ee6:	f000 ffd1 	bl	8007e8c <memcpy>
 8006eea:	2201      	movs	r2, #1
 8006eec:	0021      	movs	r1, r4
 8006eee:	9803      	ldr	r0, [sp, #12]
 8006ef0:	f000 fc16 	bl	8007720 <__lshift>
 8006ef4:	9004      	str	r0, [sp, #16]
 8006ef6:	9b08      	ldr	r3, [sp, #32]
 8006ef8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006efa:	9306      	str	r3, [sp, #24]
 8006efc:	3b01      	subs	r3, #1
 8006efe:	189b      	adds	r3, r3, r2
 8006f00:	2201      	movs	r2, #1
 8006f02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f06:	4013      	ands	r3, r2
 8006f08:	930e      	str	r3, [sp, #56]	@ 0x38
 8006f0a:	0031      	movs	r1, r6
 8006f0c:	9805      	ldr	r0, [sp, #20]
 8006f0e:	f7ff fa71 	bl	80063f4 <quorem>
 8006f12:	0039      	movs	r1, r7
 8006f14:	0005      	movs	r5, r0
 8006f16:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f18:	9805      	ldr	r0, [sp, #20]
 8006f1a:	f000 fc6d 	bl	80077f8 <__mcmp>
 8006f1e:	9a04      	ldr	r2, [sp, #16]
 8006f20:	900d      	str	r0, [sp, #52]	@ 0x34
 8006f22:	0031      	movs	r1, r6
 8006f24:	9803      	ldr	r0, [sp, #12]
 8006f26:	f000 fc83 	bl	8007830 <__mdiff>
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	68c3      	ldr	r3, [r0, #12]
 8006f2e:	0004      	movs	r4, r0
 8006f30:	3530      	adds	r5, #48	@ 0x30
 8006f32:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d104      	bne.n	8006f42 <_dtoa_r+0xa42>
 8006f38:	0001      	movs	r1, r0
 8006f3a:	9805      	ldr	r0, [sp, #20]
 8006f3c:	f000 fc5c 	bl	80077f8 <__mcmp>
 8006f40:	9009      	str	r0, [sp, #36]	@ 0x24
 8006f42:	0021      	movs	r1, r4
 8006f44:	9803      	ldr	r0, [sp, #12]
 8006f46:	f000 fa15 	bl	8007374 <_Bfree>
 8006f4a:	9b06      	ldr	r3, [sp, #24]
 8006f4c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006f4e:	1c5c      	adds	r4, r3, #1
 8006f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f52:	4313      	orrs	r3, r2
 8006f54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f56:	4313      	orrs	r3, r2
 8006f58:	d116      	bne.n	8006f88 <_dtoa_r+0xa88>
 8006f5a:	2d39      	cmp	r5, #57	@ 0x39
 8006f5c:	d02f      	beq.n	8006fbe <_dtoa_r+0xabe>
 8006f5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	dd01      	ble.n	8006f68 <_dtoa_r+0xa68>
 8006f64:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8006f66:	3531      	adds	r5, #49	@ 0x31
 8006f68:	9b06      	ldr	r3, [sp, #24]
 8006f6a:	701d      	strb	r5, [r3, #0]
 8006f6c:	e532      	b.n	80069d4 <_dtoa_r+0x4d4>
 8006f6e:	46c0      	nop			@ (mov r8, r8)
 8006f70:	40240000 	.word	0x40240000
 8006f74:	00000433 	.word	0x00000433
 8006f78:	7ff00000 	.word	0x7ff00000
 8006f7c:	08009910 	.word	0x08009910
 8006f80:	080098b8 	.word	0x080098b8
 8006f84:	000002ef 	.word	0x000002ef
 8006f88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	db04      	blt.n	8006f98 <_dtoa_r+0xa98>
 8006f8e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006f90:	4313      	orrs	r3, r2
 8006f92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f94:	4313      	orrs	r3, r2
 8006f96:	d11e      	bne.n	8006fd6 <_dtoa_r+0xad6>
 8006f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	dde4      	ble.n	8006f68 <_dtoa_r+0xa68>
 8006f9e:	9905      	ldr	r1, [sp, #20]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	9803      	ldr	r0, [sp, #12]
 8006fa4:	f000 fbbc 	bl	8007720 <__lshift>
 8006fa8:	0031      	movs	r1, r6
 8006faa:	9005      	str	r0, [sp, #20]
 8006fac:	f000 fc24 	bl	80077f8 <__mcmp>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	dc02      	bgt.n	8006fba <_dtoa_r+0xaba>
 8006fb4:	d1d8      	bne.n	8006f68 <_dtoa_r+0xa68>
 8006fb6:	07eb      	lsls	r3, r5, #31
 8006fb8:	d5d6      	bpl.n	8006f68 <_dtoa_r+0xa68>
 8006fba:	2d39      	cmp	r5, #57	@ 0x39
 8006fbc:	d1d2      	bne.n	8006f64 <_dtoa_r+0xa64>
 8006fbe:	2339      	movs	r3, #57	@ 0x39
 8006fc0:	9a06      	ldr	r2, [sp, #24]
 8006fc2:	7013      	strb	r3, [r2, #0]
 8006fc4:	0023      	movs	r3, r4
 8006fc6:	001c      	movs	r4, r3
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	781a      	ldrb	r2, [r3, #0]
 8006fcc:	2a39      	cmp	r2, #57	@ 0x39
 8006fce:	d050      	beq.n	8007072 <_dtoa_r+0xb72>
 8006fd0:	3201      	adds	r2, #1
 8006fd2:	701a      	strb	r2, [r3, #0]
 8006fd4:	e4fe      	b.n	80069d4 <_dtoa_r+0x4d4>
 8006fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	dd03      	ble.n	8006fe4 <_dtoa_r+0xae4>
 8006fdc:	2d39      	cmp	r5, #57	@ 0x39
 8006fde:	d0ee      	beq.n	8006fbe <_dtoa_r+0xabe>
 8006fe0:	3501      	adds	r5, #1
 8006fe2:	e7c1      	b.n	8006f68 <_dtoa_r+0xa68>
 8006fe4:	9b06      	ldr	r3, [sp, #24]
 8006fe6:	9a06      	ldr	r2, [sp, #24]
 8006fe8:	701d      	strb	r5, [r3, #0]
 8006fea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d02b      	beq.n	8007048 <_dtoa_r+0xb48>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	220a      	movs	r2, #10
 8006ff4:	9905      	ldr	r1, [sp, #20]
 8006ff6:	9803      	ldr	r0, [sp, #12]
 8006ff8:	f000 f9e0 	bl	80073bc <__multadd>
 8006ffc:	9b04      	ldr	r3, [sp, #16]
 8006ffe:	9005      	str	r0, [sp, #20]
 8007000:	429f      	cmp	r7, r3
 8007002:	d109      	bne.n	8007018 <_dtoa_r+0xb18>
 8007004:	0039      	movs	r1, r7
 8007006:	2300      	movs	r3, #0
 8007008:	220a      	movs	r2, #10
 800700a:	9803      	ldr	r0, [sp, #12]
 800700c:	f000 f9d6 	bl	80073bc <__multadd>
 8007010:	0007      	movs	r7, r0
 8007012:	9004      	str	r0, [sp, #16]
 8007014:	9406      	str	r4, [sp, #24]
 8007016:	e778      	b.n	8006f0a <_dtoa_r+0xa0a>
 8007018:	0039      	movs	r1, r7
 800701a:	2300      	movs	r3, #0
 800701c:	220a      	movs	r2, #10
 800701e:	9803      	ldr	r0, [sp, #12]
 8007020:	f000 f9cc 	bl	80073bc <__multadd>
 8007024:	2300      	movs	r3, #0
 8007026:	0007      	movs	r7, r0
 8007028:	220a      	movs	r2, #10
 800702a:	9904      	ldr	r1, [sp, #16]
 800702c:	9803      	ldr	r0, [sp, #12]
 800702e:	f000 f9c5 	bl	80073bc <__multadd>
 8007032:	9004      	str	r0, [sp, #16]
 8007034:	e7ee      	b.n	8007014 <_dtoa_r+0xb14>
 8007036:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007038:	2401      	movs	r4, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	dd00      	ble.n	8007040 <_dtoa_r+0xb40>
 800703e:	001c      	movs	r4, r3
 8007040:	9704      	str	r7, [sp, #16]
 8007042:	2700      	movs	r7, #0
 8007044:	9b08      	ldr	r3, [sp, #32]
 8007046:	191c      	adds	r4, r3, r4
 8007048:	9905      	ldr	r1, [sp, #20]
 800704a:	2201      	movs	r2, #1
 800704c:	9803      	ldr	r0, [sp, #12]
 800704e:	f000 fb67 	bl	8007720 <__lshift>
 8007052:	0031      	movs	r1, r6
 8007054:	9005      	str	r0, [sp, #20]
 8007056:	f000 fbcf 	bl	80077f8 <__mcmp>
 800705a:	2800      	cmp	r0, #0
 800705c:	dcb2      	bgt.n	8006fc4 <_dtoa_r+0xac4>
 800705e:	d101      	bne.n	8007064 <_dtoa_r+0xb64>
 8007060:	07ed      	lsls	r5, r5, #31
 8007062:	d4af      	bmi.n	8006fc4 <_dtoa_r+0xac4>
 8007064:	0023      	movs	r3, r4
 8007066:	001c      	movs	r4, r3
 8007068:	3b01      	subs	r3, #1
 800706a:	781a      	ldrb	r2, [r3, #0]
 800706c:	2a30      	cmp	r2, #48	@ 0x30
 800706e:	d0fa      	beq.n	8007066 <_dtoa_r+0xb66>
 8007070:	e4b0      	b.n	80069d4 <_dtoa_r+0x4d4>
 8007072:	9a08      	ldr	r2, [sp, #32]
 8007074:	429a      	cmp	r2, r3
 8007076:	d1a6      	bne.n	8006fc6 <_dtoa_r+0xac6>
 8007078:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800707a:	3301      	adds	r3, #1
 800707c:	930c      	str	r3, [sp, #48]	@ 0x30
 800707e:	2331      	movs	r3, #49	@ 0x31
 8007080:	7013      	strb	r3, [r2, #0]
 8007082:	e4a7      	b.n	80069d4 <_dtoa_r+0x4d4>
 8007084:	4b14      	ldr	r3, [pc, #80]	@ (80070d8 <_dtoa_r+0xbd8>)
 8007086:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007088:	9308      	str	r3, [sp, #32]
 800708a:	4b14      	ldr	r3, [pc, #80]	@ (80070dc <_dtoa_r+0xbdc>)
 800708c:	2a00      	cmp	r2, #0
 800708e:	d001      	beq.n	8007094 <_dtoa_r+0xb94>
 8007090:	f7ff fa7e 	bl	8006590 <_dtoa_r+0x90>
 8007094:	f7ff fa7e 	bl	8006594 <_dtoa_r+0x94>
 8007098:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800709a:	2b01      	cmp	r3, #1
 800709c:	dc00      	bgt.n	80070a0 <_dtoa_r+0xba0>
 800709e:	e648      	b.n	8006d32 <_dtoa_r+0x832>
 80070a0:	2001      	movs	r0, #1
 80070a2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80070a4:	e665      	b.n	8006d72 <_dtoa_r+0x872>
 80070a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	dc00      	bgt.n	80070ae <_dtoa_r+0xbae>
 80070ac:	e6a9      	b.n	8006e02 <_dtoa_r+0x902>
 80070ae:	2400      	movs	r4, #0
 80070b0:	0031      	movs	r1, r6
 80070b2:	9805      	ldr	r0, [sp, #20]
 80070b4:	f7ff f99e 	bl	80063f4 <quorem>
 80070b8:	9b08      	ldr	r3, [sp, #32]
 80070ba:	3030      	adds	r0, #48	@ 0x30
 80070bc:	5518      	strb	r0, [r3, r4]
 80070be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070c0:	3401      	adds	r4, #1
 80070c2:	0005      	movs	r5, r0
 80070c4:	42a3      	cmp	r3, r4
 80070c6:	ddb6      	ble.n	8007036 <_dtoa_r+0xb36>
 80070c8:	2300      	movs	r3, #0
 80070ca:	220a      	movs	r2, #10
 80070cc:	9905      	ldr	r1, [sp, #20]
 80070ce:	9803      	ldr	r0, [sp, #12]
 80070d0:	f000 f974 	bl	80073bc <__multadd>
 80070d4:	9005      	str	r0, [sp, #20]
 80070d6:	e7eb      	b.n	80070b0 <_dtoa_r+0xbb0>
 80070d8:	08009894 	.word	0x08009894
 80070dc:	0800989c 	.word	0x0800989c

080070e0 <_free_r>:
 80070e0:	b570      	push	{r4, r5, r6, lr}
 80070e2:	0005      	movs	r5, r0
 80070e4:	1e0c      	subs	r4, r1, #0
 80070e6:	d010      	beq.n	800710a <_free_r+0x2a>
 80070e8:	3c04      	subs	r4, #4
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	da00      	bge.n	80070f2 <_free_r+0x12>
 80070f0:	18e4      	adds	r4, r4, r3
 80070f2:	0028      	movs	r0, r5
 80070f4:	f000 f8ea 	bl	80072cc <__malloc_lock>
 80070f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007170 <_free_r+0x90>)
 80070fa:	6813      	ldr	r3, [r2, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d105      	bne.n	800710c <_free_r+0x2c>
 8007100:	6063      	str	r3, [r4, #4]
 8007102:	6014      	str	r4, [r2, #0]
 8007104:	0028      	movs	r0, r5
 8007106:	f000 f8e9 	bl	80072dc <__malloc_unlock>
 800710a:	bd70      	pop	{r4, r5, r6, pc}
 800710c:	42a3      	cmp	r3, r4
 800710e:	d908      	bls.n	8007122 <_free_r+0x42>
 8007110:	6820      	ldr	r0, [r4, #0]
 8007112:	1821      	adds	r1, r4, r0
 8007114:	428b      	cmp	r3, r1
 8007116:	d1f3      	bne.n	8007100 <_free_r+0x20>
 8007118:	6819      	ldr	r1, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	1809      	adds	r1, r1, r0
 800711e:	6021      	str	r1, [r4, #0]
 8007120:	e7ee      	b.n	8007100 <_free_r+0x20>
 8007122:	001a      	movs	r2, r3
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <_free_r+0x4e>
 800712a:	42a3      	cmp	r3, r4
 800712c:	d9f9      	bls.n	8007122 <_free_r+0x42>
 800712e:	6811      	ldr	r1, [r2, #0]
 8007130:	1850      	adds	r0, r2, r1
 8007132:	42a0      	cmp	r0, r4
 8007134:	d10b      	bne.n	800714e <_free_r+0x6e>
 8007136:	6820      	ldr	r0, [r4, #0]
 8007138:	1809      	adds	r1, r1, r0
 800713a:	1850      	adds	r0, r2, r1
 800713c:	6011      	str	r1, [r2, #0]
 800713e:	4283      	cmp	r3, r0
 8007140:	d1e0      	bne.n	8007104 <_free_r+0x24>
 8007142:	6818      	ldr	r0, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	1841      	adds	r1, r0, r1
 8007148:	6011      	str	r1, [r2, #0]
 800714a:	6053      	str	r3, [r2, #4]
 800714c:	e7da      	b.n	8007104 <_free_r+0x24>
 800714e:	42a0      	cmp	r0, r4
 8007150:	d902      	bls.n	8007158 <_free_r+0x78>
 8007152:	230c      	movs	r3, #12
 8007154:	602b      	str	r3, [r5, #0]
 8007156:	e7d5      	b.n	8007104 <_free_r+0x24>
 8007158:	6820      	ldr	r0, [r4, #0]
 800715a:	1821      	adds	r1, r4, r0
 800715c:	428b      	cmp	r3, r1
 800715e:	d103      	bne.n	8007168 <_free_r+0x88>
 8007160:	6819      	ldr	r1, [r3, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	1809      	adds	r1, r1, r0
 8007166:	6021      	str	r1, [r4, #0]
 8007168:	6063      	str	r3, [r4, #4]
 800716a:	6054      	str	r4, [r2, #4]
 800716c:	e7ca      	b.n	8007104 <_free_r+0x24>
 800716e:	46c0      	nop			@ (mov r8, r8)
 8007170:	2000043c 	.word	0x2000043c

08007174 <malloc>:
 8007174:	b510      	push	{r4, lr}
 8007176:	4b03      	ldr	r3, [pc, #12]	@ (8007184 <malloc+0x10>)
 8007178:	0001      	movs	r1, r0
 800717a:	6818      	ldr	r0, [r3, #0]
 800717c:	f000 f826 	bl	80071cc <_malloc_r>
 8007180:	bd10      	pop	{r4, pc}
 8007182:	46c0      	nop			@ (mov r8, r8)
 8007184:	2000001c 	.word	0x2000001c

08007188 <sbrk_aligned>:
 8007188:	b570      	push	{r4, r5, r6, lr}
 800718a:	4e0f      	ldr	r6, [pc, #60]	@ (80071c8 <sbrk_aligned+0x40>)
 800718c:	000d      	movs	r5, r1
 800718e:	6831      	ldr	r1, [r6, #0]
 8007190:	0004      	movs	r4, r0
 8007192:	2900      	cmp	r1, #0
 8007194:	d102      	bne.n	800719c <sbrk_aligned+0x14>
 8007196:	f000 fe67 	bl	8007e68 <_sbrk_r>
 800719a:	6030      	str	r0, [r6, #0]
 800719c:	0029      	movs	r1, r5
 800719e:	0020      	movs	r0, r4
 80071a0:	f000 fe62 	bl	8007e68 <_sbrk_r>
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	d103      	bne.n	80071b0 <sbrk_aligned+0x28>
 80071a8:	2501      	movs	r5, #1
 80071aa:	426d      	negs	r5, r5
 80071ac:	0028      	movs	r0, r5
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
 80071b0:	2303      	movs	r3, #3
 80071b2:	1cc5      	adds	r5, r0, #3
 80071b4:	439d      	bics	r5, r3
 80071b6:	42a8      	cmp	r0, r5
 80071b8:	d0f8      	beq.n	80071ac <sbrk_aligned+0x24>
 80071ba:	1a29      	subs	r1, r5, r0
 80071bc:	0020      	movs	r0, r4
 80071be:	f000 fe53 	bl	8007e68 <_sbrk_r>
 80071c2:	3001      	adds	r0, #1
 80071c4:	d1f2      	bne.n	80071ac <sbrk_aligned+0x24>
 80071c6:	e7ef      	b.n	80071a8 <sbrk_aligned+0x20>
 80071c8:	20000438 	.word	0x20000438

080071cc <_malloc_r>:
 80071cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071ce:	2203      	movs	r2, #3
 80071d0:	1ccb      	adds	r3, r1, #3
 80071d2:	4393      	bics	r3, r2
 80071d4:	3308      	adds	r3, #8
 80071d6:	0005      	movs	r5, r0
 80071d8:	001f      	movs	r7, r3
 80071da:	2b0c      	cmp	r3, #12
 80071dc:	d234      	bcs.n	8007248 <_malloc_r+0x7c>
 80071de:	270c      	movs	r7, #12
 80071e0:	42b9      	cmp	r1, r7
 80071e2:	d833      	bhi.n	800724c <_malloc_r+0x80>
 80071e4:	0028      	movs	r0, r5
 80071e6:	f000 f871 	bl	80072cc <__malloc_lock>
 80071ea:	4e37      	ldr	r6, [pc, #220]	@ (80072c8 <_malloc_r+0xfc>)
 80071ec:	6833      	ldr	r3, [r6, #0]
 80071ee:	001c      	movs	r4, r3
 80071f0:	2c00      	cmp	r4, #0
 80071f2:	d12f      	bne.n	8007254 <_malloc_r+0x88>
 80071f4:	0039      	movs	r1, r7
 80071f6:	0028      	movs	r0, r5
 80071f8:	f7ff ffc6 	bl	8007188 <sbrk_aligned>
 80071fc:	0004      	movs	r4, r0
 80071fe:	1c43      	adds	r3, r0, #1
 8007200:	d15f      	bne.n	80072c2 <_malloc_r+0xf6>
 8007202:	6834      	ldr	r4, [r6, #0]
 8007204:	9400      	str	r4, [sp, #0]
 8007206:	9b00      	ldr	r3, [sp, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d14a      	bne.n	80072a2 <_malloc_r+0xd6>
 800720c:	2c00      	cmp	r4, #0
 800720e:	d052      	beq.n	80072b6 <_malloc_r+0xea>
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	0028      	movs	r0, r5
 8007214:	18e3      	adds	r3, r4, r3
 8007216:	9900      	ldr	r1, [sp, #0]
 8007218:	9301      	str	r3, [sp, #4]
 800721a:	f000 fe25 	bl	8007e68 <_sbrk_r>
 800721e:	9b01      	ldr	r3, [sp, #4]
 8007220:	4283      	cmp	r3, r0
 8007222:	d148      	bne.n	80072b6 <_malloc_r+0xea>
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	0028      	movs	r0, r5
 8007228:	1aff      	subs	r7, r7, r3
 800722a:	0039      	movs	r1, r7
 800722c:	f7ff ffac 	bl	8007188 <sbrk_aligned>
 8007230:	3001      	adds	r0, #1
 8007232:	d040      	beq.n	80072b6 <_malloc_r+0xea>
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	19db      	adds	r3, r3, r7
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	6833      	ldr	r3, [r6, #0]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	2a00      	cmp	r2, #0
 8007240:	d133      	bne.n	80072aa <_malloc_r+0xde>
 8007242:	9b00      	ldr	r3, [sp, #0]
 8007244:	6033      	str	r3, [r6, #0]
 8007246:	e019      	b.n	800727c <_malloc_r+0xb0>
 8007248:	2b00      	cmp	r3, #0
 800724a:	dac9      	bge.n	80071e0 <_malloc_r+0x14>
 800724c:	230c      	movs	r3, #12
 800724e:	602b      	str	r3, [r5, #0]
 8007250:	2000      	movs	r0, #0
 8007252:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007254:	6821      	ldr	r1, [r4, #0]
 8007256:	1bc9      	subs	r1, r1, r7
 8007258:	d420      	bmi.n	800729c <_malloc_r+0xd0>
 800725a:	290b      	cmp	r1, #11
 800725c:	d90a      	bls.n	8007274 <_malloc_r+0xa8>
 800725e:	19e2      	adds	r2, r4, r7
 8007260:	6027      	str	r7, [r4, #0]
 8007262:	42a3      	cmp	r3, r4
 8007264:	d104      	bne.n	8007270 <_malloc_r+0xa4>
 8007266:	6032      	str	r2, [r6, #0]
 8007268:	6863      	ldr	r3, [r4, #4]
 800726a:	6011      	str	r1, [r2, #0]
 800726c:	6053      	str	r3, [r2, #4]
 800726e:	e005      	b.n	800727c <_malloc_r+0xb0>
 8007270:	605a      	str	r2, [r3, #4]
 8007272:	e7f9      	b.n	8007268 <_malloc_r+0x9c>
 8007274:	6862      	ldr	r2, [r4, #4]
 8007276:	42a3      	cmp	r3, r4
 8007278:	d10e      	bne.n	8007298 <_malloc_r+0xcc>
 800727a:	6032      	str	r2, [r6, #0]
 800727c:	0028      	movs	r0, r5
 800727e:	f000 f82d 	bl	80072dc <__malloc_unlock>
 8007282:	0020      	movs	r0, r4
 8007284:	2207      	movs	r2, #7
 8007286:	300b      	adds	r0, #11
 8007288:	1d23      	adds	r3, r4, #4
 800728a:	4390      	bics	r0, r2
 800728c:	1ac2      	subs	r2, r0, r3
 800728e:	4298      	cmp	r0, r3
 8007290:	d0df      	beq.n	8007252 <_malloc_r+0x86>
 8007292:	1a1b      	subs	r3, r3, r0
 8007294:	50a3      	str	r3, [r4, r2]
 8007296:	e7dc      	b.n	8007252 <_malloc_r+0x86>
 8007298:	605a      	str	r2, [r3, #4]
 800729a:	e7ef      	b.n	800727c <_malloc_r+0xb0>
 800729c:	0023      	movs	r3, r4
 800729e:	6864      	ldr	r4, [r4, #4]
 80072a0:	e7a6      	b.n	80071f0 <_malloc_r+0x24>
 80072a2:	9c00      	ldr	r4, [sp, #0]
 80072a4:	6863      	ldr	r3, [r4, #4]
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	e7ad      	b.n	8007206 <_malloc_r+0x3a>
 80072aa:	001a      	movs	r2, r3
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	42a3      	cmp	r3, r4
 80072b0:	d1fb      	bne.n	80072aa <_malloc_r+0xde>
 80072b2:	2300      	movs	r3, #0
 80072b4:	e7da      	b.n	800726c <_malloc_r+0xa0>
 80072b6:	230c      	movs	r3, #12
 80072b8:	0028      	movs	r0, r5
 80072ba:	602b      	str	r3, [r5, #0]
 80072bc:	f000 f80e 	bl	80072dc <__malloc_unlock>
 80072c0:	e7c6      	b.n	8007250 <_malloc_r+0x84>
 80072c2:	6007      	str	r7, [r0, #0]
 80072c4:	e7da      	b.n	800727c <_malloc_r+0xb0>
 80072c6:	46c0      	nop			@ (mov r8, r8)
 80072c8:	2000043c 	.word	0x2000043c

080072cc <__malloc_lock>:
 80072cc:	b510      	push	{r4, lr}
 80072ce:	4802      	ldr	r0, [pc, #8]	@ (80072d8 <__malloc_lock+0xc>)
 80072d0:	f7ff f883 	bl	80063da <__retarget_lock_acquire_recursive>
 80072d4:	bd10      	pop	{r4, pc}
 80072d6:	46c0      	nop			@ (mov r8, r8)
 80072d8:	20000434 	.word	0x20000434

080072dc <__malloc_unlock>:
 80072dc:	b510      	push	{r4, lr}
 80072de:	4802      	ldr	r0, [pc, #8]	@ (80072e8 <__malloc_unlock+0xc>)
 80072e0:	f7ff f87c 	bl	80063dc <__retarget_lock_release_recursive>
 80072e4:	bd10      	pop	{r4, pc}
 80072e6:	46c0      	nop			@ (mov r8, r8)
 80072e8:	20000434 	.word	0x20000434

080072ec <_Balloc>:
 80072ec:	b570      	push	{r4, r5, r6, lr}
 80072ee:	69c5      	ldr	r5, [r0, #28]
 80072f0:	0006      	movs	r6, r0
 80072f2:	000c      	movs	r4, r1
 80072f4:	2d00      	cmp	r5, #0
 80072f6:	d10e      	bne.n	8007316 <_Balloc+0x2a>
 80072f8:	2010      	movs	r0, #16
 80072fa:	f7ff ff3b 	bl	8007174 <malloc>
 80072fe:	1e02      	subs	r2, r0, #0
 8007300:	61f0      	str	r0, [r6, #28]
 8007302:	d104      	bne.n	800730e <_Balloc+0x22>
 8007304:	216b      	movs	r1, #107	@ 0x6b
 8007306:	4b19      	ldr	r3, [pc, #100]	@ (800736c <_Balloc+0x80>)
 8007308:	4819      	ldr	r0, [pc, #100]	@ (8007370 <_Balloc+0x84>)
 800730a:	f000 fdc9 	bl	8007ea0 <__assert_func>
 800730e:	6045      	str	r5, [r0, #4]
 8007310:	6085      	str	r5, [r0, #8]
 8007312:	6005      	str	r5, [r0, #0]
 8007314:	60c5      	str	r5, [r0, #12]
 8007316:	69f5      	ldr	r5, [r6, #28]
 8007318:	68eb      	ldr	r3, [r5, #12]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d013      	beq.n	8007346 <_Balloc+0x5a>
 800731e:	69f3      	ldr	r3, [r6, #28]
 8007320:	00a2      	lsls	r2, r4, #2
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	189b      	adds	r3, r3, r2
 8007326:	6818      	ldr	r0, [r3, #0]
 8007328:	2800      	cmp	r0, #0
 800732a:	d118      	bne.n	800735e <_Balloc+0x72>
 800732c:	2101      	movs	r1, #1
 800732e:	000d      	movs	r5, r1
 8007330:	40a5      	lsls	r5, r4
 8007332:	1d6a      	adds	r2, r5, #5
 8007334:	0030      	movs	r0, r6
 8007336:	0092      	lsls	r2, r2, #2
 8007338:	f000 fdd0 	bl	8007edc <_calloc_r>
 800733c:	2800      	cmp	r0, #0
 800733e:	d00c      	beq.n	800735a <_Balloc+0x6e>
 8007340:	6044      	str	r4, [r0, #4]
 8007342:	6085      	str	r5, [r0, #8]
 8007344:	e00d      	b.n	8007362 <_Balloc+0x76>
 8007346:	2221      	movs	r2, #33	@ 0x21
 8007348:	2104      	movs	r1, #4
 800734a:	0030      	movs	r0, r6
 800734c:	f000 fdc6 	bl	8007edc <_calloc_r>
 8007350:	69f3      	ldr	r3, [r6, #28]
 8007352:	60e8      	str	r0, [r5, #12]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1e1      	bne.n	800731e <_Balloc+0x32>
 800735a:	2000      	movs	r0, #0
 800735c:	bd70      	pop	{r4, r5, r6, pc}
 800735e:	6802      	ldr	r2, [r0, #0]
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	2300      	movs	r3, #0
 8007364:	6103      	str	r3, [r0, #16]
 8007366:	60c3      	str	r3, [r0, #12]
 8007368:	e7f8      	b.n	800735c <_Balloc+0x70>
 800736a:	46c0      	nop			@ (mov r8, r8)
 800736c:	080098a1 	.word	0x080098a1
 8007370:	08009921 	.word	0x08009921

08007374 <_Bfree>:
 8007374:	b570      	push	{r4, r5, r6, lr}
 8007376:	69c6      	ldr	r6, [r0, #28]
 8007378:	0005      	movs	r5, r0
 800737a:	000c      	movs	r4, r1
 800737c:	2e00      	cmp	r6, #0
 800737e:	d10e      	bne.n	800739e <_Bfree+0x2a>
 8007380:	2010      	movs	r0, #16
 8007382:	f7ff fef7 	bl	8007174 <malloc>
 8007386:	1e02      	subs	r2, r0, #0
 8007388:	61e8      	str	r0, [r5, #28]
 800738a:	d104      	bne.n	8007396 <_Bfree+0x22>
 800738c:	218f      	movs	r1, #143	@ 0x8f
 800738e:	4b09      	ldr	r3, [pc, #36]	@ (80073b4 <_Bfree+0x40>)
 8007390:	4809      	ldr	r0, [pc, #36]	@ (80073b8 <_Bfree+0x44>)
 8007392:	f000 fd85 	bl	8007ea0 <__assert_func>
 8007396:	6046      	str	r6, [r0, #4]
 8007398:	6086      	str	r6, [r0, #8]
 800739a:	6006      	str	r6, [r0, #0]
 800739c:	60c6      	str	r6, [r0, #12]
 800739e:	2c00      	cmp	r4, #0
 80073a0:	d007      	beq.n	80073b2 <_Bfree+0x3e>
 80073a2:	69eb      	ldr	r3, [r5, #28]
 80073a4:	6862      	ldr	r2, [r4, #4]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	0092      	lsls	r2, r2, #2
 80073aa:	189b      	adds	r3, r3, r2
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	6022      	str	r2, [r4, #0]
 80073b0:	601c      	str	r4, [r3, #0]
 80073b2:	bd70      	pop	{r4, r5, r6, pc}
 80073b4:	080098a1 	.word	0x080098a1
 80073b8:	08009921 	.word	0x08009921

080073bc <__multadd>:
 80073bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073be:	000f      	movs	r7, r1
 80073c0:	9001      	str	r0, [sp, #4]
 80073c2:	000c      	movs	r4, r1
 80073c4:	001e      	movs	r6, r3
 80073c6:	2000      	movs	r0, #0
 80073c8:	690d      	ldr	r5, [r1, #16]
 80073ca:	3714      	adds	r7, #20
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	3001      	adds	r0, #1
 80073d0:	b299      	uxth	r1, r3
 80073d2:	4351      	muls	r1, r2
 80073d4:	0c1b      	lsrs	r3, r3, #16
 80073d6:	4353      	muls	r3, r2
 80073d8:	1989      	adds	r1, r1, r6
 80073da:	0c0e      	lsrs	r6, r1, #16
 80073dc:	199b      	adds	r3, r3, r6
 80073de:	0c1e      	lsrs	r6, r3, #16
 80073e0:	b289      	uxth	r1, r1
 80073e2:	041b      	lsls	r3, r3, #16
 80073e4:	185b      	adds	r3, r3, r1
 80073e6:	c708      	stmia	r7!, {r3}
 80073e8:	4285      	cmp	r5, r0
 80073ea:	dcef      	bgt.n	80073cc <__multadd+0x10>
 80073ec:	2e00      	cmp	r6, #0
 80073ee:	d022      	beq.n	8007436 <__multadd+0x7a>
 80073f0:	68a3      	ldr	r3, [r4, #8]
 80073f2:	42ab      	cmp	r3, r5
 80073f4:	dc19      	bgt.n	800742a <__multadd+0x6e>
 80073f6:	6861      	ldr	r1, [r4, #4]
 80073f8:	9801      	ldr	r0, [sp, #4]
 80073fa:	3101      	adds	r1, #1
 80073fc:	f7ff ff76 	bl	80072ec <_Balloc>
 8007400:	1e07      	subs	r7, r0, #0
 8007402:	d105      	bne.n	8007410 <__multadd+0x54>
 8007404:	003a      	movs	r2, r7
 8007406:	21ba      	movs	r1, #186	@ 0xba
 8007408:	4b0c      	ldr	r3, [pc, #48]	@ (800743c <__multadd+0x80>)
 800740a:	480d      	ldr	r0, [pc, #52]	@ (8007440 <__multadd+0x84>)
 800740c:	f000 fd48 	bl	8007ea0 <__assert_func>
 8007410:	0021      	movs	r1, r4
 8007412:	6922      	ldr	r2, [r4, #16]
 8007414:	310c      	adds	r1, #12
 8007416:	3202      	adds	r2, #2
 8007418:	0092      	lsls	r2, r2, #2
 800741a:	300c      	adds	r0, #12
 800741c:	f000 fd36 	bl	8007e8c <memcpy>
 8007420:	0021      	movs	r1, r4
 8007422:	9801      	ldr	r0, [sp, #4]
 8007424:	f7ff ffa6 	bl	8007374 <_Bfree>
 8007428:	003c      	movs	r4, r7
 800742a:	1d2b      	adds	r3, r5, #4
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	18e3      	adds	r3, r4, r3
 8007430:	3501      	adds	r5, #1
 8007432:	605e      	str	r6, [r3, #4]
 8007434:	6125      	str	r5, [r4, #16]
 8007436:	0020      	movs	r0, r4
 8007438:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800743a:	46c0      	nop			@ (mov r8, r8)
 800743c:	08009910 	.word	0x08009910
 8007440:	08009921 	.word	0x08009921

08007444 <__hi0bits>:
 8007444:	2280      	movs	r2, #128	@ 0x80
 8007446:	0003      	movs	r3, r0
 8007448:	0252      	lsls	r2, r2, #9
 800744a:	2000      	movs	r0, #0
 800744c:	4293      	cmp	r3, r2
 800744e:	d201      	bcs.n	8007454 <__hi0bits+0x10>
 8007450:	041b      	lsls	r3, r3, #16
 8007452:	3010      	adds	r0, #16
 8007454:	2280      	movs	r2, #128	@ 0x80
 8007456:	0452      	lsls	r2, r2, #17
 8007458:	4293      	cmp	r3, r2
 800745a:	d201      	bcs.n	8007460 <__hi0bits+0x1c>
 800745c:	3008      	adds	r0, #8
 800745e:	021b      	lsls	r3, r3, #8
 8007460:	2280      	movs	r2, #128	@ 0x80
 8007462:	0552      	lsls	r2, r2, #21
 8007464:	4293      	cmp	r3, r2
 8007466:	d201      	bcs.n	800746c <__hi0bits+0x28>
 8007468:	3004      	adds	r0, #4
 800746a:	011b      	lsls	r3, r3, #4
 800746c:	2280      	movs	r2, #128	@ 0x80
 800746e:	05d2      	lsls	r2, r2, #23
 8007470:	4293      	cmp	r3, r2
 8007472:	d201      	bcs.n	8007478 <__hi0bits+0x34>
 8007474:	3002      	adds	r0, #2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	db03      	blt.n	8007484 <__hi0bits+0x40>
 800747c:	3001      	adds	r0, #1
 800747e:	4213      	tst	r3, r2
 8007480:	d100      	bne.n	8007484 <__hi0bits+0x40>
 8007482:	2020      	movs	r0, #32
 8007484:	4770      	bx	lr

08007486 <__lo0bits>:
 8007486:	6803      	ldr	r3, [r0, #0]
 8007488:	0001      	movs	r1, r0
 800748a:	2207      	movs	r2, #7
 800748c:	0018      	movs	r0, r3
 800748e:	4010      	ands	r0, r2
 8007490:	4213      	tst	r3, r2
 8007492:	d00d      	beq.n	80074b0 <__lo0bits+0x2a>
 8007494:	3a06      	subs	r2, #6
 8007496:	2000      	movs	r0, #0
 8007498:	4213      	tst	r3, r2
 800749a:	d105      	bne.n	80074a8 <__lo0bits+0x22>
 800749c:	3002      	adds	r0, #2
 800749e:	4203      	tst	r3, r0
 80074a0:	d003      	beq.n	80074aa <__lo0bits+0x24>
 80074a2:	40d3      	lsrs	r3, r2
 80074a4:	0010      	movs	r0, r2
 80074a6:	600b      	str	r3, [r1, #0]
 80074a8:	4770      	bx	lr
 80074aa:	089b      	lsrs	r3, r3, #2
 80074ac:	600b      	str	r3, [r1, #0]
 80074ae:	e7fb      	b.n	80074a8 <__lo0bits+0x22>
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	2a00      	cmp	r2, #0
 80074b4:	d101      	bne.n	80074ba <__lo0bits+0x34>
 80074b6:	2010      	movs	r0, #16
 80074b8:	0c1b      	lsrs	r3, r3, #16
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	2a00      	cmp	r2, #0
 80074be:	d101      	bne.n	80074c4 <__lo0bits+0x3e>
 80074c0:	3008      	adds	r0, #8
 80074c2:	0a1b      	lsrs	r3, r3, #8
 80074c4:	071a      	lsls	r2, r3, #28
 80074c6:	d101      	bne.n	80074cc <__lo0bits+0x46>
 80074c8:	3004      	adds	r0, #4
 80074ca:	091b      	lsrs	r3, r3, #4
 80074cc:	079a      	lsls	r2, r3, #30
 80074ce:	d101      	bne.n	80074d4 <__lo0bits+0x4e>
 80074d0:	3002      	adds	r0, #2
 80074d2:	089b      	lsrs	r3, r3, #2
 80074d4:	07da      	lsls	r2, r3, #31
 80074d6:	d4e9      	bmi.n	80074ac <__lo0bits+0x26>
 80074d8:	3001      	adds	r0, #1
 80074da:	085b      	lsrs	r3, r3, #1
 80074dc:	d1e6      	bne.n	80074ac <__lo0bits+0x26>
 80074de:	2020      	movs	r0, #32
 80074e0:	e7e2      	b.n	80074a8 <__lo0bits+0x22>
	...

080074e4 <__i2b>:
 80074e4:	b510      	push	{r4, lr}
 80074e6:	000c      	movs	r4, r1
 80074e8:	2101      	movs	r1, #1
 80074ea:	f7ff feff 	bl	80072ec <_Balloc>
 80074ee:	2800      	cmp	r0, #0
 80074f0:	d107      	bne.n	8007502 <__i2b+0x1e>
 80074f2:	2146      	movs	r1, #70	@ 0x46
 80074f4:	4c05      	ldr	r4, [pc, #20]	@ (800750c <__i2b+0x28>)
 80074f6:	0002      	movs	r2, r0
 80074f8:	4b05      	ldr	r3, [pc, #20]	@ (8007510 <__i2b+0x2c>)
 80074fa:	0020      	movs	r0, r4
 80074fc:	31ff      	adds	r1, #255	@ 0xff
 80074fe:	f000 fccf 	bl	8007ea0 <__assert_func>
 8007502:	2301      	movs	r3, #1
 8007504:	6144      	str	r4, [r0, #20]
 8007506:	6103      	str	r3, [r0, #16]
 8007508:	bd10      	pop	{r4, pc}
 800750a:	46c0      	nop			@ (mov r8, r8)
 800750c:	08009921 	.word	0x08009921
 8007510:	08009910 	.word	0x08009910

08007514 <__multiply>:
 8007514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007516:	0014      	movs	r4, r2
 8007518:	690a      	ldr	r2, [r1, #16]
 800751a:	6923      	ldr	r3, [r4, #16]
 800751c:	000d      	movs	r5, r1
 800751e:	b089      	sub	sp, #36	@ 0x24
 8007520:	429a      	cmp	r2, r3
 8007522:	db02      	blt.n	800752a <__multiply+0x16>
 8007524:	0023      	movs	r3, r4
 8007526:	000c      	movs	r4, r1
 8007528:	001d      	movs	r5, r3
 800752a:	6927      	ldr	r7, [r4, #16]
 800752c:	692e      	ldr	r6, [r5, #16]
 800752e:	6861      	ldr	r1, [r4, #4]
 8007530:	19bb      	adds	r3, r7, r6
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	68a3      	ldr	r3, [r4, #8]
 8007536:	19ba      	adds	r2, r7, r6
 8007538:	4293      	cmp	r3, r2
 800753a:	da00      	bge.n	800753e <__multiply+0x2a>
 800753c:	3101      	adds	r1, #1
 800753e:	f7ff fed5 	bl	80072ec <_Balloc>
 8007542:	4684      	mov	ip, r0
 8007544:	2800      	cmp	r0, #0
 8007546:	d106      	bne.n	8007556 <__multiply+0x42>
 8007548:	21b1      	movs	r1, #177	@ 0xb1
 800754a:	4662      	mov	r2, ip
 800754c:	4b44      	ldr	r3, [pc, #272]	@ (8007660 <__multiply+0x14c>)
 800754e:	4845      	ldr	r0, [pc, #276]	@ (8007664 <__multiply+0x150>)
 8007550:	0049      	lsls	r1, r1, #1
 8007552:	f000 fca5 	bl	8007ea0 <__assert_func>
 8007556:	0002      	movs	r2, r0
 8007558:	19bb      	adds	r3, r7, r6
 800755a:	3214      	adds	r2, #20
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	18d3      	adds	r3, r2, r3
 8007560:	9301      	str	r3, [sp, #4]
 8007562:	2100      	movs	r1, #0
 8007564:	0013      	movs	r3, r2
 8007566:	9801      	ldr	r0, [sp, #4]
 8007568:	4283      	cmp	r3, r0
 800756a:	d328      	bcc.n	80075be <__multiply+0xaa>
 800756c:	0023      	movs	r3, r4
 800756e:	00bf      	lsls	r7, r7, #2
 8007570:	3314      	adds	r3, #20
 8007572:	9304      	str	r3, [sp, #16]
 8007574:	3514      	adds	r5, #20
 8007576:	19db      	adds	r3, r3, r7
 8007578:	00b6      	lsls	r6, r6, #2
 800757a:	9302      	str	r3, [sp, #8]
 800757c:	19ab      	adds	r3, r5, r6
 800757e:	9307      	str	r3, [sp, #28]
 8007580:	2304      	movs	r3, #4
 8007582:	9305      	str	r3, [sp, #20]
 8007584:	0023      	movs	r3, r4
 8007586:	9902      	ldr	r1, [sp, #8]
 8007588:	3315      	adds	r3, #21
 800758a:	4299      	cmp	r1, r3
 800758c:	d305      	bcc.n	800759a <__multiply+0x86>
 800758e:	1b0c      	subs	r4, r1, r4
 8007590:	3c15      	subs	r4, #21
 8007592:	08a4      	lsrs	r4, r4, #2
 8007594:	3401      	adds	r4, #1
 8007596:	00a3      	lsls	r3, r4, #2
 8007598:	9305      	str	r3, [sp, #20]
 800759a:	9b07      	ldr	r3, [sp, #28]
 800759c:	429d      	cmp	r5, r3
 800759e:	d310      	bcc.n	80075c2 <__multiply+0xae>
 80075a0:	9b00      	ldr	r3, [sp, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	dd05      	ble.n	80075b2 <__multiply+0x9e>
 80075a6:	9b01      	ldr	r3, [sp, #4]
 80075a8:	3b04      	subs	r3, #4
 80075aa:	9301      	str	r3, [sp, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d052      	beq.n	8007658 <__multiply+0x144>
 80075b2:	4663      	mov	r3, ip
 80075b4:	4660      	mov	r0, ip
 80075b6:	9a00      	ldr	r2, [sp, #0]
 80075b8:	611a      	str	r2, [r3, #16]
 80075ba:	b009      	add	sp, #36	@ 0x24
 80075bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075be:	c302      	stmia	r3!, {r1}
 80075c0:	e7d1      	b.n	8007566 <__multiply+0x52>
 80075c2:	682c      	ldr	r4, [r5, #0]
 80075c4:	b2a4      	uxth	r4, r4
 80075c6:	2c00      	cmp	r4, #0
 80075c8:	d01f      	beq.n	800760a <__multiply+0xf6>
 80075ca:	2300      	movs	r3, #0
 80075cc:	0017      	movs	r7, r2
 80075ce:	9e04      	ldr	r6, [sp, #16]
 80075d0:	9303      	str	r3, [sp, #12]
 80075d2:	ce08      	ldmia	r6!, {r3}
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	9306      	str	r3, [sp, #24]
 80075d8:	466b      	mov	r3, sp
 80075da:	8b1b      	ldrh	r3, [r3, #24]
 80075dc:	b288      	uxth	r0, r1
 80075de:	4363      	muls	r3, r4
 80075e0:	181b      	adds	r3, r3, r0
 80075e2:	9803      	ldr	r0, [sp, #12]
 80075e4:	0c09      	lsrs	r1, r1, #16
 80075e6:	181b      	adds	r3, r3, r0
 80075e8:	9806      	ldr	r0, [sp, #24]
 80075ea:	0c00      	lsrs	r0, r0, #16
 80075ec:	4360      	muls	r0, r4
 80075ee:	1840      	adds	r0, r0, r1
 80075f0:	0c19      	lsrs	r1, r3, #16
 80075f2:	1841      	adds	r1, r0, r1
 80075f4:	0c08      	lsrs	r0, r1, #16
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	0409      	lsls	r1, r1, #16
 80075fa:	4319      	orrs	r1, r3
 80075fc:	9b02      	ldr	r3, [sp, #8]
 80075fe:	9003      	str	r0, [sp, #12]
 8007600:	c702      	stmia	r7!, {r1}
 8007602:	42b3      	cmp	r3, r6
 8007604:	d8e5      	bhi.n	80075d2 <__multiply+0xbe>
 8007606:	9b05      	ldr	r3, [sp, #20]
 8007608:	50d0      	str	r0, [r2, r3]
 800760a:	682c      	ldr	r4, [r5, #0]
 800760c:	0c24      	lsrs	r4, r4, #16
 800760e:	d020      	beq.n	8007652 <__multiply+0x13e>
 8007610:	2100      	movs	r1, #0
 8007612:	0010      	movs	r0, r2
 8007614:	6813      	ldr	r3, [r2, #0]
 8007616:	9e04      	ldr	r6, [sp, #16]
 8007618:	9103      	str	r1, [sp, #12]
 800761a:	6831      	ldr	r1, [r6, #0]
 800761c:	6807      	ldr	r7, [r0, #0]
 800761e:	b289      	uxth	r1, r1
 8007620:	4361      	muls	r1, r4
 8007622:	0c3f      	lsrs	r7, r7, #16
 8007624:	19c9      	adds	r1, r1, r7
 8007626:	9f03      	ldr	r7, [sp, #12]
 8007628:	b29b      	uxth	r3, r3
 800762a:	19c9      	adds	r1, r1, r7
 800762c:	040f      	lsls	r7, r1, #16
 800762e:	431f      	orrs	r7, r3
 8007630:	6007      	str	r7, [r0, #0]
 8007632:	ce80      	ldmia	r6!, {r7}
 8007634:	6843      	ldr	r3, [r0, #4]
 8007636:	0c3f      	lsrs	r7, r7, #16
 8007638:	4367      	muls	r7, r4
 800763a:	b29b      	uxth	r3, r3
 800763c:	0c09      	lsrs	r1, r1, #16
 800763e:	18fb      	adds	r3, r7, r3
 8007640:	185b      	adds	r3, r3, r1
 8007642:	0c19      	lsrs	r1, r3, #16
 8007644:	9103      	str	r1, [sp, #12]
 8007646:	9902      	ldr	r1, [sp, #8]
 8007648:	3004      	adds	r0, #4
 800764a:	42b1      	cmp	r1, r6
 800764c:	d8e5      	bhi.n	800761a <__multiply+0x106>
 800764e:	9905      	ldr	r1, [sp, #20]
 8007650:	5053      	str	r3, [r2, r1]
 8007652:	3504      	adds	r5, #4
 8007654:	3204      	adds	r2, #4
 8007656:	e7a0      	b.n	800759a <__multiply+0x86>
 8007658:	9b00      	ldr	r3, [sp, #0]
 800765a:	3b01      	subs	r3, #1
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	e79f      	b.n	80075a0 <__multiply+0x8c>
 8007660:	08009910 	.word	0x08009910
 8007664:	08009921 	.word	0x08009921

08007668 <__pow5mult>:
 8007668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800766a:	2303      	movs	r3, #3
 800766c:	0015      	movs	r5, r2
 800766e:	0007      	movs	r7, r0
 8007670:	000e      	movs	r6, r1
 8007672:	401a      	ands	r2, r3
 8007674:	421d      	tst	r5, r3
 8007676:	d008      	beq.n	800768a <__pow5mult+0x22>
 8007678:	4925      	ldr	r1, [pc, #148]	@ (8007710 <__pow5mult+0xa8>)
 800767a:	3a01      	subs	r2, #1
 800767c:	0092      	lsls	r2, r2, #2
 800767e:	5852      	ldr	r2, [r2, r1]
 8007680:	2300      	movs	r3, #0
 8007682:	0031      	movs	r1, r6
 8007684:	f7ff fe9a 	bl	80073bc <__multadd>
 8007688:	0006      	movs	r6, r0
 800768a:	10ad      	asrs	r5, r5, #2
 800768c:	d03d      	beq.n	800770a <__pow5mult+0xa2>
 800768e:	69fc      	ldr	r4, [r7, #28]
 8007690:	2c00      	cmp	r4, #0
 8007692:	d10f      	bne.n	80076b4 <__pow5mult+0x4c>
 8007694:	2010      	movs	r0, #16
 8007696:	f7ff fd6d 	bl	8007174 <malloc>
 800769a:	1e02      	subs	r2, r0, #0
 800769c:	61f8      	str	r0, [r7, #28]
 800769e:	d105      	bne.n	80076ac <__pow5mult+0x44>
 80076a0:	21b4      	movs	r1, #180	@ 0xb4
 80076a2:	4b1c      	ldr	r3, [pc, #112]	@ (8007714 <__pow5mult+0xac>)
 80076a4:	481c      	ldr	r0, [pc, #112]	@ (8007718 <__pow5mult+0xb0>)
 80076a6:	31ff      	adds	r1, #255	@ 0xff
 80076a8:	f000 fbfa 	bl	8007ea0 <__assert_func>
 80076ac:	6044      	str	r4, [r0, #4]
 80076ae:	6084      	str	r4, [r0, #8]
 80076b0:	6004      	str	r4, [r0, #0]
 80076b2:	60c4      	str	r4, [r0, #12]
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	689c      	ldr	r4, [r3, #8]
 80076b8:	9301      	str	r3, [sp, #4]
 80076ba:	2c00      	cmp	r4, #0
 80076bc:	d108      	bne.n	80076d0 <__pow5mult+0x68>
 80076be:	0038      	movs	r0, r7
 80076c0:	4916      	ldr	r1, [pc, #88]	@ (800771c <__pow5mult+0xb4>)
 80076c2:	f7ff ff0f 	bl	80074e4 <__i2b>
 80076c6:	9b01      	ldr	r3, [sp, #4]
 80076c8:	0004      	movs	r4, r0
 80076ca:	6098      	str	r0, [r3, #8]
 80076cc:	2300      	movs	r3, #0
 80076ce:	6003      	str	r3, [r0, #0]
 80076d0:	2301      	movs	r3, #1
 80076d2:	421d      	tst	r5, r3
 80076d4:	d00a      	beq.n	80076ec <__pow5mult+0x84>
 80076d6:	0031      	movs	r1, r6
 80076d8:	0022      	movs	r2, r4
 80076da:	0038      	movs	r0, r7
 80076dc:	f7ff ff1a 	bl	8007514 <__multiply>
 80076e0:	0031      	movs	r1, r6
 80076e2:	9001      	str	r0, [sp, #4]
 80076e4:	0038      	movs	r0, r7
 80076e6:	f7ff fe45 	bl	8007374 <_Bfree>
 80076ea:	9e01      	ldr	r6, [sp, #4]
 80076ec:	106d      	asrs	r5, r5, #1
 80076ee:	d00c      	beq.n	800770a <__pow5mult+0xa2>
 80076f0:	6820      	ldr	r0, [r4, #0]
 80076f2:	2800      	cmp	r0, #0
 80076f4:	d107      	bne.n	8007706 <__pow5mult+0x9e>
 80076f6:	0022      	movs	r2, r4
 80076f8:	0021      	movs	r1, r4
 80076fa:	0038      	movs	r0, r7
 80076fc:	f7ff ff0a 	bl	8007514 <__multiply>
 8007700:	2300      	movs	r3, #0
 8007702:	6020      	str	r0, [r4, #0]
 8007704:	6003      	str	r3, [r0, #0]
 8007706:	0004      	movs	r4, r0
 8007708:	e7e2      	b.n	80076d0 <__pow5mult+0x68>
 800770a:	0030      	movs	r0, r6
 800770c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800770e:	46c0      	nop			@ (mov r8, r8)
 8007710:	080099d4 	.word	0x080099d4
 8007714:	080098a1 	.word	0x080098a1
 8007718:	08009921 	.word	0x08009921
 800771c:	00000271 	.word	0x00000271

08007720 <__lshift>:
 8007720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007722:	000c      	movs	r4, r1
 8007724:	0016      	movs	r6, r2
 8007726:	6923      	ldr	r3, [r4, #16]
 8007728:	1157      	asrs	r7, r2, #5
 800772a:	b085      	sub	sp, #20
 800772c:	18fb      	adds	r3, r7, r3
 800772e:	9301      	str	r3, [sp, #4]
 8007730:	3301      	adds	r3, #1
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	6849      	ldr	r1, [r1, #4]
 8007736:	68a3      	ldr	r3, [r4, #8]
 8007738:	9002      	str	r0, [sp, #8]
 800773a:	9a00      	ldr	r2, [sp, #0]
 800773c:	4293      	cmp	r3, r2
 800773e:	db10      	blt.n	8007762 <__lshift+0x42>
 8007740:	9802      	ldr	r0, [sp, #8]
 8007742:	f7ff fdd3 	bl	80072ec <_Balloc>
 8007746:	2300      	movs	r3, #0
 8007748:	0001      	movs	r1, r0
 800774a:	0005      	movs	r5, r0
 800774c:	001a      	movs	r2, r3
 800774e:	3114      	adds	r1, #20
 8007750:	4298      	cmp	r0, r3
 8007752:	d10c      	bne.n	800776e <__lshift+0x4e>
 8007754:	21ef      	movs	r1, #239	@ 0xef
 8007756:	002a      	movs	r2, r5
 8007758:	4b25      	ldr	r3, [pc, #148]	@ (80077f0 <__lshift+0xd0>)
 800775a:	4826      	ldr	r0, [pc, #152]	@ (80077f4 <__lshift+0xd4>)
 800775c:	0049      	lsls	r1, r1, #1
 800775e:	f000 fb9f 	bl	8007ea0 <__assert_func>
 8007762:	3101      	adds	r1, #1
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	e7e8      	b.n	800773a <__lshift+0x1a>
 8007768:	0098      	lsls	r0, r3, #2
 800776a:	500a      	str	r2, [r1, r0]
 800776c:	3301      	adds	r3, #1
 800776e:	42bb      	cmp	r3, r7
 8007770:	dbfa      	blt.n	8007768 <__lshift+0x48>
 8007772:	43fb      	mvns	r3, r7
 8007774:	17db      	asrs	r3, r3, #31
 8007776:	401f      	ands	r7, r3
 8007778:	00bf      	lsls	r7, r7, #2
 800777a:	0023      	movs	r3, r4
 800777c:	201f      	movs	r0, #31
 800777e:	19c9      	adds	r1, r1, r7
 8007780:	0037      	movs	r7, r6
 8007782:	6922      	ldr	r2, [r4, #16]
 8007784:	3314      	adds	r3, #20
 8007786:	0092      	lsls	r2, r2, #2
 8007788:	189a      	adds	r2, r3, r2
 800778a:	4007      	ands	r7, r0
 800778c:	4206      	tst	r6, r0
 800778e:	d029      	beq.n	80077e4 <__lshift+0xc4>
 8007790:	3001      	adds	r0, #1
 8007792:	1bc0      	subs	r0, r0, r7
 8007794:	9003      	str	r0, [sp, #12]
 8007796:	468c      	mov	ip, r1
 8007798:	2000      	movs	r0, #0
 800779a:	681e      	ldr	r6, [r3, #0]
 800779c:	40be      	lsls	r6, r7
 800779e:	4306      	orrs	r6, r0
 80077a0:	4660      	mov	r0, ip
 80077a2:	c040      	stmia	r0!, {r6}
 80077a4:	4684      	mov	ip, r0
 80077a6:	9e03      	ldr	r6, [sp, #12]
 80077a8:	cb01      	ldmia	r3!, {r0}
 80077aa:	40f0      	lsrs	r0, r6
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d8f4      	bhi.n	800779a <__lshift+0x7a>
 80077b0:	0026      	movs	r6, r4
 80077b2:	3615      	adds	r6, #21
 80077b4:	2304      	movs	r3, #4
 80077b6:	42b2      	cmp	r2, r6
 80077b8:	d304      	bcc.n	80077c4 <__lshift+0xa4>
 80077ba:	1b13      	subs	r3, r2, r4
 80077bc:	3b15      	subs	r3, #21
 80077be:	089b      	lsrs	r3, r3, #2
 80077c0:	3301      	adds	r3, #1
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	50c8      	str	r0, [r1, r3]
 80077c6:	2800      	cmp	r0, #0
 80077c8:	d002      	beq.n	80077d0 <__lshift+0xb0>
 80077ca:	9b01      	ldr	r3, [sp, #4]
 80077cc:	3302      	adds	r3, #2
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	9b00      	ldr	r3, [sp, #0]
 80077d2:	9802      	ldr	r0, [sp, #8]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	0021      	movs	r1, r4
 80077d8:	612b      	str	r3, [r5, #16]
 80077da:	f7ff fdcb 	bl	8007374 <_Bfree>
 80077de:	0028      	movs	r0, r5
 80077e0:	b005      	add	sp, #20
 80077e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077e4:	cb01      	ldmia	r3!, {r0}
 80077e6:	c101      	stmia	r1!, {r0}
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d8fb      	bhi.n	80077e4 <__lshift+0xc4>
 80077ec:	e7f0      	b.n	80077d0 <__lshift+0xb0>
 80077ee:	46c0      	nop			@ (mov r8, r8)
 80077f0:	08009910 	.word	0x08009910
 80077f4:	08009921 	.word	0x08009921

080077f8 <__mcmp>:
 80077f8:	b530      	push	{r4, r5, lr}
 80077fa:	690b      	ldr	r3, [r1, #16]
 80077fc:	6904      	ldr	r4, [r0, #16]
 80077fe:	0002      	movs	r2, r0
 8007800:	1ae0      	subs	r0, r4, r3
 8007802:	429c      	cmp	r4, r3
 8007804:	d10f      	bne.n	8007826 <__mcmp+0x2e>
 8007806:	3214      	adds	r2, #20
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	3114      	adds	r1, #20
 800780c:	0014      	movs	r4, r2
 800780e:	18c9      	adds	r1, r1, r3
 8007810:	18d2      	adds	r2, r2, r3
 8007812:	3a04      	subs	r2, #4
 8007814:	3904      	subs	r1, #4
 8007816:	6815      	ldr	r5, [r2, #0]
 8007818:	680b      	ldr	r3, [r1, #0]
 800781a:	429d      	cmp	r5, r3
 800781c:	d004      	beq.n	8007828 <__mcmp+0x30>
 800781e:	2001      	movs	r0, #1
 8007820:	429d      	cmp	r5, r3
 8007822:	d200      	bcs.n	8007826 <__mcmp+0x2e>
 8007824:	3802      	subs	r0, #2
 8007826:	bd30      	pop	{r4, r5, pc}
 8007828:	4294      	cmp	r4, r2
 800782a:	d3f2      	bcc.n	8007812 <__mcmp+0x1a>
 800782c:	e7fb      	b.n	8007826 <__mcmp+0x2e>
	...

08007830 <__mdiff>:
 8007830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007832:	000c      	movs	r4, r1
 8007834:	b087      	sub	sp, #28
 8007836:	9000      	str	r0, [sp, #0]
 8007838:	0011      	movs	r1, r2
 800783a:	0020      	movs	r0, r4
 800783c:	0017      	movs	r7, r2
 800783e:	f7ff ffdb 	bl	80077f8 <__mcmp>
 8007842:	1e05      	subs	r5, r0, #0
 8007844:	d110      	bne.n	8007868 <__mdiff+0x38>
 8007846:	0001      	movs	r1, r0
 8007848:	9800      	ldr	r0, [sp, #0]
 800784a:	f7ff fd4f 	bl	80072ec <_Balloc>
 800784e:	1e02      	subs	r2, r0, #0
 8007850:	d104      	bne.n	800785c <__mdiff+0x2c>
 8007852:	4b40      	ldr	r3, [pc, #256]	@ (8007954 <__mdiff+0x124>)
 8007854:	4840      	ldr	r0, [pc, #256]	@ (8007958 <__mdiff+0x128>)
 8007856:	4941      	ldr	r1, [pc, #260]	@ (800795c <__mdiff+0x12c>)
 8007858:	f000 fb22 	bl	8007ea0 <__assert_func>
 800785c:	2301      	movs	r3, #1
 800785e:	6145      	str	r5, [r0, #20]
 8007860:	6103      	str	r3, [r0, #16]
 8007862:	0010      	movs	r0, r2
 8007864:	b007      	add	sp, #28
 8007866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007868:	2600      	movs	r6, #0
 800786a:	42b0      	cmp	r0, r6
 800786c:	da03      	bge.n	8007876 <__mdiff+0x46>
 800786e:	0023      	movs	r3, r4
 8007870:	003c      	movs	r4, r7
 8007872:	001f      	movs	r7, r3
 8007874:	3601      	adds	r6, #1
 8007876:	6861      	ldr	r1, [r4, #4]
 8007878:	9800      	ldr	r0, [sp, #0]
 800787a:	f7ff fd37 	bl	80072ec <_Balloc>
 800787e:	1e02      	subs	r2, r0, #0
 8007880:	d103      	bne.n	800788a <__mdiff+0x5a>
 8007882:	4b34      	ldr	r3, [pc, #208]	@ (8007954 <__mdiff+0x124>)
 8007884:	4834      	ldr	r0, [pc, #208]	@ (8007958 <__mdiff+0x128>)
 8007886:	4936      	ldr	r1, [pc, #216]	@ (8007960 <__mdiff+0x130>)
 8007888:	e7e6      	b.n	8007858 <__mdiff+0x28>
 800788a:	6923      	ldr	r3, [r4, #16]
 800788c:	3414      	adds	r4, #20
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	18e3      	adds	r3, r4, r3
 8007894:	0021      	movs	r1, r4
 8007896:	9401      	str	r4, [sp, #4]
 8007898:	003c      	movs	r4, r7
 800789a:	9302      	str	r3, [sp, #8]
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	3414      	adds	r4, #20
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	18e3      	adds	r3, r4, r3
 80078a4:	9303      	str	r3, [sp, #12]
 80078a6:	0003      	movs	r3, r0
 80078a8:	60c6      	str	r6, [r0, #12]
 80078aa:	468c      	mov	ip, r1
 80078ac:	2000      	movs	r0, #0
 80078ae:	3314      	adds	r3, #20
 80078b0:	9304      	str	r3, [sp, #16]
 80078b2:	9305      	str	r3, [sp, #20]
 80078b4:	4663      	mov	r3, ip
 80078b6:	cb20      	ldmia	r3!, {r5}
 80078b8:	b2a9      	uxth	r1, r5
 80078ba:	000e      	movs	r6, r1
 80078bc:	469c      	mov	ip, r3
 80078be:	cc08      	ldmia	r4!, {r3}
 80078c0:	0c2d      	lsrs	r5, r5, #16
 80078c2:	b299      	uxth	r1, r3
 80078c4:	1a71      	subs	r1, r6, r1
 80078c6:	1809      	adds	r1, r1, r0
 80078c8:	0c1b      	lsrs	r3, r3, #16
 80078ca:	1408      	asrs	r0, r1, #16
 80078cc:	1aeb      	subs	r3, r5, r3
 80078ce:	181b      	adds	r3, r3, r0
 80078d0:	1418      	asrs	r0, r3, #16
 80078d2:	b289      	uxth	r1, r1
 80078d4:	041b      	lsls	r3, r3, #16
 80078d6:	4319      	orrs	r1, r3
 80078d8:	9b05      	ldr	r3, [sp, #20]
 80078da:	c302      	stmia	r3!, {r1}
 80078dc:	9305      	str	r3, [sp, #20]
 80078de:	9b03      	ldr	r3, [sp, #12]
 80078e0:	42a3      	cmp	r3, r4
 80078e2:	d8e7      	bhi.n	80078b4 <__mdiff+0x84>
 80078e4:	0039      	movs	r1, r7
 80078e6:	9c03      	ldr	r4, [sp, #12]
 80078e8:	3115      	adds	r1, #21
 80078ea:	2304      	movs	r3, #4
 80078ec:	428c      	cmp	r4, r1
 80078ee:	d304      	bcc.n	80078fa <__mdiff+0xca>
 80078f0:	1be3      	subs	r3, r4, r7
 80078f2:	3b15      	subs	r3, #21
 80078f4:	089b      	lsrs	r3, r3, #2
 80078f6:	3301      	adds	r3, #1
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	9901      	ldr	r1, [sp, #4]
 80078fc:	18cd      	adds	r5, r1, r3
 80078fe:	9904      	ldr	r1, [sp, #16]
 8007900:	002e      	movs	r6, r5
 8007902:	18cb      	adds	r3, r1, r3
 8007904:	001f      	movs	r7, r3
 8007906:	9902      	ldr	r1, [sp, #8]
 8007908:	428e      	cmp	r6, r1
 800790a:	d311      	bcc.n	8007930 <__mdiff+0x100>
 800790c:	9c02      	ldr	r4, [sp, #8]
 800790e:	1ee9      	subs	r1, r5, #3
 8007910:	2000      	movs	r0, #0
 8007912:	428c      	cmp	r4, r1
 8007914:	d304      	bcc.n	8007920 <__mdiff+0xf0>
 8007916:	0021      	movs	r1, r4
 8007918:	3103      	adds	r1, #3
 800791a:	1b49      	subs	r1, r1, r5
 800791c:	0889      	lsrs	r1, r1, #2
 800791e:	0088      	lsls	r0, r1, #2
 8007920:	181b      	adds	r3, r3, r0
 8007922:	3b04      	subs	r3, #4
 8007924:	6819      	ldr	r1, [r3, #0]
 8007926:	2900      	cmp	r1, #0
 8007928:	d010      	beq.n	800794c <__mdiff+0x11c>
 800792a:	9b00      	ldr	r3, [sp, #0]
 800792c:	6113      	str	r3, [r2, #16]
 800792e:	e798      	b.n	8007862 <__mdiff+0x32>
 8007930:	4684      	mov	ip, r0
 8007932:	ce02      	ldmia	r6!, {r1}
 8007934:	b288      	uxth	r0, r1
 8007936:	4460      	add	r0, ip
 8007938:	1400      	asrs	r0, r0, #16
 800793a:	0c0c      	lsrs	r4, r1, #16
 800793c:	1904      	adds	r4, r0, r4
 800793e:	4461      	add	r1, ip
 8007940:	1420      	asrs	r0, r4, #16
 8007942:	b289      	uxth	r1, r1
 8007944:	0424      	lsls	r4, r4, #16
 8007946:	4321      	orrs	r1, r4
 8007948:	c702      	stmia	r7!, {r1}
 800794a:	e7dc      	b.n	8007906 <__mdiff+0xd6>
 800794c:	9900      	ldr	r1, [sp, #0]
 800794e:	3901      	subs	r1, #1
 8007950:	9100      	str	r1, [sp, #0]
 8007952:	e7e6      	b.n	8007922 <__mdiff+0xf2>
 8007954:	08009910 	.word	0x08009910
 8007958:	08009921 	.word	0x08009921
 800795c:	00000237 	.word	0x00000237
 8007960:	00000245 	.word	0x00000245

08007964 <__d2b>:
 8007964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007966:	2101      	movs	r1, #1
 8007968:	0016      	movs	r6, r2
 800796a:	001f      	movs	r7, r3
 800796c:	f7ff fcbe 	bl	80072ec <_Balloc>
 8007970:	1e04      	subs	r4, r0, #0
 8007972:	d105      	bne.n	8007980 <__d2b+0x1c>
 8007974:	0022      	movs	r2, r4
 8007976:	4b25      	ldr	r3, [pc, #148]	@ (8007a0c <__d2b+0xa8>)
 8007978:	4825      	ldr	r0, [pc, #148]	@ (8007a10 <__d2b+0xac>)
 800797a:	4926      	ldr	r1, [pc, #152]	@ (8007a14 <__d2b+0xb0>)
 800797c:	f000 fa90 	bl	8007ea0 <__assert_func>
 8007980:	033b      	lsls	r3, r7, #12
 8007982:	007d      	lsls	r5, r7, #1
 8007984:	0b1b      	lsrs	r3, r3, #12
 8007986:	0d6d      	lsrs	r5, r5, #21
 8007988:	d002      	beq.n	8007990 <__d2b+0x2c>
 800798a:	2280      	movs	r2, #128	@ 0x80
 800798c:	0352      	lsls	r2, r2, #13
 800798e:	4313      	orrs	r3, r2
 8007990:	9301      	str	r3, [sp, #4]
 8007992:	2e00      	cmp	r6, #0
 8007994:	d025      	beq.n	80079e2 <__d2b+0x7e>
 8007996:	4668      	mov	r0, sp
 8007998:	9600      	str	r6, [sp, #0]
 800799a:	f7ff fd74 	bl	8007486 <__lo0bits>
 800799e:	9b01      	ldr	r3, [sp, #4]
 80079a0:	9900      	ldr	r1, [sp, #0]
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d01b      	beq.n	80079de <__d2b+0x7a>
 80079a6:	2220      	movs	r2, #32
 80079a8:	001e      	movs	r6, r3
 80079aa:	1a12      	subs	r2, r2, r0
 80079ac:	4096      	lsls	r6, r2
 80079ae:	0032      	movs	r2, r6
 80079b0:	40c3      	lsrs	r3, r0
 80079b2:	430a      	orrs	r2, r1
 80079b4:	6162      	str	r2, [r4, #20]
 80079b6:	9301      	str	r3, [sp, #4]
 80079b8:	9e01      	ldr	r6, [sp, #4]
 80079ba:	61a6      	str	r6, [r4, #24]
 80079bc:	1e73      	subs	r3, r6, #1
 80079be:	419e      	sbcs	r6, r3
 80079c0:	3601      	adds	r6, #1
 80079c2:	6126      	str	r6, [r4, #16]
 80079c4:	2d00      	cmp	r5, #0
 80079c6:	d014      	beq.n	80079f2 <__d2b+0x8e>
 80079c8:	2635      	movs	r6, #53	@ 0x35
 80079ca:	4b13      	ldr	r3, [pc, #76]	@ (8007a18 <__d2b+0xb4>)
 80079cc:	18ed      	adds	r5, r5, r3
 80079ce:	9b08      	ldr	r3, [sp, #32]
 80079d0:	182d      	adds	r5, r5, r0
 80079d2:	601d      	str	r5, [r3, #0]
 80079d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079d6:	1a36      	subs	r6, r6, r0
 80079d8:	601e      	str	r6, [r3, #0]
 80079da:	0020      	movs	r0, r4
 80079dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079de:	6161      	str	r1, [r4, #20]
 80079e0:	e7ea      	b.n	80079b8 <__d2b+0x54>
 80079e2:	a801      	add	r0, sp, #4
 80079e4:	f7ff fd4f 	bl	8007486 <__lo0bits>
 80079e8:	9b01      	ldr	r3, [sp, #4]
 80079ea:	2601      	movs	r6, #1
 80079ec:	6163      	str	r3, [r4, #20]
 80079ee:	3020      	adds	r0, #32
 80079f0:	e7e7      	b.n	80079c2 <__d2b+0x5e>
 80079f2:	4b0a      	ldr	r3, [pc, #40]	@ (8007a1c <__d2b+0xb8>)
 80079f4:	18c0      	adds	r0, r0, r3
 80079f6:	9b08      	ldr	r3, [sp, #32]
 80079f8:	6018      	str	r0, [r3, #0]
 80079fa:	4b09      	ldr	r3, [pc, #36]	@ (8007a20 <__d2b+0xbc>)
 80079fc:	18f3      	adds	r3, r6, r3
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	18e3      	adds	r3, r4, r3
 8007a02:	6958      	ldr	r0, [r3, #20]
 8007a04:	f7ff fd1e 	bl	8007444 <__hi0bits>
 8007a08:	0176      	lsls	r6, r6, #5
 8007a0a:	e7e3      	b.n	80079d4 <__d2b+0x70>
 8007a0c:	08009910 	.word	0x08009910
 8007a10:	08009921 	.word	0x08009921
 8007a14:	0000030f 	.word	0x0000030f
 8007a18:	fffffbcd 	.word	0xfffffbcd
 8007a1c:	fffffbce 	.word	0xfffffbce
 8007a20:	3fffffff 	.word	0x3fffffff

08007a24 <__ssputs_r>:
 8007a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a26:	688e      	ldr	r6, [r1, #8]
 8007a28:	b085      	sub	sp, #20
 8007a2a:	001f      	movs	r7, r3
 8007a2c:	000c      	movs	r4, r1
 8007a2e:	680b      	ldr	r3, [r1, #0]
 8007a30:	9002      	str	r0, [sp, #8]
 8007a32:	9203      	str	r2, [sp, #12]
 8007a34:	42be      	cmp	r6, r7
 8007a36:	d830      	bhi.n	8007a9a <__ssputs_r+0x76>
 8007a38:	210c      	movs	r1, #12
 8007a3a:	5e62      	ldrsh	r2, [r4, r1]
 8007a3c:	2190      	movs	r1, #144	@ 0x90
 8007a3e:	00c9      	lsls	r1, r1, #3
 8007a40:	420a      	tst	r2, r1
 8007a42:	d028      	beq.n	8007a96 <__ssputs_r+0x72>
 8007a44:	2003      	movs	r0, #3
 8007a46:	6921      	ldr	r1, [r4, #16]
 8007a48:	1a5b      	subs	r3, r3, r1
 8007a4a:	9301      	str	r3, [sp, #4]
 8007a4c:	6963      	ldr	r3, [r4, #20]
 8007a4e:	4343      	muls	r3, r0
 8007a50:	9801      	ldr	r0, [sp, #4]
 8007a52:	0fdd      	lsrs	r5, r3, #31
 8007a54:	18ed      	adds	r5, r5, r3
 8007a56:	1c7b      	adds	r3, r7, #1
 8007a58:	181b      	adds	r3, r3, r0
 8007a5a:	106d      	asrs	r5, r5, #1
 8007a5c:	42ab      	cmp	r3, r5
 8007a5e:	d900      	bls.n	8007a62 <__ssputs_r+0x3e>
 8007a60:	001d      	movs	r5, r3
 8007a62:	0552      	lsls	r2, r2, #21
 8007a64:	d528      	bpl.n	8007ab8 <__ssputs_r+0x94>
 8007a66:	0029      	movs	r1, r5
 8007a68:	9802      	ldr	r0, [sp, #8]
 8007a6a:	f7ff fbaf 	bl	80071cc <_malloc_r>
 8007a6e:	1e06      	subs	r6, r0, #0
 8007a70:	d02c      	beq.n	8007acc <__ssputs_r+0xa8>
 8007a72:	9a01      	ldr	r2, [sp, #4]
 8007a74:	6921      	ldr	r1, [r4, #16]
 8007a76:	f000 fa09 	bl	8007e8c <memcpy>
 8007a7a:	89a2      	ldrh	r2, [r4, #12]
 8007a7c:	4b18      	ldr	r3, [pc, #96]	@ (8007ae0 <__ssputs_r+0xbc>)
 8007a7e:	401a      	ands	r2, r3
 8007a80:	2380      	movs	r3, #128	@ 0x80
 8007a82:	4313      	orrs	r3, r2
 8007a84:	81a3      	strh	r3, [r4, #12]
 8007a86:	9b01      	ldr	r3, [sp, #4]
 8007a88:	6126      	str	r6, [r4, #16]
 8007a8a:	18f6      	adds	r6, r6, r3
 8007a8c:	6026      	str	r6, [r4, #0]
 8007a8e:	003e      	movs	r6, r7
 8007a90:	6165      	str	r5, [r4, #20]
 8007a92:	1aed      	subs	r5, r5, r3
 8007a94:	60a5      	str	r5, [r4, #8]
 8007a96:	42be      	cmp	r6, r7
 8007a98:	d900      	bls.n	8007a9c <__ssputs_r+0x78>
 8007a9a:	003e      	movs	r6, r7
 8007a9c:	0032      	movs	r2, r6
 8007a9e:	9903      	ldr	r1, [sp, #12]
 8007aa0:	6820      	ldr	r0, [r4, #0]
 8007aa2:	f000 f9ce 	bl	8007e42 <memmove>
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	68a3      	ldr	r3, [r4, #8]
 8007aaa:	1b9b      	subs	r3, r3, r6
 8007aac:	60a3      	str	r3, [r4, #8]
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	199b      	adds	r3, r3, r6
 8007ab2:	6023      	str	r3, [r4, #0]
 8007ab4:	b005      	add	sp, #20
 8007ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ab8:	002a      	movs	r2, r5
 8007aba:	9802      	ldr	r0, [sp, #8]
 8007abc:	f000 fa4d 	bl	8007f5a <_realloc_r>
 8007ac0:	1e06      	subs	r6, r0, #0
 8007ac2:	d1e0      	bne.n	8007a86 <__ssputs_r+0x62>
 8007ac4:	6921      	ldr	r1, [r4, #16]
 8007ac6:	9802      	ldr	r0, [sp, #8]
 8007ac8:	f7ff fb0a 	bl	80070e0 <_free_r>
 8007acc:	230c      	movs	r3, #12
 8007ace:	2001      	movs	r0, #1
 8007ad0:	9a02      	ldr	r2, [sp, #8]
 8007ad2:	4240      	negs	r0, r0
 8007ad4:	6013      	str	r3, [r2, #0]
 8007ad6:	89a2      	ldrh	r2, [r4, #12]
 8007ad8:	3334      	adds	r3, #52	@ 0x34
 8007ada:	4313      	orrs	r3, r2
 8007adc:	81a3      	strh	r3, [r4, #12]
 8007ade:	e7e9      	b.n	8007ab4 <__ssputs_r+0x90>
 8007ae0:	fffffb7f 	.word	0xfffffb7f

08007ae4 <_svfiprintf_r>:
 8007ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ae6:	b0a1      	sub	sp, #132	@ 0x84
 8007ae8:	9003      	str	r0, [sp, #12]
 8007aea:	001d      	movs	r5, r3
 8007aec:	898b      	ldrh	r3, [r1, #12]
 8007aee:	000f      	movs	r7, r1
 8007af0:	0016      	movs	r6, r2
 8007af2:	061b      	lsls	r3, r3, #24
 8007af4:	d511      	bpl.n	8007b1a <_svfiprintf_r+0x36>
 8007af6:	690b      	ldr	r3, [r1, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10e      	bne.n	8007b1a <_svfiprintf_r+0x36>
 8007afc:	2140      	movs	r1, #64	@ 0x40
 8007afe:	f7ff fb65 	bl	80071cc <_malloc_r>
 8007b02:	6038      	str	r0, [r7, #0]
 8007b04:	6138      	str	r0, [r7, #16]
 8007b06:	2800      	cmp	r0, #0
 8007b08:	d105      	bne.n	8007b16 <_svfiprintf_r+0x32>
 8007b0a:	230c      	movs	r3, #12
 8007b0c:	9a03      	ldr	r2, [sp, #12]
 8007b0e:	6013      	str	r3, [r2, #0]
 8007b10:	2001      	movs	r0, #1
 8007b12:	4240      	negs	r0, r0
 8007b14:	e0cf      	b.n	8007cb6 <_svfiprintf_r+0x1d2>
 8007b16:	2340      	movs	r3, #64	@ 0x40
 8007b18:	617b      	str	r3, [r7, #20]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	ac08      	add	r4, sp, #32
 8007b1e:	6163      	str	r3, [r4, #20]
 8007b20:	3320      	adds	r3, #32
 8007b22:	7663      	strb	r3, [r4, #25]
 8007b24:	3310      	adds	r3, #16
 8007b26:	76a3      	strb	r3, [r4, #26]
 8007b28:	9507      	str	r5, [sp, #28]
 8007b2a:	0035      	movs	r5, r6
 8007b2c:	782b      	ldrb	r3, [r5, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <_svfiprintf_r+0x52>
 8007b32:	2b25      	cmp	r3, #37	@ 0x25
 8007b34:	d148      	bne.n	8007bc8 <_svfiprintf_r+0xe4>
 8007b36:	1bab      	subs	r3, r5, r6
 8007b38:	9305      	str	r3, [sp, #20]
 8007b3a:	42b5      	cmp	r5, r6
 8007b3c:	d00b      	beq.n	8007b56 <_svfiprintf_r+0x72>
 8007b3e:	0032      	movs	r2, r6
 8007b40:	0039      	movs	r1, r7
 8007b42:	9803      	ldr	r0, [sp, #12]
 8007b44:	f7ff ff6e 	bl	8007a24 <__ssputs_r>
 8007b48:	3001      	adds	r0, #1
 8007b4a:	d100      	bne.n	8007b4e <_svfiprintf_r+0x6a>
 8007b4c:	e0ae      	b.n	8007cac <_svfiprintf_r+0x1c8>
 8007b4e:	6963      	ldr	r3, [r4, #20]
 8007b50:	9a05      	ldr	r2, [sp, #20]
 8007b52:	189b      	adds	r3, r3, r2
 8007b54:	6163      	str	r3, [r4, #20]
 8007b56:	782b      	ldrb	r3, [r5, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d100      	bne.n	8007b5e <_svfiprintf_r+0x7a>
 8007b5c:	e0a6      	b.n	8007cac <_svfiprintf_r+0x1c8>
 8007b5e:	2201      	movs	r2, #1
 8007b60:	2300      	movs	r3, #0
 8007b62:	4252      	negs	r2, r2
 8007b64:	6062      	str	r2, [r4, #4]
 8007b66:	a904      	add	r1, sp, #16
 8007b68:	3254      	adds	r2, #84	@ 0x54
 8007b6a:	1852      	adds	r2, r2, r1
 8007b6c:	1c6e      	adds	r6, r5, #1
 8007b6e:	6023      	str	r3, [r4, #0]
 8007b70:	60e3      	str	r3, [r4, #12]
 8007b72:	60a3      	str	r3, [r4, #8]
 8007b74:	7013      	strb	r3, [r2, #0]
 8007b76:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007b78:	4b54      	ldr	r3, [pc, #336]	@ (8007ccc <_svfiprintf_r+0x1e8>)
 8007b7a:	2205      	movs	r2, #5
 8007b7c:	0018      	movs	r0, r3
 8007b7e:	7831      	ldrb	r1, [r6, #0]
 8007b80:	9305      	str	r3, [sp, #20]
 8007b82:	f7fe fc2c 	bl	80063de <memchr>
 8007b86:	1c75      	adds	r5, r6, #1
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	d11f      	bne.n	8007bcc <_svfiprintf_r+0xe8>
 8007b8c:	6822      	ldr	r2, [r4, #0]
 8007b8e:	06d3      	lsls	r3, r2, #27
 8007b90:	d504      	bpl.n	8007b9c <_svfiprintf_r+0xb8>
 8007b92:	2353      	movs	r3, #83	@ 0x53
 8007b94:	a904      	add	r1, sp, #16
 8007b96:	185b      	adds	r3, r3, r1
 8007b98:	2120      	movs	r1, #32
 8007b9a:	7019      	strb	r1, [r3, #0]
 8007b9c:	0713      	lsls	r3, r2, #28
 8007b9e:	d504      	bpl.n	8007baa <_svfiprintf_r+0xc6>
 8007ba0:	2353      	movs	r3, #83	@ 0x53
 8007ba2:	a904      	add	r1, sp, #16
 8007ba4:	185b      	adds	r3, r3, r1
 8007ba6:	212b      	movs	r1, #43	@ 0x2b
 8007ba8:	7019      	strb	r1, [r3, #0]
 8007baa:	7833      	ldrb	r3, [r6, #0]
 8007bac:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bae:	d016      	beq.n	8007bde <_svfiprintf_r+0xfa>
 8007bb0:	0035      	movs	r5, r6
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	200a      	movs	r0, #10
 8007bb6:	68e3      	ldr	r3, [r4, #12]
 8007bb8:	782a      	ldrb	r2, [r5, #0]
 8007bba:	1c6e      	adds	r6, r5, #1
 8007bbc:	3a30      	subs	r2, #48	@ 0x30
 8007bbe:	2a09      	cmp	r2, #9
 8007bc0:	d950      	bls.n	8007c64 <_svfiprintf_r+0x180>
 8007bc2:	2900      	cmp	r1, #0
 8007bc4:	d111      	bne.n	8007bea <_svfiprintf_r+0x106>
 8007bc6:	e017      	b.n	8007bf8 <_svfiprintf_r+0x114>
 8007bc8:	3501      	adds	r5, #1
 8007bca:	e7af      	b.n	8007b2c <_svfiprintf_r+0x48>
 8007bcc:	9b05      	ldr	r3, [sp, #20]
 8007bce:	6822      	ldr	r2, [r4, #0]
 8007bd0:	1ac0      	subs	r0, r0, r3
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	4083      	lsls	r3, r0
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	002e      	movs	r6, r5
 8007bda:	6023      	str	r3, [r4, #0]
 8007bdc:	e7cc      	b.n	8007b78 <_svfiprintf_r+0x94>
 8007bde:	9b07      	ldr	r3, [sp, #28]
 8007be0:	1d19      	adds	r1, r3, #4
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	9107      	str	r1, [sp, #28]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	db01      	blt.n	8007bee <_svfiprintf_r+0x10a>
 8007bea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bec:	e004      	b.n	8007bf8 <_svfiprintf_r+0x114>
 8007bee:	425b      	negs	r3, r3
 8007bf0:	60e3      	str	r3, [r4, #12]
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	6023      	str	r3, [r4, #0]
 8007bf8:	782b      	ldrb	r3, [r5, #0]
 8007bfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bfc:	d10c      	bne.n	8007c18 <_svfiprintf_r+0x134>
 8007bfe:	786b      	ldrb	r3, [r5, #1]
 8007c00:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c02:	d134      	bne.n	8007c6e <_svfiprintf_r+0x18a>
 8007c04:	9b07      	ldr	r3, [sp, #28]
 8007c06:	3502      	adds	r5, #2
 8007c08:	1d1a      	adds	r2, r3, #4
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	9207      	str	r2, [sp, #28]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	da01      	bge.n	8007c16 <_svfiprintf_r+0x132>
 8007c12:	2301      	movs	r3, #1
 8007c14:	425b      	negs	r3, r3
 8007c16:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c18:	4e2d      	ldr	r6, [pc, #180]	@ (8007cd0 <_svfiprintf_r+0x1ec>)
 8007c1a:	2203      	movs	r2, #3
 8007c1c:	0030      	movs	r0, r6
 8007c1e:	7829      	ldrb	r1, [r5, #0]
 8007c20:	f7fe fbdd 	bl	80063de <memchr>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d006      	beq.n	8007c36 <_svfiprintf_r+0x152>
 8007c28:	2340      	movs	r3, #64	@ 0x40
 8007c2a:	1b80      	subs	r0, r0, r6
 8007c2c:	4083      	lsls	r3, r0
 8007c2e:	6822      	ldr	r2, [r4, #0]
 8007c30:	3501      	adds	r5, #1
 8007c32:	4313      	orrs	r3, r2
 8007c34:	6023      	str	r3, [r4, #0]
 8007c36:	7829      	ldrb	r1, [r5, #0]
 8007c38:	2206      	movs	r2, #6
 8007c3a:	4826      	ldr	r0, [pc, #152]	@ (8007cd4 <_svfiprintf_r+0x1f0>)
 8007c3c:	1c6e      	adds	r6, r5, #1
 8007c3e:	7621      	strb	r1, [r4, #24]
 8007c40:	f7fe fbcd 	bl	80063de <memchr>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d038      	beq.n	8007cba <_svfiprintf_r+0x1d6>
 8007c48:	4b23      	ldr	r3, [pc, #140]	@ (8007cd8 <_svfiprintf_r+0x1f4>)
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d122      	bne.n	8007c94 <_svfiprintf_r+0x1b0>
 8007c4e:	2207      	movs	r2, #7
 8007c50:	9b07      	ldr	r3, [sp, #28]
 8007c52:	3307      	adds	r3, #7
 8007c54:	4393      	bics	r3, r2
 8007c56:	3308      	adds	r3, #8
 8007c58:	9307      	str	r3, [sp, #28]
 8007c5a:	6963      	ldr	r3, [r4, #20]
 8007c5c:	9a04      	ldr	r2, [sp, #16]
 8007c5e:	189b      	adds	r3, r3, r2
 8007c60:	6163      	str	r3, [r4, #20]
 8007c62:	e762      	b.n	8007b2a <_svfiprintf_r+0x46>
 8007c64:	4343      	muls	r3, r0
 8007c66:	0035      	movs	r5, r6
 8007c68:	2101      	movs	r1, #1
 8007c6a:	189b      	adds	r3, r3, r2
 8007c6c:	e7a4      	b.n	8007bb8 <_svfiprintf_r+0xd4>
 8007c6e:	2300      	movs	r3, #0
 8007c70:	200a      	movs	r0, #10
 8007c72:	0019      	movs	r1, r3
 8007c74:	3501      	adds	r5, #1
 8007c76:	6063      	str	r3, [r4, #4]
 8007c78:	782a      	ldrb	r2, [r5, #0]
 8007c7a:	1c6e      	adds	r6, r5, #1
 8007c7c:	3a30      	subs	r2, #48	@ 0x30
 8007c7e:	2a09      	cmp	r2, #9
 8007c80:	d903      	bls.n	8007c8a <_svfiprintf_r+0x1a6>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d0c8      	beq.n	8007c18 <_svfiprintf_r+0x134>
 8007c86:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c88:	e7c6      	b.n	8007c18 <_svfiprintf_r+0x134>
 8007c8a:	4341      	muls	r1, r0
 8007c8c:	0035      	movs	r5, r6
 8007c8e:	2301      	movs	r3, #1
 8007c90:	1889      	adds	r1, r1, r2
 8007c92:	e7f1      	b.n	8007c78 <_svfiprintf_r+0x194>
 8007c94:	aa07      	add	r2, sp, #28
 8007c96:	9200      	str	r2, [sp, #0]
 8007c98:	0021      	movs	r1, r4
 8007c9a:	003a      	movs	r2, r7
 8007c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8007cdc <_svfiprintf_r+0x1f8>)
 8007c9e:	9803      	ldr	r0, [sp, #12]
 8007ca0:	f7fd fe2a 	bl	80058f8 <_printf_float>
 8007ca4:	9004      	str	r0, [sp, #16]
 8007ca6:	9b04      	ldr	r3, [sp, #16]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	d1d6      	bne.n	8007c5a <_svfiprintf_r+0x176>
 8007cac:	89bb      	ldrh	r3, [r7, #12]
 8007cae:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007cb0:	065b      	lsls	r3, r3, #25
 8007cb2:	d500      	bpl.n	8007cb6 <_svfiprintf_r+0x1d2>
 8007cb4:	e72c      	b.n	8007b10 <_svfiprintf_r+0x2c>
 8007cb6:	b021      	add	sp, #132	@ 0x84
 8007cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cba:	aa07      	add	r2, sp, #28
 8007cbc:	9200      	str	r2, [sp, #0]
 8007cbe:	0021      	movs	r1, r4
 8007cc0:	003a      	movs	r2, r7
 8007cc2:	4b06      	ldr	r3, [pc, #24]	@ (8007cdc <_svfiprintf_r+0x1f8>)
 8007cc4:	9803      	ldr	r0, [sp, #12]
 8007cc6:	f7fe f8c5 	bl	8005e54 <_printf_i>
 8007cca:	e7eb      	b.n	8007ca4 <_svfiprintf_r+0x1c0>
 8007ccc:	0800997a 	.word	0x0800997a
 8007cd0:	08009980 	.word	0x08009980
 8007cd4:	08009984 	.word	0x08009984
 8007cd8:	080058f9 	.word	0x080058f9
 8007cdc:	08007a25 	.word	0x08007a25

08007ce0 <__sflush_r>:
 8007ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ce2:	220c      	movs	r2, #12
 8007ce4:	5e8b      	ldrsh	r3, [r1, r2]
 8007ce6:	0005      	movs	r5, r0
 8007ce8:	000c      	movs	r4, r1
 8007cea:	071a      	lsls	r2, r3, #28
 8007cec:	d456      	bmi.n	8007d9c <__sflush_r+0xbc>
 8007cee:	684a      	ldr	r2, [r1, #4]
 8007cf0:	2a00      	cmp	r2, #0
 8007cf2:	dc02      	bgt.n	8007cfa <__sflush_r+0x1a>
 8007cf4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8007cf6:	2a00      	cmp	r2, #0
 8007cf8:	dd4e      	ble.n	8007d98 <__sflush_r+0xb8>
 8007cfa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007cfc:	2f00      	cmp	r7, #0
 8007cfe:	d04b      	beq.n	8007d98 <__sflush_r+0xb8>
 8007d00:	2200      	movs	r2, #0
 8007d02:	2080      	movs	r0, #128	@ 0x80
 8007d04:	682e      	ldr	r6, [r5, #0]
 8007d06:	602a      	str	r2, [r5, #0]
 8007d08:	001a      	movs	r2, r3
 8007d0a:	0140      	lsls	r0, r0, #5
 8007d0c:	6a21      	ldr	r1, [r4, #32]
 8007d0e:	4002      	ands	r2, r0
 8007d10:	4203      	tst	r3, r0
 8007d12:	d033      	beq.n	8007d7c <__sflush_r+0x9c>
 8007d14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007d16:	89a3      	ldrh	r3, [r4, #12]
 8007d18:	075b      	lsls	r3, r3, #29
 8007d1a:	d506      	bpl.n	8007d2a <__sflush_r+0x4a>
 8007d1c:	6863      	ldr	r3, [r4, #4]
 8007d1e:	1ad2      	subs	r2, r2, r3
 8007d20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <__sflush_r+0x4a>
 8007d26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d28:	1ad2      	subs	r2, r2, r3
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	0028      	movs	r0, r5
 8007d2e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007d30:	6a21      	ldr	r1, [r4, #32]
 8007d32:	47b8      	blx	r7
 8007d34:	89a2      	ldrh	r2, [r4, #12]
 8007d36:	1c43      	adds	r3, r0, #1
 8007d38:	d106      	bne.n	8007d48 <__sflush_r+0x68>
 8007d3a:	6829      	ldr	r1, [r5, #0]
 8007d3c:	291d      	cmp	r1, #29
 8007d3e:	d846      	bhi.n	8007dce <__sflush_r+0xee>
 8007d40:	4b29      	ldr	r3, [pc, #164]	@ (8007de8 <__sflush_r+0x108>)
 8007d42:	40cb      	lsrs	r3, r1
 8007d44:	07db      	lsls	r3, r3, #31
 8007d46:	d542      	bpl.n	8007dce <__sflush_r+0xee>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	6063      	str	r3, [r4, #4]
 8007d4c:	6923      	ldr	r3, [r4, #16]
 8007d4e:	6023      	str	r3, [r4, #0]
 8007d50:	04d2      	lsls	r2, r2, #19
 8007d52:	d505      	bpl.n	8007d60 <__sflush_r+0x80>
 8007d54:	1c43      	adds	r3, r0, #1
 8007d56:	d102      	bne.n	8007d5e <__sflush_r+0x7e>
 8007d58:	682b      	ldr	r3, [r5, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d100      	bne.n	8007d60 <__sflush_r+0x80>
 8007d5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d62:	602e      	str	r6, [r5, #0]
 8007d64:	2900      	cmp	r1, #0
 8007d66:	d017      	beq.n	8007d98 <__sflush_r+0xb8>
 8007d68:	0023      	movs	r3, r4
 8007d6a:	3344      	adds	r3, #68	@ 0x44
 8007d6c:	4299      	cmp	r1, r3
 8007d6e:	d002      	beq.n	8007d76 <__sflush_r+0x96>
 8007d70:	0028      	movs	r0, r5
 8007d72:	f7ff f9b5 	bl	80070e0 <_free_r>
 8007d76:	2300      	movs	r3, #0
 8007d78:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d7a:	e00d      	b.n	8007d98 <__sflush_r+0xb8>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	0028      	movs	r0, r5
 8007d80:	47b8      	blx	r7
 8007d82:	0002      	movs	r2, r0
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	d1c6      	bne.n	8007d16 <__sflush_r+0x36>
 8007d88:	682b      	ldr	r3, [r5, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d0c3      	beq.n	8007d16 <__sflush_r+0x36>
 8007d8e:	2b1d      	cmp	r3, #29
 8007d90:	d001      	beq.n	8007d96 <__sflush_r+0xb6>
 8007d92:	2b16      	cmp	r3, #22
 8007d94:	d11a      	bne.n	8007dcc <__sflush_r+0xec>
 8007d96:	602e      	str	r6, [r5, #0]
 8007d98:	2000      	movs	r0, #0
 8007d9a:	e01e      	b.n	8007dda <__sflush_r+0xfa>
 8007d9c:	690e      	ldr	r6, [r1, #16]
 8007d9e:	2e00      	cmp	r6, #0
 8007da0:	d0fa      	beq.n	8007d98 <__sflush_r+0xb8>
 8007da2:	680f      	ldr	r7, [r1, #0]
 8007da4:	600e      	str	r6, [r1, #0]
 8007da6:	1bba      	subs	r2, r7, r6
 8007da8:	9201      	str	r2, [sp, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	079b      	lsls	r3, r3, #30
 8007dae:	d100      	bne.n	8007db2 <__sflush_r+0xd2>
 8007db0:	694a      	ldr	r2, [r1, #20]
 8007db2:	60a2      	str	r2, [r4, #8]
 8007db4:	9b01      	ldr	r3, [sp, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	ddee      	ble.n	8007d98 <__sflush_r+0xb8>
 8007dba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007dbc:	0032      	movs	r2, r6
 8007dbe:	001f      	movs	r7, r3
 8007dc0:	0028      	movs	r0, r5
 8007dc2:	9b01      	ldr	r3, [sp, #4]
 8007dc4:	6a21      	ldr	r1, [r4, #32]
 8007dc6:	47b8      	blx	r7
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	dc07      	bgt.n	8007ddc <__sflush_r+0xfc>
 8007dcc:	89a2      	ldrh	r2, [r4, #12]
 8007dce:	2340      	movs	r3, #64	@ 0x40
 8007dd0:	2001      	movs	r0, #1
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	b21b      	sxth	r3, r3
 8007dd6:	81a3      	strh	r3, [r4, #12]
 8007dd8:	4240      	negs	r0, r0
 8007dda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ddc:	9b01      	ldr	r3, [sp, #4]
 8007dde:	1836      	adds	r6, r6, r0
 8007de0:	1a1b      	subs	r3, r3, r0
 8007de2:	9301      	str	r3, [sp, #4]
 8007de4:	e7e6      	b.n	8007db4 <__sflush_r+0xd4>
 8007de6:	46c0      	nop			@ (mov r8, r8)
 8007de8:	20400001 	.word	0x20400001

08007dec <_fflush_r>:
 8007dec:	690b      	ldr	r3, [r1, #16]
 8007dee:	b570      	push	{r4, r5, r6, lr}
 8007df0:	0005      	movs	r5, r0
 8007df2:	000c      	movs	r4, r1
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d102      	bne.n	8007dfe <_fflush_r+0x12>
 8007df8:	2500      	movs	r5, #0
 8007dfa:	0028      	movs	r0, r5
 8007dfc:	bd70      	pop	{r4, r5, r6, pc}
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d004      	beq.n	8007e0c <_fflush_r+0x20>
 8007e02:	6a03      	ldr	r3, [r0, #32]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <_fflush_r+0x20>
 8007e08:	f7fe f9c0 	bl	800618c <__sinit>
 8007e0c:	220c      	movs	r2, #12
 8007e0e:	5ea3      	ldrsh	r3, [r4, r2]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d0f1      	beq.n	8007df8 <_fflush_r+0xc>
 8007e14:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007e16:	07d2      	lsls	r2, r2, #31
 8007e18:	d404      	bmi.n	8007e24 <_fflush_r+0x38>
 8007e1a:	059b      	lsls	r3, r3, #22
 8007e1c:	d402      	bmi.n	8007e24 <_fflush_r+0x38>
 8007e1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e20:	f7fe fadb 	bl	80063da <__retarget_lock_acquire_recursive>
 8007e24:	0028      	movs	r0, r5
 8007e26:	0021      	movs	r1, r4
 8007e28:	f7ff ff5a 	bl	8007ce0 <__sflush_r>
 8007e2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e2e:	0005      	movs	r5, r0
 8007e30:	07db      	lsls	r3, r3, #31
 8007e32:	d4e2      	bmi.n	8007dfa <_fflush_r+0xe>
 8007e34:	89a3      	ldrh	r3, [r4, #12]
 8007e36:	059b      	lsls	r3, r3, #22
 8007e38:	d4df      	bmi.n	8007dfa <_fflush_r+0xe>
 8007e3a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e3c:	f7fe face 	bl	80063dc <__retarget_lock_release_recursive>
 8007e40:	e7db      	b.n	8007dfa <_fflush_r+0xe>

08007e42 <memmove>:
 8007e42:	b510      	push	{r4, lr}
 8007e44:	4288      	cmp	r0, r1
 8007e46:	d902      	bls.n	8007e4e <memmove+0xc>
 8007e48:	188b      	adds	r3, r1, r2
 8007e4a:	4298      	cmp	r0, r3
 8007e4c:	d308      	bcc.n	8007e60 <memmove+0x1e>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d007      	beq.n	8007e64 <memmove+0x22>
 8007e54:	5ccc      	ldrb	r4, [r1, r3]
 8007e56:	54c4      	strb	r4, [r0, r3]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	e7f9      	b.n	8007e50 <memmove+0xe>
 8007e5c:	5c8b      	ldrb	r3, [r1, r2]
 8007e5e:	5483      	strb	r3, [r0, r2]
 8007e60:	3a01      	subs	r2, #1
 8007e62:	d2fb      	bcs.n	8007e5c <memmove+0x1a>
 8007e64:	bd10      	pop	{r4, pc}
	...

08007e68 <_sbrk_r>:
 8007e68:	2300      	movs	r3, #0
 8007e6a:	b570      	push	{r4, r5, r6, lr}
 8007e6c:	4d06      	ldr	r5, [pc, #24]	@ (8007e88 <_sbrk_r+0x20>)
 8007e6e:	0004      	movs	r4, r0
 8007e70:	0008      	movs	r0, r1
 8007e72:	602b      	str	r3, [r5, #0]
 8007e74:	f7fb f876 	bl	8002f64 <_sbrk>
 8007e78:	1c43      	adds	r3, r0, #1
 8007e7a:	d103      	bne.n	8007e84 <_sbrk_r+0x1c>
 8007e7c:	682b      	ldr	r3, [r5, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d000      	beq.n	8007e84 <_sbrk_r+0x1c>
 8007e82:	6023      	str	r3, [r4, #0]
 8007e84:	bd70      	pop	{r4, r5, r6, pc}
 8007e86:	46c0      	nop			@ (mov r8, r8)
 8007e88:	20000430 	.word	0x20000430

08007e8c <memcpy>:
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	b510      	push	{r4, lr}
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d100      	bne.n	8007e96 <memcpy+0xa>
 8007e94:	bd10      	pop	{r4, pc}
 8007e96:	5ccc      	ldrb	r4, [r1, r3]
 8007e98:	54c4      	strb	r4, [r0, r3]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	e7f8      	b.n	8007e90 <memcpy+0x4>
	...

08007ea0 <__assert_func>:
 8007ea0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007ea2:	0014      	movs	r4, r2
 8007ea4:	001a      	movs	r2, r3
 8007ea6:	4b09      	ldr	r3, [pc, #36]	@ (8007ecc <__assert_func+0x2c>)
 8007ea8:	0005      	movs	r5, r0
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	000e      	movs	r6, r1
 8007eae:	68d8      	ldr	r0, [r3, #12]
 8007eb0:	4b07      	ldr	r3, [pc, #28]	@ (8007ed0 <__assert_func+0x30>)
 8007eb2:	2c00      	cmp	r4, #0
 8007eb4:	d101      	bne.n	8007eba <__assert_func+0x1a>
 8007eb6:	4b07      	ldr	r3, [pc, #28]	@ (8007ed4 <__assert_func+0x34>)
 8007eb8:	001c      	movs	r4, r3
 8007eba:	4907      	ldr	r1, [pc, #28]	@ (8007ed8 <__assert_func+0x38>)
 8007ebc:	9301      	str	r3, [sp, #4]
 8007ebe:	9402      	str	r4, [sp, #8]
 8007ec0:	002b      	movs	r3, r5
 8007ec2:	9600      	str	r6, [sp, #0]
 8007ec4:	f000 f886 	bl	8007fd4 <fiprintf>
 8007ec8:	f000 f894 	bl	8007ff4 <abort>
 8007ecc:	2000001c 	.word	0x2000001c
 8007ed0:	08009995 	.word	0x08009995
 8007ed4:	080099d0 	.word	0x080099d0
 8007ed8:	080099a2 	.word	0x080099a2

08007edc <_calloc_r>:
 8007edc:	b570      	push	{r4, r5, r6, lr}
 8007ede:	0c0b      	lsrs	r3, r1, #16
 8007ee0:	0c15      	lsrs	r5, r2, #16
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d11e      	bne.n	8007f24 <_calloc_r+0x48>
 8007ee6:	2d00      	cmp	r5, #0
 8007ee8:	d10c      	bne.n	8007f04 <_calloc_r+0x28>
 8007eea:	b289      	uxth	r1, r1
 8007eec:	b294      	uxth	r4, r2
 8007eee:	434c      	muls	r4, r1
 8007ef0:	0021      	movs	r1, r4
 8007ef2:	f7ff f96b 	bl	80071cc <_malloc_r>
 8007ef6:	1e05      	subs	r5, r0, #0
 8007ef8:	d01b      	beq.n	8007f32 <_calloc_r+0x56>
 8007efa:	0022      	movs	r2, r4
 8007efc:	2100      	movs	r1, #0
 8007efe:	f7fe f9e7 	bl	80062d0 <memset>
 8007f02:	e016      	b.n	8007f32 <_calloc_r+0x56>
 8007f04:	1c2b      	adds	r3, r5, #0
 8007f06:	1c0c      	adds	r4, r1, #0
 8007f08:	b289      	uxth	r1, r1
 8007f0a:	b292      	uxth	r2, r2
 8007f0c:	434a      	muls	r2, r1
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	b2a1      	uxth	r1, r4
 8007f12:	4359      	muls	r1, r3
 8007f14:	0c14      	lsrs	r4, r2, #16
 8007f16:	190c      	adds	r4, r1, r4
 8007f18:	0c23      	lsrs	r3, r4, #16
 8007f1a:	d107      	bne.n	8007f2c <_calloc_r+0x50>
 8007f1c:	0424      	lsls	r4, r4, #16
 8007f1e:	b292      	uxth	r2, r2
 8007f20:	4314      	orrs	r4, r2
 8007f22:	e7e5      	b.n	8007ef0 <_calloc_r+0x14>
 8007f24:	2d00      	cmp	r5, #0
 8007f26:	d101      	bne.n	8007f2c <_calloc_r+0x50>
 8007f28:	1c14      	adds	r4, r2, #0
 8007f2a:	e7ed      	b.n	8007f08 <_calloc_r+0x2c>
 8007f2c:	230c      	movs	r3, #12
 8007f2e:	2500      	movs	r5, #0
 8007f30:	6003      	str	r3, [r0, #0]
 8007f32:	0028      	movs	r0, r5
 8007f34:	bd70      	pop	{r4, r5, r6, pc}

08007f36 <__ascii_mbtowc>:
 8007f36:	b082      	sub	sp, #8
 8007f38:	2900      	cmp	r1, #0
 8007f3a:	d100      	bne.n	8007f3e <__ascii_mbtowc+0x8>
 8007f3c:	a901      	add	r1, sp, #4
 8007f3e:	1e10      	subs	r0, r2, #0
 8007f40:	d006      	beq.n	8007f50 <__ascii_mbtowc+0x1a>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d006      	beq.n	8007f54 <__ascii_mbtowc+0x1e>
 8007f46:	7813      	ldrb	r3, [r2, #0]
 8007f48:	600b      	str	r3, [r1, #0]
 8007f4a:	7810      	ldrb	r0, [r2, #0]
 8007f4c:	1e43      	subs	r3, r0, #1
 8007f4e:	4198      	sbcs	r0, r3
 8007f50:	b002      	add	sp, #8
 8007f52:	4770      	bx	lr
 8007f54:	2002      	movs	r0, #2
 8007f56:	4240      	negs	r0, r0
 8007f58:	e7fa      	b.n	8007f50 <__ascii_mbtowc+0x1a>

08007f5a <_realloc_r>:
 8007f5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f5c:	0006      	movs	r6, r0
 8007f5e:	000c      	movs	r4, r1
 8007f60:	0015      	movs	r5, r2
 8007f62:	2900      	cmp	r1, #0
 8007f64:	d105      	bne.n	8007f72 <_realloc_r+0x18>
 8007f66:	0011      	movs	r1, r2
 8007f68:	f7ff f930 	bl	80071cc <_malloc_r>
 8007f6c:	0004      	movs	r4, r0
 8007f6e:	0020      	movs	r0, r4
 8007f70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f72:	2a00      	cmp	r2, #0
 8007f74:	d103      	bne.n	8007f7e <_realloc_r+0x24>
 8007f76:	f7ff f8b3 	bl	80070e0 <_free_r>
 8007f7a:	002c      	movs	r4, r5
 8007f7c:	e7f7      	b.n	8007f6e <_realloc_r+0x14>
 8007f7e:	f000 f840 	bl	8008002 <_malloc_usable_size_r>
 8007f82:	0007      	movs	r7, r0
 8007f84:	4285      	cmp	r5, r0
 8007f86:	d802      	bhi.n	8007f8e <_realloc_r+0x34>
 8007f88:	0843      	lsrs	r3, r0, #1
 8007f8a:	42ab      	cmp	r3, r5
 8007f8c:	d3ef      	bcc.n	8007f6e <_realloc_r+0x14>
 8007f8e:	0029      	movs	r1, r5
 8007f90:	0030      	movs	r0, r6
 8007f92:	f7ff f91b 	bl	80071cc <_malloc_r>
 8007f96:	9001      	str	r0, [sp, #4]
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d101      	bne.n	8007fa0 <_realloc_r+0x46>
 8007f9c:	9c01      	ldr	r4, [sp, #4]
 8007f9e:	e7e6      	b.n	8007f6e <_realloc_r+0x14>
 8007fa0:	002a      	movs	r2, r5
 8007fa2:	42bd      	cmp	r5, r7
 8007fa4:	d900      	bls.n	8007fa8 <_realloc_r+0x4e>
 8007fa6:	003a      	movs	r2, r7
 8007fa8:	0021      	movs	r1, r4
 8007faa:	9801      	ldr	r0, [sp, #4]
 8007fac:	f7ff ff6e 	bl	8007e8c <memcpy>
 8007fb0:	0021      	movs	r1, r4
 8007fb2:	0030      	movs	r0, r6
 8007fb4:	f7ff f894 	bl	80070e0 <_free_r>
 8007fb8:	e7f0      	b.n	8007f9c <_realloc_r+0x42>

08007fba <__ascii_wctomb>:
 8007fba:	0003      	movs	r3, r0
 8007fbc:	1e08      	subs	r0, r1, #0
 8007fbe:	d005      	beq.n	8007fcc <__ascii_wctomb+0x12>
 8007fc0:	2aff      	cmp	r2, #255	@ 0xff
 8007fc2:	d904      	bls.n	8007fce <__ascii_wctomb+0x14>
 8007fc4:	228a      	movs	r2, #138	@ 0x8a
 8007fc6:	2001      	movs	r0, #1
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	4240      	negs	r0, r0
 8007fcc:	4770      	bx	lr
 8007fce:	2001      	movs	r0, #1
 8007fd0:	700a      	strb	r2, [r1, #0]
 8007fd2:	e7fb      	b.n	8007fcc <__ascii_wctomb+0x12>

08007fd4 <fiprintf>:
 8007fd4:	b40e      	push	{r1, r2, r3}
 8007fd6:	b517      	push	{r0, r1, r2, r4, lr}
 8007fd8:	4c05      	ldr	r4, [pc, #20]	@ (8007ff0 <fiprintf+0x1c>)
 8007fda:	ab05      	add	r3, sp, #20
 8007fdc:	cb04      	ldmia	r3!, {r2}
 8007fde:	0001      	movs	r1, r0
 8007fe0:	6820      	ldr	r0, [r4, #0]
 8007fe2:	9301      	str	r3, [sp, #4]
 8007fe4:	f000 f83c 	bl	8008060 <_vfiprintf_r>
 8007fe8:	bc1e      	pop	{r1, r2, r3, r4}
 8007fea:	bc08      	pop	{r3}
 8007fec:	b003      	add	sp, #12
 8007fee:	4718      	bx	r3
 8007ff0:	2000001c 	.word	0x2000001c

08007ff4 <abort>:
 8007ff4:	2006      	movs	r0, #6
 8007ff6:	b510      	push	{r4, lr}
 8007ff8:	f000 fa18 	bl	800842c <raise>
 8007ffc:	2001      	movs	r0, #1
 8007ffe:	f7fa ff3e 	bl	8002e7e <_exit>

08008002 <_malloc_usable_size_r>:
 8008002:	1f0b      	subs	r3, r1, #4
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	1f18      	subs	r0, r3, #4
 8008008:	2b00      	cmp	r3, #0
 800800a:	da01      	bge.n	8008010 <_malloc_usable_size_r+0xe>
 800800c:	580b      	ldr	r3, [r1, r0]
 800800e:	18c0      	adds	r0, r0, r3
 8008010:	4770      	bx	lr

08008012 <__sfputc_r>:
 8008012:	6893      	ldr	r3, [r2, #8]
 8008014:	b510      	push	{r4, lr}
 8008016:	3b01      	subs	r3, #1
 8008018:	6093      	str	r3, [r2, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	da04      	bge.n	8008028 <__sfputc_r+0x16>
 800801e:	6994      	ldr	r4, [r2, #24]
 8008020:	42a3      	cmp	r3, r4
 8008022:	db07      	blt.n	8008034 <__sfputc_r+0x22>
 8008024:	290a      	cmp	r1, #10
 8008026:	d005      	beq.n	8008034 <__sfputc_r+0x22>
 8008028:	6813      	ldr	r3, [r2, #0]
 800802a:	1c58      	adds	r0, r3, #1
 800802c:	6010      	str	r0, [r2, #0]
 800802e:	7019      	strb	r1, [r3, #0]
 8008030:	0008      	movs	r0, r1
 8008032:	bd10      	pop	{r4, pc}
 8008034:	f000 f930 	bl	8008298 <__swbuf_r>
 8008038:	0001      	movs	r1, r0
 800803a:	e7f9      	b.n	8008030 <__sfputc_r+0x1e>

0800803c <__sfputs_r>:
 800803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803e:	0006      	movs	r6, r0
 8008040:	000f      	movs	r7, r1
 8008042:	0014      	movs	r4, r2
 8008044:	18d5      	adds	r5, r2, r3
 8008046:	42ac      	cmp	r4, r5
 8008048:	d101      	bne.n	800804e <__sfputs_r+0x12>
 800804a:	2000      	movs	r0, #0
 800804c:	e007      	b.n	800805e <__sfputs_r+0x22>
 800804e:	7821      	ldrb	r1, [r4, #0]
 8008050:	003a      	movs	r2, r7
 8008052:	0030      	movs	r0, r6
 8008054:	f7ff ffdd 	bl	8008012 <__sfputc_r>
 8008058:	3401      	adds	r4, #1
 800805a:	1c43      	adds	r3, r0, #1
 800805c:	d1f3      	bne.n	8008046 <__sfputs_r+0xa>
 800805e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008060 <_vfiprintf_r>:
 8008060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008062:	b0a1      	sub	sp, #132	@ 0x84
 8008064:	000f      	movs	r7, r1
 8008066:	0015      	movs	r5, r2
 8008068:	001e      	movs	r6, r3
 800806a:	9003      	str	r0, [sp, #12]
 800806c:	2800      	cmp	r0, #0
 800806e:	d004      	beq.n	800807a <_vfiprintf_r+0x1a>
 8008070:	6a03      	ldr	r3, [r0, #32]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <_vfiprintf_r+0x1a>
 8008076:	f7fe f889 	bl	800618c <__sinit>
 800807a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800807c:	07db      	lsls	r3, r3, #31
 800807e:	d405      	bmi.n	800808c <_vfiprintf_r+0x2c>
 8008080:	89bb      	ldrh	r3, [r7, #12]
 8008082:	059b      	lsls	r3, r3, #22
 8008084:	d402      	bmi.n	800808c <_vfiprintf_r+0x2c>
 8008086:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008088:	f7fe f9a7 	bl	80063da <__retarget_lock_acquire_recursive>
 800808c:	89bb      	ldrh	r3, [r7, #12]
 800808e:	071b      	lsls	r3, r3, #28
 8008090:	d502      	bpl.n	8008098 <_vfiprintf_r+0x38>
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d113      	bne.n	80080c0 <_vfiprintf_r+0x60>
 8008098:	0039      	movs	r1, r7
 800809a:	9803      	ldr	r0, [sp, #12]
 800809c:	f000 f93e 	bl	800831c <__swsetup_r>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	d00d      	beq.n	80080c0 <_vfiprintf_r+0x60>
 80080a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080a6:	07db      	lsls	r3, r3, #31
 80080a8:	d503      	bpl.n	80080b2 <_vfiprintf_r+0x52>
 80080aa:	2001      	movs	r0, #1
 80080ac:	4240      	negs	r0, r0
 80080ae:	b021      	add	sp, #132	@ 0x84
 80080b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080b2:	89bb      	ldrh	r3, [r7, #12]
 80080b4:	059b      	lsls	r3, r3, #22
 80080b6:	d4f8      	bmi.n	80080aa <_vfiprintf_r+0x4a>
 80080b8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80080ba:	f7fe f98f 	bl	80063dc <__retarget_lock_release_recursive>
 80080be:	e7f4      	b.n	80080aa <_vfiprintf_r+0x4a>
 80080c0:	2300      	movs	r3, #0
 80080c2:	ac08      	add	r4, sp, #32
 80080c4:	6163      	str	r3, [r4, #20]
 80080c6:	3320      	adds	r3, #32
 80080c8:	7663      	strb	r3, [r4, #25]
 80080ca:	3310      	adds	r3, #16
 80080cc:	76a3      	strb	r3, [r4, #26]
 80080ce:	9607      	str	r6, [sp, #28]
 80080d0:	002e      	movs	r6, r5
 80080d2:	7833      	ldrb	r3, [r6, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <_vfiprintf_r+0x7c>
 80080d8:	2b25      	cmp	r3, #37	@ 0x25
 80080da:	d148      	bne.n	800816e <_vfiprintf_r+0x10e>
 80080dc:	1b73      	subs	r3, r6, r5
 80080de:	9305      	str	r3, [sp, #20]
 80080e0:	42ae      	cmp	r6, r5
 80080e2:	d00b      	beq.n	80080fc <_vfiprintf_r+0x9c>
 80080e4:	002a      	movs	r2, r5
 80080e6:	0039      	movs	r1, r7
 80080e8:	9803      	ldr	r0, [sp, #12]
 80080ea:	f7ff ffa7 	bl	800803c <__sfputs_r>
 80080ee:	3001      	adds	r0, #1
 80080f0:	d100      	bne.n	80080f4 <_vfiprintf_r+0x94>
 80080f2:	e0ae      	b.n	8008252 <_vfiprintf_r+0x1f2>
 80080f4:	6963      	ldr	r3, [r4, #20]
 80080f6:	9a05      	ldr	r2, [sp, #20]
 80080f8:	189b      	adds	r3, r3, r2
 80080fa:	6163      	str	r3, [r4, #20]
 80080fc:	7833      	ldrb	r3, [r6, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d100      	bne.n	8008104 <_vfiprintf_r+0xa4>
 8008102:	e0a6      	b.n	8008252 <_vfiprintf_r+0x1f2>
 8008104:	2201      	movs	r2, #1
 8008106:	2300      	movs	r3, #0
 8008108:	4252      	negs	r2, r2
 800810a:	6062      	str	r2, [r4, #4]
 800810c:	a904      	add	r1, sp, #16
 800810e:	3254      	adds	r2, #84	@ 0x54
 8008110:	1852      	adds	r2, r2, r1
 8008112:	1c75      	adds	r5, r6, #1
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	60e3      	str	r3, [r4, #12]
 8008118:	60a3      	str	r3, [r4, #8]
 800811a:	7013      	strb	r3, [r2, #0]
 800811c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800811e:	4b59      	ldr	r3, [pc, #356]	@ (8008284 <_vfiprintf_r+0x224>)
 8008120:	2205      	movs	r2, #5
 8008122:	0018      	movs	r0, r3
 8008124:	7829      	ldrb	r1, [r5, #0]
 8008126:	9305      	str	r3, [sp, #20]
 8008128:	f7fe f959 	bl	80063de <memchr>
 800812c:	1c6e      	adds	r6, r5, #1
 800812e:	2800      	cmp	r0, #0
 8008130:	d11f      	bne.n	8008172 <_vfiprintf_r+0x112>
 8008132:	6822      	ldr	r2, [r4, #0]
 8008134:	06d3      	lsls	r3, r2, #27
 8008136:	d504      	bpl.n	8008142 <_vfiprintf_r+0xe2>
 8008138:	2353      	movs	r3, #83	@ 0x53
 800813a:	a904      	add	r1, sp, #16
 800813c:	185b      	adds	r3, r3, r1
 800813e:	2120      	movs	r1, #32
 8008140:	7019      	strb	r1, [r3, #0]
 8008142:	0713      	lsls	r3, r2, #28
 8008144:	d504      	bpl.n	8008150 <_vfiprintf_r+0xf0>
 8008146:	2353      	movs	r3, #83	@ 0x53
 8008148:	a904      	add	r1, sp, #16
 800814a:	185b      	adds	r3, r3, r1
 800814c:	212b      	movs	r1, #43	@ 0x2b
 800814e:	7019      	strb	r1, [r3, #0]
 8008150:	782b      	ldrb	r3, [r5, #0]
 8008152:	2b2a      	cmp	r3, #42	@ 0x2a
 8008154:	d016      	beq.n	8008184 <_vfiprintf_r+0x124>
 8008156:	002e      	movs	r6, r5
 8008158:	2100      	movs	r1, #0
 800815a:	200a      	movs	r0, #10
 800815c:	68e3      	ldr	r3, [r4, #12]
 800815e:	7832      	ldrb	r2, [r6, #0]
 8008160:	1c75      	adds	r5, r6, #1
 8008162:	3a30      	subs	r2, #48	@ 0x30
 8008164:	2a09      	cmp	r2, #9
 8008166:	d950      	bls.n	800820a <_vfiprintf_r+0x1aa>
 8008168:	2900      	cmp	r1, #0
 800816a:	d111      	bne.n	8008190 <_vfiprintf_r+0x130>
 800816c:	e017      	b.n	800819e <_vfiprintf_r+0x13e>
 800816e:	3601      	adds	r6, #1
 8008170:	e7af      	b.n	80080d2 <_vfiprintf_r+0x72>
 8008172:	9b05      	ldr	r3, [sp, #20]
 8008174:	6822      	ldr	r2, [r4, #0]
 8008176:	1ac0      	subs	r0, r0, r3
 8008178:	2301      	movs	r3, #1
 800817a:	4083      	lsls	r3, r0
 800817c:	4313      	orrs	r3, r2
 800817e:	0035      	movs	r5, r6
 8008180:	6023      	str	r3, [r4, #0]
 8008182:	e7cc      	b.n	800811e <_vfiprintf_r+0xbe>
 8008184:	9b07      	ldr	r3, [sp, #28]
 8008186:	1d19      	adds	r1, r3, #4
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	9107      	str	r1, [sp, #28]
 800818c:	2b00      	cmp	r3, #0
 800818e:	db01      	blt.n	8008194 <_vfiprintf_r+0x134>
 8008190:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008192:	e004      	b.n	800819e <_vfiprintf_r+0x13e>
 8008194:	425b      	negs	r3, r3
 8008196:	60e3      	str	r3, [r4, #12]
 8008198:	2302      	movs	r3, #2
 800819a:	4313      	orrs	r3, r2
 800819c:	6023      	str	r3, [r4, #0]
 800819e:	7833      	ldrb	r3, [r6, #0]
 80081a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80081a2:	d10c      	bne.n	80081be <_vfiprintf_r+0x15e>
 80081a4:	7873      	ldrb	r3, [r6, #1]
 80081a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80081a8:	d134      	bne.n	8008214 <_vfiprintf_r+0x1b4>
 80081aa:	9b07      	ldr	r3, [sp, #28]
 80081ac:	3602      	adds	r6, #2
 80081ae:	1d1a      	adds	r2, r3, #4
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	9207      	str	r2, [sp, #28]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	da01      	bge.n	80081bc <_vfiprintf_r+0x15c>
 80081b8:	2301      	movs	r3, #1
 80081ba:	425b      	negs	r3, r3
 80081bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80081be:	4d32      	ldr	r5, [pc, #200]	@ (8008288 <_vfiprintf_r+0x228>)
 80081c0:	2203      	movs	r2, #3
 80081c2:	0028      	movs	r0, r5
 80081c4:	7831      	ldrb	r1, [r6, #0]
 80081c6:	f7fe f90a 	bl	80063de <memchr>
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d006      	beq.n	80081dc <_vfiprintf_r+0x17c>
 80081ce:	2340      	movs	r3, #64	@ 0x40
 80081d0:	1b40      	subs	r0, r0, r5
 80081d2:	4083      	lsls	r3, r0
 80081d4:	6822      	ldr	r2, [r4, #0]
 80081d6:	3601      	adds	r6, #1
 80081d8:	4313      	orrs	r3, r2
 80081da:	6023      	str	r3, [r4, #0]
 80081dc:	7831      	ldrb	r1, [r6, #0]
 80081de:	2206      	movs	r2, #6
 80081e0:	482a      	ldr	r0, [pc, #168]	@ (800828c <_vfiprintf_r+0x22c>)
 80081e2:	1c75      	adds	r5, r6, #1
 80081e4:	7621      	strb	r1, [r4, #24]
 80081e6:	f7fe f8fa 	bl	80063de <memchr>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d040      	beq.n	8008270 <_vfiprintf_r+0x210>
 80081ee:	4b28      	ldr	r3, [pc, #160]	@ (8008290 <_vfiprintf_r+0x230>)
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d122      	bne.n	800823a <_vfiprintf_r+0x1da>
 80081f4:	2207      	movs	r2, #7
 80081f6:	9b07      	ldr	r3, [sp, #28]
 80081f8:	3307      	adds	r3, #7
 80081fa:	4393      	bics	r3, r2
 80081fc:	3308      	adds	r3, #8
 80081fe:	9307      	str	r3, [sp, #28]
 8008200:	6963      	ldr	r3, [r4, #20]
 8008202:	9a04      	ldr	r2, [sp, #16]
 8008204:	189b      	adds	r3, r3, r2
 8008206:	6163      	str	r3, [r4, #20]
 8008208:	e762      	b.n	80080d0 <_vfiprintf_r+0x70>
 800820a:	4343      	muls	r3, r0
 800820c:	002e      	movs	r6, r5
 800820e:	2101      	movs	r1, #1
 8008210:	189b      	adds	r3, r3, r2
 8008212:	e7a4      	b.n	800815e <_vfiprintf_r+0xfe>
 8008214:	2300      	movs	r3, #0
 8008216:	200a      	movs	r0, #10
 8008218:	0019      	movs	r1, r3
 800821a:	3601      	adds	r6, #1
 800821c:	6063      	str	r3, [r4, #4]
 800821e:	7832      	ldrb	r2, [r6, #0]
 8008220:	1c75      	adds	r5, r6, #1
 8008222:	3a30      	subs	r2, #48	@ 0x30
 8008224:	2a09      	cmp	r2, #9
 8008226:	d903      	bls.n	8008230 <_vfiprintf_r+0x1d0>
 8008228:	2b00      	cmp	r3, #0
 800822a:	d0c8      	beq.n	80081be <_vfiprintf_r+0x15e>
 800822c:	9109      	str	r1, [sp, #36]	@ 0x24
 800822e:	e7c6      	b.n	80081be <_vfiprintf_r+0x15e>
 8008230:	4341      	muls	r1, r0
 8008232:	002e      	movs	r6, r5
 8008234:	2301      	movs	r3, #1
 8008236:	1889      	adds	r1, r1, r2
 8008238:	e7f1      	b.n	800821e <_vfiprintf_r+0x1be>
 800823a:	aa07      	add	r2, sp, #28
 800823c:	9200      	str	r2, [sp, #0]
 800823e:	0021      	movs	r1, r4
 8008240:	003a      	movs	r2, r7
 8008242:	4b14      	ldr	r3, [pc, #80]	@ (8008294 <_vfiprintf_r+0x234>)
 8008244:	9803      	ldr	r0, [sp, #12]
 8008246:	f7fd fb57 	bl	80058f8 <_printf_float>
 800824a:	9004      	str	r0, [sp, #16]
 800824c:	9b04      	ldr	r3, [sp, #16]
 800824e:	3301      	adds	r3, #1
 8008250:	d1d6      	bne.n	8008200 <_vfiprintf_r+0x1a0>
 8008252:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008254:	07db      	lsls	r3, r3, #31
 8008256:	d405      	bmi.n	8008264 <_vfiprintf_r+0x204>
 8008258:	89bb      	ldrh	r3, [r7, #12]
 800825a:	059b      	lsls	r3, r3, #22
 800825c:	d402      	bmi.n	8008264 <_vfiprintf_r+0x204>
 800825e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008260:	f7fe f8bc 	bl	80063dc <__retarget_lock_release_recursive>
 8008264:	89bb      	ldrh	r3, [r7, #12]
 8008266:	065b      	lsls	r3, r3, #25
 8008268:	d500      	bpl.n	800826c <_vfiprintf_r+0x20c>
 800826a:	e71e      	b.n	80080aa <_vfiprintf_r+0x4a>
 800826c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800826e:	e71e      	b.n	80080ae <_vfiprintf_r+0x4e>
 8008270:	aa07      	add	r2, sp, #28
 8008272:	9200      	str	r2, [sp, #0]
 8008274:	0021      	movs	r1, r4
 8008276:	003a      	movs	r2, r7
 8008278:	4b06      	ldr	r3, [pc, #24]	@ (8008294 <_vfiprintf_r+0x234>)
 800827a:	9803      	ldr	r0, [sp, #12]
 800827c:	f7fd fdea 	bl	8005e54 <_printf_i>
 8008280:	e7e3      	b.n	800824a <_vfiprintf_r+0x1ea>
 8008282:	46c0      	nop			@ (mov r8, r8)
 8008284:	0800997a 	.word	0x0800997a
 8008288:	08009980 	.word	0x08009980
 800828c:	08009984 	.word	0x08009984
 8008290:	080058f9 	.word	0x080058f9
 8008294:	0800803d 	.word	0x0800803d

08008298 <__swbuf_r>:
 8008298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829a:	0006      	movs	r6, r0
 800829c:	000d      	movs	r5, r1
 800829e:	0014      	movs	r4, r2
 80082a0:	2800      	cmp	r0, #0
 80082a2:	d004      	beq.n	80082ae <__swbuf_r+0x16>
 80082a4:	6a03      	ldr	r3, [r0, #32]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <__swbuf_r+0x16>
 80082aa:	f7fd ff6f 	bl	800618c <__sinit>
 80082ae:	69a3      	ldr	r3, [r4, #24]
 80082b0:	60a3      	str	r3, [r4, #8]
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	071b      	lsls	r3, r3, #28
 80082b6:	d502      	bpl.n	80082be <__swbuf_r+0x26>
 80082b8:	6923      	ldr	r3, [r4, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d109      	bne.n	80082d2 <__swbuf_r+0x3a>
 80082be:	0021      	movs	r1, r4
 80082c0:	0030      	movs	r0, r6
 80082c2:	f000 f82b 	bl	800831c <__swsetup_r>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d003      	beq.n	80082d2 <__swbuf_r+0x3a>
 80082ca:	2501      	movs	r5, #1
 80082cc:	426d      	negs	r5, r5
 80082ce:	0028      	movs	r0, r5
 80082d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082d2:	6923      	ldr	r3, [r4, #16]
 80082d4:	6820      	ldr	r0, [r4, #0]
 80082d6:	b2ef      	uxtb	r7, r5
 80082d8:	1ac0      	subs	r0, r0, r3
 80082da:	6963      	ldr	r3, [r4, #20]
 80082dc:	b2ed      	uxtb	r5, r5
 80082de:	4283      	cmp	r3, r0
 80082e0:	dc05      	bgt.n	80082ee <__swbuf_r+0x56>
 80082e2:	0021      	movs	r1, r4
 80082e4:	0030      	movs	r0, r6
 80082e6:	f7ff fd81 	bl	8007dec <_fflush_r>
 80082ea:	2800      	cmp	r0, #0
 80082ec:	d1ed      	bne.n	80082ca <__swbuf_r+0x32>
 80082ee:	68a3      	ldr	r3, [r4, #8]
 80082f0:	3001      	adds	r0, #1
 80082f2:	3b01      	subs	r3, #1
 80082f4:	60a3      	str	r3, [r4, #8]
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	1c5a      	adds	r2, r3, #1
 80082fa:	6022      	str	r2, [r4, #0]
 80082fc:	701f      	strb	r7, [r3, #0]
 80082fe:	6963      	ldr	r3, [r4, #20]
 8008300:	4283      	cmp	r3, r0
 8008302:	d004      	beq.n	800830e <__swbuf_r+0x76>
 8008304:	89a3      	ldrh	r3, [r4, #12]
 8008306:	07db      	lsls	r3, r3, #31
 8008308:	d5e1      	bpl.n	80082ce <__swbuf_r+0x36>
 800830a:	2d0a      	cmp	r5, #10
 800830c:	d1df      	bne.n	80082ce <__swbuf_r+0x36>
 800830e:	0021      	movs	r1, r4
 8008310:	0030      	movs	r0, r6
 8008312:	f7ff fd6b 	bl	8007dec <_fflush_r>
 8008316:	2800      	cmp	r0, #0
 8008318:	d0d9      	beq.n	80082ce <__swbuf_r+0x36>
 800831a:	e7d6      	b.n	80082ca <__swbuf_r+0x32>

0800831c <__swsetup_r>:
 800831c:	4b2d      	ldr	r3, [pc, #180]	@ (80083d4 <__swsetup_r+0xb8>)
 800831e:	b570      	push	{r4, r5, r6, lr}
 8008320:	0005      	movs	r5, r0
 8008322:	6818      	ldr	r0, [r3, #0]
 8008324:	000c      	movs	r4, r1
 8008326:	2800      	cmp	r0, #0
 8008328:	d004      	beq.n	8008334 <__swsetup_r+0x18>
 800832a:	6a03      	ldr	r3, [r0, #32]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <__swsetup_r+0x18>
 8008330:	f7fd ff2c 	bl	800618c <__sinit>
 8008334:	220c      	movs	r2, #12
 8008336:	5ea3      	ldrsh	r3, [r4, r2]
 8008338:	071a      	lsls	r2, r3, #28
 800833a:	d423      	bmi.n	8008384 <__swsetup_r+0x68>
 800833c:	06da      	lsls	r2, r3, #27
 800833e:	d407      	bmi.n	8008350 <__swsetup_r+0x34>
 8008340:	2209      	movs	r2, #9
 8008342:	602a      	str	r2, [r5, #0]
 8008344:	2240      	movs	r2, #64	@ 0x40
 8008346:	2001      	movs	r0, #1
 8008348:	4313      	orrs	r3, r2
 800834a:	81a3      	strh	r3, [r4, #12]
 800834c:	4240      	negs	r0, r0
 800834e:	e03a      	b.n	80083c6 <__swsetup_r+0xaa>
 8008350:	075b      	lsls	r3, r3, #29
 8008352:	d513      	bpl.n	800837c <__swsetup_r+0x60>
 8008354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008356:	2900      	cmp	r1, #0
 8008358:	d008      	beq.n	800836c <__swsetup_r+0x50>
 800835a:	0023      	movs	r3, r4
 800835c:	3344      	adds	r3, #68	@ 0x44
 800835e:	4299      	cmp	r1, r3
 8008360:	d002      	beq.n	8008368 <__swsetup_r+0x4c>
 8008362:	0028      	movs	r0, r5
 8008364:	f7fe febc 	bl	80070e0 <_free_r>
 8008368:	2300      	movs	r3, #0
 800836a:	6363      	str	r3, [r4, #52]	@ 0x34
 800836c:	2224      	movs	r2, #36	@ 0x24
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	4393      	bics	r3, r2
 8008372:	81a3      	strh	r3, [r4, #12]
 8008374:	2300      	movs	r3, #0
 8008376:	6063      	str	r3, [r4, #4]
 8008378:	6923      	ldr	r3, [r4, #16]
 800837a:	6023      	str	r3, [r4, #0]
 800837c:	2308      	movs	r3, #8
 800837e:	89a2      	ldrh	r2, [r4, #12]
 8008380:	4313      	orrs	r3, r2
 8008382:	81a3      	strh	r3, [r4, #12]
 8008384:	6923      	ldr	r3, [r4, #16]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10b      	bne.n	80083a2 <__swsetup_r+0x86>
 800838a:	21a0      	movs	r1, #160	@ 0xa0
 800838c:	2280      	movs	r2, #128	@ 0x80
 800838e:	89a3      	ldrh	r3, [r4, #12]
 8008390:	0089      	lsls	r1, r1, #2
 8008392:	0092      	lsls	r2, r2, #2
 8008394:	400b      	ands	r3, r1
 8008396:	4293      	cmp	r3, r2
 8008398:	d003      	beq.n	80083a2 <__swsetup_r+0x86>
 800839a:	0021      	movs	r1, r4
 800839c:	0028      	movs	r0, r5
 800839e:	f000 f88f 	bl	80084c0 <__smakebuf_r>
 80083a2:	220c      	movs	r2, #12
 80083a4:	5ea3      	ldrsh	r3, [r4, r2]
 80083a6:	2101      	movs	r1, #1
 80083a8:	001a      	movs	r2, r3
 80083aa:	400a      	ands	r2, r1
 80083ac:	420b      	tst	r3, r1
 80083ae:	d00b      	beq.n	80083c8 <__swsetup_r+0xac>
 80083b0:	2200      	movs	r2, #0
 80083b2:	60a2      	str	r2, [r4, #8]
 80083b4:	6962      	ldr	r2, [r4, #20]
 80083b6:	4252      	negs	r2, r2
 80083b8:	61a2      	str	r2, [r4, #24]
 80083ba:	2000      	movs	r0, #0
 80083bc:	6922      	ldr	r2, [r4, #16]
 80083be:	4282      	cmp	r2, r0
 80083c0:	d101      	bne.n	80083c6 <__swsetup_r+0xaa>
 80083c2:	061a      	lsls	r2, r3, #24
 80083c4:	d4be      	bmi.n	8008344 <__swsetup_r+0x28>
 80083c6:	bd70      	pop	{r4, r5, r6, pc}
 80083c8:	0799      	lsls	r1, r3, #30
 80083ca:	d400      	bmi.n	80083ce <__swsetup_r+0xb2>
 80083cc:	6962      	ldr	r2, [r4, #20]
 80083ce:	60a2      	str	r2, [r4, #8]
 80083d0:	e7f3      	b.n	80083ba <__swsetup_r+0x9e>
 80083d2:	46c0      	nop			@ (mov r8, r8)
 80083d4:	2000001c 	.word	0x2000001c

080083d8 <_raise_r>:
 80083d8:	b570      	push	{r4, r5, r6, lr}
 80083da:	0004      	movs	r4, r0
 80083dc:	000d      	movs	r5, r1
 80083de:	291f      	cmp	r1, #31
 80083e0:	d904      	bls.n	80083ec <_raise_r+0x14>
 80083e2:	2316      	movs	r3, #22
 80083e4:	6003      	str	r3, [r0, #0]
 80083e6:	2001      	movs	r0, #1
 80083e8:	4240      	negs	r0, r0
 80083ea:	bd70      	pop	{r4, r5, r6, pc}
 80083ec:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d004      	beq.n	80083fc <_raise_r+0x24>
 80083f2:	008a      	lsls	r2, r1, #2
 80083f4:	189b      	adds	r3, r3, r2
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	2a00      	cmp	r2, #0
 80083fa:	d108      	bne.n	800840e <_raise_r+0x36>
 80083fc:	0020      	movs	r0, r4
 80083fe:	f000 f831 	bl	8008464 <_getpid_r>
 8008402:	002a      	movs	r2, r5
 8008404:	0001      	movs	r1, r0
 8008406:	0020      	movs	r0, r4
 8008408:	f000 f81a 	bl	8008440 <_kill_r>
 800840c:	e7ed      	b.n	80083ea <_raise_r+0x12>
 800840e:	2a01      	cmp	r2, #1
 8008410:	d009      	beq.n	8008426 <_raise_r+0x4e>
 8008412:	1c51      	adds	r1, r2, #1
 8008414:	d103      	bne.n	800841e <_raise_r+0x46>
 8008416:	2316      	movs	r3, #22
 8008418:	6003      	str	r3, [r0, #0]
 800841a:	2001      	movs	r0, #1
 800841c:	e7e5      	b.n	80083ea <_raise_r+0x12>
 800841e:	2100      	movs	r1, #0
 8008420:	0028      	movs	r0, r5
 8008422:	6019      	str	r1, [r3, #0]
 8008424:	4790      	blx	r2
 8008426:	2000      	movs	r0, #0
 8008428:	e7df      	b.n	80083ea <_raise_r+0x12>
	...

0800842c <raise>:
 800842c:	b510      	push	{r4, lr}
 800842e:	4b03      	ldr	r3, [pc, #12]	@ (800843c <raise+0x10>)
 8008430:	0001      	movs	r1, r0
 8008432:	6818      	ldr	r0, [r3, #0]
 8008434:	f7ff ffd0 	bl	80083d8 <_raise_r>
 8008438:	bd10      	pop	{r4, pc}
 800843a:	46c0      	nop			@ (mov r8, r8)
 800843c:	2000001c 	.word	0x2000001c

08008440 <_kill_r>:
 8008440:	2300      	movs	r3, #0
 8008442:	b570      	push	{r4, r5, r6, lr}
 8008444:	4d06      	ldr	r5, [pc, #24]	@ (8008460 <_kill_r+0x20>)
 8008446:	0004      	movs	r4, r0
 8008448:	0008      	movs	r0, r1
 800844a:	0011      	movs	r1, r2
 800844c:	602b      	str	r3, [r5, #0]
 800844e:	f7fa fd06 	bl	8002e5e <_kill>
 8008452:	1c43      	adds	r3, r0, #1
 8008454:	d103      	bne.n	800845e <_kill_r+0x1e>
 8008456:	682b      	ldr	r3, [r5, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d000      	beq.n	800845e <_kill_r+0x1e>
 800845c:	6023      	str	r3, [r4, #0]
 800845e:	bd70      	pop	{r4, r5, r6, pc}
 8008460:	20000430 	.word	0x20000430

08008464 <_getpid_r>:
 8008464:	b510      	push	{r4, lr}
 8008466:	f7fa fcf4 	bl	8002e52 <_getpid>
 800846a:	bd10      	pop	{r4, pc}

0800846c <__swhatbuf_r>:
 800846c:	b570      	push	{r4, r5, r6, lr}
 800846e:	000e      	movs	r6, r1
 8008470:	001d      	movs	r5, r3
 8008472:	230e      	movs	r3, #14
 8008474:	5ec9      	ldrsh	r1, [r1, r3]
 8008476:	0014      	movs	r4, r2
 8008478:	b096      	sub	sp, #88	@ 0x58
 800847a:	2900      	cmp	r1, #0
 800847c:	da0c      	bge.n	8008498 <__swhatbuf_r+0x2c>
 800847e:	89b2      	ldrh	r2, [r6, #12]
 8008480:	2380      	movs	r3, #128	@ 0x80
 8008482:	0011      	movs	r1, r2
 8008484:	4019      	ands	r1, r3
 8008486:	421a      	tst	r2, r3
 8008488:	d114      	bne.n	80084b4 <__swhatbuf_r+0x48>
 800848a:	2380      	movs	r3, #128	@ 0x80
 800848c:	00db      	lsls	r3, r3, #3
 800848e:	2000      	movs	r0, #0
 8008490:	6029      	str	r1, [r5, #0]
 8008492:	6023      	str	r3, [r4, #0]
 8008494:	b016      	add	sp, #88	@ 0x58
 8008496:	bd70      	pop	{r4, r5, r6, pc}
 8008498:	466a      	mov	r2, sp
 800849a:	f000 f853 	bl	8008544 <_fstat_r>
 800849e:	2800      	cmp	r0, #0
 80084a0:	dbed      	blt.n	800847e <__swhatbuf_r+0x12>
 80084a2:	23f0      	movs	r3, #240	@ 0xf0
 80084a4:	9901      	ldr	r1, [sp, #4]
 80084a6:	021b      	lsls	r3, r3, #8
 80084a8:	4019      	ands	r1, r3
 80084aa:	4b04      	ldr	r3, [pc, #16]	@ (80084bc <__swhatbuf_r+0x50>)
 80084ac:	18c9      	adds	r1, r1, r3
 80084ae:	424b      	negs	r3, r1
 80084b0:	4159      	adcs	r1, r3
 80084b2:	e7ea      	b.n	800848a <__swhatbuf_r+0x1e>
 80084b4:	2100      	movs	r1, #0
 80084b6:	2340      	movs	r3, #64	@ 0x40
 80084b8:	e7e9      	b.n	800848e <__swhatbuf_r+0x22>
 80084ba:	46c0      	nop			@ (mov r8, r8)
 80084bc:	ffffe000 	.word	0xffffe000

080084c0 <__smakebuf_r>:
 80084c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084c2:	2602      	movs	r6, #2
 80084c4:	898b      	ldrh	r3, [r1, #12]
 80084c6:	0005      	movs	r5, r0
 80084c8:	000c      	movs	r4, r1
 80084ca:	b085      	sub	sp, #20
 80084cc:	4233      	tst	r3, r6
 80084ce:	d007      	beq.n	80084e0 <__smakebuf_r+0x20>
 80084d0:	0023      	movs	r3, r4
 80084d2:	3347      	adds	r3, #71	@ 0x47
 80084d4:	6023      	str	r3, [r4, #0]
 80084d6:	6123      	str	r3, [r4, #16]
 80084d8:	2301      	movs	r3, #1
 80084da:	6163      	str	r3, [r4, #20]
 80084dc:	b005      	add	sp, #20
 80084de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084e0:	ab03      	add	r3, sp, #12
 80084e2:	aa02      	add	r2, sp, #8
 80084e4:	f7ff ffc2 	bl	800846c <__swhatbuf_r>
 80084e8:	9f02      	ldr	r7, [sp, #8]
 80084ea:	9001      	str	r0, [sp, #4]
 80084ec:	0039      	movs	r1, r7
 80084ee:	0028      	movs	r0, r5
 80084f0:	f7fe fe6c 	bl	80071cc <_malloc_r>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	d108      	bne.n	800850a <__smakebuf_r+0x4a>
 80084f8:	220c      	movs	r2, #12
 80084fa:	5ea3      	ldrsh	r3, [r4, r2]
 80084fc:	059a      	lsls	r2, r3, #22
 80084fe:	d4ed      	bmi.n	80084dc <__smakebuf_r+0x1c>
 8008500:	2203      	movs	r2, #3
 8008502:	4393      	bics	r3, r2
 8008504:	431e      	orrs	r6, r3
 8008506:	81a6      	strh	r6, [r4, #12]
 8008508:	e7e2      	b.n	80084d0 <__smakebuf_r+0x10>
 800850a:	2380      	movs	r3, #128	@ 0x80
 800850c:	89a2      	ldrh	r2, [r4, #12]
 800850e:	6020      	str	r0, [r4, #0]
 8008510:	4313      	orrs	r3, r2
 8008512:	81a3      	strh	r3, [r4, #12]
 8008514:	9b03      	ldr	r3, [sp, #12]
 8008516:	6120      	str	r0, [r4, #16]
 8008518:	6167      	str	r7, [r4, #20]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00c      	beq.n	8008538 <__smakebuf_r+0x78>
 800851e:	0028      	movs	r0, r5
 8008520:	230e      	movs	r3, #14
 8008522:	5ee1      	ldrsh	r1, [r4, r3]
 8008524:	f000 f820 	bl	8008568 <_isatty_r>
 8008528:	2800      	cmp	r0, #0
 800852a:	d005      	beq.n	8008538 <__smakebuf_r+0x78>
 800852c:	2303      	movs	r3, #3
 800852e:	89a2      	ldrh	r2, [r4, #12]
 8008530:	439a      	bics	r2, r3
 8008532:	3b02      	subs	r3, #2
 8008534:	4313      	orrs	r3, r2
 8008536:	81a3      	strh	r3, [r4, #12]
 8008538:	89a3      	ldrh	r3, [r4, #12]
 800853a:	9a01      	ldr	r2, [sp, #4]
 800853c:	4313      	orrs	r3, r2
 800853e:	81a3      	strh	r3, [r4, #12]
 8008540:	e7cc      	b.n	80084dc <__smakebuf_r+0x1c>
	...

08008544 <_fstat_r>:
 8008544:	2300      	movs	r3, #0
 8008546:	b570      	push	{r4, r5, r6, lr}
 8008548:	4d06      	ldr	r5, [pc, #24]	@ (8008564 <_fstat_r+0x20>)
 800854a:	0004      	movs	r4, r0
 800854c:	0008      	movs	r0, r1
 800854e:	0011      	movs	r1, r2
 8008550:	602b      	str	r3, [r5, #0]
 8008552:	f7fa fce4 	bl	8002f1e <_fstat>
 8008556:	1c43      	adds	r3, r0, #1
 8008558:	d103      	bne.n	8008562 <_fstat_r+0x1e>
 800855a:	682b      	ldr	r3, [r5, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d000      	beq.n	8008562 <_fstat_r+0x1e>
 8008560:	6023      	str	r3, [r4, #0]
 8008562:	bd70      	pop	{r4, r5, r6, pc}
 8008564:	20000430 	.word	0x20000430

08008568 <_isatty_r>:
 8008568:	2300      	movs	r3, #0
 800856a:	b570      	push	{r4, r5, r6, lr}
 800856c:	4d06      	ldr	r5, [pc, #24]	@ (8008588 <_isatty_r+0x20>)
 800856e:	0004      	movs	r4, r0
 8008570:	0008      	movs	r0, r1
 8008572:	602b      	str	r3, [r5, #0]
 8008574:	f7fa fce1 	bl	8002f3a <_isatty>
 8008578:	1c43      	adds	r3, r0, #1
 800857a:	d103      	bne.n	8008584 <_isatty_r+0x1c>
 800857c:	682b      	ldr	r3, [r5, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d000      	beq.n	8008584 <_isatty_r+0x1c>
 8008582:	6023      	str	r3, [r4, #0]
 8008584:	bd70      	pop	{r4, r5, r6, pc}
 8008586:	46c0      	nop			@ (mov r8, r8)
 8008588:	20000430 	.word	0x20000430

0800858c <log>:
 800858c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858e:	0004      	movs	r4, r0
 8008590:	000d      	movs	r5, r1
 8008592:	f000 f8ad 	bl	80086f0 <__ieee754_log>
 8008596:	0022      	movs	r2, r4
 8008598:	0006      	movs	r6, r0
 800859a:	000f      	movs	r7, r1
 800859c:	002b      	movs	r3, r5
 800859e:	0020      	movs	r0, r4
 80085a0:	0029      	movs	r1, r5
 80085a2:	f7f9 ff5d 	bl	8002460 <__aeabi_dcmpun>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d115      	bne.n	80085d6 <log+0x4a>
 80085aa:	2200      	movs	r2, #0
 80085ac:	2300      	movs	r3, #0
 80085ae:	0020      	movs	r0, r4
 80085b0:	0029      	movs	r1, r5
 80085b2:	f7f7 ff65 	bl	8000480 <__aeabi_dcmpgt>
 80085b6:	2800      	cmp	r0, #0
 80085b8:	d10d      	bne.n	80085d6 <log+0x4a>
 80085ba:	2200      	movs	r2, #0
 80085bc:	2300      	movs	r3, #0
 80085be:	0020      	movs	r0, r4
 80085c0:	0029      	movs	r1, r5
 80085c2:	f7f7 ff43 	bl	800044c <__aeabi_dcmpeq>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d008      	beq.n	80085dc <log+0x50>
 80085ca:	f7fd fedb 	bl	8006384 <__errno>
 80085ce:	2322      	movs	r3, #34	@ 0x22
 80085d0:	2600      	movs	r6, #0
 80085d2:	4f07      	ldr	r7, [pc, #28]	@ (80085f0 <log+0x64>)
 80085d4:	6003      	str	r3, [r0, #0]
 80085d6:	0030      	movs	r0, r6
 80085d8:	0039      	movs	r1, r7
 80085da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085dc:	f7fd fed2 	bl	8006384 <__errno>
 80085e0:	2321      	movs	r3, #33	@ 0x21
 80085e2:	6003      	str	r3, [r0, #0]
 80085e4:	4803      	ldr	r0, [pc, #12]	@ (80085f4 <log+0x68>)
 80085e6:	f000 f87d 	bl	80086e4 <nan>
 80085ea:	0006      	movs	r6, r0
 80085ec:	000f      	movs	r7, r1
 80085ee:	e7f2      	b.n	80085d6 <log+0x4a>
 80085f0:	fff00000 	.word	0xfff00000
 80085f4:	080099d0 	.word	0x080099d0

080085f8 <pow>:
 80085f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085fa:	0014      	movs	r4, r2
 80085fc:	001d      	movs	r5, r3
 80085fe:	9000      	str	r0, [sp, #0]
 8008600:	9101      	str	r1, [sp, #4]
 8008602:	f000 fa27 	bl	8008a54 <__ieee754_pow>
 8008606:	0022      	movs	r2, r4
 8008608:	0006      	movs	r6, r0
 800860a:	000f      	movs	r7, r1
 800860c:	002b      	movs	r3, r5
 800860e:	0020      	movs	r0, r4
 8008610:	0029      	movs	r1, r5
 8008612:	f7f9 ff25 	bl	8002460 <__aeabi_dcmpun>
 8008616:	2800      	cmp	r0, #0
 8008618:	d13f      	bne.n	800869a <pow+0xa2>
 800861a:	9800      	ldr	r0, [sp, #0]
 800861c:	9901      	ldr	r1, [sp, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	2300      	movs	r3, #0
 8008622:	f7f7 ff13 	bl	800044c <__aeabi_dcmpeq>
 8008626:	2800      	cmp	r0, #0
 8008628:	d019      	beq.n	800865e <pow+0x66>
 800862a:	2200      	movs	r2, #0
 800862c:	2300      	movs	r3, #0
 800862e:	0020      	movs	r0, r4
 8008630:	0029      	movs	r1, r5
 8008632:	f7f7 ff0b 	bl	800044c <__aeabi_dcmpeq>
 8008636:	2800      	cmp	r0, #0
 8008638:	d146      	bne.n	80086c8 <pow+0xd0>
 800863a:	0020      	movs	r0, r4
 800863c:	0029      	movs	r1, r5
 800863e:	f000 f849 	bl	80086d4 <finite>
 8008642:	2800      	cmp	r0, #0
 8008644:	d029      	beq.n	800869a <pow+0xa2>
 8008646:	2200      	movs	r2, #0
 8008648:	2300      	movs	r3, #0
 800864a:	0020      	movs	r0, r4
 800864c:	0029      	movs	r1, r5
 800864e:	f7f7 ff03 	bl	8000458 <__aeabi_dcmplt>
 8008652:	2800      	cmp	r0, #0
 8008654:	d021      	beq.n	800869a <pow+0xa2>
 8008656:	f7fd fe95 	bl	8006384 <__errno>
 800865a:	2322      	movs	r3, #34	@ 0x22
 800865c:	e01c      	b.n	8008698 <pow+0xa0>
 800865e:	0030      	movs	r0, r6
 8008660:	0039      	movs	r1, r7
 8008662:	f000 f837 	bl	80086d4 <finite>
 8008666:	2800      	cmp	r0, #0
 8008668:	d11b      	bne.n	80086a2 <pow+0xaa>
 800866a:	9800      	ldr	r0, [sp, #0]
 800866c:	9901      	ldr	r1, [sp, #4]
 800866e:	f000 f831 	bl	80086d4 <finite>
 8008672:	2800      	cmp	r0, #0
 8008674:	d015      	beq.n	80086a2 <pow+0xaa>
 8008676:	0020      	movs	r0, r4
 8008678:	0029      	movs	r1, r5
 800867a:	f000 f82b 	bl	80086d4 <finite>
 800867e:	2800      	cmp	r0, #0
 8008680:	d00f      	beq.n	80086a2 <pow+0xaa>
 8008682:	0032      	movs	r2, r6
 8008684:	003b      	movs	r3, r7
 8008686:	0030      	movs	r0, r6
 8008688:	0039      	movs	r1, r7
 800868a:	f7f9 fee9 	bl	8002460 <__aeabi_dcmpun>
 800868e:	2800      	cmp	r0, #0
 8008690:	d0e1      	beq.n	8008656 <pow+0x5e>
 8008692:	f7fd fe77 	bl	8006384 <__errno>
 8008696:	2321      	movs	r3, #33	@ 0x21
 8008698:	6003      	str	r3, [r0, #0]
 800869a:	0030      	movs	r0, r6
 800869c:	0039      	movs	r1, r7
 800869e:	b003      	add	sp, #12
 80086a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086a2:	2200      	movs	r2, #0
 80086a4:	2300      	movs	r3, #0
 80086a6:	0030      	movs	r0, r6
 80086a8:	0039      	movs	r1, r7
 80086aa:	f7f7 fecf 	bl	800044c <__aeabi_dcmpeq>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d0f3      	beq.n	800869a <pow+0xa2>
 80086b2:	9800      	ldr	r0, [sp, #0]
 80086b4:	9901      	ldr	r1, [sp, #4]
 80086b6:	f000 f80d 	bl	80086d4 <finite>
 80086ba:	2800      	cmp	r0, #0
 80086bc:	d0ed      	beq.n	800869a <pow+0xa2>
 80086be:	0020      	movs	r0, r4
 80086c0:	0029      	movs	r1, r5
 80086c2:	f000 f807 	bl	80086d4 <finite>
 80086c6:	e7c4      	b.n	8008652 <pow+0x5a>
 80086c8:	2600      	movs	r6, #0
 80086ca:	4f01      	ldr	r7, [pc, #4]	@ (80086d0 <pow+0xd8>)
 80086cc:	e7e5      	b.n	800869a <pow+0xa2>
 80086ce:	46c0      	nop			@ (mov r8, r8)
 80086d0:	3ff00000 	.word	0x3ff00000

080086d4 <finite>:
 80086d4:	4b02      	ldr	r3, [pc, #8]	@ (80086e0 <finite+0xc>)
 80086d6:	0048      	lsls	r0, r1, #1
 80086d8:	0840      	lsrs	r0, r0, #1
 80086da:	18c0      	adds	r0, r0, r3
 80086dc:	0fc0      	lsrs	r0, r0, #31
 80086de:	4770      	bx	lr
 80086e0:	80100000 	.word	0x80100000

080086e4 <nan>:
 80086e4:	2000      	movs	r0, #0
 80086e6:	4901      	ldr	r1, [pc, #4]	@ (80086ec <nan+0x8>)
 80086e8:	4770      	bx	lr
 80086ea:	46c0      	nop			@ (mov r8, r8)
 80086ec:	7ff80000 	.word	0x7ff80000

080086f0 <__ieee754_log>:
 80086f0:	2380      	movs	r3, #128	@ 0x80
 80086f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086f4:	035b      	lsls	r3, r3, #13
 80086f6:	000e      	movs	r6, r1
 80086f8:	b08d      	sub	sp, #52	@ 0x34
 80086fa:	4299      	cmp	r1, r3
 80086fc:	da23      	bge.n	8008746 <__ieee754_log+0x56>
 80086fe:	004b      	lsls	r3, r1, #1
 8008700:	085b      	lsrs	r3, r3, #1
 8008702:	4303      	orrs	r3, r0
 8008704:	d107      	bne.n	8008716 <__ieee754_log+0x26>
 8008706:	2200      	movs	r2, #0
 8008708:	2300      	movs	r3, #0
 800870a:	2000      	movs	r0, #0
 800870c:	49b4      	ldr	r1, [pc, #720]	@ (80089e0 <__ieee754_log+0x2f0>)
 800870e:	f7f8 fb7d 	bl	8000e0c <__aeabi_ddiv>
 8008712:	b00d      	add	sp, #52	@ 0x34
 8008714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008716:	2900      	cmp	r1, #0
 8008718:	da06      	bge.n	8008728 <__ieee754_log+0x38>
 800871a:	0002      	movs	r2, r0
 800871c:	000b      	movs	r3, r1
 800871e:	f7f9 fa95 	bl	8001c4c <__aeabi_dsub>
 8008722:	2200      	movs	r2, #0
 8008724:	2300      	movs	r3, #0
 8008726:	e7f2      	b.n	800870e <__ieee754_log+0x1e>
 8008728:	4bae      	ldr	r3, [pc, #696]	@ (80089e4 <__ieee754_log+0x2f4>)
 800872a:	2200      	movs	r2, #0
 800872c:	f7f8 ffa8 	bl	8001680 <__aeabi_dmul>
 8008730:	2336      	movs	r3, #54	@ 0x36
 8008732:	000e      	movs	r6, r1
 8008734:	425b      	negs	r3, r3
 8008736:	4aac      	ldr	r2, [pc, #688]	@ (80089e8 <__ieee754_log+0x2f8>)
 8008738:	4296      	cmp	r6, r2
 800873a:	dd06      	ble.n	800874a <__ieee754_log+0x5a>
 800873c:	0002      	movs	r2, r0
 800873e:	000b      	movs	r3, r1
 8008740:	f7f7 ff9e 	bl	8000680 <__aeabi_dadd>
 8008744:	e7e5      	b.n	8008712 <__ieee754_log+0x22>
 8008746:	2300      	movs	r3, #0
 8008748:	e7f5      	b.n	8008736 <__ieee754_log+0x46>
 800874a:	4ca8      	ldr	r4, [pc, #672]	@ (80089ec <__ieee754_log+0x2fc>)
 800874c:	1532      	asrs	r2, r6, #20
 800874e:	1912      	adds	r2, r2, r4
 8008750:	0336      	lsls	r6, r6, #12
 8008752:	4ca7      	ldr	r4, [pc, #668]	@ (80089f0 <__ieee754_log+0x300>)
 8008754:	18d2      	adds	r2, r2, r3
 8008756:	0b33      	lsrs	r3, r6, #12
 8008758:	9302      	str	r3, [sp, #8]
 800875a:	191b      	adds	r3, r3, r4
 800875c:	2480      	movs	r4, #128	@ 0x80
 800875e:	0364      	lsls	r4, r4, #13
 8008760:	4023      	ands	r3, r4
 8008762:	4ca4      	ldr	r4, [pc, #656]	@ (80089f4 <__ieee754_log+0x304>)
 8008764:	9d02      	ldr	r5, [sp, #8]
 8008766:	405c      	eors	r4, r3
 8008768:	151b      	asrs	r3, r3, #20
 800876a:	189b      	adds	r3, r3, r2
 800876c:	4325      	orrs	r5, r4
 800876e:	2200      	movs	r2, #0
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	0029      	movs	r1, r5
 8008774:	4b9f      	ldr	r3, [pc, #636]	@ (80089f4 <__ieee754_log+0x304>)
 8008776:	f7f9 fa69 	bl	8001c4c <__aeabi_dsub>
 800877a:	9b02      	ldr	r3, [sp, #8]
 800877c:	0006      	movs	r6, r0
 800877e:	3302      	adds	r3, #2
 8008780:	031b      	lsls	r3, r3, #12
 8008782:	000f      	movs	r7, r1
 8008784:	2200      	movs	r2, #0
 8008786:	0b1b      	lsrs	r3, r3, #12
 8008788:	2b02      	cmp	r3, #2
 800878a:	dc64      	bgt.n	8008856 <__ieee754_log+0x166>
 800878c:	2300      	movs	r3, #0
 800878e:	f7f7 fe5d 	bl	800044c <__aeabi_dcmpeq>
 8008792:	2800      	cmp	r0, #0
 8008794:	d019      	beq.n	80087ca <__ieee754_log+0xda>
 8008796:	9b00      	ldr	r3, [sp, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d100      	bne.n	800879e <__ieee754_log+0xae>
 800879c:	e11c      	b.n	80089d8 <__ieee754_log+0x2e8>
 800879e:	0018      	movs	r0, r3
 80087a0:	f7f9 febc 	bl	800251c <__aeabi_i2d>
 80087a4:	4a94      	ldr	r2, [pc, #592]	@ (80089f8 <__ieee754_log+0x308>)
 80087a6:	4b95      	ldr	r3, [pc, #596]	@ (80089fc <__ieee754_log+0x30c>)
 80087a8:	0004      	movs	r4, r0
 80087aa:	000d      	movs	r5, r1
 80087ac:	f7f8 ff68 	bl	8001680 <__aeabi_dmul>
 80087b0:	4a93      	ldr	r2, [pc, #588]	@ (8008a00 <__ieee754_log+0x310>)
 80087b2:	0006      	movs	r6, r0
 80087b4:	000f      	movs	r7, r1
 80087b6:	4b93      	ldr	r3, [pc, #588]	@ (8008a04 <__ieee754_log+0x314>)
 80087b8:	0020      	movs	r0, r4
 80087ba:	0029      	movs	r1, r5
 80087bc:	f7f8 ff60 	bl	8001680 <__aeabi_dmul>
 80087c0:	0002      	movs	r2, r0
 80087c2:	000b      	movs	r3, r1
 80087c4:	0030      	movs	r0, r6
 80087c6:	0039      	movs	r1, r7
 80087c8:	e7ba      	b.n	8008740 <__ieee754_log+0x50>
 80087ca:	4a8f      	ldr	r2, [pc, #572]	@ (8008a08 <__ieee754_log+0x318>)
 80087cc:	4b8f      	ldr	r3, [pc, #572]	@ (8008a0c <__ieee754_log+0x31c>)
 80087ce:	0030      	movs	r0, r6
 80087d0:	0039      	movs	r1, r7
 80087d2:	f7f8 ff55 	bl	8001680 <__aeabi_dmul>
 80087d6:	0002      	movs	r2, r0
 80087d8:	000b      	movs	r3, r1
 80087da:	2000      	movs	r0, #0
 80087dc:	498c      	ldr	r1, [pc, #560]	@ (8008a10 <__ieee754_log+0x320>)
 80087de:	f7f9 fa35 	bl	8001c4c <__aeabi_dsub>
 80087e2:	0032      	movs	r2, r6
 80087e4:	0004      	movs	r4, r0
 80087e6:	000d      	movs	r5, r1
 80087e8:	003b      	movs	r3, r7
 80087ea:	0030      	movs	r0, r6
 80087ec:	0039      	movs	r1, r7
 80087ee:	f7f8 ff47 	bl	8001680 <__aeabi_dmul>
 80087f2:	000b      	movs	r3, r1
 80087f4:	0002      	movs	r2, r0
 80087f6:	0029      	movs	r1, r5
 80087f8:	0020      	movs	r0, r4
 80087fa:	f7f8 ff41 	bl	8001680 <__aeabi_dmul>
 80087fe:	9b00      	ldr	r3, [sp, #0]
 8008800:	9002      	str	r0, [sp, #8]
 8008802:	9103      	str	r1, [sp, #12]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d106      	bne.n	8008816 <__ieee754_log+0x126>
 8008808:	0002      	movs	r2, r0
 800880a:	000b      	movs	r3, r1
 800880c:	0030      	movs	r0, r6
 800880e:	0039      	movs	r1, r7
 8008810:	f7f9 fa1c 	bl	8001c4c <__aeabi_dsub>
 8008814:	e77d      	b.n	8008712 <__ieee754_log+0x22>
 8008816:	9800      	ldr	r0, [sp, #0]
 8008818:	f7f9 fe80 	bl	800251c <__aeabi_i2d>
 800881c:	4a76      	ldr	r2, [pc, #472]	@ (80089f8 <__ieee754_log+0x308>)
 800881e:	4b77      	ldr	r3, [pc, #476]	@ (80089fc <__ieee754_log+0x30c>)
 8008820:	0004      	movs	r4, r0
 8008822:	000d      	movs	r5, r1
 8008824:	f7f8 ff2c 	bl	8001680 <__aeabi_dmul>
 8008828:	4a75      	ldr	r2, [pc, #468]	@ (8008a00 <__ieee754_log+0x310>)
 800882a:	9000      	str	r0, [sp, #0]
 800882c:	9101      	str	r1, [sp, #4]
 800882e:	4b75      	ldr	r3, [pc, #468]	@ (8008a04 <__ieee754_log+0x314>)
 8008830:	0020      	movs	r0, r4
 8008832:	0029      	movs	r1, r5
 8008834:	f7f8 ff24 	bl	8001680 <__aeabi_dmul>
 8008838:	0002      	movs	r2, r0
 800883a:	000b      	movs	r3, r1
 800883c:	9802      	ldr	r0, [sp, #8]
 800883e:	9903      	ldr	r1, [sp, #12]
 8008840:	f7f9 fa04 	bl	8001c4c <__aeabi_dsub>
 8008844:	0032      	movs	r2, r6
 8008846:	003b      	movs	r3, r7
 8008848:	f7f9 fa00 	bl	8001c4c <__aeabi_dsub>
 800884c:	0002      	movs	r2, r0
 800884e:	000b      	movs	r3, r1
 8008850:	9800      	ldr	r0, [sp, #0]
 8008852:	9901      	ldr	r1, [sp, #4]
 8008854:	e7dc      	b.n	8008810 <__ieee754_log+0x120>
 8008856:	2380      	movs	r3, #128	@ 0x80
 8008858:	05db      	lsls	r3, r3, #23
 800885a:	f7f7 ff11 	bl	8000680 <__aeabi_dadd>
 800885e:	0002      	movs	r2, r0
 8008860:	000b      	movs	r3, r1
 8008862:	0030      	movs	r0, r6
 8008864:	0039      	movs	r1, r7
 8008866:	f7f8 fad1 	bl	8000e0c <__aeabi_ddiv>
 800886a:	9004      	str	r0, [sp, #16]
 800886c:	9105      	str	r1, [sp, #20]
 800886e:	9800      	ldr	r0, [sp, #0]
 8008870:	f7f9 fe54 	bl	800251c <__aeabi_i2d>
 8008874:	9a04      	ldr	r2, [sp, #16]
 8008876:	9b05      	ldr	r3, [sp, #20]
 8008878:	9006      	str	r0, [sp, #24]
 800887a:	9107      	str	r1, [sp, #28]
 800887c:	0010      	movs	r0, r2
 800887e:	0019      	movs	r1, r3
 8008880:	f7f8 fefe 	bl	8001680 <__aeabi_dmul>
 8008884:	4a63      	ldr	r2, [pc, #396]	@ (8008a14 <__ieee754_log+0x324>)
 8008886:	9b02      	ldr	r3, [sp, #8]
 8008888:	4694      	mov	ip, r2
 800888a:	4463      	add	r3, ip
 800888c:	0002      	movs	r2, r0
 800888e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008890:	000b      	movs	r3, r1
 8008892:	9008      	str	r0, [sp, #32]
 8008894:	9109      	str	r1, [sp, #36]	@ 0x24
 8008896:	f7f8 fef3 	bl	8001680 <__aeabi_dmul>
 800889a:	0004      	movs	r4, r0
 800889c:	000d      	movs	r5, r1
 800889e:	4a5e      	ldr	r2, [pc, #376]	@ (8008a18 <__ieee754_log+0x328>)
 80088a0:	4b5e      	ldr	r3, [pc, #376]	@ (8008a1c <__ieee754_log+0x32c>)
 80088a2:	f7f8 feed 	bl	8001680 <__aeabi_dmul>
 80088a6:	4a5e      	ldr	r2, [pc, #376]	@ (8008a20 <__ieee754_log+0x330>)
 80088a8:	4b5e      	ldr	r3, [pc, #376]	@ (8008a24 <__ieee754_log+0x334>)
 80088aa:	f7f7 fee9 	bl	8000680 <__aeabi_dadd>
 80088ae:	0022      	movs	r2, r4
 80088b0:	002b      	movs	r3, r5
 80088b2:	f7f8 fee5 	bl	8001680 <__aeabi_dmul>
 80088b6:	4a5c      	ldr	r2, [pc, #368]	@ (8008a28 <__ieee754_log+0x338>)
 80088b8:	4b5c      	ldr	r3, [pc, #368]	@ (8008a2c <__ieee754_log+0x33c>)
 80088ba:	f7f7 fee1 	bl	8000680 <__aeabi_dadd>
 80088be:	0022      	movs	r2, r4
 80088c0:	002b      	movs	r3, r5
 80088c2:	f7f8 fedd 	bl	8001680 <__aeabi_dmul>
 80088c6:	4a5a      	ldr	r2, [pc, #360]	@ (8008a30 <__ieee754_log+0x340>)
 80088c8:	4b5a      	ldr	r3, [pc, #360]	@ (8008a34 <__ieee754_log+0x344>)
 80088ca:	f7f7 fed9 	bl	8000680 <__aeabi_dadd>
 80088ce:	9a08      	ldr	r2, [sp, #32]
 80088d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088d2:	f7f8 fed5 	bl	8001680 <__aeabi_dmul>
 80088d6:	4a58      	ldr	r2, [pc, #352]	@ (8008a38 <__ieee754_log+0x348>)
 80088d8:	9008      	str	r0, [sp, #32]
 80088da:	9109      	str	r1, [sp, #36]	@ 0x24
 80088dc:	4b57      	ldr	r3, [pc, #348]	@ (8008a3c <__ieee754_log+0x34c>)
 80088de:	0020      	movs	r0, r4
 80088e0:	0029      	movs	r1, r5
 80088e2:	f7f8 fecd 	bl	8001680 <__aeabi_dmul>
 80088e6:	4a56      	ldr	r2, [pc, #344]	@ (8008a40 <__ieee754_log+0x350>)
 80088e8:	4b56      	ldr	r3, [pc, #344]	@ (8008a44 <__ieee754_log+0x354>)
 80088ea:	f7f7 fec9 	bl	8000680 <__aeabi_dadd>
 80088ee:	0022      	movs	r2, r4
 80088f0:	002b      	movs	r3, r5
 80088f2:	f7f8 fec5 	bl	8001680 <__aeabi_dmul>
 80088f6:	4a54      	ldr	r2, [pc, #336]	@ (8008a48 <__ieee754_log+0x358>)
 80088f8:	4b54      	ldr	r3, [pc, #336]	@ (8008a4c <__ieee754_log+0x35c>)
 80088fa:	f7f7 fec1 	bl	8000680 <__aeabi_dadd>
 80088fe:	0022      	movs	r2, r4
 8008900:	002b      	movs	r3, r5
 8008902:	f7f8 febd 	bl	8001680 <__aeabi_dmul>
 8008906:	0002      	movs	r2, r0
 8008908:	000b      	movs	r3, r1
 800890a:	9808      	ldr	r0, [sp, #32]
 800890c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800890e:	f7f7 feb7 	bl	8000680 <__aeabi_dadd>
 8008912:	9a02      	ldr	r2, [sp, #8]
 8008914:	4b4e      	ldr	r3, [pc, #312]	@ (8008a50 <__ieee754_log+0x360>)
 8008916:	0004      	movs	r4, r0
 8008918:	1a9b      	subs	r3, r3, r2
 800891a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800891c:	000d      	movs	r5, r1
 800891e:	4313      	orrs	r3, r2
 8008920:	2b00      	cmp	r3, #0
 8008922:	dd34      	ble.n	800898e <__ieee754_log+0x29e>
 8008924:	2200      	movs	r2, #0
 8008926:	4b3a      	ldr	r3, [pc, #232]	@ (8008a10 <__ieee754_log+0x320>)
 8008928:	0030      	movs	r0, r6
 800892a:	0039      	movs	r1, r7
 800892c:	f7f8 fea8 	bl	8001680 <__aeabi_dmul>
 8008930:	0032      	movs	r2, r6
 8008932:	003b      	movs	r3, r7
 8008934:	f7f8 fea4 	bl	8001680 <__aeabi_dmul>
 8008938:	0002      	movs	r2, r0
 800893a:	000b      	movs	r3, r1
 800893c:	9002      	str	r0, [sp, #8]
 800893e:	9103      	str	r1, [sp, #12]
 8008940:	0020      	movs	r0, r4
 8008942:	0029      	movs	r1, r5
 8008944:	f7f7 fe9c 	bl	8000680 <__aeabi_dadd>
 8008948:	9a04      	ldr	r2, [sp, #16]
 800894a:	9b05      	ldr	r3, [sp, #20]
 800894c:	f7f8 fe98 	bl	8001680 <__aeabi_dmul>
 8008950:	9b00      	ldr	r3, [sp, #0]
 8008952:	0004      	movs	r4, r0
 8008954:	000d      	movs	r5, r1
 8008956:	2b00      	cmp	r3, #0
 8008958:	d106      	bne.n	8008968 <__ieee754_log+0x278>
 800895a:	0002      	movs	r2, r0
 800895c:	000b      	movs	r3, r1
 800895e:	9802      	ldr	r0, [sp, #8]
 8008960:	9903      	ldr	r1, [sp, #12]
 8008962:	f7f9 f973 	bl	8001c4c <__aeabi_dsub>
 8008966:	e74f      	b.n	8008808 <__ieee754_log+0x118>
 8008968:	4a23      	ldr	r2, [pc, #140]	@ (80089f8 <__ieee754_log+0x308>)
 800896a:	4b24      	ldr	r3, [pc, #144]	@ (80089fc <__ieee754_log+0x30c>)
 800896c:	9806      	ldr	r0, [sp, #24]
 800896e:	9907      	ldr	r1, [sp, #28]
 8008970:	f7f8 fe86 	bl	8001680 <__aeabi_dmul>
 8008974:	4a22      	ldr	r2, [pc, #136]	@ (8008a00 <__ieee754_log+0x310>)
 8008976:	9000      	str	r0, [sp, #0]
 8008978:	9101      	str	r1, [sp, #4]
 800897a:	9806      	ldr	r0, [sp, #24]
 800897c:	9907      	ldr	r1, [sp, #28]
 800897e:	4b21      	ldr	r3, [pc, #132]	@ (8008a04 <__ieee754_log+0x314>)
 8008980:	f7f8 fe7e 	bl	8001680 <__aeabi_dmul>
 8008984:	0022      	movs	r2, r4
 8008986:	002b      	movs	r3, r5
 8008988:	f7f7 fe7a 	bl	8000680 <__aeabi_dadd>
 800898c:	e754      	b.n	8008838 <__ieee754_log+0x148>
 800898e:	0002      	movs	r2, r0
 8008990:	000b      	movs	r3, r1
 8008992:	0030      	movs	r0, r6
 8008994:	0039      	movs	r1, r7
 8008996:	f7f9 f959 	bl	8001c4c <__aeabi_dsub>
 800899a:	9a04      	ldr	r2, [sp, #16]
 800899c:	9b05      	ldr	r3, [sp, #20]
 800899e:	f7f8 fe6f 	bl	8001680 <__aeabi_dmul>
 80089a2:	9b00      	ldr	r3, [sp, #0]
 80089a4:	0004      	movs	r4, r0
 80089a6:	000d      	movs	r5, r1
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d102      	bne.n	80089b2 <__ieee754_log+0x2c2>
 80089ac:	0002      	movs	r2, r0
 80089ae:	000b      	movs	r3, r1
 80089b0:	e72c      	b.n	800880c <__ieee754_log+0x11c>
 80089b2:	4a11      	ldr	r2, [pc, #68]	@ (80089f8 <__ieee754_log+0x308>)
 80089b4:	4b11      	ldr	r3, [pc, #68]	@ (80089fc <__ieee754_log+0x30c>)
 80089b6:	9806      	ldr	r0, [sp, #24]
 80089b8:	9907      	ldr	r1, [sp, #28]
 80089ba:	f7f8 fe61 	bl	8001680 <__aeabi_dmul>
 80089be:	4a10      	ldr	r2, [pc, #64]	@ (8008a00 <__ieee754_log+0x310>)
 80089c0:	9000      	str	r0, [sp, #0]
 80089c2:	9101      	str	r1, [sp, #4]
 80089c4:	9806      	ldr	r0, [sp, #24]
 80089c6:	9907      	ldr	r1, [sp, #28]
 80089c8:	4b0e      	ldr	r3, [pc, #56]	@ (8008a04 <__ieee754_log+0x314>)
 80089ca:	f7f8 fe59 	bl	8001680 <__aeabi_dmul>
 80089ce:	0002      	movs	r2, r0
 80089d0:	000b      	movs	r3, r1
 80089d2:	0020      	movs	r0, r4
 80089d4:	0029      	movs	r1, r5
 80089d6:	e733      	b.n	8008840 <__ieee754_log+0x150>
 80089d8:	2000      	movs	r0, #0
 80089da:	2100      	movs	r1, #0
 80089dc:	e699      	b.n	8008712 <__ieee754_log+0x22>
 80089de:	46c0      	nop			@ (mov r8, r8)
 80089e0:	c3500000 	.word	0xc3500000
 80089e4:	43500000 	.word	0x43500000
 80089e8:	7fefffff 	.word	0x7fefffff
 80089ec:	fffffc01 	.word	0xfffffc01
 80089f0:	00095f64 	.word	0x00095f64
 80089f4:	3ff00000 	.word	0x3ff00000
 80089f8:	fee00000 	.word	0xfee00000
 80089fc:	3fe62e42 	.word	0x3fe62e42
 8008a00:	35793c76 	.word	0x35793c76
 8008a04:	3dea39ef 	.word	0x3dea39ef
 8008a08:	55555555 	.word	0x55555555
 8008a0c:	3fd55555 	.word	0x3fd55555
 8008a10:	3fe00000 	.word	0x3fe00000
 8008a14:	fff9eb86 	.word	0xfff9eb86
 8008a18:	df3e5244 	.word	0xdf3e5244
 8008a1c:	3fc2f112 	.word	0x3fc2f112
 8008a20:	96cb03de 	.word	0x96cb03de
 8008a24:	3fc74664 	.word	0x3fc74664
 8008a28:	94229359 	.word	0x94229359
 8008a2c:	3fd24924 	.word	0x3fd24924
 8008a30:	55555593 	.word	0x55555593
 8008a34:	3fe55555 	.word	0x3fe55555
 8008a38:	d078c69f 	.word	0xd078c69f
 8008a3c:	3fc39a09 	.word	0x3fc39a09
 8008a40:	1d8e78af 	.word	0x1d8e78af
 8008a44:	3fcc71c5 	.word	0x3fcc71c5
 8008a48:	9997fa04 	.word	0x9997fa04
 8008a4c:	3fd99999 	.word	0x3fd99999
 8008a50:	0006b851 	.word	0x0006b851

08008a54 <__ieee754_pow>:
 8008a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a56:	b095      	sub	sp, #84	@ 0x54
 8008a58:	9204      	str	r2, [sp, #16]
 8008a5a:	9305      	str	r3, [sp, #20]
 8008a5c:	9b04      	ldr	r3, [sp, #16]
 8008a5e:	9f05      	ldr	r7, [sp, #20]
 8008a60:	001a      	movs	r2, r3
 8008a62:	007d      	lsls	r5, r7, #1
 8008a64:	086d      	lsrs	r5, r5, #1
 8008a66:	9002      	str	r0, [sp, #8]
 8008a68:	9103      	str	r1, [sp, #12]
 8008a6a:	432a      	orrs	r2, r5
 8008a6c:	d11a      	bne.n	8008aa4 <__ieee754_pow+0x50>
 8008a6e:	2180      	movs	r1, #128	@ 0x80
 8008a70:	9a02      	ldr	r2, [sp, #8]
 8008a72:	9803      	ldr	r0, [sp, #12]
 8008a74:	0309      	lsls	r1, r1, #12
 8008a76:	4048      	eors	r0, r1
 8008a78:	0003      	movs	r3, r0
 8008a7a:	1892      	adds	r2, r2, r2
 8008a7c:	415b      	adcs	r3, r3
 8008a7e:	4996      	ldr	r1, [pc, #600]	@ (8008cd8 <__ieee754_pow+0x284>)
 8008a80:	428b      	cmp	r3, r1
 8008a82:	d806      	bhi.n	8008a92 <__ieee754_pow+0x3e>
 8008a84:	d001      	beq.n	8008a8a <__ieee754_pow+0x36>
 8008a86:	f000 fcce 	bl	8009426 <__ieee754_pow+0x9d2>
 8008a8a:	2a00      	cmp	r2, #0
 8008a8c:	d101      	bne.n	8008a92 <__ieee754_pow+0x3e>
 8008a8e:	f000 fcca 	bl	8009426 <__ieee754_pow+0x9d2>
 8008a92:	9a04      	ldr	r2, [sp, #16]
 8008a94:	9b05      	ldr	r3, [sp, #20]
 8008a96:	9802      	ldr	r0, [sp, #8]
 8008a98:	9903      	ldr	r1, [sp, #12]
 8008a9a:	f7f7 fdf1 	bl	8000680 <__aeabi_dadd>
 8008a9e:	9000      	str	r0, [sp, #0]
 8008aa0:	9101      	str	r1, [sp, #4]
 8008aa2:	e08e      	b.n	8008bc2 <__ieee754_pow+0x16e>
 8008aa4:	9a03      	ldr	r2, [sp, #12]
 8008aa6:	9206      	str	r2, [sp, #24]
 8008aa8:	9a02      	ldr	r2, [sp, #8]
 8008aaa:	920a      	str	r2, [sp, #40]	@ 0x28
 8008aac:	9a03      	ldr	r2, [sp, #12]
 8008aae:	0054      	lsls	r4, r2, #1
 8008ab0:	4a8a      	ldr	r2, [pc, #552]	@ (8008cdc <__ieee754_pow+0x288>)
 8008ab2:	0864      	lsrs	r4, r4, #1
 8008ab4:	4294      	cmp	r4, r2
 8008ab6:	d80e      	bhi.n	8008ad6 <__ieee754_pow+0x82>
 8008ab8:	d105      	bne.n	8008ac6 <__ieee754_pow+0x72>
 8008aba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008abc:	2a00      	cmp	r2, #0
 8008abe:	d1e8      	bne.n	8008a92 <__ieee754_pow+0x3e>
 8008ac0:	42a5      	cmp	r5, r4
 8008ac2:	d8e6      	bhi.n	8008a92 <__ieee754_pow+0x3e>
 8008ac4:	e002      	b.n	8008acc <__ieee754_pow+0x78>
 8008ac6:	4a85      	ldr	r2, [pc, #532]	@ (8008cdc <__ieee754_pow+0x288>)
 8008ac8:	4295      	cmp	r5, r2
 8008aca:	d804      	bhi.n	8008ad6 <__ieee754_pow+0x82>
 8008acc:	4a83      	ldr	r2, [pc, #524]	@ (8008cdc <__ieee754_pow+0x288>)
 8008ace:	4295      	cmp	r5, r2
 8008ad0:	d10c      	bne.n	8008aec <__ieee754_pow+0x98>
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00a      	beq.n	8008aec <__ieee754_pow+0x98>
 8008ad6:	4a82      	ldr	r2, [pc, #520]	@ (8008ce0 <__ieee754_pow+0x28c>)
 8008ad8:	9b03      	ldr	r3, [sp, #12]
 8008ada:	189b      	adds	r3, r3, r2
 8008adc:	9a02      	ldr	r2, [sp, #8]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	d1d7      	bne.n	8008a92 <__ieee754_pow+0x3e>
 8008ae2:	2180      	movs	r1, #128	@ 0x80
 8008ae4:	9a04      	ldr	r2, [sp, #16]
 8008ae6:	9805      	ldr	r0, [sp, #20]
 8008ae8:	0309      	lsls	r1, r1, #12
 8008aea:	e7c4      	b.n	8008a76 <__ieee754_pow+0x22>
 8008aec:	2600      	movs	r6, #0
 8008aee:	9a06      	ldr	r2, [sp, #24]
 8008af0:	9408      	str	r4, [sp, #32]
 8008af2:	42b2      	cmp	r2, r6
 8008af4:	da42      	bge.n	8008b7c <__ieee754_pow+0x128>
 8008af6:	4a7b      	ldr	r2, [pc, #492]	@ (8008ce4 <__ieee754_pow+0x290>)
 8008af8:	4295      	cmp	r5, r2
 8008afa:	d83e      	bhi.n	8008b7a <__ieee754_pow+0x126>
 8008afc:	4a7a      	ldr	r2, [pc, #488]	@ (8008ce8 <__ieee754_pow+0x294>)
 8008afe:	4295      	cmp	r5, r2
 8008b00:	d910      	bls.n	8008b24 <__ieee754_pow+0xd0>
 8008b02:	497a      	ldr	r1, [pc, #488]	@ (8008cec <__ieee754_pow+0x298>)
 8008b04:	152a      	asrs	r2, r5, #20
 8008b06:	1852      	adds	r2, r2, r1
 8008b08:	2a14      	cmp	r2, #20
 8008b0a:	dd18      	ble.n	8008b3e <__ieee754_pow+0xea>
 8008b0c:	2134      	movs	r1, #52	@ 0x34
 8008b0e:	1a89      	subs	r1, r1, r2
 8008b10:	9a04      	ldr	r2, [sp, #16]
 8008b12:	40ca      	lsrs	r2, r1
 8008b14:	0010      	movs	r0, r2
 8008b16:	4088      	lsls	r0, r1
 8008b18:	4298      	cmp	r0, r3
 8008b1a:	d103      	bne.n	8008b24 <__ieee754_pow+0xd0>
 8008b1c:	2101      	movs	r1, #1
 8008b1e:	3602      	adds	r6, #2
 8008b20:	400a      	ands	r2, r1
 8008b22:	1ab6      	subs	r6, r6, r2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d15b      	bne.n	8008be0 <__ieee754_pow+0x18c>
 8008b28:	2380      	movs	r3, #128	@ 0x80
 8008b2a:	05db      	lsls	r3, r3, #23
 8008b2c:	429f      	cmp	r7, r3
 8008b2e:	d14c      	bne.n	8008bca <__ieee754_pow+0x176>
 8008b30:	9a02      	ldr	r2, [sp, #8]
 8008b32:	9b03      	ldr	r3, [sp, #12]
 8008b34:	0010      	movs	r0, r2
 8008b36:	0019      	movs	r1, r3
 8008b38:	f7f8 fda2 	bl	8001680 <__aeabi_dmul>
 8008b3c:	e7af      	b.n	8008a9e <__ieee754_pow+0x4a>
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d14e      	bne.n	8008be0 <__ieee754_pow+0x18c>
 8008b42:	3314      	adds	r3, #20
 8008b44:	1a9a      	subs	r2, r3, r2
 8008b46:	002b      	movs	r3, r5
 8008b48:	4113      	asrs	r3, r2
 8008b4a:	0019      	movs	r1, r3
 8008b4c:	4091      	lsls	r1, r2
 8008b4e:	42a9      	cmp	r1, r5
 8008b50:	d103      	bne.n	8008b5a <__ieee754_pow+0x106>
 8008b52:	2201      	movs	r2, #1
 8008b54:	2602      	movs	r6, #2
 8008b56:	4013      	ands	r3, r2
 8008b58:	1af6      	subs	r6, r6, r3
 8008b5a:	4b65      	ldr	r3, [pc, #404]	@ (8008cf0 <__ieee754_pow+0x29c>)
 8008b5c:	429d      	cmp	r5, r3
 8008b5e:	d1e3      	bne.n	8008b28 <__ieee754_pow+0xd4>
 8008b60:	9b02      	ldr	r3, [sp, #8]
 8008b62:	9c03      	ldr	r4, [sp, #12]
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	9401      	str	r4, [sp, #4]
 8008b68:	2f00      	cmp	r7, #0
 8008b6a:	da2a      	bge.n	8008bc2 <__ieee754_pow+0x16e>
 8008b6c:	001a      	movs	r2, r3
 8008b6e:	2000      	movs	r0, #0
 8008b70:	0023      	movs	r3, r4
 8008b72:	495f      	ldr	r1, [pc, #380]	@ (8008cf0 <__ieee754_pow+0x29c>)
 8008b74:	f7f8 f94a 	bl	8000e0c <__aeabi_ddiv>
 8008b78:	e791      	b.n	8008a9e <__ieee754_pow+0x4a>
 8008b7a:	2602      	movs	r6, #2
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d12f      	bne.n	8008be0 <__ieee754_pow+0x18c>
 8008b80:	4b56      	ldr	r3, [pc, #344]	@ (8008cdc <__ieee754_pow+0x288>)
 8008b82:	429d      	cmp	r5, r3
 8008b84:	d1e9      	bne.n	8008b5a <__ieee754_pow+0x106>
 8008b86:	4b56      	ldr	r3, [pc, #344]	@ (8008ce0 <__ieee754_pow+0x28c>)
 8008b88:	9a02      	ldr	r2, [sp, #8]
 8008b8a:	18e3      	adds	r3, r4, r3
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	d101      	bne.n	8008b94 <__ieee754_pow+0x140>
 8008b90:	f000 fc49 	bl	8009426 <__ieee754_pow+0x9d2>
 8008b94:	4b54      	ldr	r3, [pc, #336]	@ (8008ce8 <__ieee754_pow+0x294>)
 8008b96:	429c      	cmp	r4, r3
 8008b98:	d909      	bls.n	8008bae <__ieee754_pow+0x15a>
 8008b9a:	9b04      	ldr	r3, [sp, #16]
 8008b9c:	9c05      	ldr	r4, [sp, #20]
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	9401      	str	r4, [sp, #4]
 8008ba2:	2f00      	cmp	r7, #0
 8008ba4:	da0d      	bge.n	8008bc2 <__ieee754_pow+0x16e>
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	2400      	movs	r4, #0
 8008baa:	f000 fc3e 	bl	800942a <__ieee754_pow+0x9d6>
 8008bae:	2f00      	cmp	r7, #0
 8008bb0:	daf9      	bge.n	8008ba6 <__ieee754_pow+0x152>
 8008bb2:	2280      	movs	r2, #128	@ 0x80
 8008bb4:	0612      	lsls	r2, r2, #24
 8008bb6:	4694      	mov	ip, r2
 8008bb8:	9b04      	ldr	r3, [sp, #16]
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	9b05      	ldr	r3, [sp, #20]
 8008bbe:	4463      	add	r3, ip
 8008bc0:	9301      	str	r3, [sp, #4]
 8008bc2:	9800      	ldr	r0, [sp, #0]
 8008bc4:	9901      	ldr	r1, [sp, #4]
 8008bc6:	b015      	add	sp, #84	@ 0x54
 8008bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bca:	4b4a      	ldr	r3, [pc, #296]	@ (8008cf4 <__ieee754_pow+0x2a0>)
 8008bcc:	429f      	cmp	r7, r3
 8008bce:	d107      	bne.n	8008be0 <__ieee754_pow+0x18c>
 8008bd0:	9b06      	ldr	r3, [sp, #24]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	db04      	blt.n	8008be0 <__ieee754_pow+0x18c>
 8008bd6:	9802      	ldr	r0, [sp, #8]
 8008bd8:	9903      	ldr	r1, [sp, #12]
 8008bda:	f000 fcf1 	bl	80095c0 <__ieee754_sqrt>
 8008bde:	e75e      	b.n	8008a9e <__ieee754_pow+0x4a>
 8008be0:	9802      	ldr	r0, [sp, #8]
 8008be2:	9903      	ldr	r1, [sp, #12]
 8008be4:	f000 fc4e 	bl	8009484 <fabs>
 8008be8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bea:	9000      	str	r0, [sp, #0]
 8008bec:	9101      	str	r1, [sp, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d12c      	bne.n	8008c4c <__ieee754_pow+0x1f8>
 8008bf2:	9b03      	ldr	r3, [sp, #12]
 8008bf4:	4a3e      	ldr	r2, [pc, #248]	@ (8008cf0 <__ieee754_pow+0x29c>)
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	089b      	lsrs	r3, r3, #2
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d001      	beq.n	8008c02 <__ieee754_pow+0x1ae>
 8008bfe:	2c00      	cmp	r4, #0
 8008c00:	d124      	bne.n	8008c4c <__ieee754_pow+0x1f8>
 8008c02:	2f00      	cmp	r7, #0
 8008c04:	da07      	bge.n	8008c16 <__ieee754_pow+0x1c2>
 8008c06:	9a00      	ldr	r2, [sp, #0]
 8008c08:	9b01      	ldr	r3, [sp, #4]
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	4938      	ldr	r1, [pc, #224]	@ (8008cf0 <__ieee754_pow+0x29c>)
 8008c0e:	f7f8 f8fd 	bl	8000e0c <__aeabi_ddiv>
 8008c12:	9000      	str	r0, [sp, #0]
 8008c14:	9101      	str	r1, [sp, #4]
 8008c16:	9b06      	ldr	r3, [sp, #24]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	dad2      	bge.n	8008bc2 <__ieee754_pow+0x16e>
 8008c1c:	4b30      	ldr	r3, [pc, #192]	@ (8008ce0 <__ieee754_pow+0x28c>)
 8008c1e:	18e4      	adds	r4, r4, r3
 8008c20:	4334      	orrs	r4, r6
 8008c22:	d108      	bne.n	8008c36 <__ieee754_pow+0x1e2>
 8008c24:	9a00      	ldr	r2, [sp, #0]
 8008c26:	9b01      	ldr	r3, [sp, #4]
 8008c28:	0010      	movs	r0, r2
 8008c2a:	0019      	movs	r1, r3
 8008c2c:	f7f9 f80e 	bl	8001c4c <__aeabi_dsub>
 8008c30:	0002      	movs	r2, r0
 8008c32:	000b      	movs	r3, r1
 8008c34:	e79e      	b.n	8008b74 <__ieee754_pow+0x120>
 8008c36:	2e01      	cmp	r6, #1
 8008c38:	d1c3      	bne.n	8008bc2 <__ieee754_pow+0x16e>
 8008c3a:	9800      	ldr	r0, [sp, #0]
 8008c3c:	2180      	movs	r1, #128	@ 0x80
 8008c3e:	0002      	movs	r2, r0
 8008c40:	9801      	ldr	r0, [sp, #4]
 8008c42:	0609      	lsls	r1, r1, #24
 8008c44:	1843      	adds	r3, r0, r1
 8008c46:	9200      	str	r2, [sp, #0]
 8008c48:	9301      	str	r3, [sp, #4]
 8008c4a:	e7ba      	b.n	8008bc2 <__ieee754_pow+0x16e>
 8008c4c:	9b03      	ldr	r3, [sp, #12]
 8008c4e:	0fdb      	lsrs	r3, r3, #31
 8008c50:	3b01      	subs	r3, #1
 8008c52:	001a      	movs	r2, r3
 8008c54:	4332      	orrs	r2, r6
 8008c56:	d102      	bne.n	8008c5e <__ieee754_pow+0x20a>
 8008c58:	9a02      	ldr	r2, [sp, #8]
 8008c5a:	9b03      	ldr	r3, [sp, #12]
 8008c5c:	e7e4      	b.n	8008c28 <__ieee754_pow+0x1d4>
 8008c5e:	3e01      	subs	r6, #1
 8008c60:	2200      	movs	r2, #0
 8008c62:	431e      	orrs	r6, r3
 8008c64:	d013      	beq.n	8008c8e <__ieee754_pow+0x23a>
 8008c66:	4b22      	ldr	r3, [pc, #136]	@ (8008cf0 <__ieee754_pow+0x29c>)
 8008c68:	9206      	str	r2, [sp, #24]
 8008c6a:	9307      	str	r3, [sp, #28]
 8008c6c:	2384      	movs	r3, #132	@ 0x84
 8008c6e:	05db      	lsls	r3, r3, #23
 8008c70:	429d      	cmp	r5, r3
 8008c72:	d800      	bhi.n	8008c76 <__ieee754_pow+0x222>
 8008c74:	e0fa      	b.n	8008e6c <__ieee754_pow+0x418>
 8008c76:	4b20      	ldr	r3, [pc, #128]	@ (8008cf8 <__ieee754_pow+0x2a4>)
 8008c78:	429d      	cmp	r5, r3
 8008c7a:	d910      	bls.n	8008c9e <__ieee754_pow+0x24a>
 8008c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ce8 <__ieee754_pow+0x294>)
 8008c7e:	429c      	cmp	r4, r3
 8008c80:	d807      	bhi.n	8008c92 <__ieee754_pow+0x23e>
 8008c82:	2f00      	cmp	r7, #0
 8008c84:	da07      	bge.n	8008c96 <__ieee754_pow+0x242>
 8008c86:	2000      	movs	r0, #0
 8008c88:	f000 fc92 	bl	80095b0 <__math_oflow>
 8008c8c:	e707      	b.n	8008a9e <__ieee754_pow+0x4a>
 8008c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8008cfc <__ieee754_pow+0x2a8>)
 8008c90:	e7ea      	b.n	8008c68 <__ieee754_pow+0x214>
 8008c92:	2f00      	cmp	r7, #0
 8008c94:	dcf7      	bgt.n	8008c86 <__ieee754_pow+0x232>
 8008c96:	2000      	movs	r0, #0
 8008c98:	f000 fc83 	bl	80095a2 <__math_uflow>
 8008c9c:	e6ff      	b.n	8008a9e <__ieee754_pow+0x4a>
 8008c9e:	4b18      	ldr	r3, [pc, #96]	@ (8008d00 <__ieee754_pow+0x2ac>)
 8008ca0:	429c      	cmp	r4, r3
 8008ca2:	d80a      	bhi.n	8008cba <__ieee754_pow+0x266>
 8008ca4:	9806      	ldr	r0, [sp, #24]
 8008ca6:	9907      	ldr	r1, [sp, #28]
 8008ca8:	2300      	movs	r3, #0
 8008caa:	2200      	movs	r2, #0
 8008cac:	f7f7 fbd4 	bl	8000458 <__aeabi_dcmplt>
 8008cb0:	1e43      	subs	r3, r0, #1
 8008cb2:	4198      	sbcs	r0, r3
 8008cb4:	2f00      	cmp	r7, #0
 8008cb6:	daef      	bge.n	8008c98 <__ieee754_pow+0x244>
 8008cb8:	e7e6      	b.n	8008c88 <__ieee754_pow+0x234>
 8008cba:	4b0d      	ldr	r3, [pc, #52]	@ (8008cf0 <__ieee754_pow+0x29c>)
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	429c      	cmp	r4, r3
 8008cc0:	d920      	bls.n	8008d04 <__ieee754_pow+0x2b0>
 8008cc2:	9806      	ldr	r0, [sp, #24]
 8008cc4:	9907      	ldr	r1, [sp, #28]
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	f7f7 fbc6 	bl	8000458 <__aeabi_dcmplt>
 8008ccc:	1e43      	subs	r3, r0, #1
 8008cce:	4198      	sbcs	r0, r3
 8008cd0:	2f00      	cmp	r7, #0
 8008cd2:	dcd9      	bgt.n	8008c88 <__ieee754_pow+0x234>
 8008cd4:	e7e0      	b.n	8008c98 <__ieee754_pow+0x244>
 8008cd6:	46c0      	nop			@ (mov r8, r8)
 8008cd8:	fff00000 	.word	0xfff00000
 8008cdc:	7ff00000 	.word	0x7ff00000
 8008ce0:	c0100000 	.word	0xc0100000
 8008ce4:	433fffff 	.word	0x433fffff
 8008ce8:	3fefffff 	.word	0x3fefffff
 8008cec:	fffffc01 	.word	0xfffffc01
 8008cf0:	3ff00000 	.word	0x3ff00000
 8008cf4:	3fe00000 	.word	0x3fe00000
 8008cf8:	43f00000 	.word	0x43f00000
 8008cfc:	bff00000 	.word	0xbff00000
 8008d00:	3feffffe 	.word	0x3feffffe
 8008d04:	9800      	ldr	r0, [sp, #0]
 8008d06:	9901      	ldr	r1, [sp, #4]
 8008d08:	4b4d      	ldr	r3, [pc, #308]	@ (8008e40 <__ieee754_pow+0x3ec>)
 8008d0a:	f7f8 ff9f 	bl	8001c4c <__aeabi_dsub>
 8008d0e:	22c0      	movs	r2, #192	@ 0xc0
 8008d10:	4b4c      	ldr	r3, [pc, #304]	@ (8008e44 <__ieee754_pow+0x3f0>)
 8008d12:	05d2      	lsls	r2, r2, #23
 8008d14:	0006      	movs	r6, r0
 8008d16:	000f      	movs	r7, r1
 8008d18:	f7f8 fcb2 	bl	8001680 <__aeabi_dmul>
 8008d1c:	4a4a      	ldr	r2, [pc, #296]	@ (8008e48 <__ieee754_pow+0x3f4>)
 8008d1e:	9002      	str	r0, [sp, #8]
 8008d20:	9103      	str	r1, [sp, #12]
 8008d22:	4b4a      	ldr	r3, [pc, #296]	@ (8008e4c <__ieee754_pow+0x3f8>)
 8008d24:	0030      	movs	r0, r6
 8008d26:	0039      	movs	r1, r7
 8008d28:	f7f8 fcaa 	bl	8001680 <__aeabi_dmul>
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	9000      	str	r0, [sp, #0]
 8008d30:	9101      	str	r1, [sp, #4]
 8008d32:	4b47      	ldr	r3, [pc, #284]	@ (8008e50 <__ieee754_pow+0x3fc>)
 8008d34:	0030      	movs	r0, r6
 8008d36:	0039      	movs	r1, r7
 8008d38:	f7f8 fca2 	bl	8001680 <__aeabi_dmul>
 8008d3c:	0002      	movs	r2, r0
 8008d3e:	000b      	movs	r3, r1
 8008d40:	4844      	ldr	r0, [pc, #272]	@ (8008e54 <__ieee754_pow+0x400>)
 8008d42:	4945      	ldr	r1, [pc, #276]	@ (8008e58 <__ieee754_pow+0x404>)
 8008d44:	f7f8 ff82 	bl	8001c4c <__aeabi_dsub>
 8008d48:	0032      	movs	r2, r6
 8008d4a:	003b      	movs	r3, r7
 8008d4c:	f7f8 fc98 	bl	8001680 <__aeabi_dmul>
 8008d50:	0002      	movs	r2, r0
 8008d52:	000b      	movs	r3, r1
 8008d54:	2000      	movs	r0, #0
 8008d56:	4941      	ldr	r1, [pc, #260]	@ (8008e5c <__ieee754_pow+0x408>)
 8008d58:	f7f8 ff78 	bl	8001c4c <__aeabi_dsub>
 8008d5c:	0032      	movs	r2, r6
 8008d5e:	0004      	movs	r4, r0
 8008d60:	000d      	movs	r5, r1
 8008d62:	003b      	movs	r3, r7
 8008d64:	0030      	movs	r0, r6
 8008d66:	0039      	movs	r1, r7
 8008d68:	f7f8 fc8a 	bl	8001680 <__aeabi_dmul>
 8008d6c:	0002      	movs	r2, r0
 8008d6e:	000b      	movs	r3, r1
 8008d70:	0020      	movs	r0, r4
 8008d72:	0029      	movs	r1, r5
 8008d74:	f7f8 fc84 	bl	8001680 <__aeabi_dmul>
 8008d78:	4a39      	ldr	r2, [pc, #228]	@ (8008e60 <__ieee754_pow+0x40c>)
 8008d7a:	4b32      	ldr	r3, [pc, #200]	@ (8008e44 <__ieee754_pow+0x3f0>)
 8008d7c:	f7f8 fc80 	bl	8001680 <__aeabi_dmul>
 8008d80:	0002      	movs	r2, r0
 8008d82:	000b      	movs	r3, r1
 8008d84:	9800      	ldr	r0, [sp, #0]
 8008d86:	9901      	ldr	r1, [sp, #4]
 8008d88:	f7f8 ff60 	bl	8001c4c <__aeabi_dsub>
 8008d8c:	0002      	movs	r2, r0
 8008d8e:	000b      	movs	r3, r1
 8008d90:	0004      	movs	r4, r0
 8008d92:	000d      	movs	r5, r1
 8008d94:	9802      	ldr	r0, [sp, #8]
 8008d96:	9903      	ldr	r1, [sp, #12]
 8008d98:	f7f7 fc72 	bl	8000680 <__aeabi_dadd>
 8008d9c:	9a02      	ldr	r2, [sp, #8]
 8008d9e:	9b03      	ldr	r3, [sp, #12]
 8008da0:	2000      	movs	r0, #0
 8008da2:	9000      	str	r0, [sp, #0]
 8008da4:	9101      	str	r1, [sp, #4]
 8008da6:	f7f8 ff51 	bl	8001c4c <__aeabi_dsub>
 8008daa:	0002      	movs	r2, r0
 8008dac:	000b      	movs	r3, r1
 8008dae:	0020      	movs	r0, r4
 8008db0:	0029      	movs	r1, r5
 8008db2:	f7f8 ff4b 	bl	8001c4c <__aeabi_dsub>
 8008db6:	9c04      	ldr	r4, [sp, #16]
 8008db8:	9d05      	ldr	r5, [sp, #20]
 8008dba:	2400      	movs	r4, #0
 8008dbc:	0006      	movs	r6, r0
 8008dbe:	000f      	movs	r7, r1
 8008dc0:	9804      	ldr	r0, [sp, #16]
 8008dc2:	9905      	ldr	r1, [sp, #20]
 8008dc4:	0022      	movs	r2, r4
 8008dc6:	002b      	movs	r3, r5
 8008dc8:	9402      	str	r4, [sp, #8]
 8008dca:	9503      	str	r5, [sp, #12]
 8008dcc:	f7f8 ff3e 	bl	8001c4c <__aeabi_dsub>
 8008dd0:	9a00      	ldr	r2, [sp, #0]
 8008dd2:	9b01      	ldr	r3, [sp, #4]
 8008dd4:	f7f8 fc54 	bl	8001680 <__aeabi_dmul>
 8008dd8:	9a04      	ldr	r2, [sp, #16]
 8008dda:	9b05      	ldr	r3, [sp, #20]
 8008ddc:	9008      	str	r0, [sp, #32]
 8008dde:	9109      	str	r1, [sp, #36]	@ 0x24
 8008de0:	0030      	movs	r0, r6
 8008de2:	0039      	movs	r1, r7
 8008de4:	f7f8 fc4c 	bl	8001680 <__aeabi_dmul>
 8008de8:	0002      	movs	r2, r0
 8008dea:	000b      	movs	r3, r1
 8008dec:	9808      	ldr	r0, [sp, #32]
 8008dee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008df0:	f7f7 fc46 	bl	8000680 <__aeabi_dadd>
 8008df4:	0022      	movs	r2, r4
 8008df6:	002b      	movs	r3, r5
 8008df8:	9004      	str	r0, [sp, #16]
 8008dfa:	9105      	str	r1, [sp, #20]
 8008dfc:	9800      	ldr	r0, [sp, #0]
 8008dfe:	9901      	ldr	r1, [sp, #4]
 8008e00:	f7f8 fc3e 	bl	8001680 <__aeabi_dmul>
 8008e04:	000b      	movs	r3, r1
 8008e06:	0002      	movs	r2, r0
 8008e08:	9000      	str	r0, [sp, #0]
 8008e0a:	9101      	str	r1, [sp, #4]
 8008e0c:	9804      	ldr	r0, [sp, #16]
 8008e0e:	9905      	ldr	r1, [sp, #20]
 8008e10:	f7f7 fc36 	bl	8000680 <__aeabi_dadd>
 8008e14:	4b13      	ldr	r3, [pc, #76]	@ (8008e64 <__ieee754_pow+0x410>)
 8008e16:	0006      	movs	r6, r0
 8008e18:	000f      	movs	r7, r1
 8008e1a:	9108      	str	r1, [sp, #32]
 8008e1c:	4299      	cmp	r1, r3
 8008e1e:	dc00      	bgt.n	8008e22 <__ieee754_pow+0x3ce>
 8008e20:	e1c0      	b.n	80091a4 <__ieee754_pow+0x750>
 8008e22:	4b11      	ldr	r3, [pc, #68]	@ (8008e68 <__ieee754_pow+0x414>)
 8008e24:	18cb      	adds	r3, r1, r3
 8008e26:	4303      	orrs	r3, r0
 8008e28:	42a3      	cmp	r3, r4
 8008e2a:	d100      	bne.n	8008e2e <__ieee754_pow+0x3da>
 8008e2c:	e1a1      	b.n	8009172 <__ieee754_pow+0x71e>
 8008e2e:	9806      	ldr	r0, [sp, #24]
 8008e30:	9907      	ldr	r1, [sp, #28]
 8008e32:	2300      	movs	r3, #0
 8008e34:	2200      	movs	r2, #0
 8008e36:	f7f7 fb0f 	bl	8000458 <__aeabi_dcmplt>
 8008e3a:	1e43      	subs	r3, r0, #1
 8008e3c:	4198      	sbcs	r0, r3
 8008e3e:	e723      	b.n	8008c88 <__ieee754_pow+0x234>
 8008e40:	3ff00000 	.word	0x3ff00000
 8008e44:	3ff71547 	.word	0x3ff71547
 8008e48:	f85ddf44 	.word	0xf85ddf44
 8008e4c:	3e54ae0b 	.word	0x3e54ae0b
 8008e50:	3fd00000 	.word	0x3fd00000
 8008e54:	55555555 	.word	0x55555555
 8008e58:	3fd55555 	.word	0x3fd55555
 8008e5c:	3fe00000 	.word	0x3fe00000
 8008e60:	652b82fe 	.word	0x652b82fe
 8008e64:	408fffff 	.word	0x408fffff
 8008e68:	bf700000 	.word	0xbf700000
 8008e6c:	4bdc      	ldr	r3, [pc, #880]	@ (80091e0 <__ieee754_pow+0x78c>)
 8008e6e:	9903      	ldr	r1, [sp, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	420b      	tst	r3, r1
 8008e74:	d10b      	bne.n	8008e8e <__ieee754_pow+0x43a>
 8008e76:	9800      	ldr	r0, [sp, #0]
 8008e78:	9901      	ldr	r1, [sp, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	4bd9      	ldr	r3, [pc, #868]	@ (80091e4 <__ieee754_pow+0x790>)
 8008e7e:	f7f8 fbff 	bl	8001680 <__aeabi_dmul>
 8008e82:	2235      	movs	r2, #53	@ 0x35
 8008e84:	9000      	str	r0, [sp, #0]
 8008e86:	9101      	str	r1, [sp, #4]
 8008e88:	9b01      	ldr	r3, [sp, #4]
 8008e8a:	4252      	negs	r2, r2
 8008e8c:	9308      	str	r3, [sp, #32]
 8008e8e:	9b08      	ldr	r3, [sp, #32]
 8008e90:	49d5      	ldr	r1, [pc, #852]	@ (80091e8 <__ieee754_pow+0x794>)
 8008e92:	151b      	asrs	r3, r3, #20
 8008e94:	185b      	adds	r3, r3, r1
 8008e96:	189b      	adds	r3, r3, r2
 8008e98:	930e      	str	r3, [sp, #56]	@ 0x38
 8008e9a:	9b08      	ldr	r3, [sp, #32]
 8008e9c:	4dd3      	ldr	r5, [pc, #844]	@ (80091ec <__ieee754_pow+0x798>)
 8008e9e:	031b      	lsls	r3, r3, #12
 8008ea0:	4ad3      	ldr	r2, [pc, #844]	@ (80091f0 <__ieee754_pow+0x79c>)
 8008ea2:	0b1b      	lsrs	r3, r3, #12
 8008ea4:	2600      	movs	r6, #0
 8008ea6:	431d      	orrs	r5, r3
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	dd09      	ble.n	8008ec0 <__ieee754_pow+0x46c>
 8008eac:	4ad1      	ldr	r2, [pc, #836]	@ (80091f4 <__ieee754_pow+0x7a0>)
 8008eae:	3601      	adds	r6, #1
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	dd05      	ble.n	8008ec0 <__ieee754_pow+0x46c>
 8008eb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008eb6:	199b      	adds	r3, r3, r6
 8008eb8:	2600      	movs	r6, #0
 8008eba:	930e      	str	r3, [sp, #56]	@ 0x38
 8008ebc:	4bce      	ldr	r3, [pc, #824]	@ (80091f8 <__ieee754_pow+0x7a4>)
 8008ebe:	18ed      	adds	r5, r5, r3
 8008ec0:	9800      	ldr	r0, [sp, #0]
 8008ec2:	9901      	ldr	r1, [sp, #4]
 8008ec4:	0029      	movs	r1, r5
 8008ec6:	4bcd      	ldr	r3, [pc, #820]	@ (80091fc <__ieee754_pow+0x7a8>)
 8008ec8:	00f2      	lsls	r2, r6, #3
 8008eca:	189b      	adds	r3, r3, r2
 8008ecc:	685c      	ldr	r4, [r3, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008ed2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ed4:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008ed6:	001a      	movs	r2, r3
 8008ed8:	0023      	movs	r3, r4
 8008eda:	900c      	str	r0, [sp, #48]	@ 0x30
 8008edc:	910d      	str	r1, [sp, #52]	@ 0x34
 8008ede:	f7f8 feb5 	bl	8001c4c <__aeabi_dsub>
 8008ee2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008ee4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ee6:	9010      	str	r0, [sp, #64]	@ 0x40
 8008ee8:	9111      	str	r1, [sp, #68]	@ 0x44
 8008eea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008eec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008eee:	f7f7 fbc7 	bl	8000680 <__aeabi_dadd>
 8008ef2:	0002      	movs	r2, r0
 8008ef4:	000b      	movs	r3, r1
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	49bc      	ldr	r1, [pc, #752]	@ (80091ec <__ieee754_pow+0x798>)
 8008efa:	f7f7 ff87 	bl	8000e0c <__aeabi_ddiv>
 8008efe:	0002      	movs	r2, r0
 8008f00:	000b      	movs	r3, r1
 8008f02:	9012      	str	r0, [sp, #72]	@ 0x48
 8008f04:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008f06:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008f08:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008f0a:	f7f8 fbb9 	bl	8001680 <__aeabi_dmul>
 8008f0e:	9008      	str	r0, [sp, #32]
 8008f10:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f12:	9b08      	ldr	r3, [sp, #32]
 8008f14:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8008f16:	2180      	movs	r1, #128	@ 0x80
 8008f18:	9302      	str	r3, [sp, #8]
 8008f1a:	9403      	str	r4, [sp, #12]
 8008f1c:	2080      	movs	r0, #128	@ 0x80
 8008f1e:	2300      	movs	r3, #0
 8008f20:	2200      	movs	r2, #0
 8008f22:	106d      	asrs	r5, r5, #1
 8008f24:	0589      	lsls	r1, r1, #22
 8008f26:	9302      	str	r3, [sp, #8]
 8008f28:	4329      	orrs	r1, r5
 8008f2a:	0300      	lsls	r0, r0, #12
 8008f2c:	9b02      	ldr	r3, [sp, #8]
 8008f2e:	9c03      	ldr	r4, [sp, #12]
 8008f30:	1809      	adds	r1, r1, r0
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	9401      	str	r4, [sp, #4]
 8008f36:	04b6      	lsls	r6, r6, #18
 8008f38:	198b      	adds	r3, r1, r6
 8008f3a:	9800      	ldr	r0, [sp, #0]
 8008f3c:	9901      	ldr	r1, [sp, #4]
 8008f3e:	0014      	movs	r4, r2
 8008f40:	001d      	movs	r5, r3
 8008f42:	f7f8 fb9d 	bl	8001680 <__aeabi_dmul>
 8008f46:	0002      	movs	r2, r0
 8008f48:	000b      	movs	r3, r1
 8008f4a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008f4c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008f4e:	f7f8 fe7d 	bl	8001c4c <__aeabi_dsub>
 8008f52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f56:	0006      	movs	r6, r0
 8008f58:	000f      	movs	r7, r1
 8008f5a:	0020      	movs	r0, r4
 8008f5c:	0029      	movs	r1, r5
 8008f5e:	f7f8 fe75 	bl	8001c4c <__aeabi_dsub>
 8008f62:	0002      	movs	r2, r0
 8008f64:	000b      	movs	r3, r1
 8008f66:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8008f68:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008f6a:	f7f8 fe6f 	bl	8001c4c <__aeabi_dsub>
 8008f6e:	9a00      	ldr	r2, [sp, #0]
 8008f70:	9b01      	ldr	r3, [sp, #4]
 8008f72:	f7f8 fb85 	bl	8001680 <__aeabi_dmul>
 8008f76:	0002      	movs	r2, r0
 8008f78:	000b      	movs	r3, r1
 8008f7a:	0030      	movs	r0, r6
 8008f7c:	0039      	movs	r1, r7
 8008f7e:	f7f8 fe65 	bl	8001c4c <__aeabi_dsub>
 8008f82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008f84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f86:	f7f8 fb7b 	bl	8001680 <__aeabi_dmul>
 8008f8a:	9a08      	ldr	r2, [sp, #32]
 8008f8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f8e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008f90:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008f92:	0010      	movs	r0, r2
 8008f94:	0019      	movs	r1, r3
 8008f96:	f7f8 fb73 	bl	8001680 <__aeabi_dmul>
 8008f9a:	0006      	movs	r6, r0
 8008f9c:	000f      	movs	r7, r1
 8008f9e:	4a98      	ldr	r2, [pc, #608]	@ (8009200 <__ieee754_pow+0x7ac>)
 8008fa0:	4b98      	ldr	r3, [pc, #608]	@ (8009204 <__ieee754_pow+0x7b0>)
 8008fa2:	f7f8 fb6d 	bl	8001680 <__aeabi_dmul>
 8008fa6:	4a98      	ldr	r2, [pc, #608]	@ (8009208 <__ieee754_pow+0x7b4>)
 8008fa8:	4b98      	ldr	r3, [pc, #608]	@ (800920c <__ieee754_pow+0x7b8>)
 8008faa:	f7f7 fb69 	bl	8000680 <__aeabi_dadd>
 8008fae:	0032      	movs	r2, r6
 8008fb0:	003b      	movs	r3, r7
 8008fb2:	f7f8 fb65 	bl	8001680 <__aeabi_dmul>
 8008fb6:	4a96      	ldr	r2, [pc, #600]	@ (8009210 <__ieee754_pow+0x7bc>)
 8008fb8:	4b96      	ldr	r3, [pc, #600]	@ (8009214 <__ieee754_pow+0x7c0>)
 8008fba:	f7f7 fb61 	bl	8000680 <__aeabi_dadd>
 8008fbe:	0032      	movs	r2, r6
 8008fc0:	003b      	movs	r3, r7
 8008fc2:	f7f8 fb5d 	bl	8001680 <__aeabi_dmul>
 8008fc6:	4a94      	ldr	r2, [pc, #592]	@ (8009218 <__ieee754_pow+0x7c4>)
 8008fc8:	4b94      	ldr	r3, [pc, #592]	@ (800921c <__ieee754_pow+0x7c8>)
 8008fca:	f7f7 fb59 	bl	8000680 <__aeabi_dadd>
 8008fce:	0032      	movs	r2, r6
 8008fd0:	003b      	movs	r3, r7
 8008fd2:	f7f8 fb55 	bl	8001680 <__aeabi_dmul>
 8008fd6:	4a92      	ldr	r2, [pc, #584]	@ (8009220 <__ieee754_pow+0x7cc>)
 8008fd8:	4b92      	ldr	r3, [pc, #584]	@ (8009224 <__ieee754_pow+0x7d0>)
 8008fda:	f7f7 fb51 	bl	8000680 <__aeabi_dadd>
 8008fde:	0032      	movs	r2, r6
 8008fe0:	003b      	movs	r3, r7
 8008fe2:	f7f8 fb4d 	bl	8001680 <__aeabi_dmul>
 8008fe6:	4a90      	ldr	r2, [pc, #576]	@ (8009228 <__ieee754_pow+0x7d4>)
 8008fe8:	4b90      	ldr	r3, [pc, #576]	@ (800922c <__ieee754_pow+0x7d8>)
 8008fea:	f7f7 fb49 	bl	8000680 <__aeabi_dadd>
 8008fee:	0032      	movs	r2, r6
 8008ff0:	0004      	movs	r4, r0
 8008ff2:	000d      	movs	r5, r1
 8008ff4:	003b      	movs	r3, r7
 8008ff6:	0030      	movs	r0, r6
 8008ff8:	0039      	movs	r1, r7
 8008ffa:	f7f8 fb41 	bl	8001680 <__aeabi_dmul>
 8008ffe:	0002      	movs	r2, r0
 8009000:	000b      	movs	r3, r1
 8009002:	0020      	movs	r0, r4
 8009004:	0029      	movs	r1, r5
 8009006:	f7f8 fb3b 	bl	8001680 <__aeabi_dmul>
 800900a:	9a00      	ldr	r2, [sp, #0]
 800900c:	9b01      	ldr	r3, [sp, #4]
 800900e:	0004      	movs	r4, r0
 8009010:	000d      	movs	r5, r1
 8009012:	9808      	ldr	r0, [sp, #32]
 8009014:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009016:	f7f7 fb33 	bl	8000680 <__aeabi_dadd>
 800901a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800901c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800901e:	f7f8 fb2f 	bl	8001680 <__aeabi_dmul>
 8009022:	0022      	movs	r2, r4
 8009024:	002b      	movs	r3, r5
 8009026:	f7f7 fb2b 	bl	8000680 <__aeabi_dadd>
 800902a:	9a00      	ldr	r2, [sp, #0]
 800902c:	9b01      	ldr	r3, [sp, #4]
 800902e:	900c      	str	r0, [sp, #48]	@ 0x30
 8009030:	910d      	str	r1, [sp, #52]	@ 0x34
 8009032:	0010      	movs	r0, r2
 8009034:	0019      	movs	r1, r3
 8009036:	f7f8 fb23 	bl	8001680 <__aeabi_dmul>
 800903a:	2200      	movs	r2, #0
 800903c:	4b7c      	ldr	r3, [pc, #496]	@ (8009230 <__ieee754_pow+0x7dc>)
 800903e:	0004      	movs	r4, r0
 8009040:	000d      	movs	r5, r1
 8009042:	f7f7 fb1d 	bl	8000680 <__aeabi_dadd>
 8009046:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009048:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800904a:	f7f7 fb19 	bl	8000680 <__aeabi_dadd>
 800904e:	2000      	movs	r0, #0
 8009050:	000f      	movs	r7, r1
 8009052:	0006      	movs	r6, r0
 8009054:	0002      	movs	r2, r0
 8009056:	000b      	movs	r3, r1
 8009058:	9800      	ldr	r0, [sp, #0]
 800905a:	9901      	ldr	r1, [sp, #4]
 800905c:	f7f8 fb10 	bl	8001680 <__aeabi_dmul>
 8009060:	2200      	movs	r2, #0
 8009062:	9000      	str	r0, [sp, #0]
 8009064:	9101      	str	r1, [sp, #4]
 8009066:	4b72      	ldr	r3, [pc, #456]	@ (8009230 <__ieee754_pow+0x7dc>)
 8009068:	0030      	movs	r0, r6
 800906a:	0039      	movs	r1, r7
 800906c:	f7f8 fdee 	bl	8001c4c <__aeabi_dsub>
 8009070:	0022      	movs	r2, r4
 8009072:	002b      	movs	r3, r5
 8009074:	f7f8 fdea 	bl	8001c4c <__aeabi_dsub>
 8009078:	0002      	movs	r2, r0
 800907a:	000b      	movs	r3, r1
 800907c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800907e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009080:	f7f8 fde4 	bl	8001c4c <__aeabi_dsub>
 8009084:	9a08      	ldr	r2, [sp, #32]
 8009086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009088:	f7f8 fafa 	bl	8001680 <__aeabi_dmul>
 800908c:	0032      	movs	r2, r6
 800908e:	0004      	movs	r4, r0
 8009090:	000d      	movs	r5, r1
 8009092:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009094:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009096:	003b      	movs	r3, r7
 8009098:	f7f8 faf2 	bl	8001680 <__aeabi_dmul>
 800909c:	0002      	movs	r2, r0
 800909e:	000b      	movs	r3, r1
 80090a0:	0020      	movs	r0, r4
 80090a2:	0029      	movs	r1, r5
 80090a4:	f7f7 faec 	bl	8000680 <__aeabi_dadd>
 80090a8:	0004      	movs	r4, r0
 80090aa:	000d      	movs	r5, r1
 80090ac:	0002      	movs	r2, r0
 80090ae:	000b      	movs	r3, r1
 80090b0:	9800      	ldr	r0, [sp, #0]
 80090b2:	9901      	ldr	r1, [sp, #4]
 80090b4:	f7f7 fae4 	bl	8000680 <__aeabi_dadd>
 80090b8:	22e0      	movs	r2, #224	@ 0xe0
 80090ba:	2000      	movs	r0, #0
 80090bc:	4b5d      	ldr	r3, [pc, #372]	@ (8009234 <__ieee754_pow+0x7e0>)
 80090be:	0612      	lsls	r2, r2, #24
 80090c0:	0006      	movs	r6, r0
 80090c2:	000f      	movs	r7, r1
 80090c4:	f7f8 fadc 	bl	8001680 <__aeabi_dmul>
 80090c8:	9008      	str	r0, [sp, #32]
 80090ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80090cc:	9a00      	ldr	r2, [sp, #0]
 80090ce:	9b01      	ldr	r3, [sp, #4]
 80090d0:	0030      	movs	r0, r6
 80090d2:	0039      	movs	r1, r7
 80090d4:	f7f8 fdba 	bl	8001c4c <__aeabi_dsub>
 80090d8:	0002      	movs	r2, r0
 80090da:	000b      	movs	r3, r1
 80090dc:	0020      	movs	r0, r4
 80090de:	0029      	movs	r1, r5
 80090e0:	f7f8 fdb4 	bl	8001c4c <__aeabi_dsub>
 80090e4:	4a54      	ldr	r2, [pc, #336]	@ (8009238 <__ieee754_pow+0x7e4>)
 80090e6:	4b53      	ldr	r3, [pc, #332]	@ (8009234 <__ieee754_pow+0x7e0>)
 80090e8:	f7f8 faca 	bl	8001680 <__aeabi_dmul>
 80090ec:	4a53      	ldr	r2, [pc, #332]	@ (800923c <__ieee754_pow+0x7e8>)
 80090ee:	0004      	movs	r4, r0
 80090f0:	000d      	movs	r5, r1
 80090f2:	0030      	movs	r0, r6
 80090f4:	0039      	movs	r1, r7
 80090f6:	4b52      	ldr	r3, [pc, #328]	@ (8009240 <__ieee754_pow+0x7ec>)
 80090f8:	f7f8 fac2 	bl	8001680 <__aeabi_dmul>
 80090fc:	0002      	movs	r2, r0
 80090fe:	000b      	movs	r3, r1
 8009100:	0020      	movs	r0, r4
 8009102:	0029      	movs	r1, r5
 8009104:	f7f7 fabc 	bl	8000680 <__aeabi_dadd>
 8009108:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800910a:	4b4e      	ldr	r3, [pc, #312]	@ (8009244 <__ieee754_pow+0x7f0>)
 800910c:	189b      	adds	r3, r3, r2
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	f7f7 fab5 	bl	8000680 <__aeabi_dadd>
 8009116:	900a      	str	r0, [sp, #40]	@ 0x28
 8009118:	910b      	str	r1, [sp, #44]	@ 0x2c
 800911a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800911c:	f7f9 f9fe 	bl	800251c <__aeabi_i2d>
 8009120:	0004      	movs	r4, r0
 8009122:	000d      	movs	r5, r1
 8009124:	9808      	ldr	r0, [sp, #32]
 8009126:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009128:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800912a:	4b47      	ldr	r3, [pc, #284]	@ (8009248 <__ieee754_pow+0x7f4>)
 800912c:	189b      	adds	r3, r3, r2
 800912e:	681e      	ldr	r6, [r3, #0]
 8009130:	685f      	ldr	r7, [r3, #4]
 8009132:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009134:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009136:	f7f7 faa3 	bl	8000680 <__aeabi_dadd>
 800913a:	0032      	movs	r2, r6
 800913c:	003b      	movs	r3, r7
 800913e:	f7f7 fa9f 	bl	8000680 <__aeabi_dadd>
 8009142:	0022      	movs	r2, r4
 8009144:	002b      	movs	r3, r5
 8009146:	f7f7 fa9b 	bl	8000680 <__aeabi_dadd>
 800914a:	2000      	movs	r0, #0
 800914c:	0022      	movs	r2, r4
 800914e:	002b      	movs	r3, r5
 8009150:	9000      	str	r0, [sp, #0]
 8009152:	9101      	str	r1, [sp, #4]
 8009154:	f7f8 fd7a 	bl	8001c4c <__aeabi_dsub>
 8009158:	0032      	movs	r2, r6
 800915a:	003b      	movs	r3, r7
 800915c:	f7f8 fd76 	bl	8001c4c <__aeabi_dsub>
 8009160:	9a08      	ldr	r2, [sp, #32]
 8009162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009164:	f7f8 fd72 	bl	8001c4c <__aeabi_dsub>
 8009168:	0002      	movs	r2, r0
 800916a:	000b      	movs	r3, r1
 800916c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800916e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009170:	e61f      	b.n	8008db2 <__ieee754_pow+0x35e>
 8009172:	4a36      	ldr	r2, [pc, #216]	@ (800924c <__ieee754_pow+0x7f8>)
 8009174:	4b36      	ldr	r3, [pc, #216]	@ (8009250 <__ieee754_pow+0x7fc>)
 8009176:	9804      	ldr	r0, [sp, #16]
 8009178:	9905      	ldr	r1, [sp, #20]
 800917a:	f7f7 fa81 	bl	8000680 <__aeabi_dadd>
 800917e:	9a00      	ldr	r2, [sp, #0]
 8009180:	9b01      	ldr	r3, [sp, #4]
 8009182:	0004      	movs	r4, r0
 8009184:	000d      	movs	r5, r1
 8009186:	0030      	movs	r0, r6
 8009188:	0039      	movs	r1, r7
 800918a:	f7f8 fd5f 	bl	8001c4c <__aeabi_dsub>
 800918e:	0002      	movs	r2, r0
 8009190:	000b      	movs	r3, r1
 8009192:	0020      	movs	r0, r4
 8009194:	0029      	movs	r1, r5
 8009196:	f7f7 f973 	bl	8000480 <__aeabi_dcmpgt>
 800919a:	2800      	cmp	r0, #0
 800919c:	d000      	beq.n	80091a0 <__ieee754_pow+0x74c>
 800919e:	e646      	b.n	8008e2e <__ieee754_pow+0x3da>
 80091a0:	4b2c      	ldr	r3, [pc, #176]	@ (8009254 <__ieee754_pow+0x800>)
 80091a2:	e063      	b.n	800926c <__ieee754_pow+0x818>
 80091a4:	4a2c      	ldr	r2, [pc, #176]	@ (8009258 <__ieee754_pow+0x804>)
 80091a6:	004b      	lsls	r3, r1, #1
 80091a8:	085b      	lsrs	r3, r3, #1
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d95a      	bls.n	8009264 <__ieee754_pow+0x810>
 80091ae:	4b2b      	ldr	r3, [pc, #172]	@ (800925c <__ieee754_pow+0x808>)
 80091b0:	18cb      	adds	r3, r1, r3
 80091b2:	4303      	orrs	r3, r0
 80091b4:	d008      	beq.n	80091c8 <__ieee754_pow+0x774>
 80091b6:	9806      	ldr	r0, [sp, #24]
 80091b8:	9907      	ldr	r1, [sp, #28]
 80091ba:	2300      	movs	r3, #0
 80091bc:	2200      	movs	r2, #0
 80091be:	f7f7 f94b 	bl	8000458 <__aeabi_dcmplt>
 80091c2:	1e43      	subs	r3, r0, #1
 80091c4:	4198      	sbcs	r0, r3
 80091c6:	e567      	b.n	8008c98 <__ieee754_pow+0x244>
 80091c8:	9a00      	ldr	r2, [sp, #0]
 80091ca:	9b01      	ldr	r3, [sp, #4]
 80091cc:	f7f8 fd3e 	bl	8001c4c <__aeabi_dsub>
 80091d0:	9a04      	ldr	r2, [sp, #16]
 80091d2:	9b05      	ldr	r3, [sp, #20]
 80091d4:	f7f7 f95e 	bl	8000494 <__aeabi_dcmpge>
 80091d8:	2800      	cmp	r0, #0
 80091da:	d1ec      	bne.n	80091b6 <__ieee754_pow+0x762>
 80091dc:	4b20      	ldr	r3, [pc, #128]	@ (8009260 <__ieee754_pow+0x80c>)
 80091de:	e045      	b.n	800926c <__ieee754_pow+0x818>
 80091e0:	7ff00000 	.word	0x7ff00000
 80091e4:	43400000 	.word	0x43400000
 80091e8:	fffffc01 	.word	0xfffffc01
 80091ec:	3ff00000 	.word	0x3ff00000
 80091f0:	0003988e 	.word	0x0003988e
 80091f4:	000bb679 	.word	0x000bb679
 80091f8:	fff00000 	.word	0xfff00000
 80091fc:	08009bf8 	.word	0x08009bf8
 8009200:	4a454eef 	.word	0x4a454eef
 8009204:	3fca7e28 	.word	0x3fca7e28
 8009208:	93c9db65 	.word	0x93c9db65
 800920c:	3fcd864a 	.word	0x3fcd864a
 8009210:	a91d4101 	.word	0xa91d4101
 8009214:	3fd17460 	.word	0x3fd17460
 8009218:	518f264d 	.word	0x518f264d
 800921c:	3fd55555 	.word	0x3fd55555
 8009220:	db6fabff 	.word	0xdb6fabff
 8009224:	3fdb6db6 	.word	0x3fdb6db6
 8009228:	33333303 	.word	0x33333303
 800922c:	3fe33333 	.word	0x3fe33333
 8009230:	40080000 	.word	0x40080000
 8009234:	3feec709 	.word	0x3feec709
 8009238:	dc3a03fd 	.word	0xdc3a03fd
 800923c:	145b01f5 	.word	0x145b01f5
 8009240:	be3e2fe0 	.word	0xbe3e2fe0
 8009244:	08009bd8 	.word	0x08009bd8
 8009248:	08009be8 	.word	0x08009be8
 800924c:	652b82fe 	.word	0x652b82fe
 8009250:	3c971547 	.word	0x3c971547
 8009254:	40900000 	.word	0x40900000
 8009258:	4090cbff 	.word	0x4090cbff
 800925c:	3f6f3400 	.word	0x3f6f3400
 8009260:	4090cc00 	.word	0x4090cc00
 8009264:	4a73      	ldr	r2, [pc, #460]	@ (8009434 <__ieee754_pow+0x9e0>)
 8009266:	9402      	str	r4, [sp, #8]
 8009268:	4293      	cmp	r3, r2
 800926a:	d925      	bls.n	80092b8 <__ieee754_pow+0x864>
 800926c:	4a72      	ldr	r2, [pc, #456]	@ (8009438 <__ieee754_pow+0x9e4>)
 800926e:	151b      	asrs	r3, r3, #20
 8009270:	189b      	adds	r3, r3, r2
 8009272:	2280      	movs	r2, #128	@ 0x80
 8009274:	0352      	lsls	r2, r2, #13
 8009276:	0011      	movs	r1, r2
 8009278:	4119      	asrs	r1, r3
 800927a:	19cb      	adds	r3, r1, r7
 800927c:	005c      	lsls	r4, r3, #1
 800927e:	496f      	ldr	r1, [pc, #444]	@ (800943c <__ieee754_pow+0x9e8>)
 8009280:	4d6f      	ldr	r5, [pc, #444]	@ (8009440 <__ieee754_pow+0x9ec>)
 8009282:	0d64      	lsrs	r4, r4, #21
 8009284:	1864      	adds	r4, r4, r1
 8009286:	4125      	asrs	r5, r4
 8009288:	401d      	ands	r5, r3
 800928a:	031b      	lsls	r3, r3, #12
 800928c:	0b1b      	lsrs	r3, r3, #12
 800928e:	4313      	orrs	r3, r2
 8009290:	2214      	movs	r2, #20
 8009292:	1b12      	subs	r2, r2, r4
 8009294:	4113      	asrs	r3, r2
 8009296:	9302      	str	r3, [sp, #8]
 8009298:	9b08      	ldr	r3, [sp, #32]
 800929a:	2000      	movs	r0, #0
 800929c:	0029      	movs	r1, r5
 800929e:	2b00      	cmp	r3, #0
 80092a0:	da02      	bge.n	80092a8 <__ieee754_pow+0x854>
 80092a2:	9b02      	ldr	r3, [sp, #8]
 80092a4:	425b      	negs	r3, r3
 80092a6:	9302      	str	r3, [sp, #8]
 80092a8:	0002      	movs	r2, r0
 80092aa:	000b      	movs	r3, r1
 80092ac:	9800      	ldr	r0, [sp, #0]
 80092ae:	9901      	ldr	r1, [sp, #4]
 80092b0:	f7f8 fccc 	bl	8001c4c <__aeabi_dsub>
 80092b4:	9000      	str	r0, [sp, #0]
 80092b6:	9101      	str	r1, [sp, #4]
 80092b8:	9a04      	ldr	r2, [sp, #16]
 80092ba:	9b05      	ldr	r3, [sp, #20]
 80092bc:	9800      	ldr	r0, [sp, #0]
 80092be:	9901      	ldr	r1, [sp, #4]
 80092c0:	f7f7 f9de 	bl	8000680 <__aeabi_dadd>
 80092c4:	2000      	movs	r0, #0
 80092c6:	2200      	movs	r2, #0
 80092c8:	4b5e      	ldr	r3, [pc, #376]	@ (8009444 <__ieee754_pow+0x9f0>)
 80092ca:	0006      	movs	r6, r0
 80092cc:	000f      	movs	r7, r1
 80092ce:	f7f8 f9d7 	bl	8001680 <__aeabi_dmul>
 80092d2:	9a00      	ldr	r2, [sp, #0]
 80092d4:	9b01      	ldr	r3, [sp, #4]
 80092d6:	9008      	str	r0, [sp, #32]
 80092d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80092da:	0030      	movs	r0, r6
 80092dc:	0039      	movs	r1, r7
 80092de:	f7f8 fcb5 	bl	8001c4c <__aeabi_dsub>
 80092e2:	0002      	movs	r2, r0
 80092e4:	000b      	movs	r3, r1
 80092e6:	9804      	ldr	r0, [sp, #16]
 80092e8:	9905      	ldr	r1, [sp, #20]
 80092ea:	f7f8 fcaf 	bl	8001c4c <__aeabi_dsub>
 80092ee:	4a56      	ldr	r2, [pc, #344]	@ (8009448 <__ieee754_pow+0x9f4>)
 80092f0:	4b56      	ldr	r3, [pc, #344]	@ (800944c <__ieee754_pow+0x9f8>)
 80092f2:	f7f8 f9c5 	bl	8001680 <__aeabi_dmul>
 80092f6:	4a56      	ldr	r2, [pc, #344]	@ (8009450 <__ieee754_pow+0x9fc>)
 80092f8:	0004      	movs	r4, r0
 80092fa:	000d      	movs	r5, r1
 80092fc:	0030      	movs	r0, r6
 80092fe:	0039      	movs	r1, r7
 8009300:	4b54      	ldr	r3, [pc, #336]	@ (8009454 <__ieee754_pow+0xa00>)
 8009302:	f7f8 f9bd 	bl	8001680 <__aeabi_dmul>
 8009306:	0002      	movs	r2, r0
 8009308:	000b      	movs	r3, r1
 800930a:	0020      	movs	r0, r4
 800930c:	0029      	movs	r1, r5
 800930e:	f7f7 f9b7 	bl	8000680 <__aeabi_dadd>
 8009312:	0004      	movs	r4, r0
 8009314:	000d      	movs	r5, r1
 8009316:	0002      	movs	r2, r0
 8009318:	000b      	movs	r3, r1
 800931a:	9808      	ldr	r0, [sp, #32]
 800931c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800931e:	f7f7 f9af 	bl	8000680 <__aeabi_dadd>
 8009322:	9a08      	ldr	r2, [sp, #32]
 8009324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009326:	0006      	movs	r6, r0
 8009328:	000f      	movs	r7, r1
 800932a:	f7f8 fc8f 	bl	8001c4c <__aeabi_dsub>
 800932e:	0002      	movs	r2, r0
 8009330:	000b      	movs	r3, r1
 8009332:	0020      	movs	r0, r4
 8009334:	0029      	movs	r1, r5
 8009336:	f7f8 fc89 	bl	8001c4c <__aeabi_dsub>
 800933a:	0032      	movs	r2, r6
 800933c:	9000      	str	r0, [sp, #0]
 800933e:	9101      	str	r1, [sp, #4]
 8009340:	003b      	movs	r3, r7
 8009342:	0030      	movs	r0, r6
 8009344:	0039      	movs	r1, r7
 8009346:	f7f8 f99b 	bl	8001680 <__aeabi_dmul>
 800934a:	0004      	movs	r4, r0
 800934c:	000d      	movs	r5, r1
 800934e:	4a42      	ldr	r2, [pc, #264]	@ (8009458 <__ieee754_pow+0xa04>)
 8009350:	4b42      	ldr	r3, [pc, #264]	@ (800945c <__ieee754_pow+0xa08>)
 8009352:	f7f8 f995 	bl	8001680 <__aeabi_dmul>
 8009356:	4a42      	ldr	r2, [pc, #264]	@ (8009460 <__ieee754_pow+0xa0c>)
 8009358:	4b42      	ldr	r3, [pc, #264]	@ (8009464 <__ieee754_pow+0xa10>)
 800935a:	f7f8 fc77 	bl	8001c4c <__aeabi_dsub>
 800935e:	0022      	movs	r2, r4
 8009360:	002b      	movs	r3, r5
 8009362:	f7f8 f98d 	bl	8001680 <__aeabi_dmul>
 8009366:	4a40      	ldr	r2, [pc, #256]	@ (8009468 <__ieee754_pow+0xa14>)
 8009368:	4b40      	ldr	r3, [pc, #256]	@ (800946c <__ieee754_pow+0xa18>)
 800936a:	f7f7 f989 	bl	8000680 <__aeabi_dadd>
 800936e:	0022      	movs	r2, r4
 8009370:	002b      	movs	r3, r5
 8009372:	f7f8 f985 	bl	8001680 <__aeabi_dmul>
 8009376:	4a3e      	ldr	r2, [pc, #248]	@ (8009470 <__ieee754_pow+0xa1c>)
 8009378:	4b3e      	ldr	r3, [pc, #248]	@ (8009474 <__ieee754_pow+0xa20>)
 800937a:	f7f8 fc67 	bl	8001c4c <__aeabi_dsub>
 800937e:	0022      	movs	r2, r4
 8009380:	002b      	movs	r3, r5
 8009382:	f7f8 f97d 	bl	8001680 <__aeabi_dmul>
 8009386:	4a3c      	ldr	r2, [pc, #240]	@ (8009478 <__ieee754_pow+0xa24>)
 8009388:	4b3c      	ldr	r3, [pc, #240]	@ (800947c <__ieee754_pow+0xa28>)
 800938a:	f7f7 f979 	bl	8000680 <__aeabi_dadd>
 800938e:	0022      	movs	r2, r4
 8009390:	002b      	movs	r3, r5
 8009392:	f7f8 f975 	bl	8001680 <__aeabi_dmul>
 8009396:	0002      	movs	r2, r0
 8009398:	000b      	movs	r3, r1
 800939a:	0030      	movs	r0, r6
 800939c:	0039      	movs	r1, r7
 800939e:	f7f8 fc55 	bl	8001c4c <__aeabi_dsub>
 80093a2:	0004      	movs	r4, r0
 80093a4:	000d      	movs	r5, r1
 80093a6:	0002      	movs	r2, r0
 80093a8:	000b      	movs	r3, r1
 80093aa:	0030      	movs	r0, r6
 80093ac:	0039      	movs	r1, r7
 80093ae:	f7f8 f967 	bl	8001680 <__aeabi_dmul>
 80093b2:	2380      	movs	r3, #128	@ 0x80
 80093b4:	9004      	str	r0, [sp, #16]
 80093b6:	9105      	str	r1, [sp, #20]
 80093b8:	2200      	movs	r2, #0
 80093ba:	0020      	movs	r0, r4
 80093bc:	0029      	movs	r1, r5
 80093be:	05db      	lsls	r3, r3, #23
 80093c0:	f7f8 fc44 	bl	8001c4c <__aeabi_dsub>
 80093c4:	0002      	movs	r2, r0
 80093c6:	000b      	movs	r3, r1
 80093c8:	9804      	ldr	r0, [sp, #16]
 80093ca:	9905      	ldr	r1, [sp, #20]
 80093cc:	f7f7 fd1e 	bl	8000e0c <__aeabi_ddiv>
 80093d0:	9a00      	ldr	r2, [sp, #0]
 80093d2:	9b01      	ldr	r3, [sp, #4]
 80093d4:	0004      	movs	r4, r0
 80093d6:	000d      	movs	r5, r1
 80093d8:	0030      	movs	r0, r6
 80093da:	0039      	movs	r1, r7
 80093dc:	f7f8 f950 	bl	8001680 <__aeabi_dmul>
 80093e0:	9a00      	ldr	r2, [sp, #0]
 80093e2:	9b01      	ldr	r3, [sp, #4]
 80093e4:	f7f7 f94c 	bl	8000680 <__aeabi_dadd>
 80093e8:	0002      	movs	r2, r0
 80093ea:	000b      	movs	r3, r1
 80093ec:	0020      	movs	r0, r4
 80093ee:	0029      	movs	r1, r5
 80093f0:	f7f8 fc2c 	bl	8001c4c <__aeabi_dsub>
 80093f4:	0032      	movs	r2, r6
 80093f6:	003b      	movs	r3, r7
 80093f8:	f7f8 fc28 	bl	8001c4c <__aeabi_dsub>
 80093fc:	0002      	movs	r2, r0
 80093fe:	000b      	movs	r3, r1
 8009400:	2000      	movs	r0, #0
 8009402:	491f      	ldr	r1, [pc, #124]	@ (8009480 <__ieee754_pow+0xa2c>)
 8009404:	f7f8 fc22 	bl	8001c4c <__aeabi_dsub>
 8009408:	9b02      	ldr	r3, [sp, #8]
 800940a:	051b      	lsls	r3, r3, #20
 800940c:	185b      	adds	r3, r3, r1
 800940e:	151a      	asrs	r2, r3, #20
 8009410:	2a00      	cmp	r2, #0
 8009412:	dc06      	bgt.n	8009422 <__ieee754_pow+0x9ce>
 8009414:	9a02      	ldr	r2, [sp, #8]
 8009416:	f000 f839 	bl	800948c <scalbn>
 800941a:	9a06      	ldr	r2, [sp, #24]
 800941c:	9b07      	ldr	r3, [sp, #28]
 800941e:	f7ff fb8b 	bl	8008b38 <__ieee754_pow+0xe4>
 8009422:	0019      	movs	r1, r3
 8009424:	e7f9      	b.n	800941a <__ieee754_pow+0x9c6>
 8009426:	2300      	movs	r3, #0
 8009428:	4c15      	ldr	r4, [pc, #84]	@ (8009480 <__ieee754_pow+0xa2c>)
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	9401      	str	r4, [sp, #4]
 800942e:	f7ff fbc8 	bl	8008bc2 <__ieee754_pow+0x16e>
 8009432:	46c0      	nop			@ (mov r8, r8)
 8009434:	3fe00000 	.word	0x3fe00000
 8009438:	fffffc02 	.word	0xfffffc02
 800943c:	fffffc01 	.word	0xfffffc01
 8009440:	fff00000 	.word	0xfff00000
 8009444:	3fe62e43 	.word	0x3fe62e43
 8009448:	fefa39ef 	.word	0xfefa39ef
 800944c:	3fe62e42 	.word	0x3fe62e42
 8009450:	0ca86c39 	.word	0x0ca86c39
 8009454:	be205c61 	.word	0xbe205c61
 8009458:	72bea4d0 	.word	0x72bea4d0
 800945c:	3e663769 	.word	0x3e663769
 8009460:	c5d26bf1 	.word	0xc5d26bf1
 8009464:	3ebbbd41 	.word	0x3ebbbd41
 8009468:	af25de2c 	.word	0xaf25de2c
 800946c:	3f11566a 	.word	0x3f11566a
 8009470:	16bebd93 	.word	0x16bebd93
 8009474:	3f66c16c 	.word	0x3f66c16c
 8009478:	5555553e 	.word	0x5555553e
 800947c:	3fc55555 	.word	0x3fc55555
 8009480:	3ff00000 	.word	0x3ff00000

08009484 <fabs>:
 8009484:	0049      	lsls	r1, r1, #1
 8009486:	084b      	lsrs	r3, r1, #1
 8009488:	0019      	movs	r1, r3
 800948a:	4770      	bx	lr

0800948c <scalbn>:
 800948c:	004b      	lsls	r3, r1, #1
 800948e:	b570      	push	{r4, r5, r6, lr}
 8009490:	0d5b      	lsrs	r3, r3, #21
 8009492:	0014      	movs	r4, r2
 8009494:	000d      	movs	r5, r1
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10f      	bne.n	80094ba <scalbn+0x2e>
 800949a:	004b      	lsls	r3, r1, #1
 800949c:	085b      	lsrs	r3, r3, #1
 800949e:	4303      	orrs	r3, r0
 80094a0:	d012      	beq.n	80094c8 <scalbn+0x3c>
 80094a2:	4b23      	ldr	r3, [pc, #140]	@ (8009530 <scalbn+0xa4>)
 80094a4:	2200      	movs	r2, #0
 80094a6:	f7f8 f8eb 	bl	8001680 <__aeabi_dmul>
 80094aa:	4b22      	ldr	r3, [pc, #136]	@ (8009534 <scalbn+0xa8>)
 80094ac:	429c      	cmp	r4, r3
 80094ae:	da0c      	bge.n	80094ca <scalbn+0x3e>
 80094b0:	4a21      	ldr	r2, [pc, #132]	@ (8009538 <scalbn+0xac>)
 80094b2:	4b22      	ldr	r3, [pc, #136]	@ (800953c <scalbn+0xb0>)
 80094b4:	f7f8 f8e4 	bl	8001680 <__aeabi_dmul>
 80094b8:	e006      	b.n	80094c8 <scalbn+0x3c>
 80094ba:	4a21      	ldr	r2, [pc, #132]	@ (8009540 <scalbn+0xb4>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d108      	bne.n	80094d2 <scalbn+0x46>
 80094c0:	0002      	movs	r2, r0
 80094c2:	000b      	movs	r3, r1
 80094c4:	f7f7 f8dc 	bl	8000680 <__aeabi_dadd>
 80094c8:	bd70      	pop	{r4, r5, r6, pc}
 80094ca:	000d      	movs	r5, r1
 80094cc:	004b      	lsls	r3, r1, #1
 80094ce:	0d5b      	lsrs	r3, r3, #21
 80094d0:	3b36      	subs	r3, #54	@ 0x36
 80094d2:	4a1c      	ldr	r2, [pc, #112]	@ (8009544 <scalbn+0xb8>)
 80094d4:	4294      	cmp	r4, r2
 80094d6:	dd0a      	ble.n	80094ee <scalbn+0x62>
 80094d8:	4c1b      	ldr	r4, [pc, #108]	@ (8009548 <scalbn+0xbc>)
 80094da:	4d1c      	ldr	r5, [pc, #112]	@ (800954c <scalbn+0xc0>)
 80094dc:	2900      	cmp	r1, #0
 80094de:	da01      	bge.n	80094e4 <scalbn+0x58>
 80094e0:	4c19      	ldr	r4, [pc, #100]	@ (8009548 <scalbn+0xbc>)
 80094e2:	4d1b      	ldr	r5, [pc, #108]	@ (8009550 <scalbn+0xc4>)
 80094e4:	4a18      	ldr	r2, [pc, #96]	@ (8009548 <scalbn+0xbc>)
 80094e6:	4b19      	ldr	r3, [pc, #100]	@ (800954c <scalbn+0xc0>)
 80094e8:	0020      	movs	r0, r4
 80094ea:	0029      	movs	r1, r5
 80094ec:	e7e2      	b.n	80094b4 <scalbn+0x28>
 80094ee:	18e2      	adds	r2, r4, r3
 80094f0:	4b18      	ldr	r3, [pc, #96]	@ (8009554 <scalbn+0xc8>)
 80094f2:	429a      	cmp	r2, r3
 80094f4:	dcf0      	bgt.n	80094d8 <scalbn+0x4c>
 80094f6:	2a00      	cmp	r2, #0
 80094f8:	dd05      	ble.n	8009506 <scalbn+0x7a>
 80094fa:	4b17      	ldr	r3, [pc, #92]	@ (8009558 <scalbn+0xcc>)
 80094fc:	0512      	lsls	r2, r2, #20
 80094fe:	402b      	ands	r3, r5
 8009500:	4313      	orrs	r3, r2
 8009502:	0019      	movs	r1, r3
 8009504:	e7e0      	b.n	80094c8 <scalbn+0x3c>
 8009506:	0013      	movs	r3, r2
 8009508:	3335      	adds	r3, #53	@ 0x35
 800950a:	da08      	bge.n	800951e <scalbn+0x92>
 800950c:	4c0a      	ldr	r4, [pc, #40]	@ (8009538 <scalbn+0xac>)
 800950e:	4d0b      	ldr	r5, [pc, #44]	@ (800953c <scalbn+0xb0>)
 8009510:	2900      	cmp	r1, #0
 8009512:	da01      	bge.n	8009518 <scalbn+0x8c>
 8009514:	4c08      	ldr	r4, [pc, #32]	@ (8009538 <scalbn+0xac>)
 8009516:	4d11      	ldr	r5, [pc, #68]	@ (800955c <scalbn+0xd0>)
 8009518:	4a07      	ldr	r2, [pc, #28]	@ (8009538 <scalbn+0xac>)
 800951a:	4b08      	ldr	r3, [pc, #32]	@ (800953c <scalbn+0xb0>)
 800951c:	e7e4      	b.n	80094e8 <scalbn+0x5c>
 800951e:	4b0e      	ldr	r3, [pc, #56]	@ (8009558 <scalbn+0xcc>)
 8009520:	3236      	adds	r2, #54	@ 0x36
 8009522:	401d      	ands	r5, r3
 8009524:	0512      	lsls	r2, r2, #20
 8009526:	432a      	orrs	r2, r5
 8009528:	0011      	movs	r1, r2
 800952a:	4b0d      	ldr	r3, [pc, #52]	@ (8009560 <scalbn+0xd4>)
 800952c:	2200      	movs	r2, #0
 800952e:	e7c1      	b.n	80094b4 <scalbn+0x28>
 8009530:	43500000 	.word	0x43500000
 8009534:	ffff3cb0 	.word	0xffff3cb0
 8009538:	c2f8f359 	.word	0xc2f8f359
 800953c:	01a56e1f 	.word	0x01a56e1f
 8009540:	000007ff 	.word	0x000007ff
 8009544:	0000c350 	.word	0x0000c350
 8009548:	8800759c 	.word	0x8800759c
 800954c:	7e37e43c 	.word	0x7e37e43c
 8009550:	fe37e43c 	.word	0xfe37e43c
 8009554:	000007fe 	.word	0x000007fe
 8009558:	800fffff 	.word	0x800fffff
 800955c:	81a56e1f 	.word	0x81a56e1f
 8009560:	3c900000 	.word	0x3c900000

08009564 <with_errno>:
 8009564:	b570      	push	{r4, r5, r6, lr}
 8009566:	000d      	movs	r5, r1
 8009568:	0016      	movs	r6, r2
 800956a:	0004      	movs	r4, r0
 800956c:	f7fc ff0a 	bl	8006384 <__errno>
 8009570:	0029      	movs	r1, r5
 8009572:	6006      	str	r6, [r0, #0]
 8009574:	0020      	movs	r0, r4
 8009576:	bd70      	pop	{r4, r5, r6, pc}

08009578 <xflow>:
 8009578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800957a:	0014      	movs	r4, r2
 800957c:	001d      	movs	r5, r3
 800957e:	2800      	cmp	r0, #0
 8009580:	d002      	beq.n	8009588 <xflow+0x10>
 8009582:	2180      	movs	r1, #128	@ 0x80
 8009584:	0609      	lsls	r1, r1, #24
 8009586:	185b      	adds	r3, r3, r1
 8009588:	9200      	str	r2, [sp, #0]
 800958a:	9301      	str	r3, [sp, #4]
 800958c:	9a00      	ldr	r2, [sp, #0]
 800958e:	9b01      	ldr	r3, [sp, #4]
 8009590:	0020      	movs	r0, r4
 8009592:	0029      	movs	r1, r5
 8009594:	f7f8 f874 	bl	8001680 <__aeabi_dmul>
 8009598:	2222      	movs	r2, #34	@ 0x22
 800959a:	f7ff ffe3 	bl	8009564 <with_errno>
 800959e:	b003      	add	sp, #12
 80095a0:	bd30      	pop	{r4, r5, pc}

080095a2 <__math_uflow>:
 80095a2:	2380      	movs	r3, #128	@ 0x80
 80095a4:	b510      	push	{r4, lr}
 80095a6:	2200      	movs	r2, #0
 80095a8:	055b      	lsls	r3, r3, #21
 80095aa:	f7ff ffe5 	bl	8009578 <xflow>
 80095ae:	bd10      	pop	{r4, pc}

080095b0 <__math_oflow>:
 80095b0:	23e0      	movs	r3, #224	@ 0xe0
 80095b2:	b510      	push	{r4, lr}
 80095b4:	2200      	movs	r2, #0
 80095b6:	05db      	lsls	r3, r3, #23
 80095b8:	f7ff ffde 	bl	8009578 <xflow>
 80095bc:	bd10      	pop	{r4, pc}
	...

080095c0 <__ieee754_sqrt>:
 80095c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095c2:	000a      	movs	r2, r1
 80095c4:	000d      	movs	r5, r1
 80095c6:	496b      	ldr	r1, [pc, #428]	@ (8009774 <__ieee754_sqrt+0x1b4>)
 80095c8:	0004      	movs	r4, r0
 80095ca:	0003      	movs	r3, r0
 80095cc:	0008      	movs	r0, r1
 80095ce:	b087      	sub	sp, #28
 80095d0:	4028      	ands	r0, r5
 80095d2:	4288      	cmp	r0, r1
 80095d4:	d111      	bne.n	80095fa <__ieee754_sqrt+0x3a>
 80095d6:	0022      	movs	r2, r4
 80095d8:	002b      	movs	r3, r5
 80095da:	0020      	movs	r0, r4
 80095dc:	0029      	movs	r1, r5
 80095de:	f7f8 f84f 	bl	8001680 <__aeabi_dmul>
 80095e2:	0002      	movs	r2, r0
 80095e4:	000b      	movs	r3, r1
 80095e6:	0020      	movs	r0, r4
 80095e8:	0029      	movs	r1, r5
 80095ea:	f7f7 f849 	bl	8000680 <__aeabi_dadd>
 80095ee:	0004      	movs	r4, r0
 80095f0:	000d      	movs	r5, r1
 80095f2:	0020      	movs	r0, r4
 80095f4:	0029      	movs	r1, r5
 80095f6:	b007      	add	sp, #28
 80095f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095fa:	2d00      	cmp	r5, #0
 80095fc:	dc11      	bgt.n	8009622 <__ieee754_sqrt+0x62>
 80095fe:	0069      	lsls	r1, r5, #1
 8009600:	0849      	lsrs	r1, r1, #1
 8009602:	4321      	orrs	r1, r4
 8009604:	d0f5      	beq.n	80095f2 <__ieee754_sqrt+0x32>
 8009606:	2000      	movs	r0, #0
 8009608:	4285      	cmp	r5, r0
 800960a:	d010      	beq.n	800962e <__ieee754_sqrt+0x6e>
 800960c:	0022      	movs	r2, r4
 800960e:	002b      	movs	r3, r5
 8009610:	0020      	movs	r0, r4
 8009612:	0029      	movs	r1, r5
 8009614:	f7f8 fb1a 	bl	8001c4c <__aeabi_dsub>
 8009618:	0002      	movs	r2, r0
 800961a:	000b      	movs	r3, r1
 800961c:	f7f7 fbf6 	bl	8000e0c <__aeabi_ddiv>
 8009620:	e7e5      	b.n	80095ee <__ieee754_sqrt+0x2e>
 8009622:	1528      	asrs	r0, r5, #20
 8009624:	d115      	bne.n	8009652 <__ieee754_sqrt+0x92>
 8009626:	2480      	movs	r4, #128	@ 0x80
 8009628:	2100      	movs	r1, #0
 800962a:	0364      	lsls	r4, r4, #13
 800962c:	e007      	b.n	800963e <__ieee754_sqrt+0x7e>
 800962e:	0ada      	lsrs	r2, r3, #11
 8009630:	3815      	subs	r0, #21
 8009632:	055b      	lsls	r3, r3, #21
 8009634:	2a00      	cmp	r2, #0
 8009636:	d0fa      	beq.n	800962e <__ieee754_sqrt+0x6e>
 8009638:	e7f5      	b.n	8009626 <__ieee754_sqrt+0x66>
 800963a:	0052      	lsls	r2, r2, #1
 800963c:	3101      	adds	r1, #1
 800963e:	4222      	tst	r2, r4
 8009640:	d0fb      	beq.n	800963a <__ieee754_sqrt+0x7a>
 8009642:	1e4c      	subs	r4, r1, #1
 8009644:	1b00      	subs	r0, r0, r4
 8009646:	2420      	movs	r4, #32
 8009648:	001d      	movs	r5, r3
 800964a:	1a64      	subs	r4, r4, r1
 800964c:	40e5      	lsrs	r5, r4
 800964e:	408b      	lsls	r3, r1
 8009650:	432a      	orrs	r2, r5
 8009652:	4949      	ldr	r1, [pc, #292]	@ (8009778 <__ieee754_sqrt+0x1b8>)
 8009654:	0312      	lsls	r2, r2, #12
 8009656:	1844      	adds	r4, r0, r1
 8009658:	2180      	movs	r1, #128	@ 0x80
 800965a:	0b12      	lsrs	r2, r2, #12
 800965c:	0349      	lsls	r1, r1, #13
 800965e:	4311      	orrs	r1, r2
 8009660:	07c0      	lsls	r0, r0, #31
 8009662:	d403      	bmi.n	800966c <__ieee754_sqrt+0xac>
 8009664:	0fda      	lsrs	r2, r3, #31
 8009666:	0049      	lsls	r1, r1, #1
 8009668:	1851      	adds	r1, r2, r1
 800966a:	005b      	lsls	r3, r3, #1
 800966c:	2500      	movs	r5, #0
 800966e:	1062      	asrs	r2, r4, #1
 8009670:	0049      	lsls	r1, r1, #1
 8009672:	2480      	movs	r4, #128	@ 0x80
 8009674:	9205      	str	r2, [sp, #20]
 8009676:	0fda      	lsrs	r2, r3, #31
 8009678:	1852      	adds	r2, r2, r1
 800967a:	2016      	movs	r0, #22
 800967c:	0029      	movs	r1, r5
 800967e:	005b      	lsls	r3, r3, #1
 8009680:	03a4      	lsls	r4, r4, #14
 8009682:	190e      	adds	r6, r1, r4
 8009684:	4296      	cmp	r6, r2
 8009686:	dc02      	bgt.n	800968e <__ieee754_sqrt+0xce>
 8009688:	1931      	adds	r1, r6, r4
 800968a:	1b92      	subs	r2, r2, r6
 800968c:	192d      	adds	r5, r5, r4
 800968e:	0fde      	lsrs	r6, r3, #31
 8009690:	0052      	lsls	r2, r2, #1
 8009692:	3801      	subs	r0, #1
 8009694:	1992      	adds	r2, r2, r6
 8009696:	005b      	lsls	r3, r3, #1
 8009698:	0864      	lsrs	r4, r4, #1
 800969a:	2800      	cmp	r0, #0
 800969c:	d1f1      	bne.n	8009682 <__ieee754_sqrt+0xc2>
 800969e:	2620      	movs	r6, #32
 80096a0:	2780      	movs	r7, #128	@ 0x80
 80096a2:	0004      	movs	r4, r0
 80096a4:	9604      	str	r6, [sp, #16]
 80096a6:	063f      	lsls	r7, r7, #24
 80096a8:	183e      	adds	r6, r7, r0
 80096aa:	46b4      	mov	ip, r6
 80096ac:	428a      	cmp	r2, r1
 80096ae:	dc02      	bgt.n	80096b6 <__ieee754_sqrt+0xf6>
 80096b0:	d114      	bne.n	80096dc <__ieee754_sqrt+0x11c>
 80096b2:	429e      	cmp	r6, r3
 80096b4:	d812      	bhi.n	80096dc <__ieee754_sqrt+0x11c>
 80096b6:	4660      	mov	r0, ip
 80096b8:	4666      	mov	r6, ip
 80096ba:	19c0      	adds	r0, r0, r7
 80096bc:	9100      	str	r1, [sp, #0]
 80096be:	2e00      	cmp	r6, #0
 80096c0:	da03      	bge.n	80096ca <__ieee754_sqrt+0x10a>
 80096c2:	43c6      	mvns	r6, r0
 80096c4:	0ff6      	lsrs	r6, r6, #31
 80096c6:	198e      	adds	r6, r1, r6
 80096c8:	9600      	str	r6, [sp, #0]
 80096ca:	1a52      	subs	r2, r2, r1
 80096cc:	4563      	cmp	r3, ip
 80096ce:	4189      	sbcs	r1, r1
 80096d0:	4249      	negs	r1, r1
 80096d2:	1a52      	subs	r2, r2, r1
 80096d4:	4661      	mov	r1, ip
 80096d6:	1a5b      	subs	r3, r3, r1
 80096d8:	9900      	ldr	r1, [sp, #0]
 80096da:	19e4      	adds	r4, r4, r7
 80096dc:	0fde      	lsrs	r6, r3, #31
 80096de:	0052      	lsls	r2, r2, #1
 80096e0:	1992      	adds	r2, r2, r6
 80096e2:	9e04      	ldr	r6, [sp, #16]
 80096e4:	005b      	lsls	r3, r3, #1
 80096e6:	3e01      	subs	r6, #1
 80096e8:	087f      	lsrs	r7, r7, #1
 80096ea:	9604      	str	r6, [sp, #16]
 80096ec:	2e00      	cmp	r6, #0
 80096ee:	d1db      	bne.n	80096a8 <__ieee754_sqrt+0xe8>
 80096f0:	431a      	orrs	r2, r3
 80096f2:	d01f      	beq.n	8009734 <__ieee754_sqrt+0x174>
 80096f4:	4e21      	ldr	r6, [pc, #132]	@ (800977c <__ieee754_sqrt+0x1bc>)
 80096f6:	4f22      	ldr	r7, [pc, #136]	@ (8009780 <__ieee754_sqrt+0x1c0>)
 80096f8:	6830      	ldr	r0, [r6, #0]
 80096fa:	6871      	ldr	r1, [r6, #4]
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	9200      	str	r2, [sp, #0]
 8009702:	9301      	str	r3, [sp, #4]
 8009704:	6832      	ldr	r2, [r6, #0]
 8009706:	6873      	ldr	r3, [r6, #4]
 8009708:	9202      	str	r2, [sp, #8]
 800970a:	9303      	str	r3, [sp, #12]
 800970c:	9a00      	ldr	r2, [sp, #0]
 800970e:	9b01      	ldr	r3, [sp, #4]
 8009710:	f7f8 fa9c 	bl	8001c4c <__aeabi_dsub>
 8009714:	0002      	movs	r2, r0
 8009716:	000b      	movs	r3, r1
 8009718:	9802      	ldr	r0, [sp, #8]
 800971a:	9903      	ldr	r1, [sp, #12]
 800971c:	f7f6 fea6 	bl	800046c <__aeabi_dcmple>
 8009720:	2800      	cmp	r0, #0
 8009722:	d007      	beq.n	8009734 <__ieee754_sqrt+0x174>
 8009724:	6830      	ldr	r0, [r6, #0]
 8009726:	6871      	ldr	r1, [r6, #4]
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	1c67      	adds	r7, r4, #1
 800972e:	d10c      	bne.n	800974a <__ieee754_sqrt+0x18a>
 8009730:	9c04      	ldr	r4, [sp, #16]
 8009732:	3501      	adds	r5, #1
 8009734:	4a13      	ldr	r2, [pc, #76]	@ (8009784 <__ieee754_sqrt+0x1c4>)
 8009736:	106b      	asrs	r3, r5, #1
 8009738:	189b      	adds	r3, r3, r2
 800973a:	9a05      	ldr	r2, [sp, #20]
 800973c:	07ed      	lsls	r5, r5, #31
 800973e:	0864      	lsrs	r4, r4, #1
 8009740:	0512      	lsls	r2, r2, #20
 8009742:	4325      	orrs	r5, r4
 8009744:	0028      	movs	r0, r5
 8009746:	18d1      	adds	r1, r2, r3
 8009748:	e751      	b.n	80095ee <__ieee754_sqrt+0x2e>
 800974a:	f7f6 ff99 	bl	8000680 <__aeabi_dadd>
 800974e:	6877      	ldr	r7, [r6, #4]
 8009750:	6836      	ldr	r6, [r6, #0]
 8009752:	0002      	movs	r2, r0
 8009754:	000b      	movs	r3, r1
 8009756:	0030      	movs	r0, r6
 8009758:	0039      	movs	r1, r7
 800975a:	f7f6 fe7d 	bl	8000458 <__aeabi_dcmplt>
 800975e:	2800      	cmp	r0, #0
 8009760:	d004      	beq.n	800976c <__ieee754_sqrt+0x1ac>
 8009762:	3402      	adds	r4, #2
 8009764:	4263      	negs	r3, r4
 8009766:	4163      	adcs	r3, r4
 8009768:	18ed      	adds	r5, r5, r3
 800976a:	e7e3      	b.n	8009734 <__ieee754_sqrt+0x174>
 800976c:	2301      	movs	r3, #1
 800976e:	3401      	adds	r4, #1
 8009770:	439c      	bics	r4, r3
 8009772:	e7df      	b.n	8009734 <__ieee754_sqrt+0x174>
 8009774:	7ff00000 	.word	0x7ff00000
 8009778:	fffffc01 	.word	0xfffffc01
 800977c:	08009c10 	.word	0x08009c10
 8009780:	08009c08 	.word	0x08009c08
 8009784:	3fe00000 	.word	0x3fe00000

08009788 <_init>:
 8009788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978a:	46c0      	nop			@ (mov r8, r8)
 800978c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978e:	bc08      	pop	{r3}
 8009790:	469e      	mov	lr, r3
 8009792:	4770      	bx	lr

08009794 <_fini>:
 8009794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009796:	46c0      	nop			@ (mov r8, r8)
 8009798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979a:	bc08      	pop	{r3}
 800979c:	469e      	mov	lr, r3
 800979e:	4770      	bx	lr

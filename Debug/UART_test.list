
UART_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c20  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08009ce0  08009ce0  0000ace0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a160  0800a160  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a160  0800a160  0000b160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a168  0800a168  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a168  0800a168  0000b168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a16c  0800a16c  0000b16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a170  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  200001d8  0800a348  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  0800a348  0000c4f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ce7  00000000  00000000  0000c200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a2f  00000000  00000000  00015ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  00017918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006a2  00000000  00000000  000181c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016239  00000000  00000000  0001886a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bce9  00000000  00000000  0002eaa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008472d  00000000  00000000  0003a78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000beeb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003228  00000000  00000000  000beefc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000c2124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009cc8 	.word	0x08009cc8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	08009cc8 	.word	0x08009cc8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fb15 	bl	8001a6c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fa59 	bl	8001904 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fb07 	bl	8001a6c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fafd 	bl	8001a6c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa83 	bl	800198c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fa79 	bl	800198c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	@ (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f806 	bl	80004e8 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			@ (mov r8, r8)

080004e8 <__udivmoddi4>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	4657      	mov	r7, sl
 80004ec:	464e      	mov	r6, r9
 80004ee:	4645      	mov	r5, r8
 80004f0:	46de      	mov	lr, fp
 80004f2:	b5e0      	push	{r5, r6, r7, lr}
 80004f4:	0004      	movs	r4, r0
 80004f6:	000d      	movs	r5, r1
 80004f8:	4692      	mov	sl, r2
 80004fa:	4699      	mov	r9, r3
 80004fc:	b083      	sub	sp, #12
 80004fe:	428b      	cmp	r3, r1
 8000500:	d830      	bhi.n	8000564 <__udivmoddi4+0x7c>
 8000502:	d02d      	beq.n	8000560 <__udivmoddi4+0x78>
 8000504:	4649      	mov	r1, r9
 8000506:	4650      	mov	r0, sl
 8000508:	f002 fba6 	bl	8002c58 <__clzdi2>
 800050c:	0029      	movs	r1, r5
 800050e:	0006      	movs	r6, r0
 8000510:	0020      	movs	r0, r4
 8000512:	f002 fba1 	bl	8002c58 <__clzdi2>
 8000516:	1a33      	subs	r3, r6, r0
 8000518:	4698      	mov	r8, r3
 800051a:	3b20      	subs	r3, #32
 800051c:	d434      	bmi.n	8000588 <__udivmoddi4+0xa0>
 800051e:	469b      	mov	fp, r3
 8000520:	4653      	mov	r3, sl
 8000522:	465a      	mov	r2, fp
 8000524:	4093      	lsls	r3, r2
 8000526:	4642      	mov	r2, r8
 8000528:	001f      	movs	r7, r3
 800052a:	4653      	mov	r3, sl
 800052c:	4093      	lsls	r3, r2
 800052e:	001e      	movs	r6, r3
 8000530:	42af      	cmp	r7, r5
 8000532:	d83b      	bhi.n	80005ac <__udivmoddi4+0xc4>
 8000534:	42af      	cmp	r7, r5
 8000536:	d100      	bne.n	800053a <__udivmoddi4+0x52>
 8000538:	e079      	b.n	800062e <__udivmoddi4+0x146>
 800053a:	465b      	mov	r3, fp
 800053c:	1ba4      	subs	r4, r4, r6
 800053e:	41bd      	sbcs	r5, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	da00      	bge.n	8000546 <__udivmoddi4+0x5e>
 8000544:	e076      	b.n	8000634 <__udivmoddi4+0x14c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	465a      	mov	r2, fp
 8000552:	4093      	lsls	r3, r2
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	4642      	mov	r2, r8
 800055a:	4093      	lsls	r3, r2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	e029      	b.n	80005b4 <__udivmoddi4+0xcc>
 8000560:	4282      	cmp	r2, r0
 8000562:	d9cf      	bls.n	8000504 <__udivmoddi4+0x1c>
 8000564:	2200      	movs	r2, #0
 8000566:	2300      	movs	r3, #0
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <__udivmoddi4+0x8e>
 8000572:	601c      	str	r4, [r3, #0]
 8000574:	605d      	str	r5, [r3, #4]
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	b003      	add	sp, #12
 800057c:	bcf0      	pop	{r4, r5, r6, r7}
 800057e:	46bb      	mov	fp, r7
 8000580:	46b2      	mov	sl, r6
 8000582:	46a9      	mov	r9, r5
 8000584:	46a0      	mov	r8, r4
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000588:	4642      	mov	r2, r8
 800058a:	469b      	mov	fp, r3
 800058c:	2320      	movs	r3, #32
 800058e:	1a9b      	subs	r3, r3, r2
 8000590:	4652      	mov	r2, sl
 8000592:	40da      	lsrs	r2, r3
 8000594:	4641      	mov	r1, r8
 8000596:	0013      	movs	r3, r2
 8000598:	464a      	mov	r2, r9
 800059a:	408a      	lsls	r2, r1
 800059c:	0017      	movs	r7, r2
 800059e:	4642      	mov	r2, r8
 80005a0:	431f      	orrs	r7, r3
 80005a2:	4653      	mov	r3, sl
 80005a4:	4093      	lsls	r3, r2
 80005a6:	001e      	movs	r6, r3
 80005a8:	42af      	cmp	r7, r5
 80005aa:	d9c3      	bls.n	8000534 <__udivmoddi4+0x4c>
 80005ac:	2200      	movs	r2, #0
 80005ae:	2300      	movs	r3, #0
 80005b0:	9200      	str	r2, [sp, #0]
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	4643      	mov	r3, r8
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0d8      	beq.n	800056c <__udivmoddi4+0x84>
 80005ba:	07fb      	lsls	r3, r7, #31
 80005bc:	0872      	lsrs	r2, r6, #1
 80005be:	431a      	orrs	r2, r3
 80005c0:	4646      	mov	r6, r8
 80005c2:	087b      	lsrs	r3, r7, #1
 80005c4:	e00e      	b.n	80005e4 <__udivmoddi4+0xfc>
 80005c6:	42ab      	cmp	r3, r5
 80005c8:	d101      	bne.n	80005ce <__udivmoddi4+0xe6>
 80005ca:	42a2      	cmp	r2, r4
 80005cc:	d80c      	bhi.n	80005e8 <__udivmoddi4+0x100>
 80005ce:	1aa4      	subs	r4, r4, r2
 80005d0:	419d      	sbcs	r5, r3
 80005d2:	2001      	movs	r0, #1
 80005d4:	1924      	adds	r4, r4, r4
 80005d6:	416d      	adcs	r5, r5
 80005d8:	2100      	movs	r1, #0
 80005da:	3e01      	subs	r6, #1
 80005dc:	1824      	adds	r4, r4, r0
 80005de:	414d      	adcs	r5, r1
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d006      	beq.n	80005f2 <__udivmoddi4+0x10a>
 80005e4:	42ab      	cmp	r3, r5
 80005e6:	d9ee      	bls.n	80005c6 <__udivmoddi4+0xde>
 80005e8:	3e01      	subs	r6, #1
 80005ea:	1924      	adds	r4, r4, r4
 80005ec:	416d      	adcs	r5, r5
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	d1f8      	bne.n	80005e4 <__udivmoddi4+0xfc>
 80005f2:	9800      	ldr	r0, [sp, #0]
 80005f4:	9901      	ldr	r1, [sp, #4]
 80005f6:	465b      	mov	r3, fp
 80005f8:	1900      	adds	r0, r0, r4
 80005fa:	4169      	adcs	r1, r5
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db24      	blt.n	800064a <__udivmoddi4+0x162>
 8000600:	002b      	movs	r3, r5
 8000602:	465a      	mov	r2, fp
 8000604:	4644      	mov	r4, r8
 8000606:	40d3      	lsrs	r3, r2
 8000608:	002a      	movs	r2, r5
 800060a:	40e2      	lsrs	r2, r4
 800060c:	001c      	movs	r4, r3
 800060e:	465b      	mov	r3, fp
 8000610:	0015      	movs	r5, r2
 8000612:	2b00      	cmp	r3, #0
 8000614:	db2a      	blt.n	800066c <__udivmoddi4+0x184>
 8000616:	0026      	movs	r6, r4
 8000618:	409e      	lsls	r6, r3
 800061a:	0033      	movs	r3, r6
 800061c:	0026      	movs	r6, r4
 800061e:	4647      	mov	r7, r8
 8000620:	40be      	lsls	r6, r7
 8000622:	0032      	movs	r2, r6
 8000624:	1a80      	subs	r0, r0, r2
 8000626:	4199      	sbcs	r1, r3
 8000628:	9000      	str	r0, [sp, #0]
 800062a:	9101      	str	r1, [sp, #4]
 800062c:	e79e      	b.n	800056c <__udivmoddi4+0x84>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d8bc      	bhi.n	80005ac <__udivmoddi4+0xc4>
 8000632:	e782      	b.n	800053a <__udivmoddi4+0x52>
 8000634:	4642      	mov	r2, r8
 8000636:	2320      	movs	r3, #32
 8000638:	2100      	movs	r1, #0
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	2200      	movs	r2, #0
 800063e:	9100      	str	r1, [sp, #0]
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	2201      	movs	r2, #1
 8000644:	40da      	lsrs	r2, r3
 8000646:	9201      	str	r2, [sp, #4]
 8000648:	e785      	b.n	8000556 <__udivmoddi4+0x6e>
 800064a:	4642      	mov	r2, r8
 800064c:	2320      	movs	r3, #32
 800064e:	1a9b      	subs	r3, r3, r2
 8000650:	002a      	movs	r2, r5
 8000652:	4646      	mov	r6, r8
 8000654:	409a      	lsls	r2, r3
 8000656:	0023      	movs	r3, r4
 8000658:	40f3      	lsrs	r3, r6
 800065a:	4644      	mov	r4, r8
 800065c:	4313      	orrs	r3, r2
 800065e:	002a      	movs	r2, r5
 8000660:	40e2      	lsrs	r2, r4
 8000662:	001c      	movs	r4, r3
 8000664:	465b      	mov	r3, fp
 8000666:	0015      	movs	r5, r2
 8000668:	2b00      	cmp	r3, #0
 800066a:	dad4      	bge.n	8000616 <__udivmoddi4+0x12e>
 800066c:	4642      	mov	r2, r8
 800066e:	002f      	movs	r7, r5
 8000670:	2320      	movs	r3, #32
 8000672:	0026      	movs	r6, r4
 8000674:	4097      	lsls	r7, r2
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	40de      	lsrs	r6, r3
 800067a:	003b      	movs	r3, r7
 800067c:	4333      	orrs	r3, r6
 800067e:	e7cd      	b.n	800061c <__udivmoddi4+0x134>

08000680 <__aeabi_fsub>:
 8000680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000682:	4647      	mov	r7, r8
 8000684:	46ce      	mov	lr, r9
 8000686:	0243      	lsls	r3, r0, #9
 8000688:	b580      	push	{r7, lr}
 800068a:	0a5f      	lsrs	r7, r3, #9
 800068c:	099b      	lsrs	r3, r3, #6
 800068e:	0045      	lsls	r5, r0, #1
 8000690:	004a      	lsls	r2, r1, #1
 8000692:	469c      	mov	ip, r3
 8000694:	024b      	lsls	r3, r1, #9
 8000696:	0fc4      	lsrs	r4, r0, #31
 8000698:	0fce      	lsrs	r6, r1, #31
 800069a:	0e2d      	lsrs	r5, r5, #24
 800069c:	0a58      	lsrs	r0, r3, #9
 800069e:	0e12      	lsrs	r2, r2, #24
 80006a0:	0999      	lsrs	r1, r3, #6
 80006a2:	2aff      	cmp	r2, #255	@ 0xff
 80006a4:	d06b      	beq.n	800077e <__aeabi_fsub+0xfe>
 80006a6:	2301      	movs	r3, #1
 80006a8:	405e      	eors	r6, r3
 80006aa:	1aab      	subs	r3, r5, r2
 80006ac:	42b4      	cmp	r4, r6
 80006ae:	d04b      	beq.n	8000748 <__aeabi_fsub+0xc8>
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	dc00      	bgt.n	80006b6 <__aeabi_fsub+0x36>
 80006b4:	e0ff      	b.n	80008b6 <__aeabi_fsub+0x236>
 80006b6:	2a00      	cmp	r2, #0
 80006b8:	d100      	bne.n	80006bc <__aeabi_fsub+0x3c>
 80006ba:	e088      	b.n	80007ce <__aeabi_fsub+0x14e>
 80006bc:	2dff      	cmp	r5, #255	@ 0xff
 80006be:	d100      	bne.n	80006c2 <__aeabi_fsub+0x42>
 80006c0:	e0ef      	b.n	80008a2 <__aeabi_fsub+0x222>
 80006c2:	2280      	movs	r2, #128	@ 0x80
 80006c4:	04d2      	lsls	r2, r2, #19
 80006c6:	4311      	orrs	r1, r2
 80006c8:	2001      	movs	r0, #1
 80006ca:	2b1b      	cmp	r3, #27
 80006cc:	dc08      	bgt.n	80006e0 <__aeabi_fsub+0x60>
 80006ce:	0008      	movs	r0, r1
 80006d0:	2220      	movs	r2, #32
 80006d2:	40d8      	lsrs	r0, r3
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	4099      	lsls	r1, r3
 80006d8:	000b      	movs	r3, r1
 80006da:	1e5a      	subs	r2, r3, #1
 80006dc:	4193      	sbcs	r3, r2
 80006de:	4318      	orrs	r0, r3
 80006e0:	4663      	mov	r3, ip
 80006e2:	1a1b      	subs	r3, r3, r0
 80006e4:	469c      	mov	ip, r3
 80006e6:	4663      	mov	r3, ip
 80006e8:	015b      	lsls	r3, r3, #5
 80006ea:	d400      	bmi.n	80006ee <__aeabi_fsub+0x6e>
 80006ec:	e0cd      	b.n	800088a <__aeabi_fsub+0x20a>
 80006ee:	4663      	mov	r3, ip
 80006f0:	019f      	lsls	r7, r3, #6
 80006f2:	09bf      	lsrs	r7, r7, #6
 80006f4:	0038      	movs	r0, r7
 80006f6:	f002 fa91 	bl	8002c1c <__clzsi2>
 80006fa:	003b      	movs	r3, r7
 80006fc:	3805      	subs	r0, #5
 80006fe:	4083      	lsls	r3, r0
 8000700:	4285      	cmp	r5, r0
 8000702:	dc00      	bgt.n	8000706 <__aeabi_fsub+0x86>
 8000704:	e0a2      	b.n	800084c <__aeabi_fsub+0x1cc>
 8000706:	4ab7      	ldr	r2, [pc, #732]	@ (80009e4 <__aeabi_fsub+0x364>)
 8000708:	1a2d      	subs	r5, r5, r0
 800070a:	401a      	ands	r2, r3
 800070c:	4694      	mov	ip, r2
 800070e:	075a      	lsls	r2, r3, #29
 8000710:	d100      	bne.n	8000714 <__aeabi_fsub+0x94>
 8000712:	e0c3      	b.n	800089c <__aeabi_fsub+0x21c>
 8000714:	220f      	movs	r2, #15
 8000716:	4013      	ands	r3, r2
 8000718:	2b04      	cmp	r3, #4
 800071a:	d100      	bne.n	800071e <__aeabi_fsub+0x9e>
 800071c:	e0be      	b.n	800089c <__aeabi_fsub+0x21c>
 800071e:	2304      	movs	r3, #4
 8000720:	4698      	mov	r8, r3
 8000722:	44c4      	add	ip, r8
 8000724:	4663      	mov	r3, ip
 8000726:	015b      	lsls	r3, r3, #5
 8000728:	d400      	bmi.n	800072c <__aeabi_fsub+0xac>
 800072a:	e0b7      	b.n	800089c <__aeabi_fsub+0x21c>
 800072c:	1c68      	adds	r0, r5, #1
 800072e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000730:	d000      	beq.n	8000734 <__aeabi_fsub+0xb4>
 8000732:	e0a5      	b.n	8000880 <__aeabi_fsub+0x200>
 8000734:	20ff      	movs	r0, #255	@ 0xff
 8000736:	2200      	movs	r2, #0
 8000738:	05c0      	lsls	r0, r0, #23
 800073a:	4310      	orrs	r0, r2
 800073c:	07e4      	lsls	r4, r4, #31
 800073e:	4320      	orrs	r0, r4
 8000740:	bcc0      	pop	{r6, r7}
 8000742:	46b9      	mov	r9, r7
 8000744:	46b0      	mov	r8, r6
 8000746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000748:	2b00      	cmp	r3, #0
 800074a:	dc00      	bgt.n	800074e <__aeabi_fsub+0xce>
 800074c:	e1eb      	b.n	8000b26 <__aeabi_fsub+0x4a6>
 800074e:	2a00      	cmp	r2, #0
 8000750:	d046      	beq.n	80007e0 <__aeabi_fsub+0x160>
 8000752:	2dff      	cmp	r5, #255	@ 0xff
 8000754:	d100      	bne.n	8000758 <__aeabi_fsub+0xd8>
 8000756:	e0a4      	b.n	80008a2 <__aeabi_fsub+0x222>
 8000758:	2280      	movs	r2, #128	@ 0x80
 800075a:	04d2      	lsls	r2, r2, #19
 800075c:	4311      	orrs	r1, r2
 800075e:	2b1b      	cmp	r3, #27
 8000760:	dc00      	bgt.n	8000764 <__aeabi_fsub+0xe4>
 8000762:	e0fb      	b.n	800095c <__aeabi_fsub+0x2dc>
 8000764:	2305      	movs	r3, #5
 8000766:	4698      	mov	r8, r3
 8000768:	002b      	movs	r3, r5
 800076a:	44c4      	add	ip, r8
 800076c:	4662      	mov	r2, ip
 800076e:	08d7      	lsrs	r7, r2, #3
 8000770:	2bff      	cmp	r3, #255	@ 0xff
 8000772:	d100      	bne.n	8000776 <__aeabi_fsub+0xf6>
 8000774:	e095      	b.n	80008a2 <__aeabi_fsub+0x222>
 8000776:	027a      	lsls	r2, r7, #9
 8000778:	0a52      	lsrs	r2, r2, #9
 800077a:	b2d8      	uxtb	r0, r3
 800077c:	e7dc      	b.n	8000738 <__aeabi_fsub+0xb8>
 800077e:	002b      	movs	r3, r5
 8000780:	3bff      	subs	r3, #255	@ 0xff
 8000782:	4699      	mov	r9, r3
 8000784:	2900      	cmp	r1, #0
 8000786:	d118      	bne.n	80007ba <__aeabi_fsub+0x13a>
 8000788:	2301      	movs	r3, #1
 800078a:	405e      	eors	r6, r3
 800078c:	42b4      	cmp	r4, r6
 800078e:	d100      	bne.n	8000792 <__aeabi_fsub+0x112>
 8000790:	e0ca      	b.n	8000928 <__aeabi_fsub+0x2a8>
 8000792:	464b      	mov	r3, r9
 8000794:	2b00      	cmp	r3, #0
 8000796:	d02d      	beq.n	80007f4 <__aeabi_fsub+0x174>
 8000798:	2d00      	cmp	r5, #0
 800079a:	d000      	beq.n	800079e <__aeabi_fsub+0x11e>
 800079c:	e13c      	b.n	8000a18 <__aeabi_fsub+0x398>
 800079e:	23ff      	movs	r3, #255	@ 0xff
 80007a0:	4664      	mov	r4, ip
 80007a2:	2c00      	cmp	r4, #0
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fsub+0x128>
 80007a6:	e15f      	b.n	8000a68 <__aeabi_fsub+0x3e8>
 80007a8:	1e5d      	subs	r5, r3, #1
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d100      	bne.n	80007b0 <__aeabi_fsub+0x130>
 80007ae:	e174      	b.n	8000a9a <__aeabi_fsub+0x41a>
 80007b0:	0034      	movs	r4, r6
 80007b2:	2bff      	cmp	r3, #255	@ 0xff
 80007b4:	d074      	beq.n	80008a0 <__aeabi_fsub+0x220>
 80007b6:	002b      	movs	r3, r5
 80007b8:	e103      	b.n	80009c2 <__aeabi_fsub+0x342>
 80007ba:	42b4      	cmp	r4, r6
 80007bc:	d100      	bne.n	80007c0 <__aeabi_fsub+0x140>
 80007be:	e09c      	b.n	80008fa <__aeabi_fsub+0x27a>
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d017      	beq.n	80007f4 <__aeabi_fsub+0x174>
 80007c4:	2d00      	cmp	r5, #0
 80007c6:	d0ea      	beq.n	800079e <__aeabi_fsub+0x11e>
 80007c8:	0007      	movs	r7, r0
 80007ca:	0034      	movs	r4, r6
 80007cc:	e06c      	b.n	80008a8 <__aeabi_fsub+0x228>
 80007ce:	2900      	cmp	r1, #0
 80007d0:	d0cc      	beq.n	800076c <__aeabi_fsub+0xec>
 80007d2:	1e5a      	subs	r2, r3, #1
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d02b      	beq.n	8000830 <__aeabi_fsub+0x1b0>
 80007d8:	2bff      	cmp	r3, #255	@ 0xff
 80007da:	d062      	beq.n	80008a2 <__aeabi_fsub+0x222>
 80007dc:	0013      	movs	r3, r2
 80007de:	e773      	b.n	80006c8 <__aeabi_fsub+0x48>
 80007e0:	2900      	cmp	r1, #0
 80007e2:	d0c3      	beq.n	800076c <__aeabi_fsub+0xec>
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d100      	bne.n	80007ec <__aeabi_fsub+0x16c>
 80007ea:	e11e      	b.n	8000a2a <__aeabi_fsub+0x3aa>
 80007ec:	2bff      	cmp	r3, #255	@ 0xff
 80007ee:	d058      	beq.n	80008a2 <__aeabi_fsub+0x222>
 80007f0:	0013      	movs	r3, r2
 80007f2:	e7b4      	b.n	800075e <__aeabi_fsub+0xde>
 80007f4:	22fe      	movs	r2, #254	@ 0xfe
 80007f6:	1c6b      	adds	r3, r5, #1
 80007f8:	421a      	tst	r2, r3
 80007fa:	d10d      	bne.n	8000818 <__aeabi_fsub+0x198>
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	d060      	beq.n	80008c2 <__aeabi_fsub+0x242>
 8000800:	4663      	mov	r3, ip
 8000802:	2b00      	cmp	r3, #0
 8000804:	d000      	beq.n	8000808 <__aeabi_fsub+0x188>
 8000806:	e120      	b.n	8000a4a <__aeabi_fsub+0x3ca>
 8000808:	2900      	cmp	r1, #0
 800080a:	d000      	beq.n	800080e <__aeabi_fsub+0x18e>
 800080c:	e128      	b.n	8000a60 <__aeabi_fsub+0x3e0>
 800080e:	2280      	movs	r2, #128	@ 0x80
 8000810:	2400      	movs	r4, #0
 8000812:	20ff      	movs	r0, #255	@ 0xff
 8000814:	03d2      	lsls	r2, r2, #15
 8000816:	e78f      	b.n	8000738 <__aeabi_fsub+0xb8>
 8000818:	4663      	mov	r3, ip
 800081a:	1a5f      	subs	r7, r3, r1
 800081c:	017b      	lsls	r3, r7, #5
 800081e:	d500      	bpl.n	8000822 <__aeabi_fsub+0x1a2>
 8000820:	e0fe      	b.n	8000a20 <__aeabi_fsub+0x3a0>
 8000822:	2f00      	cmp	r7, #0
 8000824:	d000      	beq.n	8000828 <__aeabi_fsub+0x1a8>
 8000826:	e765      	b.n	80006f4 <__aeabi_fsub+0x74>
 8000828:	2400      	movs	r4, #0
 800082a:	2000      	movs	r0, #0
 800082c:	2200      	movs	r2, #0
 800082e:	e783      	b.n	8000738 <__aeabi_fsub+0xb8>
 8000830:	4663      	mov	r3, ip
 8000832:	1a59      	subs	r1, r3, r1
 8000834:	014b      	lsls	r3, r1, #5
 8000836:	d400      	bmi.n	800083a <__aeabi_fsub+0x1ba>
 8000838:	e119      	b.n	8000a6e <__aeabi_fsub+0x3ee>
 800083a:	018f      	lsls	r7, r1, #6
 800083c:	09bf      	lsrs	r7, r7, #6
 800083e:	0038      	movs	r0, r7
 8000840:	f002 f9ec 	bl	8002c1c <__clzsi2>
 8000844:	003b      	movs	r3, r7
 8000846:	3805      	subs	r0, #5
 8000848:	4083      	lsls	r3, r0
 800084a:	2501      	movs	r5, #1
 800084c:	2220      	movs	r2, #32
 800084e:	1b40      	subs	r0, r0, r5
 8000850:	3001      	adds	r0, #1
 8000852:	1a12      	subs	r2, r2, r0
 8000854:	0019      	movs	r1, r3
 8000856:	4093      	lsls	r3, r2
 8000858:	40c1      	lsrs	r1, r0
 800085a:	1e5a      	subs	r2, r3, #1
 800085c:	4193      	sbcs	r3, r2
 800085e:	4319      	orrs	r1, r3
 8000860:	468c      	mov	ip, r1
 8000862:	1e0b      	subs	r3, r1, #0
 8000864:	d0e1      	beq.n	800082a <__aeabi_fsub+0x1aa>
 8000866:	075b      	lsls	r3, r3, #29
 8000868:	d100      	bne.n	800086c <__aeabi_fsub+0x1ec>
 800086a:	e152      	b.n	8000b12 <__aeabi_fsub+0x492>
 800086c:	230f      	movs	r3, #15
 800086e:	2500      	movs	r5, #0
 8000870:	400b      	ands	r3, r1
 8000872:	2b04      	cmp	r3, #4
 8000874:	d000      	beq.n	8000878 <__aeabi_fsub+0x1f8>
 8000876:	e752      	b.n	800071e <__aeabi_fsub+0x9e>
 8000878:	2001      	movs	r0, #1
 800087a:	014a      	lsls	r2, r1, #5
 800087c:	d400      	bmi.n	8000880 <__aeabi_fsub+0x200>
 800087e:	e092      	b.n	80009a6 <__aeabi_fsub+0x326>
 8000880:	b2c0      	uxtb	r0, r0
 8000882:	4663      	mov	r3, ip
 8000884:	019a      	lsls	r2, r3, #6
 8000886:	0a52      	lsrs	r2, r2, #9
 8000888:	e756      	b.n	8000738 <__aeabi_fsub+0xb8>
 800088a:	4663      	mov	r3, ip
 800088c:	075b      	lsls	r3, r3, #29
 800088e:	d005      	beq.n	800089c <__aeabi_fsub+0x21c>
 8000890:	230f      	movs	r3, #15
 8000892:	4662      	mov	r2, ip
 8000894:	4013      	ands	r3, r2
 8000896:	2b04      	cmp	r3, #4
 8000898:	d000      	beq.n	800089c <__aeabi_fsub+0x21c>
 800089a:	e740      	b.n	800071e <__aeabi_fsub+0x9e>
 800089c:	002b      	movs	r3, r5
 800089e:	e765      	b.n	800076c <__aeabi_fsub+0xec>
 80008a0:	0007      	movs	r7, r0
 80008a2:	2f00      	cmp	r7, #0
 80008a4:	d100      	bne.n	80008a8 <__aeabi_fsub+0x228>
 80008a6:	e745      	b.n	8000734 <__aeabi_fsub+0xb4>
 80008a8:	2280      	movs	r2, #128	@ 0x80
 80008aa:	03d2      	lsls	r2, r2, #15
 80008ac:	433a      	orrs	r2, r7
 80008ae:	0252      	lsls	r2, r2, #9
 80008b0:	20ff      	movs	r0, #255	@ 0xff
 80008b2:	0a52      	lsrs	r2, r2, #9
 80008b4:	e740      	b.n	8000738 <__aeabi_fsub+0xb8>
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d179      	bne.n	80009ae <__aeabi_fsub+0x32e>
 80008ba:	22fe      	movs	r2, #254	@ 0xfe
 80008bc:	1c6b      	adds	r3, r5, #1
 80008be:	421a      	tst	r2, r3
 80008c0:	d1aa      	bne.n	8000818 <__aeabi_fsub+0x198>
 80008c2:	4663      	mov	r3, ip
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d100      	bne.n	80008ca <__aeabi_fsub+0x24a>
 80008c8:	e0f5      	b.n	8000ab6 <__aeabi_fsub+0x436>
 80008ca:	2900      	cmp	r1, #0
 80008cc:	d100      	bne.n	80008d0 <__aeabi_fsub+0x250>
 80008ce:	e0d1      	b.n	8000a74 <__aeabi_fsub+0x3f4>
 80008d0:	1a5f      	subs	r7, r3, r1
 80008d2:	2380      	movs	r3, #128	@ 0x80
 80008d4:	04db      	lsls	r3, r3, #19
 80008d6:	421f      	tst	r7, r3
 80008d8:	d100      	bne.n	80008dc <__aeabi_fsub+0x25c>
 80008da:	e10e      	b.n	8000afa <__aeabi_fsub+0x47a>
 80008dc:	4662      	mov	r2, ip
 80008de:	2401      	movs	r4, #1
 80008e0:	1a8a      	subs	r2, r1, r2
 80008e2:	4694      	mov	ip, r2
 80008e4:	2000      	movs	r0, #0
 80008e6:	4034      	ands	r4, r6
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	d100      	bne.n	80008ee <__aeabi_fsub+0x26e>
 80008ec:	e724      	b.n	8000738 <__aeabi_fsub+0xb8>
 80008ee:	2001      	movs	r0, #1
 80008f0:	421a      	tst	r2, r3
 80008f2:	d1c6      	bne.n	8000882 <__aeabi_fsub+0x202>
 80008f4:	2300      	movs	r3, #0
 80008f6:	08d7      	lsrs	r7, r2, #3
 80008f8:	e73d      	b.n	8000776 <__aeabi_fsub+0xf6>
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d017      	beq.n	800092e <__aeabi_fsub+0x2ae>
 80008fe:	2d00      	cmp	r5, #0
 8000900:	d000      	beq.n	8000904 <__aeabi_fsub+0x284>
 8000902:	e0af      	b.n	8000a64 <__aeabi_fsub+0x3e4>
 8000904:	23ff      	movs	r3, #255	@ 0xff
 8000906:	4665      	mov	r5, ip
 8000908:	2d00      	cmp	r5, #0
 800090a:	d100      	bne.n	800090e <__aeabi_fsub+0x28e>
 800090c:	e0ad      	b.n	8000a6a <__aeabi_fsub+0x3ea>
 800090e:	1e5e      	subs	r6, r3, #1
 8000910:	2b01      	cmp	r3, #1
 8000912:	d100      	bne.n	8000916 <__aeabi_fsub+0x296>
 8000914:	e089      	b.n	8000a2a <__aeabi_fsub+0x3aa>
 8000916:	2bff      	cmp	r3, #255	@ 0xff
 8000918:	d0c2      	beq.n	80008a0 <__aeabi_fsub+0x220>
 800091a:	2e1b      	cmp	r6, #27
 800091c:	dc00      	bgt.n	8000920 <__aeabi_fsub+0x2a0>
 800091e:	e0ab      	b.n	8000a78 <__aeabi_fsub+0x3f8>
 8000920:	1d4b      	adds	r3, r1, #5
 8000922:	469c      	mov	ip, r3
 8000924:	0013      	movs	r3, r2
 8000926:	e721      	b.n	800076c <__aeabi_fsub+0xec>
 8000928:	464b      	mov	r3, r9
 800092a:	2b00      	cmp	r3, #0
 800092c:	d170      	bne.n	8000a10 <__aeabi_fsub+0x390>
 800092e:	22fe      	movs	r2, #254	@ 0xfe
 8000930:	1c6b      	adds	r3, r5, #1
 8000932:	421a      	tst	r2, r3
 8000934:	d15e      	bne.n	80009f4 <__aeabi_fsub+0x374>
 8000936:	2d00      	cmp	r5, #0
 8000938:	d000      	beq.n	800093c <__aeabi_fsub+0x2bc>
 800093a:	e0c3      	b.n	8000ac4 <__aeabi_fsub+0x444>
 800093c:	4663      	mov	r3, ip
 800093e:	2b00      	cmp	r3, #0
 8000940:	d100      	bne.n	8000944 <__aeabi_fsub+0x2c4>
 8000942:	e0d0      	b.n	8000ae6 <__aeabi_fsub+0x466>
 8000944:	2900      	cmp	r1, #0
 8000946:	d100      	bne.n	800094a <__aeabi_fsub+0x2ca>
 8000948:	e094      	b.n	8000a74 <__aeabi_fsub+0x3f4>
 800094a:	000a      	movs	r2, r1
 800094c:	4462      	add	r2, ip
 800094e:	0153      	lsls	r3, r2, #5
 8000950:	d400      	bmi.n	8000954 <__aeabi_fsub+0x2d4>
 8000952:	e0d8      	b.n	8000b06 <__aeabi_fsub+0x486>
 8000954:	0192      	lsls	r2, r2, #6
 8000956:	2001      	movs	r0, #1
 8000958:	0a52      	lsrs	r2, r2, #9
 800095a:	e6ed      	b.n	8000738 <__aeabi_fsub+0xb8>
 800095c:	0008      	movs	r0, r1
 800095e:	2220      	movs	r2, #32
 8000960:	40d8      	lsrs	r0, r3
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	4099      	lsls	r1, r3
 8000966:	000b      	movs	r3, r1
 8000968:	1e5a      	subs	r2, r3, #1
 800096a:	4193      	sbcs	r3, r2
 800096c:	4303      	orrs	r3, r0
 800096e:	449c      	add	ip, r3
 8000970:	4663      	mov	r3, ip
 8000972:	015b      	lsls	r3, r3, #5
 8000974:	d589      	bpl.n	800088a <__aeabi_fsub+0x20a>
 8000976:	3501      	adds	r5, #1
 8000978:	2dff      	cmp	r5, #255	@ 0xff
 800097a:	d100      	bne.n	800097e <__aeabi_fsub+0x2fe>
 800097c:	e6da      	b.n	8000734 <__aeabi_fsub+0xb4>
 800097e:	4662      	mov	r2, ip
 8000980:	2301      	movs	r3, #1
 8000982:	4919      	ldr	r1, [pc, #100]	@ (80009e8 <__aeabi_fsub+0x368>)
 8000984:	4013      	ands	r3, r2
 8000986:	0852      	lsrs	r2, r2, #1
 8000988:	400a      	ands	r2, r1
 800098a:	431a      	orrs	r2, r3
 800098c:	0013      	movs	r3, r2
 800098e:	4694      	mov	ip, r2
 8000990:	075b      	lsls	r3, r3, #29
 8000992:	d004      	beq.n	800099e <__aeabi_fsub+0x31e>
 8000994:	230f      	movs	r3, #15
 8000996:	4013      	ands	r3, r2
 8000998:	2b04      	cmp	r3, #4
 800099a:	d000      	beq.n	800099e <__aeabi_fsub+0x31e>
 800099c:	e6bf      	b.n	800071e <__aeabi_fsub+0x9e>
 800099e:	4663      	mov	r3, ip
 80009a0:	015b      	lsls	r3, r3, #5
 80009a2:	d500      	bpl.n	80009a6 <__aeabi_fsub+0x326>
 80009a4:	e6c2      	b.n	800072c <__aeabi_fsub+0xac>
 80009a6:	4663      	mov	r3, ip
 80009a8:	08df      	lsrs	r7, r3, #3
 80009aa:	002b      	movs	r3, r5
 80009ac:	e6e3      	b.n	8000776 <__aeabi_fsub+0xf6>
 80009ae:	1b53      	subs	r3, r2, r5
 80009b0:	2d00      	cmp	r5, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_fsub+0x336>
 80009b4:	e6f4      	b.n	80007a0 <__aeabi_fsub+0x120>
 80009b6:	2080      	movs	r0, #128	@ 0x80
 80009b8:	4664      	mov	r4, ip
 80009ba:	04c0      	lsls	r0, r0, #19
 80009bc:	4304      	orrs	r4, r0
 80009be:	46a4      	mov	ip, r4
 80009c0:	0034      	movs	r4, r6
 80009c2:	2001      	movs	r0, #1
 80009c4:	2b1b      	cmp	r3, #27
 80009c6:	dc09      	bgt.n	80009dc <__aeabi_fsub+0x35c>
 80009c8:	2520      	movs	r5, #32
 80009ca:	4660      	mov	r0, ip
 80009cc:	40d8      	lsrs	r0, r3
 80009ce:	1aeb      	subs	r3, r5, r3
 80009d0:	4665      	mov	r5, ip
 80009d2:	409d      	lsls	r5, r3
 80009d4:	002b      	movs	r3, r5
 80009d6:	1e5d      	subs	r5, r3, #1
 80009d8:	41ab      	sbcs	r3, r5
 80009da:	4318      	orrs	r0, r3
 80009dc:	1a0b      	subs	r3, r1, r0
 80009de:	469c      	mov	ip, r3
 80009e0:	0015      	movs	r5, r2
 80009e2:	e680      	b.n	80006e6 <__aeabi_fsub+0x66>
 80009e4:	fbffffff 	.word	0xfbffffff
 80009e8:	7dffffff 	.word	0x7dffffff
 80009ec:	22fe      	movs	r2, #254	@ 0xfe
 80009ee:	1c6b      	adds	r3, r5, #1
 80009f0:	4213      	tst	r3, r2
 80009f2:	d0a3      	beq.n	800093c <__aeabi_fsub+0x2bc>
 80009f4:	2bff      	cmp	r3, #255	@ 0xff
 80009f6:	d100      	bne.n	80009fa <__aeabi_fsub+0x37a>
 80009f8:	e69c      	b.n	8000734 <__aeabi_fsub+0xb4>
 80009fa:	4461      	add	r1, ip
 80009fc:	0849      	lsrs	r1, r1, #1
 80009fe:	074a      	lsls	r2, r1, #29
 8000a00:	d049      	beq.n	8000a96 <__aeabi_fsub+0x416>
 8000a02:	220f      	movs	r2, #15
 8000a04:	400a      	ands	r2, r1
 8000a06:	2a04      	cmp	r2, #4
 8000a08:	d045      	beq.n	8000a96 <__aeabi_fsub+0x416>
 8000a0a:	1d0a      	adds	r2, r1, #4
 8000a0c:	4694      	mov	ip, r2
 8000a0e:	e6ad      	b.n	800076c <__aeabi_fsub+0xec>
 8000a10:	2d00      	cmp	r5, #0
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fsub+0x396>
 8000a14:	e776      	b.n	8000904 <__aeabi_fsub+0x284>
 8000a16:	e68d      	b.n	8000734 <__aeabi_fsub+0xb4>
 8000a18:	0034      	movs	r4, r6
 8000a1a:	20ff      	movs	r0, #255	@ 0xff
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	e68b      	b.n	8000738 <__aeabi_fsub+0xb8>
 8000a20:	4663      	mov	r3, ip
 8000a22:	2401      	movs	r4, #1
 8000a24:	1acf      	subs	r7, r1, r3
 8000a26:	4034      	ands	r4, r6
 8000a28:	e664      	b.n	80006f4 <__aeabi_fsub+0x74>
 8000a2a:	4461      	add	r1, ip
 8000a2c:	014b      	lsls	r3, r1, #5
 8000a2e:	d56d      	bpl.n	8000b0c <__aeabi_fsub+0x48c>
 8000a30:	0848      	lsrs	r0, r1, #1
 8000a32:	4944      	ldr	r1, [pc, #272]	@ (8000b44 <__aeabi_fsub+0x4c4>)
 8000a34:	4001      	ands	r1, r0
 8000a36:	0743      	lsls	r3, r0, #29
 8000a38:	d02c      	beq.n	8000a94 <__aeabi_fsub+0x414>
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	4003      	ands	r3, r0
 8000a3e:	2b04      	cmp	r3, #4
 8000a40:	d028      	beq.n	8000a94 <__aeabi_fsub+0x414>
 8000a42:	1d0b      	adds	r3, r1, #4
 8000a44:	469c      	mov	ip, r3
 8000a46:	2302      	movs	r3, #2
 8000a48:	e690      	b.n	800076c <__aeabi_fsub+0xec>
 8000a4a:	2900      	cmp	r1, #0
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_fsub+0x3d0>
 8000a4e:	e72b      	b.n	80008a8 <__aeabi_fsub+0x228>
 8000a50:	2380      	movs	r3, #128	@ 0x80
 8000a52:	03db      	lsls	r3, r3, #15
 8000a54:	429f      	cmp	r7, r3
 8000a56:	d200      	bcs.n	8000a5a <__aeabi_fsub+0x3da>
 8000a58:	e726      	b.n	80008a8 <__aeabi_fsub+0x228>
 8000a5a:	4298      	cmp	r0, r3
 8000a5c:	d300      	bcc.n	8000a60 <__aeabi_fsub+0x3e0>
 8000a5e:	e723      	b.n	80008a8 <__aeabi_fsub+0x228>
 8000a60:	2401      	movs	r4, #1
 8000a62:	4034      	ands	r4, r6
 8000a64:	0007      	movs	r7, r0
 8000a66:	e71f      	b.n	80008a8 <__aeabi_fsub+0x228>
 8000a68:	0034      	movs	r4, r6
 8000a6a:	468c      	mov	ip, r1
 8000a6c:	e67e      	b.n	800076c <__aeabi_fsub+0xec>
 8000a6e:	2301      	movs	r3, #1
 8000a70:	08cf      	lsrs	r7, r1, #3
 8000a72:	e680      	b.n	8000776 <__aeabi_fsub+0xf6>
 8000a74:	2300      	movs	r3, #0
 8000a76:	e67e      	b.n	8000776 <__aeabi_fsub+0xf6>
 8000a78:	2020      	movs	r0, #32
 8000a7a:	4665      	mov	r5, ip
 8000a7c:	1b80      	subs	r0, r0, r6
 8000a7e:	4085      	lsls	r5, r0
 8000a80:	4663      	mov	r3, ip
 8000a82:	0028      	movs	r0, r5
 8000a84:	40f3      	lsrs	r3, r6
 8000a86:	1e45      	subs	r5, r0, #1
 8000a88:	41a8      	sbcs	r0, r5
 8000a8a:	4303      	orrs	r3, r0
 8000a8c:	469c      	mov	ip, r3
 8000a8e:	0015      	movs	r5, r2
 8000a90:	448c      	add	ip, r1
 8000a92:	e76d      	b.n	8000970 <__aeabi_fsub+0x2f0>
 8000a94:	2302      	movs	r3, #2
 8000a96:	08cf      	lsrs	r7, r1, #3
 8000a98:	e66d      	b.n	8000776 <__aeabi_fsub+0xf6>
 8000a9a:	1b0f      	subs	r7, r1, r4
 8000a9c:	017b      	lsls	r3, r7, #5
 8000a9e:	d528      	bpl.n	8000af2 <__aeabi_fsub+0x472>
 8000aa0:	01bf      	lsls	r7, r7, #6
 8000aa2:	09bf      	lsrs	r7, r7, #6
 8000aa4:	0038      	movs	r0, r7
 8000aa6:	f002 f8b9 	bl	8002c1c <__clzsi2>
 8000aaa:	003b      	movs	r3, r7
 8000aac:	3805      	subs	r0, #5
 8000aae:	4083      	lsls	r3, r0
 8000ab0:	0034      	movs	r4, r6
 8000ab2:	2501      	movs	r5, #1
 8000ab4:	e6ca      	b.n	800084c <__aeabi_fsub+0x1cc>
 8000ab6:	2900      	cmp	r1, #0
 8000ab8:	d100      	bne.n	8000abc <__aeabi_fsub+0x43c>
 8000aba:	e6b5      	b.n	8000828 <__aeabi_fsub+0x1a8>
 8000abc:	2401      	movs	r4, #1
 8000abe:	0007      	movs	r7, r0
 8000ac0:	4034      	ands	r4, r6
 8000ac2:	e658      	b.n	8000776 <__aeabi_fsub+0xf6>
 8000ac4:	4663      	mov	r3, ip
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d100      	bne.n	8000acc <__aeabi_fsub+0x44c>
 8000aca:	e6e9      	b.n	80008a0 <__aeabi_fsub+0x220>
 8000acc:	2900      	cmp	r1, #0
 8000ace:	d100      	bne.n	8000ad2 <__aeabi_fsub+0x452>
 8000ad0:	e6ea      	b.n	80008a8 <__aeabi_fsub+0x228>
 8000ad2:	2380      	movs	r3, #128	@ 0x80
 8000ad4:	03db      	lsls	r3, r3, #15
 8000ad6:	429f      	cmp	r7, r3
 8000ad8:	d200      	bcs.n	8000adc <__aeabi_fsub+0x45c>
 8000ada:	e6e5      	b.n	80008a8 <__aeabi_fsub+0x228>
 8000adc:	4298      	cmp	r0, r3
 8000ade:	d300      	bcc.n	8000ae2 <__aeabi_fsub+0x462>
 8000ae0:	e6e2      	b.n	80008a8 <__aeabi_fsub+0x228>
 8000ae2:	0007      	movs	r7, r0
 8000ae4:	e6e0      	b.n	80008a8 <__aeabi_fsub+0x228>
 8000ae6:	2900      	cmp	r1, #0
 8000ae8:	d100      	bne.n	8000aec <__aeabi_fsub+0x46c>
 8000aea:	e69e      	b.n	800082a <__aeabi_fsub+0x1aa>
 8000aec:	2300      	movs	r3, #0
 8000aee:	08cf      	lsrs	r7, r1, #3
 8000af0:	e641      	b.n	8000776 <__aeabi_fsub+0xf6>
 8000af2:	0034      	movs	r4, r6
 8000af4:	2301      	movs	r3, #1
 8000af6:	08ff      	lsrs	r7, r7, #3
 8000af8:	e63d      	b.n	8000776 <__aeabi_fsub+0xf6>
 8000afa:	2f00      	cmp	r7, #0
 8000afc:	d100      	bne.n	8000b00 <__aeabi_fsub+0x480>
 8000afe:	e693      	b.n	8000828 <__aeabi_fsub+0x1a8>
 8000b00:	2300      	movs	r3, #0
 8000b02:	08ff      	lsrs	r7, r7, #3
 8000b04:	e637      	b.n	8000776 <__aeabi_fsub+0xf6>
 8000b06:	2300      	movs	r3, #0
 8000b08:	08d7      	lsrs	r7, r2, #3
 8000b0a:	e634      	b.n	8000776 <__aeabi_fsub+0xf6>
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	08cf      	lsrs	r7, r1, #3
 8000b10:	e631      	b.n	8000776 <__aeabi_fsub+0xf6>
 8000b12:	2280      	movs	r2, #128	@ 0x80
 8000b14:	000b      	movs	r3, r1
 8000b16:	04d2      	lsls	r2, r2, #19
 8000b18:	2001      	movs	r0, #1
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	4211      	tst	r1, r2
 8000b1e:	d000      	beq.n	8000b22 <__aeabi_fsub+0x4a2>
 8000b20:	e6ae      	b.n	8000880 <__aeabi_fsub+0x200>
 8000b22:	08cf      	lsrs	r7, r1, #3
 8000b24:	e627      	b.n	8000776 <__aeabi_fsub+0xf6>
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d100      	bne.n	8000b2c <__aeabi_fsub+0x4ac>
 8000b2a:	e75f      	b.n	80009ec <__aeabi_fsub+0x36c>
 8000b2c:	1b56      	subs	r6, r2, r5
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d101      	bne.n	8000b36 <__aeabi_fsub+0x4b6>
 8000b32:	0033      	movs	r3, r6
 8000b34:	e6e7      	b.n	8000906 <__aeabi_fsub+0x286>
 8000b36:	2380      	movs	r3, #128	@ 0x80
 8000b38:	4660      	mov	r0, ip
 8000b3a:	04db      	lsls	r3, r3, #19
 8000b3c:	4318      	orrs	r0, r3
 8000b3e:	4684      	mov	ip, r0
 8000b40:	e6eb      	b.n	800091a <__aeabi_fsub+0x29a>
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	7dffffff 	.word	0x7dffffff

08000b48 <__aeabi_dadd>:
 8000b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b4a:	464f      	mov	r7, r9
 8000b4c:	4646      	mov	r6, r8
 8000b4e:	46d6      	mov	lr, sl
 8000b50:	b5c0      	push	{r6, r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	9000      	str	r0, [sp, #0]
 8000b56:	9101      	str	r1, [sp, #4]
 8000b58:	030e      	lsls	r6, r1, #12
 8000b5a:	004c      	lsls	r4, r1, #1
 8000b5c:	0fcd      	lsrs	r5, r1, #31
 8000b5e:	0a71      	lsrs	r1, r6, #9
 8000b60:	9e00      	ldr	r6, [sp, #0]
 8000b62:	005f      	lsls	r7, r3, #1
 8000b64:	0f76      	lsrs	r6, r6, #29
 8000b66:	430e      	orrs	r6, r1
 8000b68:	9900      	ldr	r1, [sp, #0]
 8000b6a:	9200      	str	r2, [sp, #0]
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	00c9      	lsls	r1, r1, #3
 8000b70:	4689      	mov	r9, r1
 8000b72:	0319      	lsls	r1, r3, #12
 8000b74:	0d7b      	lsrs	r3, r7, #21
 8000b76:	4698      	mov	r8, r3
 8000b78:	9b01      	ldr	r3, [sp, #4]
 8000b7a:	0a49      	lsrs	r1, r1, #9
 8000b7c:	0fdb      	lsrs	r3, r3, #31
 8000b7e:	469c      	mov	ip, r3
 8000b80:	9b00      	ldr	r3, [sp, #0]
 8000b82:	9a00      	ldr	r2, [sp, #0]
 8000b84:	0f5b      	lsrs	r3, r3, #29
 8000b86:	430b      	orrs	r3, r1
 8000b88:	4641      	mov	r1, r8
 8000b8a:	0d64      	lsrs	r4, r4, #21
 8000b8c:	00d2      	lsls	r2, r2, #3
 8000b8e:	1a61      	subs	r1, r4, r1
 8000b90:	4565      	cmp	r5, ip
 8000b92:	d100      	bne.n	8000b96 <__aeabi_dadd+0x4e>
 8000b94:	e0a6      	b.n	8000ce4 <__aeabi_dadd+0x19c>
 8000b96:	2900      	cmp	r1, #0
 8000b98:	dd72      	ble.n	8000c80 <__aeabi_dadd+0x138>
 8000b9a:	4647      	mov	r7, r8
 8000b9c:	2f00      	cmp	r7, #0
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dadd+0x5a>
 8000ba0:	e0dd      	b.n	8000d5e <__aeabi_dadd+0x216>
 8000ba2:	4fcc      	ldr	r7, [pc, #816]	@ (8000ed4 <__aeabi_dadd+0x38c>)
 8000ba4:	42bc      	cmp	r4, r7
 8000ba6:	d100      	bne.n	8000baa <__aeabi_dadd+0x62>
 8000ba8:	e19a      	b.n	8000ee0 <__aeabi_dadd+0x398>
 8000baa:	2701      	movs	r7, #1
 8000bac:	2938      	cmp	r1, #56	@ 0x38
 8000bae:	dc17      	bgt.n	8000be0 <__aeabi_dadd+0x98>
 8000bb0:	2780      	movs	r7, #128	@ 0x80
 8000bb2:	043f      	lsls	r7, r7, #16
 8000bb4:	433b      	orrs	r3, r7
 8000bb6:	291f      	cmp	r1, #31
 8000bb8:	dd00      	ble.n	8000bbc <__aeabi_dadd+0x74>
 8000bba:	e1dd      	b.n	8000f78 <__aeabi_dadd+0x430>
 8000bbc:	2720      	movs	r7, #32
 8000bbe:	1a78      	subs	r0, r7, r1
 8000bc0:	001f      	movs	r7, r3
 8000bc2:	4087      	lsls	r7, r0
 8000bc4:	46ba      	mov	sl, r7
 8000bc6:	0017      	movs	r7, r2
 8000bc8:	40cf      	lsrs	r7, r1
 8000bca:	4684      	mov	ip, r0
 8000bcc:	0038      	movs	r0, r7
 8000bce:	4657      	mov	r7, sl
 8000bd0:	4307      	orrs	r7, r0
 8000bd2:	4660      	mov	r0, ip
 8000bd4:	4082      	lsls	r2, r0
 8000bd6:	40cb      	lsrs	r3, r1
 8000bd8:	1e50      	subs	r0, r2, #1
 8000bda:	4182      	sbcs	r2, r0
 8000bdc:	1af6      	subs	r6, r6, r3
 8000bde:	4317      	orrs	r7, r2
 8000be0:	464b      	mov	r3, r9
 8000be2:	1bdf      	subs	r7, r3, r7
 8000be4:	45b9      	cmp	r9, r7
 8000be6:	4180      	sbcs	r0, r0
 8000be8:	4240      	negs	r0, r0
 8000bea:	1a36      	subs	r6, r6, r0
 8000bec:	0233      	lsls	r3, r6, #8
 8000bee:	d400      	bmi.n	8000bf2 <__aeabi_dadd+0xaa>
 8000bf0:	e0ff      	b.n	8000df2 <__aeabi_dadd+0x2aa>
 8000bf2:	0276      	lsls	r6, r6, #9
 8000bf4:	0a76      	lsrs	r6, r6, #9
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_dadd+0xb4>
 8000bfa:	e13c      	b.n	8000e76 <__aeabi_dadd+0x32e>
 8000bfc:	0030      	movs	r0, r6
 8000bfe:	f002 f80d 	bl	8002c1c <__clzsi2>
 8000c02:	0003      	movs	r3, r0
 8000c04:	3b08      	subs	r3, #8
 8000c06:	2120      	movs	r1, #32
 8000c08:	0038      	movs	r0, r7
 8000c0a:	1aca      	subs	r2, r1, r3
 8000c0c:	40d0      	lsrs	r0, r2
 8000c0e:	409e      	lsls	r6, r3
 8000c10:	0002      	movs	r2, r0
 8000c12:	409f      	lsls	r7, r3
 8000c14:	4332      	orrs	r2, r6
 8000c16:	429c      	cmp	r4, r3
 8000c18:	dd00      	ble.n	8000c1c <__aeabi_dadd+0xd4>
 8000c1a:	e1a6      	b.n	8000f6a <__aeabi_dadd+0x422>
 8000c1c:	1b18      	subs	r0, r3, r4
 8000c1e:	3001      	adds	r0, #1
 8000c20:	1a09      	subs	r1, r1, r0
 8000c22:	003e      	movs	r6, r7
 8000c24:	408f      	lsls	r7, r1
 8000c26:	40c6      	lsrs	r6, r0
 8000c28:	1e7b      	subs	r3, r7, #1
 8000c2a:	419f      	sbcs	r7, r3
 8000c2c:	0013      	movs	r3, r2
 8000c2e:	408b      	lsls	r3, r1
 8000c30:	4337      	orrs	r7, r6
 8000c32:	431f      	orrs	r7, r3
 8000c34:	40c2      	lsrs	r2, r0
 8000c36:	003b      	movs	r3, r7
 8000c38:	0016      	movs	r6, r2
 8000c3a:	2400      	movs	r4, #0
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_dadd+0xfa>
 8000c40:	e1df      	b.n	8001002 <__aeabi_dadd+0x4ba>
 8000c42:	077b      	lsls	r3, r7, #29
 8000c44:	d100      	bne.n	8000c48 <__aeabi_dadd+0x100>
 8000c46:	e332      	b.n	80012ae <__aeabi_dadd+0x766>
 8000c48:	230f      	movs	r3, #15
 8000c4a:	003a      	movs	r2, r7
 8000c4c:	403b      	ands	r3, r7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	d004      	beq.n	8000c5c <__aeabi_dadd+0x114>
 8000c52:	1d3a      	adds	r2, r7, #4
 8000c54:	42ba      	cmp	r2, r7
 8000c56:	41bf      	sbcs	r7, r7
 8000c58:	427f      	negs	r7, r7
 8000c5a:	19f6      	adds	r6, r6, r7
 8000c5c:	0233      	lsls	r3, r6, #8
 8000c5e:	d400      	bmi.n	8000c62 <__aeabi_dadd+0x11a>
 8000c60:	e323      	b.n	80012aa <__aeabi_dadd+0x762>
 8000c62:	4b9c      	ldr	r3, [pc, #624]	@ (8000ed4 <__aeabi_dadd+0x38c>)
 8000c64:	3401      	adds	r4, #1
 8000c66:	429c      	cmp	r4, r3
 8000c68:	d100      	bne.n	8000c6c <__aeabi_dadd+0x124>
 8000c6a:	e0b4      	b.n	8000dd6 <__aeabi_dadd+0x28e>
 8000c6c:	4b9a      	ldr	r3, [pc, #616]	@ (8000ed8 <__aeabi_dadd+0x390>)
 8000c6e:	0564      	lsls	r4, r4, #21
 8000c70:	401e      	ands	r6, r3
 8000c72:	0d64      	lsrs	r4, r4, #21
 8000c74:	0777      	lsls	r7, r6, #29
 8000c76:	08d2      	lsrs	r2, r2, #3
 8000c78:	0276      	lsls	r6, r6, #9
 8000c7a:	4317      	orrs	r7, r2
 8000c7c:	0b36      	lsrs	r6, r6, #12
 8000c7e:	e0ac      	b.n	8000dda <__aeabi_dadd+0x292>
 8000c80:	2900      	cmp	r1, #0
 8000c82:	d100      	bne.n	8000c86 <__aeabi_dadd+0x13e>
 8000c84:	e07e      	b.n	8000d84 <__aeabi_dadd+0x23c>
 8000c86:	4641      	mov	r1, r8
 8000c88:	1b09      	subs	r1, r1, r4
 8000c8a:	2c00      	cmp	r4, #0
 8000c8c:	d000      	beq.n	8000c90 <__aeabi_dadd+0x148>
 8000c8e:	e160      	b.n	8000f52 <__aeabi_dadd+0x40a>
 8000c90:	0034      	movs	r4, r6
 8000c92:	4648      	mov	r0, r9
 8000c94:	4304      	orrs	r4, r0
 8000c96:	d100      	bne.n	8000c9a <__aeabi_dadd+0x152>
 8000c98:	e1c9      	b.n	800102e <__aeabi_dadd+0x4e6>
 8000c9a:	1e4c      	subs	r4, r1, #1
 8000c9c:	2901      	cmp	r1, #1
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_dadd+0x15a>
 8000ca0:	e22e      	b.n	8001100 <__aeabi_dadd+0x5b8>
 8000ca2:	4d8c      	ldr	r5, [pc, #560]	@ (8000ed4 <__aeabi_dadd+0x38c>)
 8000ca4:	42a9      	cmp	r1, r5
 8000ca6:	d100      	bne.n	8000caa <__aeabi_dadd+0x162>
 8000ca8:	e224      	b.n	80010f4 <__aeabi_dadd+0x5ac>
 8000caa:	2701      	movs	r7, #1
 8000cac:	2c38      	cmp	r4, #56	@ 0x38
 8000cae:	dc11      	bgt.n	8000cd4 <__aeabi_dadd+0x18c>
 8000cb0:	0021      	movs	r1, r4
 8000cb2:	291f      	cmp	r1, #31
 8000cb4:	dd00      	ble.n	8000cb8 <__aeabi_dadd+0x170>
 8000cb6:	e20b      	b.n	80010d0 <__aeabi_dadd+0x588>
 8000cb8:	2420      	movs	r4, #32
 8000cba:	0037      	movs	r7, r6
 8000cbc:	4648      	mov	r0, r9
 8000cbe:	1a64      	subs	r4, r4, r1
 8000cc0:	40a7      	lsls	r7, r4
 8000cc2:	40c8      	lsrs	r0, r1
 8000cc4:	4307      	orrs	r7, r0
 8000cc6:	4648      	mov	r0, r9
 8000cc8:	40a0      	lsls	r0, r4
 8000cca:	40ce      	lsrs	r6, r1
 8000ccc:	1e44      	subs	r4, r0, #1
 8000cce:	41a0      	sbcs	r0, r4
 8000cd0:	1b9b      	subs	r3, r3, r6
 8000cd2:	4307      	orrs	r7, r0
 8000cd4:	1bd7      	subs	r7, r2, r7
 8000cd6:	42ba      	cmp	r2, r7
 8000cd8:	4192      	sbcs	r2, r2
 8000cda:	4252      	negs	r2, r2
 8000cdc:	4665      	mov	r5, ip
 8000cde:	4644      	mov	r4, r8
 8000ce0:	1a9e      	subs	r6, r3, r2
 8000ce2:	e783      	b.n	8000bec <__aeabi_dadd+0xa4>
 8000ce4:	2900      	cmp	r1, #0
 8000ce6:	dc00      	bgt.n	8000cea <__aeabi_dadd+0x1a2>
 8000ce8:	e09c      	b.n	8000e24 <__aeabi_dadd+0x2dc>
 8000cea:	4647      	mov	r7, r8
 8000cec:	2f00      	cmp	r7, #0
 8000cee:	d167      	bne.n	8000dc0 <__aeabi_dadd+0x278>
 8000cf0:	001f      	movs	r7, r3
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_dadd+0x1b0>
 8000cf6:	e0e4      	b.n	8000ec2 <__aeabi_dadd+0x37a>
 8000cf8:	1e48      	subs	r0, r1, #1
 8000cfa:	2901      	cmp	r1, #1
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_dadd+0x1b8>
 8000cfe:	e19b      	b.n	8001038 <__aeabi_dadd+0x4f0>
 8000d00:	4f74      	ldr	r7, [pc, #464]	@ (8000ed4 <__aeabi_dadd+0x38c>)
 8000d02:	42b9      	cmp	r1, r7
 8000d04:	d100      	bne.n	8000d08 <__aeabi_dadd+0x1c0>
 8000d06:	e0eb      	b.n	8000ee0 <__aeabi_dadd+0x398>
 8000d08:	2701      	movs	r7, #1
 8000d0a:	0001      	movs	r1, r0
 8000d0c:	2838      	cmp	r0, #56	@ 0x38
 8000d0e:	dc11      	bgt.n	8000d34 <__aeabi_dadd+0x1ec>
 8000d10:	291f      	cmp	r1, #31
 8000d12:	dd00      	ble.n	8000d16 <__aeabi_dadd+0x1ce>
 8000d14:	e1c7      	b.n	80010a6 <__aeabi_dadd+0x55e>
 8000d16:	2720      	movs	r7, #32
 8000d18:	1a78      	subs	r0, r7, r1
 8000d1a:	001f      	movs	r7, r3
 8000d1c:	4684      	mov	ip, r0
 8000d1e:	4087      	lsls	r7, r0
 8000d20:	0010      	movs	r0, r2
 8000d22:	40c8      	lsrs	r0, r1
 8000d24:	4307      	orrs	r7, r0
 8000d26:	4660      	mov	r0, ip
 8000d28:	4082      	lsls	r2, r0
 8000d2a:	40cb      	lsrs	r3, r1
 8000d2c:	1e50      	subs	r0, r2, #1
 8000d2e:	4182      	sbcs	r2, r0
 8000d30:	18f6      	adds	r6, r6, r3
 8000d32:	4317      	orrs	r7, r2
 8000d34:	444f      	add	r7, r9
 8000d36:	454f      	cmp	r7, r9
 8000d38:	4180      	sbcs	r0, r0
 8000d3a:	4240      	negs	r0, r0
 8000d3c:	1836      	adds	r6, r6, r0
 8000d3e:	0233      	lsls	r3, r6, #8
 8000d40:	d557      	bpl.n	8000df2 <__aeabi_dadd+0x2aa>
 8000d42:	4b64      	ldr	r3, [pc, #400]	@ (8000ed4 <__aeabi_dadd+0x38c>)
 8000d44:	3401      	adds	r4, #1
 8000d46:	429c      	cmp	r4, r3
 8000d48:	d045      	beq.n	8000dd6 <__aeabi_dadd+0x28e>
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	4b62      	ldr	r3, [pc, #392]	@ (8000ed8 <__aeabi_dadd+0x390>)
 8000d4e:	087a      	lsrs	r2, r7, #1
 8000d50:	401e      	ands	r6, r3
 8000d52:	4039      	ands	r1, r7
 8000d54:	430a      	orrs	r2, r1
 8000d56:	07f7      	lsls	r7, r6, #31
 8000d58:	4317      	orrs	r7, r2
 8000d5a:	0876      	lsrs	r6, r6, #1
 8000d5c:	e771      	b.n	8000c42 <__aeabi_dadd+0xfa>
 8000d5e:	001f      	movs	r7, r3
 8000d60:	4317      	orrs	r7, r2
 8000d62:	d100      	bne.n	8000d66 <__aeabi_dadd+0x21e>
 8000d64:	e0ad      	b.n	8000ec2 <__aeabi_dadd+0x37a>
 8000d66:	1e4f      	subs	r7, r1, #1
 8000d68:	46bc      	mov	ip, r7
 8000d6a:	2901      	cmp	r1, #1
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_dadd+0x228>
 8000d6e:	e182      	b.n	8001076 <__aeabi_dadd+0x52e>
 8000d70:	4f58      	ldr	r7, [pc, #352]	@ (8000ed4 <__aeabi_dadd+0x38c>)
 8000d72:	42b9      	cmp	r1, r7
 8000d74:	d100      	bne.n	8000d78 <__aeabi_dadd+0x230>
 8000d76:	e190      	b.n	800109a <__aeabi_dadd+0x552>
 8000d78:	4661      	mov	r1, ip
 8000d7a:	2701      	movs	r7, #1
 8000d7c:	2938      	cmp	r1, #56	@ 0x38
 8000d7e:	dd00      	ble.n	8000d82 <__aeabi_dadd+0x23a>
 8000d80:	e72e      	b.n	8000be0 <__aeabi_dadd+0x98>
 8000d82:	e718      	b.n	8000bb6 <__aeabi_dadd+0x6e>
 8000d84:	4f55      	ldr	r7, [pc, #340]	@ (8000edc <__aeabi_dadd+0x394>)
 8000d86:	1c61      	adds	r1, r4, #1
 8000d88:	4239      	tst	r1, r7
 8000d8a:	d000      	beq.n	8000d8e <__aeabi_dadd+0x246>
 8000d8c:	e0d0      	b.n	8000f30 <__aeabi_dadd+0x3e8>
 8000d8e:	0031      	movs	r1, r6
 8000d90:	4648      	mov	r0, r9
 8000d92:	001f      	movs	r7, r3
 8000d94:	4301      	orrs	r1, r0
 8000d96:	4317      	orrs	r7, r2
 8000d98:	2c00      	cmp	r4, #0
 8000d9a:	d000      	beq.n	8000d9e <__aeabi_dadd+0x256>
 8000d9c:	e13d      	b.n	800101a <__aeabi_dadd+0x4d2>
 8000d9e:	2900      	cmp	r1, #0
 8000da0:	d100      	bne.n	8000da4 <__aeabi_dadd+0x25c>
 8000da2:	e1bc      	b.n	800111e <__aeabi_dadd+0x5d6>
 8000da4:	2f00      	cmp	r7, #0
 8000da6:	d000      	beq.n	8000daa <__aeabi_dadd+0x262>
 8000da8:	e1bf      	b.n	800112a <__aeabi_dadd+0x5e2>
 8000daa:	464b      	mov	r3, r9
 8000dac:	2100      	movs	r1, #0
 8000dae:	08d8      	lsrs	r0, r3, #3
 8000db0:	0777      	lsls	r7, r6, #29
 8000db2:	4307      	orrs	r7, r0
 8000db4:	08f0      	lsrs	r0, r6, #3
 8000db6:	0306      	lsls	r6, r0, #12
 8000db8:	054c      	lsls	r4, r1, #21
 8000dba:	0b36      	lsrs	r6, r6, #12
 8000dbc:	0d64      	lsrs	r4, r4, #21
 8000dbe:	e00c      	b.n	8000dda <__aeabi_dadd+0x292>
 8000dc0:	4f44      	ldr	r7, [pc, #272]	@ (8000ed4 <__aeabi_dadd+0x38c>)
 8000dc2:	42bc      	cmp	r4, r7
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_dadd+0x280>
 8000dc6:	e08b      	b.n	8000ee0 <__aeabi_dadd+0x398>
 8000dc8:	2701      	movs	r7, #1
 8000dca:	2938      	cmp	r1, #56	@ 0x38
 8000dcc:	dcb2      	bgt.n	8000d34 <__aeabi_dadd+0x1ec>
 8000dce:	2780      	movs	r7, #128	@ 0x80
 8000dd0:	043f      	lsls	r7, r7, #16
 8000dd2:	433b      	orrs	r3, r7
 8000dd4:	e79c      	b.n	8000d10 <__aeabi_dadd+0x1c8>
 8000dd6:	2600      	movs	r6, #0
 8000dd8:	2700      	movs	r7, #0
 8000dda:	0524      	lsls	r4, r4, #20
 8000ddc:	4334      	orrs	r4, r6
 8000dde:	07ed      	lsls	r5, r5, #31
 8000de0:	432c      	orrs	r4, r5
 8000de2:	0038      	movs	r0, r7
 8000de4:	0021      	movs	r1, r4
 8000de6:	b002      	add	sp, #8
 8000de8:	bce0      	pop	{r5, r6, r7}
 8000dea:	46ba      	mov	sl, r7
 8000dec:	46b1      	mov	r9, r6
 8000dee:	46a8      	mov	r8, r5
 8000df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df2:	077b      	lsls	r3, r7, #29
 8000df4:	d004      	beq.n	8000e00 <__aeabi_dadd+0x2b8>
 8000df6:	230f      	movs	r3, #15
 8000df8:	403b      	ands	r3, r7
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	d000      	beq.n	8000e00 <__aeabi_dadd+0x2b8>
 8000dfe:	e728      	b.n	8000c52 <__aeabi_dadd+0x10a>
 8000e00:	08f8      	lsrs	r0, r7, #3
 8000e02:	4b34      	ldr	r3, [pc, #208]	@ (8000ed4 <__aeabi_dadd+0x38c>)
 8000e04:	0777      	lsls	r7, r6, #29
 8000e06:	4307      	orrs	r7, r0
 8000e08:	08f0      	lsrs	r0, r6, #3
 8000e0a:	429c      	cmp	r4, r3
 8000e0c:	d000      	beq.n	8000e10 <__aeabi_dadd+0x2c8>
 8000e0e:	e24a      	b.n	80012a6 <__aeabi_dadd+0x75e>
 8000e10:	003b      	movs	r3, r7
 8000e12:	4303      	orrs	r3, r0
 8000e14:	d059      	beq.n	8000eca <__aeabi_dadd+0x382>
 8000e16:	2680      	movs	r6, #128	@ 0x80
 8000e18:	0336      	lsls	r6, r6, #12
 8000e1a:	4306      	orrs	r6, r0
 8000e1c:	0336      	lsls	r6, r6, #12
 8000e1e:	4c2d      	ldr	r4, [pc, #180]	@ (8000ed4 <__aeabi_dadd+0x38c>)
 8000e20:	0b36      	lsrs	r6, r6, #12
 8000e22:	e7da      	b.n	8000dda <__aeabi_dadd+0x292>
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d061      	beq.n	8000eec <__aeabi_dadd+0x3a4>
 8000e28:	4641      	mov	r1, r8
 8000e2a:	1b09      	subs	r1, r1, r4
 8000e2c:	2c00      	cmp	r4, #0
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_dadd+0x2ea>
 8000e30:	e0b9      	b.n	8000fa6 <__aeabi_dadd+0x45e>
 8000e32:	4c28      	ldr	r4, [pc, #160]	@ (8000ed4 <__aeabi_dadd+0x38c>)
 8000e34:	45a0      	cmp	r8, r4
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dadd+0x2f2>
 8000e38:	e1a5      	b.n	8001186 <__aeabi_dadd+0x63e>
 8000e3a:	2701      	movs	r7, #1
 8000e3c:	2938      	cmp	r1, #56	@ 0x38
 8000e3e:	dc13      	bgt.n	8000e68 <__aeabi_dadd+0x320>
 8000e40:	2480      	movs	r4, #128	@ 0x80
 8000e42:	0424      	lsls	r4, r4, #16
 8000e44:	4326      	orrs	r6, r4
 8000e46:	291f      	cmp	r1, #31
 8000e48:	dd00      	ble.n	8000e4c <__aeabi_dadd+0x304>
 8000e4a:	e1c8      	b.n	80011de <__aeabi_dadd+0x696>
 8000e4c:	2420      	movs	r4, #32
 8000e4e:	0037      	movs	r7, r6
 8000e50:	4648      	mov	r0, r9
 8000e52:	1a64      	subs	r4, r4, r1
 8000e54:	40a7      	lsls	r7, r4
 8000e56:	40c8      	lsrs	r0, r1
 8000e58:	4307      	orrs	r7, r0
 8000e5a:	4648      	mov	r0, r9
 8000e5c:	40a0      	lsls	r0, r4
 8000e5e:	40ce      	lsrs	r6, r1
 8000e60:	1e44      	subs	r4, r0, #1
 8000e62:	41a0      	sbcs	r0, r4
 8000e64:	199b      	adds	r3, r3, r6
 8000e66:	4307      	orrs	r7, r0
 8000e68:	18bf      	adds	r7, r7, r2
 8000e6a:	4297      	cmp	r7, r2
 8000e6c:	4192      	sbcs	r2, r2
 8000e6e:	4252      	negs	r2, r2
 8000e70:	4644      	mov	r4, r8
 8000e72:	18d6      	adds	r6, r2, r3
 8000e74:	e763      	b.n	8000d3e <__aeabi_dadd+0x1f6>
 8000e76:	0038      	movs	r0, r7
 8000e78:	f001 fed0 	bl	8002c1c <__clzsi2>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	3318      	adds	r3, #24
 8000e80:	2b1f      	cmp	r3, #31
 8000e82:	dc00      	bgt.n	8000e86 <__aeabi_dadd+0x33e>
 8000e84:	e6bf      	b.n	8000c06 <__aeabi_dadd+0xbe>
 8000e86:	003a      	movs	r2, r7
 8000e88:	3808      	subs	r0, #8
 8000e8a:	4082      	lsls	r2, r0
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	dd00      	ble.n	8000e92 <__aeabi_dadd+0x34a>
 8000e90:	e083      	b.n	8000f9a <__aeabi_dadd+0x452>
 8000e92:	1b1b      	subs	r3, r3, r4
 8000e94:	1c58      	adds	r0, r3, #1
 8000e96:	281f      	cmp	r0, #31
 8000e98:	dc00      	bgt.n	8000e9c <__aeabi_dadd+0x354>
 8000e9a:	e1b4      	b.n	8001206 <__aeabi_dadd+0x6be>
 8000e9c:	0017      	movs	r7, r2
 8000e9e:	3b1f      	subs	r3, #31
 8000ea0:	40df      	lsrs	r7, r3
 8000ea2:	2820      	cmp	r0, #32
 8000ea4:	d005      	beq.n	8000eb2 <__aeabi_dadd+0x36a>
 8000ea6:	2340      	movs	r3, #64	@ 0x40
 8000ea8:	1a1b      	subs	r3, r3, r0
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	1e53      	subs	r3, r2, #1
 8000eae:	419a      	sbcs	r2, r3
 8000eb0:	4317      	orrs	r7, r2
 8000eb2:	2400      	movs	r4, #0
 8000eb4:	2f00      	cmp	r7, #0
 8000eb6:	d00a      	beq.n	8000ece <__aeabi_dadd+0x386>
 8000eb8:	077b      	lsls	r3, r7, #29
 8000eba:	d000      	beq.n	8000ebe <__aeabi_dadd+0x376>
 8000ebc:	e6c4      	b.n	8000c48 <__aeabi_dadd+0x100>
 8000ebe:	0026      	movs	r6, r4
 8000ec0:	e79e      	b.n	8000e00 <__aeabi_dadd+0x2b8>
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	000c      	movs	r4, r1
 8000ec6:	08d8      	lsrs	r0, r3, #3
 8000ec8:	e79b      	b.n	8000e02 <__aeabi_dadd+0x2ba>
 8000eca:	2700      	movs	r7, #0
 8000ecc:	4c01      	ldr	r4, [pc, #4]	@ (8000ed4 <__aeabi_dadd+0x38c>)
 8000ece:	2600      	movs	r6, #0
 8000ed0:	e783      	b.n	8000dda <__aeabi_dadd+0x292>
 8000ed2:	46c0      	nop			@ (mov r8, r8)
 8000ed4:	000007ff 	.word	0x000007ff
 8000ed8:	ff7fffff 	.word	0xff7fffff
 8000edc:	000007fe 	.word	0x000007fe
 8000ee0:	464b      	mov	r3, r9
 8000ee2:	0777      	lsls	r7, r6, #29
 8000ee4:	08d8      	lsrs	r0, r3, #3
 8000ee6:	4307      	orrs	r7, r0
 8000ee8:	08f0      	lsrs	r0, r6, #3
 8000eea:	e791      	b.n	8000e10 <__aeabi_dadd+0x2c8>
 8000eec:	4fcd      	ldr	r7, [pc, #820]	@ (8001224 <__aeabi_dadd+0x6dc>)
 8000eee:	1c61      	adds	r1, r4, #1
 8000ef0:	4239      	tst	r1, r7
 8000ef2:	d16b      	bne.n	8000fcc <__aeabi_dadd+0x484>
 8000ef4:	0031      	movs	r1, r6
 8000ef6:	4648      	mov	r0, r9
 8000ef8:	4301      	orrs	r1, r0
 8000efa:	2c00      	cmp	r4, #0
 8000efc:	d000      	beq.n	8000f00 <__aeabi_dadd+0x3b8>
 8000efe:	e14b      	b.n	8001198 <__aeabi_dadd+0x650>
 8000f00:	001f      	movs	r7, r3
 8000f02:	4317      	orrs	r7, r2
 8000f04:	2900      	cmp	r1, #0
 8000f06:	d100      	bne.n	8000f0a <__aeabi_dadd+0x3c2>
 8000f08:	e181      	b.n	800120e <__aeabi_dadd+0x6c6>
 8000f0a:	2f00      	cmp	r7, #0
 8000f0c:	d100      	bne.n	8000f10 <__aeabi_dadd+0x3c8>
 8000f0e:	e74c      	b.n	8000daa <__aeabi_dadd+0x262>
 8000f10:	444a      	add	r2, r9
 8000f12:	454a      	cmp	r2, r9
 8000f14:	4180      	sbcs	r0, r0
 8000f16:	18f6      	adds	r6, r6, r3
 8000f18:	4240      	negs	r0, r0
 8000f1a:	1836      	adds	r6, r6, r0
 8000f1c:	0233      	lsls	r3, r6, #8
 8000f1e:	d500      	bpl.n	8000f22 <__aeabi_dadd+0x3da>
 8000f20:	e1b0      	b.n	8001284 <__aeabi_dadd+0x73c>
 8000f22:	0017      	movs	r7, r2
 8000f24:	4691      	mov	r9, r2
 8000f26:	4337      	orrs	r7, r6
 8000f28:	d000      	beq.n	8000f2c <__aeabi_dadd+0x3e4>
 8000f2a:	e73e      	b.n	8000daa <__aeabi_dadd+0x262>
 8000f2c:	2600      	movs	r6, #0
 8000f2e:	e754      	b.n	8000dda <__aeabi_dadd+0x292>
 8000f30:	4649      	mov	r1, r9
 8000f32:	1a89      	subs	r1, r1, r2
 8000f34:	4688      	mov	r8, r1
 8000f36:	45c1      	cmp	r9, r8
 8000f38:	41bf      	sbcs	r7, r7
 8000f3a:	1af1      	subs	r1, r6, r3
 8000f3c:	427f      	negs	r7, r7
 8000f3e:	1bc9      	subs	r1, r1, r7
 8000f40:	020f      	lsls	r7, r1, #8
 8000f42:	d461      	bmi.n	8001008 <__aeabi_dadd+0x4c0>
 8000f44:	4647      	mov	r7, r8
 8000f46:	430f      	orrs	r7, r1
 8000f48:	d100      	bne.n	8000f4c <__aeabi_dadd+0x404>
 8000f4a:	e0bd      	b.n	80010c8 <__aeabi_dadd+0x580>
 8000f4c:	000e      	movs	r6, r1
 8000f4e:	4647      	mov	r7, r8
 8000f50:	e651      	b.n	8000bf6 <__aeabi_dadd+0xae>
 8000f52:	4cb5      	ldr	r4, [pc, #724]	@ (8001228 <__aeabi_dadd+0x6e0>)
 8000f54:	45a0      	cmp	r8, r4
 8000f56:	d100      	bne.n	8000f5a <__aeabi_dadd+0x412>
 8000f58:	e100      	b.n	800115c <__aeabi_dadd+0x614>
 8000f5a:	2701      	movs	r7, #1
 8000f5c:	2938      	cmp	r1, #56	@ 0x38
 8000f5e:	dd00      	ble.n	8000f62 <__aeabi_dadd+0x41a>
 8000f60:	e6b8      	b.n	8000cd4 <__aeabi_dadd+0x18c>
 8000f62:	2480      	movs	r4, #128	@ 0x80
 8000f64:	0424      	lsls	r4, r4, #16
 8000f66:	4326      	orrs	r6, r4
 8000f68:	e6a3      	b.n	8000cb2 <__aeabi_dadd+0x16a>
 8000f6a:	4eb0      	ldr	r6, [pc, #704]	@ (800122c <__aeabi_dadd+0x6e4>)
 8000f6c:	1ae4      	subs	r4, r4, r3
 8000f6e:	4016      	ands	r6, r2
 8000f70:	077b      	lsls	r3, r7, #29
 8000f72:	d000      	beq.n	8000f76 <__aeabi_dadd+0x42e>
 8000f74:	e73f      	b.n	8000df6 <__aeabi_dadd+0x2ae>
 8000f76:	e743      	b.n	8000e00 <__aeabi_dadd+0x2b8>
 8000f78:	000f      	movs	r7, r1
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	3f20      	subs	r7, #32
 8000f7e:	40f8      	lsrs	r0, r7
 8000f80:	4684      	mov	ip, r0
 8000f82:	2920      	cmp	r1, #32
 8000f84:	d003      	beq.n	8000f8e <__aeabi_dadd+0x446>
 8000f86:	2740      	movs	r7, #64	@ 0x40
 8000f88:	1a79      	subs	r1, r7, r1
 8000f8a:	408b      	lsls	r3, r1
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	1e53      	subs	r3, r2, #1
 8000f90:	419a      	sbcs	r2, r3
 8000f92:	4663      	mov	r3, ip
 8000f94:	0017      	movs	r7, r2
 8000f96:	431f      	orrs	r7, r3
 8000f98:	e622      	b.n	8000be0 <__aeabi_dadd+0x98>
 8000f9a:	48a4      	ldr	r0, [pc, #656]	@ (800122c <__aeabi_dadd+0x6e4>)
 8000f9c:	1ae1      	subs	r1, r4, r3
 8000f9e:	4010      	ands	r0, r2
 8000fa0:	0747      	lsls	r7, r0, #29
 8000fa2:	08c0      	lsrs	r0, r0, #3
 8000fa4:	e707      	b.n	8000db6 <__aeabi_dadd+0x26e>
 8000fa6:	0034      	movs	r4, r6
 8000fa8:	4648      	mov	r0, r9
 8000faa:	4304      	orrs	r4, r0
 8000fac:	d100      	bne.n	8000fb0 <__aeabi_dadd+0x468>
 8000fae:	e0fa      	b.n	80011a6 <__aeabi_dadd+0x65e>
 8000fb0:	1e4c      	subs	r4, r1, #1
 8000fb2:	2901      	cmp	r1, #1
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_dadd+0x470>
 8000fb6:	e0d7      	b.n	8001168 <__aeabi_dadd+0x620>
 8000fb8:	4f9b      	ldr	r7, [pc, #620]	@ (8001228 <__aeabi_dadd+0x6e0>)
 8000fba:	42b9      	cmp	r1, r7
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_dadd+0x478>
 8000fbe:	e0e2      	b.n	8001186 <__aeabi_dadd+0x63e>
 8000fc0:	2701      	movs	r7, #1
 8000fc2:	2c38      	cmp	r4, #56	@ 0x38
 8000fc4:	dd00      	ble.n	8000fc8 <__aeabi_dadd+0x480>
 8000fc6:	e74f      	b.n	8000e68 <__aeabi_dadd+0x320>
 8000fc8:	0021      	movs	r1, r4
 8000fca:	e73c      	b.n	8000e46 <__aeabi_dadd+0x2fe>
 8000fcc:	4c96      	ldr	r4, [pc, #600]	@ (8001228 <__aeabi_dadd+0x6e0>)
 8000fce:	42a1      	cmp	r1, r4
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_dadd+0x48c>
 8000fd2:	e0dd      	b.n	8001190 <__aeabi_dadd+0x648>
 8000fd4:	444a      	add	r2, r9
 8000fd6:	454a      	cmp	r2, r9
 8000fd8:	4180      	sbcs	r0, r0
 8000fda:	18f3      	adds	r3, r6, r3
 8000fdc:	4240      	negs	r0, r0
 8000fde:	1818      	adds	r0, r3, r0
 8000fe0:	07c7      	lsls	r7, r0, #31
 8000fe2:	0852      	lsrs	r2, r2, #1
 8000fe4:	4317      	orrs	r7, r2
 8000fe6:	0846      	lsrs	r6, r0, #1
 8000fe8:	0752      	lsls	r2, r2, #29
 8000fea:	d005      	beq.n	8000ff8 <__aeabi_dadd+0x4b0>
 8000fec:	220f      	movs	r2, #15
 8000fee:	000c      	movs	r4, r1
 8000ff0:	403a      	ands	r2, r7
 8000ff2:	2a04      	cmp	r2, #4
 8000ff4:	d000      	beq.n	8000ff8 <__aeabi_dadd+0x4b0>
 8000ff6:	e62c      	b.n	8000c52 <__aeabi_dadd+0x10a>
 8000ff8:	0776      	lsls	r6, r6, #29
 8000ffa:	08ff      	lsrs	r7, r7, #3
 8000ffc:	4337      	orrs	r7, r6
 8000ffe:	0900      	lsrs	r0, r0, #4
 8001000:	e6d9      	b.n	8000db6 <__aeabi_dadd+0x26e>
 8001002:	2700      	movs	r7, #0
 8001004:	2600      	movs	r6, #0
 8001006:	e6e8      	b.n	8000dda <__aeabi_dadd+0x292>
 8001008:	4649      	mov	r1, r9
 800100a:	1a57      	subs	r7, r2, r1
 800100c:	42ba      	cmp	r2, r7
 800100e:	4192      	sbcs	r2, r2
 8001010:	1b9e      	subs	r6, r3, r6
 8001012:	4252      	negs	r2, r2
 8001014:	4665      	mov	r5, ip
 8001016:	1ab6      	subs	r6, r6, r2
 8001018:	e5ed      	b.n	8000bf6 <__aeabi_dadd+0xae>
 800101a:	2900      	cmp	r1, #0
 800101c:	d000      	beq.n	8001020 <__aeabi_dadd+0x4d8>
 800101e:	e0c6      	b.n	80011ae <__aeabi_dadd+0x666>
 8001020:	2f00      	cmp	r7, #0
 8001022:	d167      	bne.n	80010f4 <__aeabi_dadd+0x5ac>
 8001024:	2680      	movs	r6, #128	@ 0x80
 8001026:	2500      	movs	r5, #0
 8001028:	4c7f      	ldr	r4, [pc, #508]	@ (8001228 <__aeabi_dadd+0x6e0>)
 800102a:	0336      	lsls	r6, r6, #12
 800102c:	e6d5      	b.n	8000dda <__aeabi_dadd+0x292>
 800102e:	4665      	mov	r5, ip
 8001030:	000c      	movs	r4, r1
 8001032:	001e      	movs	r6, r3
 8001034:	08d0      	lsrs	r0, r2, #3
 8001036:	e6e4      	b.n	8000e02 <__aeabi_dadd+0x2ba>
 8001038:	444a      	add	r2, r9
 800103a:	454a      	cmp	r2, r9
 800103c:	4180      	sbcs	r0, r0
 800103e:	18f3      	adds	r3, r6, r3
 8001040:	4240      	negs	r0, r0
 8001042:	1818      	adds	r0, r3, r0
 8001044:	0011      	movs	r1, r2
 8001046:	0203      	lsls	r3, r0, #8
 8001048:	d400      	bmi.n	800104c <__aeabi_dadd+0x504>
 800104a:	e096      	b.n	800117a <__aeabi_dadd+0x632>
 800104c:	4b77      	ldr	r3, [pc, #476]	@ (800122c <__aeabi_dadd+0x6e4>)
 800104e:	0849      	lsrs	r1, r1, #1
 8001050:	4018      	ands	r0, r3
 8001052:	07c3      	lsls	r3, r0, #31
 8001054:	430b      	orrs	r3, r1
 8001056:	0844      	lsrs	r4, r0, #1
 8001058:	0749      	lsls	r1, r1, #29
 800105a:	d100      	bne.n	800105e <__aeabi_dadd+0x516>
 800105c:	e129      	b.n	80012b2 <__aeabi_dadd+0x76a>
 800105e:	220f      	movs	r2, #15
 8001060:	401a      	ands	r2, r3
 8001062:	2a04      	cmp	r2, #4
 8001064:	d100      	bne.n	8001068 <__aeabi_dadd+0x520>
 8001066:	e0ea      	b.n	800123e <__aeabi_dadd+0x6f6>
 8001068:	1d1f      	adds	r7, r3, #4
 800106a:	429f      	cmp	r7, r3
 800106c:	41b6      	sbcs	r6, r6
 800106e:	4276      	negs	r6, r6
 8001070:	1936      	adds	r6, r6, r4
 8001072:	2402      	movs	r4, #2
 8001074:	e6c4      	b.n	8000e00 <__aeabi_dadd+0x2b8>
 8001076:	4649      	mov	r1, r9
 8001078:	1a8f      	subs	r7, r1, r2
 800107a:	45b9      	cmp	r9, r7
 800107c:	4180      	sbcs	r0, r0
 800107e:	1af6      	subs	r6, r6, r3
 8001080:	4240      	negs	r0, r0
 8001082:	1a36      	subs	r6, r6, r0
 8001084:	0233      	lsls	r3, r6, #8
 8001086:	d406      	bmi.n	8001096 <__aeabi_dadd+0x54e>
 8001088:	0773      	lsls	r3, r6, #29
 800108a:	08ff      	lsrs	r7, r7, #3
 800108c:	2101      	movs	r1, #1
 800108e:	431f      	orrs	r7, r3
 8001090:	08f0      	lsrs	r0, r6, #3
 8001092:	e690      	b.n	8000db6 <__aeabi_dadd+0x26e>
 8001094:	4665      	mov	r5, ip
 8001096:	2401      	movs	r4, #1
 8001098:	e5ab      	b.n	8000bf2 <__aeabi_dadd+0xaa>
 800109a:	464b      	mov	r3, r9
 800109c:	0777      	lsls	r7, r6, #29
 800109e:	08d8      	lsrs	r0, r3, #3
 80010a0:	4307      	orrs	r7, r0
 80010a2:	08f0      	lsrs	r0, r6, #3
 80010a4:	e6b4      	b.n	8000e10 <__aeabi_dadd+0x2c8>
 80010a6:	000f      	movs	r7, r1
 80010a8:	0018      	movs	r0, r3
 80010aa:	3f20      	subs	r7, #32
 80010ac:	40f8      	lsrs	r0, r7
 80010ae:	4684      	mov	ip, r0
 80010b0:	2920      	cmp	r1, #32
 80010b2:	d003      	beq.n	80010bc <__aeabi_dadd+0x574>
 80010b4:	2740      	movs	r7, #64	@ 0x40
 80010b6:	1a79      	subs	r1, r7, r1
 80010b8:	408b      	lsls	r3, r1
 80010ba:	431a      	orrs	r2, r3
 80010bc:	1e53      	subs	r3, r2, #1
 80010be:	419a      	sbcs	r2, r3
 80010c0:	4663      	mov	r3, ip
 80010c2:	0017      	movs	r7, r2
 80010c4:	431f      	orrs	r7, r3
 80010c6:	e635      	b.n	8000d34 <__aeabi_dadd+0x1ec>
 80010c8:	2500      	movs	r5, #0
 80010ca:	2400      	movs	r4, #0
 80010cc:	2600      	movs	r6, #0
 80010ce:	e684      	b.n	8000dda <__aeabi_dadd+0x292>
 80010d0:	000c      	movs	r4, r1
 80010d2:	0035      	movs	r5, r6
 80010d4:	3c20      	subs	r4, #32
 80010d6:	40e5      	lsrs	r5, r4
 80010d8:	2920      	cmp	r1, #32
 80010da:	d005      	beq.n	80010e8 <__aeabi_dadd+0x5a0>
 80010dc:	2440      	movs	r4, #64	@ 0x40
 80010de:	1a61      	subs	r1, r4, r1
 80010e0:	408e      	lsls	r6, r1
 80010e2:	4649      	mov	r1, r9
 80010e4:	4331      	orrs	r1, r6
 80010e6:	4689      	mov	r9, r1
 80010e8:	4648      	mov	r0, r9
 80010ea:	1e41      	subs	r1, r0, #1
 80010ec:	4188      	sbcs	r0, r1
 80010ee:	0007      	movs	r7, r0
 80010f0:	432f      	orrs	r7, r5
 80010f2:	e5ef      	b.n	8000cd4 <__aeabi_dadd+0x18c>
 80010f4:	08d2      	lsrs	r2, r2, #3
 80010f6:	075f      	lsls	r7, r3, #29
 80010f8:	4665      	mov	r5, ip
 80010fa:	4317      	orrs	r7, r2
 80010fc:	08d8      	lsrs	r0, r3, #3
 80010fe:	e687      	b.n	8000e10 <__aeabi_dadd+0x2c8>
 8001100:	1a17      	subs	r7, r2, r0
 8001102:	42ba      	cmp	r2, r7
 8001104:	4192      	sbcs	r2, r2
 8001106:	1b9e      	subs	r6, r3, r6
 8001108:	4252      	negs	r2, r2
 800110a:	1ab6      	subs	r6, r6, r2
 800110c:	0233      	lsls	r3, r6, #8
 800110e:	d4c1      	bmi.n	8001094 <__aeabi_dadd+0x54c>
 8001110:	0773      	lsls	r3, r6, #29
 8001112:	08ff      	lsrs	r7, r7, #3
 8001114:	4665      	mov	r5, ip
 8001116:	2101      	movs	r1, #1
 8001118:	431f      	orrs	r7, r3
 800111a:	08f0      	lsrs	r0, r6, #3
 800111c:	e64b      	b.n	8000db6 <__aeabi_dadd+0x26e>
 800111e:	2f00      	cmp	r7, #0
 8001120:	d07b      	beq.n	800121a <__aeabi_dadd+0x6d2>
 8001122:	4665      	mov	r5, ip
 8001124:	001e      	movs	r6, r3
 8001126:	4691      	mov	r9, r2
 8001128:	e63f      	b.n	8000daa <__aeabi_dadd+0x262>
 800112a:	1a81      	subs	r1, r0, r2
 800112c:	4688      	mov	r8, r1
 800112e:	45c1      	cmp	r9, r8
 8001130:	41a4      	sbcs	r4, r4
 8001132:	1af1      	subs	r1, r6, r3
 8001134:	4264      	negs	r4, r4
 8001136:	1b09      	subs	r1, r1, r4
 8001138:	2480      	movs	r4, #128	@ 0x80
 800113a:	0424      	lsls	r4, r4, #16
 800113c:	4221      	tst	r1, r4
 800113e:	d077      	beq.n	8001230 <__aeabi_dadd+0x6e8>
 8001140:	1a10      	subs	r0, r2, r0
 8001142:	4282      	cmp	r2, r0
 8001144:	4192      	sbcs	r2, r2
 8001146:	0007      	movs	r7, r0
 8001148:	1b9e      	subs	r6, r3, r6
 800114a:	4252      	negs	r2, r2
 800114c:	1ab6      	subs	r6, r6, r2
 800114e:	4337      	orrs	r7, r6
 8001150:	d000      	beq.n	8001154 <__aeabi_dadd+0x60c>
 8001152:	e0a0      	b.n	8001296 <__aeabi_dadd+0x74e>
 8001154:	4665      	mov	r5, ip
 8001156:	2400      	movs	r4, #0
 8001158:	2600      	movs	r6, #0
 800115a:	e63e      	b.n	8000dda <__aeabi_dadd+0x292>
 800115c:	075f      	lsls	r7, r3, #29
 800115e:	08d2      	lsrs	r2, r2, #3
 8001160:	4665      	mov	r5, ip
 8001162:	4317      	orrs	r7, r2
 8001164:	08d8      	lsrs	r0, r3, #3
 8001166:	e653      	b.n	8000e10 <__aeabi_dadd+0x2c8>
 8001168:	1881      	adds	r1, r0, r2
 800116a:	4291      	cmp	r1, r2
 800116c:	4192      	sbcs	r2, r2
 800116e:	18f0      	adds	r0, r6, r3
 8001170:	4252      	negs	r2, r2
 8001172:	1880      	adds	r0, r0, r2
 8001174:	0203      	lsls	r3, r0, #8
 8001176:	d500      	bpl.n	800117a <__aeabi_dadd+0x632>
 8001178:	e768      	b.n	800104c <__aeabi_dadd+0x504>
 800117a:	0747      	lsls	r7, r0, #29
 800117c:	08c9      	lsrs	r1, r1, #3
 800117e:	430f      	orrs	r7, r1
 8001180:	08c0      	lsrs	r0, r0, #3
 8001182:	2101      	movs	r1, #1
 8001184:	e617      	b.n	8000db6 <__aeabi_dadd+0x26e>
 8001186:	08d2      	lsrs	r2, r2, #3
 8001188:	075f      	lsls	r7, r3, #29
 800118a:	4317      	orrs	r7, r2
 800118c:	08d8      	lsrs	r0, r3, #3
 800118e:	e63f      	b.n	8000e10 <__aeabi_dadd+0x2c8>
 8001190:	000c      	movs	r4, r1
 8001192:	2600      	movs	r6, #0
 8001194:	2700      	movs	r7, #0
 8001196:	e620      	b.n	8000dda <__aeabi_dadd+0x292>
 8001198:	2900      	cmp	r1, #0
 800119a:	d156      	bne.n	800124a <__aeabi_dadd+0x702>
 800119c:	075f      	lsls	r7, r3, #29
 800119e:	08d2      	lsrs	r2, r2, #3
 80011a0:	4317      	orrs	r7, r2
 80011a2:	08d8      	lsrs	r0, r3, #3
 80011a4:	e634      	b.n	8000e10 <__aeabi_dadd+0x2c8>
 80011a6:	000c      	movs	r4, r1
 80011a8:	001e      	movs	r6, r3
 80011aa:	08d0      	lsrs	r0, r2, #3
 80011ac:	e629      	b.n	8000e02 <__aeabi_dadd+0x2ba>
 80011ae:	08c1      	lsrs	r1, r0, #3
 80011b0:	0770      	lsls	r0, r6, #29
 80011b2:	4301      	orrs	r1, r0
 80011b4:	08f0      	lsrs	r0, r6, #3
 80011b6:	2f00      	cmp	r7, #0
 80011b8:	d062      	beq.n	8001280 <__aeabi_dadd+0x738>
 80011ba:	2480      	movs	r4, #128	@ 0x80
 80011bc:	0324      	lsls	r4, r4, #12
 80011be:	4220      	tst	r0, r4
 80011c0:	d007      	beq.n	80011d2 <__aeabi_dadd+0x68a>
 80011c2:	08de      	lsrs	r6, r3, #3
 80011c4:	4226      	tst	r6, r4
 80011c6:	d104      	bne.n	80011d2 <__aeabi_dadd+0x68a>
 80011c8:	4665      	mov	r5, ip
 80011ca:	0030      	movs	r0, r6
 80011cc:	08d1      	lsrs	r1, r2, #3
 80011ce:	075b      	lsls	r3, r3, #29
 80011d0:	4319      	orrs	r1, r3
 80011d2:	0f4f      	lsrs	r7, r1, #29
 80011d4:	00c9      	lsls	r1, r1, #3
 80011d6:	08c9      	lsrs	r1, r1, #3
 80011d8:	077f      	lsls	r7, r7, #29
 80011da:	430f      	orrs	r7, r1
 80011dc:	e618      	b.n	8000e10 <__aeabi_dadd+0x2c8>
 80011de:	000c      	movs	r4, r1
 80011e0:	0030      	movs	r0, r6
 80011e2:	3c20      	subs	r4, #32
 80011e4:	40e0      	lsrs	r0, r4
 80011e6:	4684      	mov	ip, r0
 80011e8:	2920      	cmp	r1, #32
 80011ea:	d005      	beq.n	80011f8 <__aeabi_dadd+0x6b0>
 80011ec:	2440      	movs	r4, #64	@ 0x40
 80011ee:	1a61      	subs	r1, r4, r1
 80011f0:	408e      	lsls	r6, r1
 80011f2:	4649      	mov	r1, r9
 80011f4:	4331      	orrs	r1, r6
 80011f6:	4689      	mov	r9, r1
 80011f8:	4648      	mov	r0, r9
 80011fa:	1e41      	subs	r1, r0, #1
 80011fc:	4188      	sbcs	r0, r1
 80011fe:	4661      	mov	r1, ip
 8001200:	0007      	movs	r7, r0
 8001202:	430f      	orrs	r7, r1
 8001204:	e630      	b.n	8000e68 <__aeabi_dadd+0x320>
 8001206:	2120      	movs	r1, #32
 8001208:	2700      	movs	r7, #0
 800120a:	1a09      	subs	r1, r1, r0
 800120c:	e50e      	b.n	8000c2c <__aeabi_dadd+0xe4>
 800120e:	001e      	movs	r6, r3
 8001210:	2f00      	cmp	r7, #0
 8001212:	d000      	beq.n	8001216 <__aeabi_dadd+0x6ce>
 8001214:	e522      	b.n	8000c5c <__aeabi_dadd+0x114>
 8001216:	2400      	movs	r4, #0
 8001218:	e758      	b.n	80010cc <__aeabi_dadd+0x584>
 800121a:	2500      	movs	r5, #0
 800121c:	2400      	movs	r4, #0
 800121e:	2600      	movs	r6, #0
 8001220:	e5db      	b.n	8000dda <__aeabi_dadd+0x292>
 8001222:	46c0      	nop			@ (mov r8, r8)
 8001224:	000007fe 	.word	0x000007fe
 8001228:	000007ff 	.word	0x000007ff
 800122c:	ff7fffff 	.word	0xff7fffff
 8001230:	4647      	mov	r7, r8
 8001232:	430f      	orrs	r7, r1
 8001234:	d100      	bne.n	8001238 <__aeabi_dadd+0x6f0>
 8001236:	e747      	b.n	80010c8 <__aeabi_dadd+0x580>
 8001238:	000e      	movs	r6, r1
 800123a:	46c1      	mov	r9, r8
 800123c:	e5b5      	b.n	8000daa <__aeabi_dadd+0x262>
 800123e:	08df      	lsrs	r7, r3, #3
 8001240:	0764      	lsls	r4, r4, #29
 8001242:	2102      	movs	r1, #2
 8001244:	4327      	orrs	r7, r4
 8001246:	0900      	lsrs	r0, r0, #4
 8001248:	e5b5      	b.n	8000db6 <__aeabi_dadd+0x26e>
 800124a:	0019      	movs	r1, r3
 800124c:	08c0      	lsrs	r0, r0, #3
 800124e:	0777      	lsls	r7, r6, #29
 8001250:	4307      	orrs	r7, r0
 8001252:	4311      	orrs	r1, r2
 8001254:	08f0      	lsrs	r0, r6, #3
 8001256:	2900      	cmp	r1, #0
 8001258:	d100      	bne.n	800125c <__aeabi_dadd+0x714>
 800125a:	e5d9      	b.n	8000e10 <__aeabi_dadd+0x2c8>
 800125c:	2180      	movs	r1, #128	@ 0x80
 800125e:	0309      	lsls	r1, r1, #12
 8001260:	4208      	tst	r0, r1
 8001262:	d007      	beq.n	8001274 <__aeabi_dadd+0x72c>
 8001264:	08dc      	lsrs	r4, r3, #3
 8001266:	420c      	tst	r4, r1
 8001268:	d104      	bne.n	8001274 <__aeabi_dadd+0x72c>
 800126a:	08d2      	lsrs	r2, r2, #3
 800126c:	075b      	lsls	r3, r3, #29
 800126e:	431a      	orrs	r2, r3
 8001270:	0017      	movs	r7, r2
 8001272:	0020      	movs	r0, r4
 8001274:	0f7b      	lsrs	r3, r7, #29
 8001276:	00ff      	lsls	r7, r7, #3
 8001278:	08ff      	lsrs	r7, r7, #3
 800127a:	075b      	lsls	r3, r3, #29
 800127c:	431f      	orrs	r7, r3
 800127e:	e5c7      	b.n	8000e10 <__aeabi_dadd+0x2c8>
 8001280:	000f      	movs	r7, r1
 8001282:	e5c5      	b.n	8000e10 <__aeabi_dadd+0x2c8>
 8001284:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <__aeabi_dadd+0x788>)
 8001286:	08d2      	lsrs	r2, r2, #3
 8001288:	4033      	ands	r3, r6
 800128a:	075f      	lsls	r7, r3, #29
 800128c:	025b      	lsls	r3, r3, #9
 800128e:	2401      	movs	r4, #1
 8001290:	4317      	orrs	r7, r2
 8001292:	0b1e      	lsrs	r6, r3, #12
 8001294:	e5a1      	b.n	8000dda <__aeabi_dadd+0x292>
 8001296:	4226      	tst	r6, r4
 8001298:	d012      	beq.n	80012c0 <__aeabi_dadd+0x778>
 800129a:	4b0d      	ldr	r3, [pc, #52]	@ (80012d0 <__aeabi_dadd+0x788>)
 800129c:	4665      	mov	r5, ip
 800129e:	0002      	movs	r2, r0
 80012a0:	2401      	movs	r4, #1
 80012a2:	401e      	ands	r6, r3
 80012a4:	e4e6      	b.n	8000c74 <__aeabi_dadd+0x12c>
 80012a6:	0021      	movs	r1, r4
 80012a8:	e585      	b.n	8000db6 <__aeabi_dadd+0x26e>
 80012aa:	0017      	movs	r7, r2
 80012ac:	e5a8      	b.n	8000e00 <__aeabi_dadd+0x2b8>
 80012ae:	003a      	movs	r2, r7
 80012b0:	e4d4      	b.n	8000c5c <__aeabi_dadd+0x114>
 80012b2:	08db      	lsrs	r3, r3, #3
 80012b4:	0764      	lsls	r4, r4, #29
 80012b6:	431c      	orrs	r4, r3
 80012b8:	0027      	movs	r7, r4
 80012ba:	2102      	movs	r1, #2
 80012bc:	0900      	lsrs	r0, r0, #4
 80012be:	e57a      	b.n	8000db6 <__aeabi_dadd+0x26e>
 80012c0:	08c0      	lsrs	r0, r0, #3
 80012c2:	0777      	lsls	r7, r6, #29
 80012c4:	4307      	orrs	r7, r0
 80012c6:	4665      	mov	r5, ip
 80012c8:	2100      	movs	r1, #0
 80012ca:	08f0      	lsrs	r0, r6, #3
 80012cc:	e573      	b.n	8000db6 <__aeabi_dadd+0x26e>
 80012ce:	46c0      	nop			@ (mov r8, r8)
 80012d0:	ff7fffff 	.word	0xff7fffff

080012d4 <__aeabi_ddiv>:
 80012d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d6:	46de      	mov	lr, fp
 80012d8:	4645      	mov	r5, r8
 80012da:	4657      	mov	r7, sl
 80012dc:	464e      	mov	r6, r9
 80012de:	b5e0      	push	{r5, r6, r7, lr}
 80012e0:	b087      	sub	sp, #28
 80012e2:	9200      	str	r2, [sp, #0]
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	030b      	lsls	r3, r1, #12
 80012e8:	0b1b      	lsrs	r3, r3, #12
 80012ea:	469b      	mov	fp, r3
 80012ec:	0fca      	lsrs	r2, r1, #31
 80012ee:	004b      	lsls	r3, r1, #1
 80012f0:	0004      	movs	r4, r0
 80012f2:	4680      	mov	r8, r0
 80012f4:	0d5b      	lsrs	r3, r3, #21
 80012f6:	9202      	str	r2, [sp, #8]
 80012f8:	d100      	bne.n	80012fc <__aeabi_ddiv+0x28>
 80012fa:	e098      	b.n	800142e <__aeabi_ddiv+0x15a>
 80012fc:	4a7c      	ldr	r2, [pc, #496]	@ (80014f0 <__aeabi_ddiv+0x21c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d037      	beq.n	8001372 <__aeabi_ddiv+0x9e>
 8001302:	4659      	mov	r1, fp
 8001304:	0f42      	lsrs	r2, r0, #29
 8001306:	00c9      	lsls	r1, r1, #3
 8001308:	430a      	orrs	r2, r1
 800130a:	2180      	movs	r1, #128	@ 0x80
 800130c:	0409      	lsls	r1, r1, #16
 800130e:	4311      	orrs	r1, r2
 8001310:	00c2      	lsls	r2, r0, #3
 8001312:	4690      	mov	r8, r2
 8001314:	4a77      	ldr	r2, [pc, #476]	@ (80014f4 <__aeabi_ddiv+0x220>)
 8001316:	4689      	mov	r9, r1
 8001318:	4692      	mov	sl, r2
 800131a:	449a      	add	sl, r3
 800131c:	2300      	movs	r3, #0
 800131e:	2400      	movs	r4, #0
 8001320:	9303      	str	r3, [sp, #12]
 8001322:	9e00      	ldr	r6, [sp, #0]
 8001324:	9f01      	ldr	r7, [sp, #4]
 8001326:	033b      	lsls	r3, r7, #12
 8001328:	0b1b      	lsrs	r3, r3, #12
 800132a:	469b      	mov	fp, r3
 800132c:	007b      	lsls	r3, r7, #1
 800132e:	0030      	movs	r0, r6
 8001330:	0d5b      	lsrs	r3, r3, #21
 8001332:	0ffd      	lsrs	r5, r7, #31
 8001334:	2b00      	cmp	r3, #0
 8001336:	d059      	beq.n	80013ec <__aeabi_ddiv+0x118>
 8001338:	4a6d      	ldr	r2, [pc, #436]	@ (80014f0 <__aeabi_ddiv+0x21c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d048      	beq.n	80013d0 <__aeabi_ddiv+0xfc>
 800133e:	4659      	mov	r1, fp
 8001340:	0f72      	lsrs	r2, r6, #29
 8001342:	00c9      	lsls	r1, r1, #3
 8001344:	430a      	orrs	r2, r1
 8001346:	2180      	movs	r1, #128	@ 0x80
 8001348:	0409      	lsls	r1, r1, #16
 800134a:	4311      	orrs	r1, r2
 800134c:	468b      	mov	fp, r1
 800134e:	4969      	ldr	r1, [pc, #420]	@ (80014f4 <__aeabi_ddiv+0x220>)
 8001350:	00f2      	lsls	r2, r6, #3
 8001352:	468c      	mov	ip, r1
 8001354:	4651      	mov	r1, sl
 8001356:	4463      	add	r3, ip
 8001358:	1acb      	subs	r3, r1, r3
 800135a:	469a      	mov	sl, r3
 800135c:	2100      	movs	r1, #0
 800135e:	9e02      	ldr	r6, [sp, #8]
 8001360:	406e      	eors	r6, r5
 8001362:	b2f6      	uxtb	r6, r6
 8001364:	2c0f      	cmp	r4, #15
 8001366:	d900      	bls.n	800136a <__aeabi_ddiv+0x96>
 8001368:	e0ce      	b.n	8001508 <__aeabi_ddiv+0x234>
 800136a:	4b63      	ldr	r3, [pc, #396]	@ (80014f8 <__aeabi_ddiv+0x224>)
 800136c:	00a4      	lsls	r4, r4, #2
 800136e:	591b      	ldr	r3, [r3, r4]
 8001370:	469f      	mov	pc, r3
 8001372:	465a      	mov	r2, fp
 8001374:	4302      	orrs	r2, r0
 8001376:	4691      	mov	r9, r2
 8001378:	d000      	beq.n	800137c <__aeabi_ddiv+0xa8>
 800137a:	e090      	b.n	800149e <__aeabi_ddiv+0x1ca>
 800137c:	469a      	mov	sl, r3
 800137e:	2302      	movs	r3, #2
 8001380:	4690      	mov	r8, r2
 8001382:	2408      	movs	r4, #8
 8001384:	9303      	str	r3, [sp, #12]
 8001386:	e7cc      	b.n	8001322 <__aeabi_ddiv+0x4e>
 8001388:	46cb      	mov	fp, r9
 800138a:	4642      	mov	r2, r8
 800138c:	9d02      	ldr	r5, [sp, #8]
 800138e:	9903      	ldr	r1, [sp, #12]
 8001390:	2902      	cmp	r1, #2
 8001392:	d100      	bne.n	8001396 <__aeabi_ddiv+0xc2>
 8001394:	e1de      	b.n	8001754 <__aeabi_ddiv+0x480>
 8001396:	2903      	cmp	r1, #3
 8001398:	d100      	bne.n	800139c <__aeabi_ddiv+0xc8>
 800139a:	e08d      	b.n	80014b8 <__aeabi_ddiv+0x1e4>
 800139c:	2901      	cmp	r1, #1
 800139e:	d000      	beq.n	80013a2 <__aeabi_ddiv+0xce>
 80013a0:	e179      	b.n	8001696 <__aeabi_ddiv+0x3c2>
 80013a2:	002e      	movs	r6, r5
 80013a4:	2200      	movs	r2, #0
 80013a6:	2300      	movs	r3, #0
 80013a8:	2400      	movs	r4, #0
 80013aa:	4690      	mov	r8, r2
 80013ac:	051b      	lsls	r3, r3, #20
 80013ae:	4323      	orrs	r3, r4
 80013b0:	07f6      	lsls	r6, r6, #31
 80013b2:	4333      	orrs	r3, r6
 80013b4:	4640      	mov	r0, r8
 80013b6:	0019      	movs	r1, r3
 80013b8:	b007      	add	sp, #28
 80013ba:	bcf0      	pop	{r4, r5, r6, r7}
 80013bc:	46bb      	mov	fp, r7
 80013be:	46b2      	mov	sl, r6
 80013c0:	46a9      	mov	r9, r5
 80013c2:	46a0      	mov	r8, r4
 80013c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c6:	2200      	movs	r2, #0
 80013c8:	2400      	movs	r4, #0
 80013ca:	4690      	mov	r8, r2
 80013cc:	4b48      	ldr	r3, [pc, #288]	@ (80014f0 <__aeabi_ddiv+0x21c>)
 80013ce:	e7ed      	b.n	80013ac <__aeabi_ddiv+0xd8>
 80013d0:	465a      	mov	r2, fp
 80013d2:	9b00      	ldr	r3, [sp, #0]
 80013d4:	431a      	orrs	r2, r3
 80013d6:	4b49      	ldr	r3, [pc, #292]	@ (80014fc <__aeabi_ddiv+0x228>)
 80013d8:	469c      	mov	ip, r3
 80013da:	44e2      	add	sl, ip
 80013dc:	2a00      	cmp	r2, #0
 80013de:	d159      	bne.n	8001494 <__aeabi_ddiv+0x1c0>
 80013e0:	2302      	movs	r3, #2
 80013e2:	431c      	orrs	r4, r3
 80013e4:	2300      	movs	r3, #0
 80013e6:	2102      	movs	r1, #2
 80013e8:	469b      	mov	fp, r3
 80013ea:	e7b8      	b.n	800135e <__aeabi_ddiv+0x8a>
 80013ec:	465a      	mov	r2, fp
 80013ee:	9b00      	ldr	r3, [sp, #0]
 80013f0:	431a      	orrs	r2, r3
 80013f2:	d049      	beq.n	8001488 <__aeabi_ddiv+0x1b4>
 80013f4:	465b      	mov	r3, fp
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d100      	bne.n	80013fc <__aeabi_ddiv+0x128>
 80013fa:	e19c      	b.n	8001736 <__aeabi_ddiv+0x462>
 80013fc:	4658      	mov	r0, fp
 80013fe:	f001 fc0d 	bl	8002c1c <__clzsi2>
 8001402:	0002      	movs	r2, r0
 8001404:	0003      	movs	r3, r0
 8001406:	3a0b      	subs	r2, #11
 8001408:	271d      	movs	r7, #29
 800140a:	9e00      	ldr	r6, [sp, #0]
 800140c:	1aba      	subs	r2, r7, r2
 800140e:	0019      	movs	r1, r3
 8001410:	4658      	mov	r0, fp
 8001412:	40d6      	lsrs	r6, r2
 8001414:	3908      	subs	r1, #8
 8001416:	4088      	lsls	r0, r1
 8001418:	0032      	movs	r2, r6
 800141a:	4302      	orrs	r2, r0
 800141c:	4693      	mov	fp, r2
 800141e:	9a00      	ldr	r2, [sp, #0]
 8001420:	408a      	lsls	r2, r1
 8001422:	4937      	ldr	r1, [pc, #220]	@ (8001500 <__aeabi_ddiv+0x22c>)
 8001424:	4453      	add	r3, sl
 8001426:	468a      	mov	sl, r1
 8001428:	2100      	movs	r1, #0
 800142a:	449a      	add	sl, r3
 800142c:	e797      	b.n	800135e <__aeabi_ddiv+0x8a>
 800142e:	465b      	mov	r3, fp
 8001430:	4303      	orrs	r3, r0
 8001432:	4699      	mov	r9, r3
 8001434:	d021      	beq.n	800147a <__aeabi_ddiv+0x1a6>
 8001436:	465b      	mov	r3, fp
 8001438:	2b00      	cmp	r3, #0
 800143a:	d100      	bne.n	800143e <__aeabi_ddiv+0x16a>
 800143c:	e169      	b.n	8001712 <__aeabi_ddiv+0x43e>
 800143e:	4658      	mov	r0, fp
 8001440:	f001 fbec 	bl	8002c1c <__clzsi2>
 8001444:	230b      	movs	r3, #11
 8001446:	425b      	negs	r3, r3
 8001448:	469c      	mov	ip, r3
 800144a:	0002      	movs	r2, r0
 800144c:	4484      	add	ip, r0
 800144e:	4666      	mov	r6, ip
 8001450:	231d      	movs	r3, #29
 8001452:	1b9b      	subs	r3, r3, r6
 8001454:	0026      	movs	r6, r4
 8001456:	0011      	movs	r1, r2
 8001458:	4658      	mov	r0, fp
 800145a:	40de      	lsrs	r6, r3
 800145c:	3908      	subs	r1, #8
 800145e:	4088      	lsls	r0, r1
 8001460:	0033      	movs	r3, r6
 8001462:	4303      	orrs	r3, r0
 8001464:	4699      	mov	r9, r3
 8001466:	0023      	movs	r3, r4
 8001468:	408b      	lsls	r3, r1
 800146a:	4698      	mov	r8, r3
 800146c:	4b25      	ldr	r3, [pc, #148]	@ (8001504 <__aeabi_ddiv+0x230>)
 800146e:	2400      	movs	r4, #0
 8001470:	1a9b      	subs	r3, r3, r2
 8001472:	469a      	mov	sl, r3
 8001474:	2300      	movs	r3, #0
 8001476:	9303      	str	r3, [sp, #12]
 8001478:	e753      	b.n	8001322 <__aeabi_ddiv+0x4e>
 800147a:	2300      	movs	r3, #0
 800147c:	4698      	mov	r8, r3
 800147e:	469a      	mov	sl, r3
 8001480:	3301      	adds	r3, #1
 8001482:	2404      	movs	r4, #4
 8001484:	9303      	str	r3, [sp, #12]
 8001486:	e74c      	b.n	8001322 <__aeabi_ddiv+0x4e>
 8001488:	2301      	movs	r3, #1
 800148a:	431c      	orrs	r4, r3
 800148c:	2300      	movs	r3, #0
 800148e:	2101      	movs	r1, #1
 8001490:	469b      	mov	fp, r3
 8001492:	e764      	b.n	800135e <__aeabi_ddiv+0x8a>
 8001494:	2303      	movs	r3, #3
 8001496:	0032      	movs	r2, r6
 8001498:	2103      	movs	r1, #3
 800149a:	431c      	orrs	r4, r3
 800149c:	e75f      	b.n	800135e <__aeabi_ddiv+0x8a>
 800149e:	469a      	mov	sl, r3
 80014a0:	2303      	movs	r3, #3
 80014a2:	46d9      	mov	r9, fp
 80014a4:	240c      	movs	r4, #12
 80014a6:	9303      	str	r3, [sp, #12]
 80014a8:	e73b      	b.n	8001322 <__aeabi_ddiv+0x4e>
 80014aa:	2300      	movs	r3, #0
 80014ac:	2480      	movs	r4, #128	@ 0x80
 80014ae:	4698      	mov	r8, r3
 80014b0:	2600      	movs	r6, #0
 80014b2:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <__aeabi_ddiv+0x21c>)
 80014b4:	0324      	lsls	r4, r4, #12
 80014b6:	e779      	b.n	80013ac <__aeabi_ddiv+0xd8>
 80014b8:	2480      	movs	r4, #128	@ 0x80
 80014ba:	465b      	mov	r3, fp
 80014bc:	0324      	lsls	r4, r4, #12
 80014be:	431c      	orrs	r4, r3
 80014c0:	0324      	lsls	r4, r4, #12
 80014c2:	002e      	movs	r6, r5
 80014c4:	4690      	mov	r8, r2
 80014c6:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <__aeabi_ddiv+0x21c>)
 80014c8:	0b24      	lsrs	r4, r4, #12
 80014ca:	e76f      	b.n	80013ac <__aeabi_ddiv+0xd8>
 80014cc:	2480      	movs	r4, #128	@ 0x80
 80014ce:	464b      	mov	r3, r9
 80014d0:	0324      	lsls	r4, r4, #12
 80014d2:	4223      	tst	r3, r4
 80014d4:	d002      	beq.n	80014dc <__aeabi_ddiv+0x208>
 80014d6:	465b      	mov	r3, fp
 80014d8:	4223      	tst	r3, r4
 80014da:	d0f0      	beq.n	80014be <__aeabi_ddiv+0x1ea>
 80014dc:	2480      	movs	r4, #128	@ 0x80
 80014de:	464b      	mov	r3, r9
 80014e0:	0324      	lsls	r4, r4, #12
 80014e2:	431c      	orrs	r4, r3
 80014e4:	0324      	lsls	r4, r4, #12
 80014e6:	9e02      	ldr	r6, [sp, #8]
 80014e8:	4b01      	ldr	r3, [pc, #4]	@ (80014f0 <__aeabi_ddiv+0x21c>)
 80014ea:	0b24      	lsrs	r4, r4, #12
 80014ec:	e75e      	b.n	80013ac <__aeabi_ddiv+0xd8>
 80014ee:	46c0      	nop			@ (mov r8, r8)
 80014f0:	000007ff 	.word	0x000007ff
 80014f4:	fffffc01 	.word	0xfffffc01
 80014f8:	08009cfc 	.word	0x08009cfc
 80014fc:	fffff801 	.word	0xfffff801
 8001500:	000003f3 	.word	0x000003f3
 8001504:	fffffc0d 	.word	0xfffffc0d
 8001508:	45cb      	cmp	fp, r9
 800150a:	d200      	bcs.n	800150e <__aeabi_ddiv+0x23a>
 800150c:	e0f8      	b.n	8001700 <__aeabi_ddiv+0x42c>
 800150e:	d100      	bne.n	8001512 <__aeabi_ddiv+0x23e>
 8001510:	e0f3      	b.n	80016fa <__aeabi_ddiv+0x426>
 8001512:	2301      	movs	r3, #1
 8001514:	425b      	negs	r3, r3
 8001516:	469c      	mov	ip, r3
 8001518:	4644      	mov	r4, r8
 800151a:	4648      	mov	r0, r9
 800151c:	2500      	movs	r5, #0
 800151e:	44e2      	add	sl, ip
 8001520:	465b      	mov	r3, fp
 8001522:	0e17      	lsrs	r7, r2, #24
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	431f      	orrs	r7, r3
 8001528:	0c19      	lsrs	r1, r3, #16
 800152a:	043b      	lsls	r3, r7, #16
 800152c:	0212      	lsls	r2, r2, #8
 800152e:	9700      	str	r7, [sp, #0]
 8001530:	0c1f      	lsrs	r7, r3, #16
 8001532:	4691      	mov	r9, r2
 8001534:	9102      	str	r1, [sp, #8]
 8001536:	9703      	str	r7, [sp, #12]
 8001538:	f7fe fe88 	bl	800024c <__aeabi_uidivmod>
 800153c:	0002      	movs	r2, r0
 800153e:	437a      	muls	r2, r7
 8001540:	040b      	lsls	r3, r1, #16
 8001542:	0c21      	lsrs	r1, r4, #16
 8001544:	4680      	mov	r8, r0
 8001546:	4319      	orrs	r1, r3
 8001548:	428a      	cmp	r2, r1
 800154a:	d909      	bls.n	8001560 <__aeabi_ddiv+0x28c>
 800154c:	9f00      	ldr	r7, [sp, #0]
 800154e:	2301      	movs	r3, #1
 8001550:	46bc      	mov	ip, r7
 8001552:	425b      	negs	r3, r3
 8001554:	4461      	add	r1, ip
 8001556:	469c      	mov	ip, r3
 8001558:	44e0      	add	r8, ip
 800155a:	428f      	cmp	r7, r1
 800155c:	d800      	bhi.n	8001560 <__aeabi_ddiv+0x28c>
 800155e:	e15c      	b.n	800181a <__aeabi_ddiv+0x546>
 8001560:	1a88      	subs	r0, r1, r2
 8001562:	9902      	ldr	r1, [sp, #8]
 8001564:	f7fe fe72 	bl	800024c <__aeabi_uidivmod>
 8001568:	9a03      	ldr	r2, [sp, #12]
 800156a:	0424      	lsls	r4, r4, #16
 800156c:	4342      	muls	r2, r0
 800156e:	0409      	lsls	r1, r1, #16
 8001570:	0c24      	lsrs	r4, r4, #16
 8001572:	0003      	movs	r3, r0
 8001574:	430c      	orrs	r4, r1
 8001576:	42a2      	cmp	r2, r4
 8001578:	d906      	bls.n	8001588 <__aeabi_ddiv+0x2b4>
 800157a:	9900      	ldr	r1, [sp, #0]
 800157c:	3b01      	subs	r3, #1
 800157e:	468c      	mov	ip, r1
 8001580:	4464      	add	r4, ip
 8001582:	42a1      	cmp	r1, r4
 8001584:	d800      	bhi.n	8001588 <__aeabi_ddiv+0x2b4>
 8001586:	e142      	b.n	800180e <__aeabi_ddiv+0x53a>
 8001588:	1aa0      	subs	r0, r4, r2
 800158a:	4642      	mov	r2, r8
 800158c:	0412      	lsls	r2, r2, #16
 800158e:	431a      	orrs	r2, r3
 8001590:	4693      	mov	fp, r2
 8001592:	464b      	mov	r3, r9
 8001594:	4659      	mov	r1, fp
 8001596:	0c1b      	lsrs	r3, r3, #16
 8001598:	001f      	movs	r7, r3
 800159a:	9304      	str	r3, [sp, #16]
 800159c:	040b      	lsls	r3, r1, #16
 800159e:	4649      	mov	r1, r9
 80015a0:	0409      	lsls	r1, r1, #16
 80015a2:	0c09      	lsrs	r1, r1, #16
 80015a4:	000c      	movs	r4, r1
 80015a6:	0c1b      	lsrs	r3, r3, #16
 80015a8:	435c      	muls	r4, r3
 80015aa:	0c12      	lsrs	r2, r2, #16
 80015ac:	437b      	muls	r3, r7
 80015ae:	4688      	mov	r8, r1
 80015b0:	4351      	muls	r1, r2
 80015b2:	437a      	muls	r2, r7
 80015b4:	0c27      	lsrs	r7, r4, #16
 80015b6:	46bc      	mov	ip, r7
 80015b8:	185b      	adds	r3, r3, r1
 80015ba:	4463      	add	r3, ip
 80015bc:	4299      	cmp	r1, r3
 80015be:	d903      	bls.n	80015c8 <__aeabi_ddiv+0x2f4>
 80015c0:	2180      	movs	r1, #128	@ 0x80
 80015c2:	0249      	lsls	r1, r1, #9
 80015c4:	468c      	mov	ip, r1
 80015c6:	4462      	add	r2, ip
 80015c8:	0c19      	lsrs	r1, r3, #16
 80015ca:	0424      	lsls	r4, r4, #16
 80015cc:	041b      	lsls	r3, r3, #16
 80015ce:	0c24      	lsrs	r4, r4, #16
 80015d0:	188a      	adds	r2, r1, r2
 80015d2:	191c      	adds	r4, r3, r4
 80015d4:	4290      	cmp	r0, r2
 80015d6:	d302      	bcc.n	80015de <__aeabi_ddiv+0x30a>
 80015d8:	d116      	bne.n	8001608 <__aeabi_ddiv+0x334>
 80015da:	42a5      	cmp	r5, r4
 80015dc:	d214      	bcs.n	8001608 <__aeabi_ddiv+0x334>
 80015de:	465b      	mov	r3, fp
 80015e0:	9f00      	ldr	r7, [sp, #0]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	444d      	add	r5, r9
 80015e6:	9305      	str	r3, [sp, #20]
 80015e8:	454d      	cmp	r5, r9
 80015ea:	419b      	sbcs	r3, r3
 80015ec:	46bc      	mov	ip, r7
 80015ee:	425b      	negs	r3, r3
 80015f0:	4463      	add	r3, ip
 80015f2:	18c0      	adds	r0, r0, r3
 80015f4:	4287      	cmp	r7, r0
 80015f6:	d300      	bcc.n	80015fa <__aeabi_ddiv+0x326>
 80015f8:	e102      	b.n	8001800 <__aeabi_ddiv+0x52c>
 80015fa:	4282      	cmp	r2, r0
 80015fc:	d900      	bls.n	8001600 <__aeabi_ddiv+0x32c>
 80015fe:	e129      	b.n	8001854 <__aeabi_ddiv+0x580>
 8001600:	d100      	bne.n	8001604 <__aeabi_ddiv+0x330>
 8001602:	e124      	b.n	800184e <__aeabi_ddiv+0x57a>
 8001604:	9b05      	ldr	r3, [sp, #20]
 8001606:	469b      	mov	fp, r3
 8001608:	1b2c      	subs	r4, r5, r4
 800160a:	42a5      	cmp	r5, r4
 800160c:	41ad      	sbcs	r5, r5
 800160e:	9b00      	ldr	r3, [sp, #0]
 8001610:	1a80      	subs	r0, r0, r2
 8001612:	426d      	negs	r5, r5
 8001614:	1b40      	subs	r0, r0, r5
 8001616:	4283      	cmp	r3, r0
 8001618:	d100      	bne.n	800161c <__aeabi_ddiv+0x348>
 800161a:	e10f      	b.n	800183c <__aeabi_ddiv+0x568>
 800161c:	9902      	ldr	r1, [sp, #8]
 800161e:	f7fe fe15 	bl	800024c <__aeabi_uidivmod>
 8001622:	9a03      	ldr	r2, [sp, #12]
 8001624:	040b      	lsls	r3, r1, #16
 8001626:	4342      	muls	r2, r0
 8001628:	0c21      	lsrs	r1, r4, #16
 800162a:	0005      	movs	r5, r0
 800162c:	4319      	orrs	r1, r3
 800162e:	428a      	cmp	r2, r1
 8001630:	d900      	bls.n	8001634 <__aeabi_ddiv+0x360>
 8001632:	e0cb      	b.n	80017cc <__aeabi_ddiv+0x4f8>
 8001634:	1a88      	subs	r0, r1, r2
 8001636:	9902      	ldr	r1, [sp, #8]
 8001638:	f7fe fe08 	bl	800024c <__aeabi_uidivmod>
 800163c:	9a03      	ldr	r2, [sp, #12]
 800163e:	0424      	lsls	r4, r4, #16
 8001640:	4342      	muls	r2, r0
 8001642:	0409      	lsls	r1, r1, #16
 8001644:	0c24      	lsrs	r4, r4, #16
 8001646:	0003      	movs	r3, r0
 8001648:	430c      	orrs	r4, r1
 800164a:	42a2      	cmp	r2, r4
 800164c:	d900      	bls.n	8001650 <__aeabi_ddiv+0x37c>
 800164e:	e0ca      	b.n	80017e6 <__aeabi_ddiv+0x512>
 8001650:	4641      	mov	r1, r8
 8001652:	1aa4      	subs	r4, r4, r2
 8001654:	042a      	lsls	r2, r5, #16
 8001656:	431a      	orrs	r2, r3
 8001658:	9f04      	ldr	r7, [sp, #16]
 800165a:	0413      	lsls	r3, r2, #16
 800165c:	0c1b      	lsrs	r3, r3, #16
 800165e:	4359      	muls	r1, r3
 8001660:	4640      	mov	r0, r8
 8001662:	437b      	muls	r3, r7
 8001664:	469c      	mov	ip, r3
 8001666:	0c15      	lsrs	r5, r2, #16
 8001668:	4368      	muls	r0, r5
 800166a:	0c0b      	lsrs	r3, r1, #16
 800166c:	4484      	add	ip, r0
 800166e:	4463      	add	r3, ip
 8001670:	437d      	muls	r5, r7
 8001672:	4298      	cmp	r0, r3
 8001674:	d903      	bls.n	800167e <__aeabi_ddiv+0x3aa>
 8001676:	2080      	movs	r0, #128	@ 0x80
 8001678:	0240      	lsls	r0, r0, #9
 800167a:	4684      	mov	ip, r0
 800167c:	4465      	add	r5, ip
 800167e:	0c18      	lsrs	r0, r3, #16
 8001680:	0409      	lsls	r1, r1, #16
 8001682:	041b      	lsls	r3, r3, #16
 8001684:	0c09      	lsrs	r1, r1, #16
 8001686:	1940      	adds	r0, r0, r5
 8001688:	185b      	adds	r3, r3, r1
 800168a:	4284      	cmp	r4, r0
 800168c:	d327      	bcc.n	80016de <__aeabi_ddiv+0x40a>
 800168e:	d023      	beq.n	80016d8 <__aeabi_ddiv+0x404>
 8001690:	2301      	movs	r3, #1
 8001692:	0035      	movs	r5, r6
 8001694:	431a      	orrs	r2, r3
 8001696:	4b94      	ldr	r3, [pc, #592]	@ (80018e8 <__aeabi_ddiv+0x614>)
 8001698:	4453      	add	r3, sl
 800169a:	2b00      	cmp	r3, #0
 800169c:	dd60      	ble.n	8001760 <__aeabi_ddiv+0x48c>
 800169e:	0751      	lsls	r1, r2, #29
 80016a0:	d000      	beq.n	80016a4 <__aeabi_ddiv+0x3d0>
 80016a2:	e086      	b.n	80017b2 <__aeabi_ddiv+0x4de>
 80016a4:	002e      	movs	r6, r5
 80016a6:	08d1      	lsrs	r1, r2, #3
 80016a8:	465a      	mov	r2, fp
 80016aa:	01d2      	lsls	r2, r2, #7
 80016ac:	d506      	bpl.n	80016bc <__aeabi_ddiv+0x3e8>
 80016ae:	465a      	mov	r2, fp
 80016b0:	4b8e      	ldr	r3, [pc, #568]	@ (80018ec <__aeabi_ddiv+0x618>)
 80016b2:	401a      	ands	r2, r3
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	4693      	mov	fp, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	4453      	add	r3, sl
 80016bc:	4a8c      	ldr	r2, [pc, #560]	@ (80018f0 <__aeabi_ddiv+0x61c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	dd00      	ble.n	80016c4 <__aeabi_ddiv+0x3f0>
 80016c2:	e680      	b.n	80013c6 <__aeabi_ddiv+0xf2>
 80016c4:	465a      	mov	r2, fp
 80016c6:	0752      	lsls	r2, r2, #29
 80016c8:	430a      	orrs	r2, r1
 80016ca:	4690      	mov	r8, r2
 80016cc:	465a      	mov	r2, fp
 80016ce:	055b      	lsls	r3, r3, #21
 80016d0:	0254      	lsls	r4, r2, #9
 80016d2:	0b24      	lsrs	r4, r4, #12
 80016d4:	0d5b      	lsrs	r3, r3, #21
 80016d6:	e669      	b.n	80013ac <__aeabi_ddiv+0xd8>
 80016d8:	0035      	movs	r5, r6
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0db      	beq.n	8001696 <__aeabi_ddiv+0x3c2>
 80016de:	9d00      	ldr	r5, [sp, #0]
 80016e0:	1e51      	subs	r1, r2, #1
 80016e2:	46ac      	mov	ip, r5
 80016e4:	4464      	add	r4, ip
 80016e6:	42ac      	cmp	r4, r5
 80016e8:	d200      	bcs.n	80016ec <__aeabi_ddiv+0x418>
 80016ea:	e09e      	b.n	800182a <__aeabi_ddiv+0x556>
 80016ec:	4284      	cmp	r4, r0
 80016ee:	d200      	bcs.n	80016f2 <__aeabi_ddiv+0x41e>
 80016f0:	e0e1      	b.n	80018b6 <__aeabi_ddiv+0x5e2>
 80016f2:	d100      	bne.n	80016f6 <__aeabi_ddiv+0x422>
 80016f4:	e0ee      	b.n	80018d4 <__aeabi_ddiv+0x600>
 80016f6:	000a      	movs	r2, r1
 80016f8:	e7ca      	b.n	8001690 <__aeabi_ddiv+0x3bc>
 80016fa:	4542      	cmp	r2, r8
 80016fc:	d900      	bls.n	8001700 <__aeabi_ddiv+0x42c>
 80016fe:	e708      	b.n	8001512 <__aeabi_ddiv+0x23e>
 8001700:	464b      	mov	r3, r9
 8001702:	07dc      	lsls	r4, r3, #31
 8001704:	0858      	lsrs	r0, r3, #1
 8001706:	4643      	mov	r3, r8
 8001708:	085b      	lsrs	r3, r3, #1
 800170a:	431c      	orrs	r4, r3
 800170c:	4643      	mov	r3, r8
 800170e:	07dd      	lsls	r5, r3, #31
 8001710:	e706      	b.n	8001520 <__aeabi_ddiv+0x24c>
 8001712:	f001 fa83 	bl	8002c1c <__clzsi2>
 8001716:	2315      	movs	r3, #21
 8001718:	469c      	mov	ip, r3
 800171a:	4484      	add	ip, r0
 800171c:	0002      	movs	r2, r0
 800171e:	4663      	mov	r3, ip
 8001720:	3220      	adds	r2, #32
 8001722:	2b1c      	cmp	r3, #28
 8001724:	dc00      	bgt.n	8001728 <__aeabi_ddiv+0x454>
 8001726:	e692      	b.n	800144e <__aeabi_ddiv+0x17a>
 8001728:	0023      	movs	r3, r4
 800172a:	3808      	subs	r0, #8
 800172c:	4083      	lsls	r3, r0
 800172e:	4699      	mov	r9, r3
 8001730:	2300      	movs	r3, #0
 8001732:	4698      	mov	r8, r3
 8001734:	e69a      	b.n	800146c <__aeabi_ddiv+0x198>
 8001736:	f001 fa71 	bl	8002c1c <__clzsi2>
 800173a:	0002      	movs	r2, r0
 800173c:	0003      	movs	r3, r0
 800173e:	3215      	adds	r2, #21
 8001740:	3320      	adds	r3, #32
 8001742:	2a1c      	cmp	r2, #28
 8001744:	dc00      	bgt.n	8001748 <__aeabi_ddiv+0x474>
 8001746:	e65f      	b.n	8001408 <__aeabi_ddiv+0x134>
 8001748:	9900      	ldr	r1, [sp, #0]
 800174a:	3808      	subs	r0, #8
 800174c:	4081      	lsls	r1, r0
 800174e:	2200      	movs	r2, #0
 8001750:	468b      	mov	fp, r1
 8001752:	e666      	b.n	8001422 <__aeabi_ddiv+0x14e>
 8001754:	2200      	movs	r2, #0
 8001756:	002e      	movs	r6, r5
 8001758:	2400      	movs	r4, #0
 800175a:	4690      	mov	r8, r2
 800175c:	4b65      	ldr	r3, [pc, #404]	@ (80018f4 <__aeabi_ddiv+0x620>)
 800175e:	e625      	b.n	80013ac <__aeabi_ddiv+0xd8>
 8001760:	002e      	movs	r6, r5
 8001762:	2101      	movs	r1, #1
 8001764:	1ac9      	subs	r1, r1, r3
 8001766:	2938      	cmp	r1, #56	@ 0x38
 8001768:	dd00      	ble.n	800176c <__aeabi_ddiv+0x498>
 800176a:	e61b      	b.n	80013a4 <__aeabi_ddiv+0xd0>
 800176c:	291f      	cmp	r1, #31
 800176e:	dc7e      	bgt.n	800186e <__aeabi_ddiv+0x59a>
 8001770:	4861      	ldr	r0, [pc, #388]	@ (80018f8 <__aeabi_ddiv+0x624>)
 8001772:	0014      	movs	r4, r2
 8001774:	4450      	add	r0, sl
 8001776:	465b      	mov	r3, fp
 8001778:	4082      	lsls	r2, r0
 800177a:	4083      	lsls	r3, r0
 800177c:	40cc      	lsrs	r4, r1
 800177e:	1e50      	subs	r0, r2, #1
 8001780:	4182      	sbcs	r2, r0
 8001782:	4323      	orrs	r3, r4
 8001784:	431a      	orrs	r2, r3
 8001786:	465b      	mov	r3, fp
 8001788:	40cb      	lsrs	r3, r1
 800178a:	0751      	lsls	r1, r2, #29
 800178c:	d009      	beq.n	80017a2 <__aeabi_ddiv+0x4ce>
 800178e:	210f      	movs	r1, #15
 8001790:	4011      	ands	r1, r2
 8001792:	2904      	cmp	r1, #4
 8001794:	d005      	beq.n	80017a2 <__aeabi_ddiv+0x4ce>
 8001796:	1d11      	adds	r1, r2, #4
 8001798:	4291      	cmp	r1, r2
 800179a:	4192      	sbcs	r2, r2
 800179c:	4252      	negs	r2, r2
 800179e:	189b      	adds	r3, r3, r2
 80017a0:	000a      	movs	r2, r1
 80017a2:	0219      	lsls	r1, r3, #8
 80017a4:	d400      	bmi.n	80017a8 <__aeabi_ddiv+0x4d4>
 80017a6:	e09b      	b.n	80018e0 <__aeabi_ddiv+0x60c>
 80017a8:	2200      	movs	r2, #0
 80017aa:	2301      	movs	r3, #1
 80017ac:	2400      	movs	r4, #0
 80017ae:	4690      	mov	r8, r2
 80017b0:	e5fc      	b.n	80013ac <__aeabi_ddiv+0xd8>
 80017b2:	210f      	movs	r1, #15
 80017b4:	4011      	ands	r1, r2
 80017b6:	2904      	cmp	r1, #4
 80017b8:	d100      	bne.n	80017bc <__aeabi_ddiv+0x4e8>
 80017ba:	e773      	b.n	80016a4 <__aeabi_ddiv+0x3d0>
 80017bc:	1d11      	adds	r1, r2, #4
 80017be:	4291      	cmp	r1, r2
 80017c0:	4192      	sbcs	r2, r2
 80017c2:	4252      	negs	r2, r2
 80017c4:	002e      	movs	r6, r5
 80017c6:	08c9      	lsrs	r1, r1, #3
 80017c8:	4493      	add	fp, r2
 80017ca:	e76d      	b.n	80016a8 <__aeabi_ddiv+0x3d4>
 80017cc:	9b00      	ldr	r3, [sp, #0]
 80017ce:	3d01      	subs	r5, #1
 80017d0:	469c      	mov	ip, r3
 80017d2:	4461      	add	r1, ip
 80017d4:	428b      	cmp	r3, r1
 80017d6:	d900      	bls.n	80017da <__aeabi_ddiv+0x506>
 80017d8:	e72c      	b.n	8001634 <__aeabi_ddiv+0x360>
 80017da:	428a      	cmp	r2, r1
 80017dc:	d800      	bhi.n	80017e0 <__aeabi_ddiv+0x50c>
 80017de:	e729      	b.n	8001634 <__aeabi_ddiv+0x360>
 80017e0:	1e85      	subs	r5, r0, #2
 80017e2:	4461      	add	r1, ip
 80017e4:	e726      	b.n	8001634 <__aeabi_ddiv+0x360>
 80017e6:	9900      	ldr	r1, [sp, #0]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	468c      	mov	ip, r1
 80017ec:	4464      	add	r4, ip
 80017ee:	42a1      	cmp	r1, r4
 80017f0:	d900      	bls.n	80017f4 <__aeabi_ddiv+0x520>
 80017f2:	e72d      	b.n	8001650 <__aeabi_ddiv+0x37c>
 80017f4:	42a2      	cmp	r2, r4
 80017f6:	d800      	bhi.n	80017fa <__aeabi_ddiv+0x526>
 80017f8:	e72a      	b.n	8001650 <__aeabi_ddiv+0x37c>
 80017fa:	1e83      	subs	r3, r0, #2
 80017fc:	4464      	add	r4, ip
 80017fe:	e727      	b.n	8001650 <__aeabi_ddiv+0x37c>
 8001800:	4287      	cmp	r7, r0
 8001802:	d000      	beq.n	8001806 <__aeabi_ddiv+0x532>
 8001804:	e6fe      	b.n	8001604 <__aeabi_ddiv+0x330>
 8001806:	45a9      	cmp	r9, r5
 8001808:	d900      	bls.n	800180c <__aeabi_ddiv+0x538>
 800180a:	e6fb      	b.n	8001604 <__aeabi_ddiv+0x330>
 800180c:	e6f5      	b.n	80015fa <__aeabi_ddiv+0x326>
 800180e:	42a2      	cmp	r2, r4
 8001810:	d800      	bhi.n	8001814 <__aeabi_ddiv+0x540>
 8001812:	e6b9      	b.n	8001588 <__aeabi_ddiv+0x2b4>
 8001814:	1e83      	subs	r3, r0, #2
 8001816:	4464      	add	r4, ip
 8001818:	e6b6      	b.n	8001588 <__aeabi_ddiv+0x2b4>
 800181a:	428a      	cmp	r2, r1
 800181c:	d800      	bhi.n	8001820 <__aeabi_ddiv+0x54c>
 800181e:	e69f      	b.n	8001560 <__aeabi_ddiv+0x28c>
 8001820:	46bc      	mov	ip, r7
 8001822:	1e83      	subs	r3, r0, #2
 8001824:	4698      	mov	r8, r3
 8001826:	4461      	add	r1, ip
 8001828:	e69a      	b.n	8001560 <__aeabi_ddiv+0x28c>
 800182a:	000a      	movs	r2, r1
 800182c:	4284      	cmp	r4, r0
 800182e:	d000      	beq.n	8001832 <__aeabi_ddiv+0x55e>
 8001830:	e72e      	b.n	8001690 <__aeabi_ddiv+0x3bc>
 8001832:	454b      	cmp	r3, r9
 8001834:	d000      	beq.n	8001838 <__aeabi_ddiv+0x564>
 8001836:	e72b      	b.n	8001690 <__aeabi_ddiv+0x3bc>
 8001838:	0035      	movs	r5, r6
 800183a:	e72c      	b.n	8001696 <__aeabi_ddiv+0x3c2>
 800183c:	4b2a      	ldr	r3, [pc, #168]	@ (80018e8 <__aeabi_ddiv+0x614>)
 800183e:	4a2f      	ldr	r2, [pc, #188]	@ (80018fc <__aeabi_ddiv+0x628>)
 8001840:	4453      	add	r3, sl
 8001842:	4592      	cmp	sl, r2
 8001844:	db43      	blt.n	80018ce <__aeabi_ddiv+0x5fa>
 8001846:	2201      	movs	r2, #1
 8001848:	2100      	movs	r1, #0
 800184a:	4493      	add	fp, r2
 800184c:	e72c      	b.n	80016a8 <__aeabi_ddiv+0x3d4>
 800184e:	42ac      	cmp	r4, r5
 8001850:	d800      	bhi.n	8001854 <__aeabi_ddiv+0x580>
 8001852:	e6d7      	b.n	8001604 <__aeabi_ddiv+0x330>
 8001854:	2302      	movs	r3, #2
 8001856:	425b      	negs	r3, r3
 8001858:	469c      	mov	ip, r3
 800185a:	9900      	ldr	r1, [sp, #0]
 800185c:	444d      	add	r5, r9
 800185e:	454d      	cmp	r5, r9
 8001860:	419b      	sbcs	r3, r3
 8001862:	44e3      	add	fp, ip
 8001864:	468c      	mov	ip, r1
 8001866:	425b      	negs	r3, r3
 8001868:	4463      	add	r3, ip
 800186a:	18c0      	adds	r0, r0, r3
 800186c:	e6cc      	b.n	8001608 <__aeabi_ddiv+0x334>
 800186e:	201f      	movs	r0, #31
 8001870:	4240      	negs	r0, r0
 8001872:	1ac3      	subs	r3, r0, r3
 8001874:	4658      	mov	r0, fp
 8001876:	40d8      	lsrs	r0, r3
 8001878:	2920      	cmp	r1, #32
 800187a:	d004      	beq.n	8001886 <__aeabi_ddiv+0x5b2>
 800187c:	4659      	mov	r1, fp
 800187e:	4b20      	ldr	r3, [pc, #128]	@ (8001900 <__aeabi_ddiv+0x62c>)
 8001880:	4453      	add	r3, sl
 8001882:	4099      	lsls	r1, r3
 8001884:	430a      	orrs	r2, r1
 8001886:	1e53      	subs	r3, r2, #1
 8001888:	419a      	sbcs	r2, r3
 800188a:	2307      	movs	r3, #7
 800188c:	0019      	movs	r1, r3
 800188e:	4302      	orrs	r2, r0
 8001890:	2400      	movs	r4, #0
 8001892:	4011      	ands	r1, r2
 8001894:	4213      	tst	r3, r2
 8001896:	d009      	beq.n	80018ac <__aeabi_ddiv+0x5d8>
 8001898:	3308      	adds	r3, #8
 800189a:	4013      	ands	r3, r2
 800189c:	2b04      	cmp	r3, #4
 800189e:	d01d      	beq.n	80018dc <__aeabi_ddiv+0x608>
 80018a0:	1d13      	adds	r3, r2, #4
 80018a2:	4293      	cmp	r3, r2
 80018a4:	4189      	sbcs	r1, r1
 80018a6:	001a      	movs	r2, r3
 80018a8:	4249      	negs	r1, r1
 80018aa:	0749      	lsls	r1, r1, #29
 80018ac:	08d2      	lsrs	r2, r2, #3
 80018ae:	430a      	orrs	r2, r1
 80018b0:	4690      	mov	r8, r2
 80018b2:	2300      	movs	r3, #0
 80018b4:	e57a      	b.n	80013ac <__aeabi_ddiv+0xd8>
 80018b6:	4649      	mov	r1, r9
 80018b8:	9f00      	ldr	r7, [sp, #0]
 80018ba:	004d      	lsls	r5, r1, #1
 80018bc:	454d      	cmp	r5, r9
 80018be:	4189      	sbcs	r1, r1
 80018c0:	46bc      	mov	ip, r7
 80018c2:	4249      	negs	r1, r1
 80018c4:	4461      	add	r1, ip
 80018c6:	46a9      	mov	r9, r5
 80018c8:	3a02      	subs	r2, #2
 80018ca:	1864      	adds	r4, r4, r1
 80018cc:	e7ae      	b.n	800182c <__aeabi_ddiv+0x558>
 80018ce:	2201      	movs	r2, #1
 80018d0:	4252      	negs	r2, r2
 80018d2:	e746      	b.n	8001762 <__aeabi_ddiv+0x48e>
 80018d4:	4599      	cmp	r9, r3
 80018d6:	d3ee      	bcc.n	80018b6 <__aeabi_ddiv+0x5e2>
 80018d8:	000a      	movs	r2, r1
 80018da:	e7aa      	b.n	8001832 <__aeabi_ddiv+0x55e>
 80018dc:	2100      	movs	r1, #0
 80018de:	e7e5      	b.n	80018ac <__aeabi_ddiv+0x5d8>
 80018e0:	0759      	lsls	r1, r3, #29
 80018e2:	025b      	lsls	r3, r3, #9
 80018e4:	0b1c      	lsrs	r4, r3, #12
 80018e6:	e7e1      	b.n	80018ac <__aeabi_ddiv+0x5d8>
 80018e8:	000003ff 	.word	0x000003ff
 80018ec:	feffffff 	.word	0xfeffffff
 80018f0:	000007fe 	.word	0x000007fe
 80018f4:	000007ff 	.word	0x000007ff
 80018f8:	0000041e 	.word	0x0000041e
 80018fc:	fffffc02 	.word	0xfffffc02
 8001900:	0000043e 	.word	0x0000043e

08001904 <__eqdf2>:
 8001904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001906:	4657      	mov	r7, sl
 8001908:	46de      	mov	lr, fp
 800190a:	464e      	mov	r6, r9
 800190c:	4645      	mov	r5, r8
 800190e:	b5e0      	push	{r5, r6, r7, lr}
 8001910:	000d      	movs	r5, r1
 8001912:	0004      	movs	r4, r0
 8001914:	0fe8      	lsrs	r0, r5, #31
 8001916:	4683      	mov	fp, r0
 8001918:	0309      	lsls	r1, r1, #12
 800191a:	0fd8      	lsrs	r0, r3, #31
 800191c:	0b09      	lsrs	r1, r1, #12
 800191e:	4682      	mov	sl, r0
 8001920:	4819      	ldr	r0, [pc, #100]	@ (8001988 <__eqdf2+0x84>)
 8001922:	468c      	mov	ip, r1
 8001924:	031f      	lsls	r7, r3, #12
 8001926:	0069      	lsls	r1, r5, #1
 8001928:	005e      	lsls	r6, r3, #1
 800192a:	0d49      	lsrs	r1, r1, #21
 800192c:	0b3f      	lsrs	r7, r7, #12
 800192e:	0d76      	lsrs	r6, r6, #21
 8001930:	4281      	cmp	r1, r0
 8001932:	d018      	beq.n	8001966 <__eqdf2+0x62>
 8001934:	4286      	cmp	r6, r0
 8001936:	d00f      	beq.n	8001958 <__eqdf2+0x54>
 8001938:	2001      	movs	r0, #1
 800193a:	42b1      	cmp	r1, r6
 800193c:	d10d      	bne.n	800195a <__eqdf2+0x56>
 800193e:	45bc      	cmp	ip, r7
 8001940:	d10b      	bne.n	800195a <__eqdf2+0x56>
 8001942:	4294      	cmp	r4, r2
 8001944:	d109      	bne.n	800195a <__eqdf2+0x56>
 8001946:	45d3      	cmp	fp, sl
 8001948:	d01c      	beq.n	8001984 <__eqdf2+0x80>
 800194a:	2900      	cmp	r1, #0
 800194c:	d105      	bne.n	800195a <__eqdf2+0x56>
 800194e:	4660      	mov	r0, ip
 8001950:	4320      	orrs	r0, r4
 8001952:	1e43      	subs	r3, r0, #1
 8001954:	4198      	sbcs	r0, r3
 8001956:	e000      	b.n	800195a <__eqdf2+0x56>
 8001958:	2001      	movs	r0, #1
 800195a:	bcf0      	pop	{r4, r5, r6, r7}
 800195c:	46bb      	mov	fp, r7
 800195e:	46b2      	mov	sl, r6
 8001960:	46a9      	mov	r9, r5
 8001962:	46a0      	mov	r8, r4
 8001964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001966:	2001      	movs	r0, #1
 8001968:	428e      	cmp	r6, r1
 800196a:	d1f6      	bne.n	800195a <__eqdf2+0x56>
 800196c:	4661      	mov	r1, ip
 800196e:	4339      	orrs	r1, r7
 8001970:	000f      	movs	r7, r1
 8001972:	4317      	orrs	r7, r2
 8001974:	4327      	orrs	r7, r4
 8001976:	d1f0      	bne.n	800195a <__eqdf2+0x56>
 8001978:	465b      	mov	r3, fp
 800197a:	4652      	mov	r2, sl
 800197c:	1a98      	subs	r0, r3, r2
 800197e:	1e43      	subs	r3, r0, #1
 8001980:	4198      	sbcs	r0, r3
 8001982:	e7ea      	b.n	800195a <__eqdf2+0x56>
 8001984:	2000      	movs	r0, #0
 8001986:	e7e8      	b.n	800195a <__eqdf2+0x56>
 8001988:	000007ff 	.word	0x000007ff

0800198c <__gedf2>:
 800198c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198e:	4657      	mov	r7, sl
 8001990:	464e      	mov	r6, r9
 8001992:	4645      	mov	r5, r8
 8001994:	46de      	mov	lr, fp
 8001996:	b5e0      	push	{r5, r6, r7, lr}
 8001998:	000d      	movs	r5, r1
 800199a:	030e      	lsls	r6, r1, #12
 800199c:	0049      	lsls	r1, r1, #1
 800199e:	0d49      	lsrs	r1, r1, #21
 80019a0:	468a      	mov	sl, r1
 80019a2:	0fdf      	lsrs	r7, r3, #31
 80019a4:	0fe9      	lsrs	r1, r5, #31
 80019a6:	46bc      	mov	ip, r7
 80019a8:	b083      	sub	sp, #12
 80019aa:	4f2f      	ldr	r7, [pc, #188]	@ (8001a68 <__gedf2+0xdc>)
 80019ac:	0004      	movs	r4, r0
 80019ae:	4680      	mov	r8, r0
 80019b0:	9101      	str	r1, [sp, #4]
 80019b2:	0058      	lsls	r0, r3, #1
 80019b4:	0319      	lsls	r1, r3, #12
 80019b6:	4691      	mov	r9, r2
 80019b8:	0b36      	lsrs	r6, r6, #12
 80019ba:	0b09      	lsrs	r1, r1, #12
 80019bc:	0d40      	lsrs	r0, r0, #21
 80019be:	45ba      	cmp	sl, r7
 80019c0:	d01d      	beq.n	80019fe <__gedf2+0x72>
 80019c2:	42b8      	cmp	r0, r7
 80019c4:	d00d      	beq.n	80019e2 <__gedf2+0x56>
 80019c6:	4657      	mov	r7, sl
 80019c8:	2f00      	cmp	r7, #0
 80019ca:	d12a      	bne.n	8001a22 <__gedf2+0x96>
 80019cc:	4334      	orrs	r4, r6
 80019ce:	2800      	cmp	r0, #0
 80019d0:	d124      	bne.n	8001a1c <__gedf2+0x90>
 80019d2:	430a      	orrs	r2, r1
 80019d4:	d036      	beq.n	8001a44 <__gedf2+0xb8>
 80019d6:	2c00      	cmp	r4, #0
 80019d8:	d141      	bne.n	8001a5e <__gedf2+0xd2>
 80019da:	4663      	mov	r3, ip
 80019dc:	0058      	lsls	r0, r3, #1
 80019de:	3801      	subs	r0, #1
 80019e0:	e015      	b.n	8001a0e <__gedf2+0x82>
 80019e2:	4311      	orrs	r1, r2
 80019e4:	d138      	bne.n	8001a58 <__gedf2+0xcc>
 80019e6:	4653      	mov	r3, sl
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <__gedf2+0x64>
 80019ec:	4326      	orrs	r6, r4
 80019ee:	d0f4      	beq.n	80019da <__gedf2+0x4e>
 80019f0:	9b01      	ldr	r3, [sp, #4]
 80019f2:	4563      	cmp	r3, ip
 80019f4:	d107      	bne.n	8001a06 <__gedf2+0x7a>
 80019f6:	9b01      	ldr	r3, [sp, #4]
 80019f8:	0058      	lsls	r0, r3, #1
 80019fa:	3801      	subs	r0, #1
 80019fc:	e007      	b.n	8001a0e <__gedf2+0x82>
 80019fe:	4326      	orrs	r6, r4
 8001a00:	d12a      	bne.n	8001a58 <__gedf2+0xcc>
 8001a02:	4550      	cmp	r0, sl
 8001a04:	d021      	beq.n	8001a4a <__gedf2+0xbe>
 8001a06:	2001      	movs	r0, #1
 8001a08:	9b01      	ldr	r3, [sp, #4]
 8001a0a:	425f      	negs	r7, r3
 8001a0c:	4338      	orrs	r0, r7
 8001a0e:	b003      	add	sp, #12
 8001a10:	bcf0      	pop	{r4, r5, r6, r7}
 8001a12:	46bb      	mov	fp, r7
 8001a14:	46b2      	mov	sl, r6
 8001a16:	46a9      	mov	r9, r5
 8001a18:	46a0      	mov	r8, r4
 8001a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a1c:	2c00      	cmp	r4, #0
 8001a1e:	d0dc      	beq.n	80019da <__gedf2+0x4e>
 8001a20:	e7e6      	b.n	80019f0 <__gedf2+0x64>
 8001a22:	2800      	cmp	r0, #0
 8001a24:	d0ef      	beq.n	8001a06 <__gedf2+0x7a>
 8001a26:	9b01      	ldr	r3, [sp, #4]
 8001a28:	4563      	cmp	r3, ip
 8001a2a:	d1ec      	bne.n	8001a06 <__gedf2+0x7a>
 8001a2c:	4582      	cmp	sl, r0
 8001a2e:	dcea      	bgt.n	8001a06 <__gedf2+0x7a>
 8001a30:	dbe1      	blt.n	80019f6 <__gedf2+0x6a>
 8001a32:	428e      	cmp	r6, r1
 8001a34:	d8e7      	bhi.n	8001a06 <__gedf2+0x7a>
 8001a36:	d1de      	bne.n	80019f6 <__gedf2+0x6a>
 8001a38:	45c8      	cmp	r8, r9
 8001a3a:	d8e4      	bhi.n	8001a06 <__gedf2+0x7a>
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	45c8      	cmp	r8, r9
 8001a40:	d2e5      	bcs.n	8001a0e <__gedf2+0x82>
 8001a42:	e7d8      	b.n	80019f6 <__gedf2+0x6a>
 8001a44:	2c00      	cmp	r4, #0
 8001a46:	d0e2      	beq.n	8001a0e <__gedf2+0x82>
 8001a48:	e7dd      	b.n	8001a06 <__gedf2+0x7a>
 8001a4a:	4311      	orrs	r1, r2
 8001a4c:	d104      	bne.n	8001a58 <__gedf2+0xcc>
 8001a4e:	9b01      	ldr	r3, [sp, #4]
 8001a50:	4563      	cmp	r3, ip
 8001a52:	d1d8      	bne.n	8001a06 <__gedf2+0x7a>
 8001a54:	2000      	movs	r0, #0
 8001a56:	e7da      	b.n	8001a0e <__gedf2+0x82>
 8001a58:	2002      	movs	r0, #2
 8001a5a:	4240      	negs	r0, r0
 8001a5c:	e7d7      	b.n	8001a0e <__gedf2+0x82>
 8001a5e:	9b01      	ldr	r3, [sp, #4]
 8001a60:	4563      	cmp	r3, ip
 8001a62:	d0e6      	beq.n	8001a32 <__gedf2+0xa6>
 8001a64:	e7cf      	b.n	8001a06 <__gedf2+0x7a>
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	000007ff 	.word	0x000007ff

08001a6c <__ledf2>:
 8001a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6e:	4657      	mov	r7, sl
 8001a70:	464e      	mov	r6, r9
 8001a72:	4645      	mov	r5, r8
 8001a74:	46de      	mov	lr, fp
 8001a76:	b5e0      	push	{r5, r6, r7, lr}
 8001a78:	000d      	movs	r5, r1
 8001a7a:	030e      	lsls	r6, r1, #12
 8001a7c:	0049      	lsls	r1, r1, #1
 8001a7e:	0d49      	lsrs	r1, r1, #21
 8001a80:	468a      	mov	sl, r1
 8001a82:	0fdf      	lsrs	r7, r3, #31
 8001a84:	0fe9      	lsrs	r1, r5, #31
 8001a86:	46bc      	mov	ip, r7
 8001a88:	b083      	sub	sp, #12
 8001a8a:	4f2e      	ldr	r7, [pc, #184]	@ (8001b44 <__ledf2+0xd8>)
 8001a8c:	0004      	movs	r4, r0
 8001a8e:	4680      	mov	r8, r0
 8001a90:	9101      	str	r1, [sp, #4]
 8001a92:	0058      	lsls	r0, r3, #1
 8001a94:	0319      	lsls	r1, r3, #12
 8001a96:	4691      	mov	r9, r2
 8001a98:	0b36      	lsrs	r6, r6, #12
 8001a9a:	0b09      	lsrs	r1, r1, #12
 8001a9c:	0d40      	lsrs	r0, r0, #21
 8001a9e:	45ba      	cmp	sl, r7
 8001aa0:	d01e      	beq.n	8001ae0 <__ledf2+0x74>
 8001aa2:	42b8      	cmp	r0, r7
 8001aa4:	d00d      	beq.n	8001ac2 <__ledf2+0x56>
 8001aa6:	4657      	mov	r7, sl
 8001aa8:	2f00      	cmp	r7, #0
 8001aaa:	d127      	bne.n	8001afc <__ledf2+0x90>
 8001aac:	4334      	orrs	r4, r6
 8001aae:	2800      	cmp	r0, #0
 8001ab0:	d133      	bne.n	8001b1a <__ledf2+0xae>
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	d034      	beq.n	8001b20 <__ledf2+0xb4>
 8001ab6:	2c00      	cmp	r4, #0
 8001ab8:	d140      	bne.n	8001b3c <__ledf2+0xd0>
 8001aba:	4663      	mov	r3, ip
 8001abc:	0058      	lsls	r0, r3, #1
 8001abe:	3801      	subs	r0, #1
 8001ac0:	e015      	b.n	8001aee <__ledf2+0x82>
 8001ac2:	4311      	orrs	r1, r2
 8001ac4:	d112      	bne.n	8001aec <__ledf2+0x80>
 8001ac6:	4653      	mov	r3, sl
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <__ledf2+0x64>
 8001acc:	4326      	orrs	r6, r4
 8001ace:	d0f4      	beq.n	8001aba <__ledf2+0x4e>
 8001ad0:	9b01      	ldr	r3, [sp, #4]
 8001ad2:	4563      	cmp	r3, ip
 8001ad4:	d01d      	beq.n	8001b12 <__ledf2+0xa6>
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	9b01      	ldr	r3, [sp, #4]
 8001ada:	425f      	negs	r7, r3
 8001adc:	4338      	orrs	r0, r7
 8001ade:	e006      	b.n	8001aee <__ledf2+0x82>
 8001ae0:	4326      	orrs	r6, r4
 8001ae2:	d103      	bne.n	8001aec <__ledf2+0x80>
 8001ae4:	4550      	cmp	r0, sl
 8001ae6:	d1f6      	bne.n	8001ad6 <__ledf2+0x6a>
 8001ae8:	4311      	orrs	r1, r2
 8001aea:	d01c      	beq.n	8001b26 <__ledf2+0xba>
 8001aec:	2002      	movs	r0, #2
 8001aee:	b003      	add	sp, #12
 8001af0:	bcf0      	pop	{r4, r5, r6, r7}
 8001af2:	46bb      	mov	fp, r7
 8001af4:	46b2      	mov	sl, r6
 8001af6:	46a9      	mov	r9, r5
 8001af8:	46a0      	mov	r8, r4
 8001afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001afc:	2800      	cmp	r0, #0
 8001afe:	d0ea      	beq.n	8001ad6 <__ledf2+0x6a>
 8001b00:	9b01      	ldr	r3, [sp, #4]
 8001b02:	4563      	cmp	r3, ip
 8001b04:	d1e7      	bne.n	8001ad6 <__ledf2+0x6a>
 8001b06:	4582      	cmp	sl, r0
 8001b08:	dce5      	bgt.n	8001ad6 <__ledf2+0x6a>
 8001b0a:	db02      	blt.n	8001b12 <__ledf2+0xa6>
 8001b0c:	428e      	cmp	r6, r1
 8001b0e:	d8e2      	bhi.n	8001ad6 <__ledf2+0x6a>
 8001b10:	d00e      	beq.n	8001b30 <__ledf2+0xc4>
 8001b12:	9b01      	ldr	r3, [sp, #4]
 8001b14:	0058      	lsls	r0, r3, #1
 8001b16:	3801      	subs	r0, #1
 8001b18:	e7e9      	b.n	8001aee <__ledf2+0x82>
 8001b1a:	2c00      	cmp	r4, #0
 8001b1c:	d0cd      	beq.n	8001aba <__ledf2+0x4e>
 8001b1e:	e7d7      	b.n	8001ad0 <__ledf2+0x64>
 8001b20:	2c00      	cmp	r4, #0
 8001b22:	d0e4      	beq.n	8001aee <__ledf2+0x82>
 8001b24:	e7d7      	b.n	8001ad6 <__ledf2+0x6a>
 8001b26:	9b01      	ldr	r3, [sp, #4]
 8001b28:	2000      	movs	r0, #0
 8001b2a:	4563      	cmp	r3, ip
 8001b2c:	d0df      	beq.n	8001aee <__ledf2+0x82>
 8001b2e:	e7d2      	b.n	8001ad6 <__ledf2+0x6a>
 8001b30:	45c8      	cmp	r8, r9
 8001b32:	d8d0      	bhi.n	8001ad6 <__ledf2+0x6a>
 8001b34:	2000      	movs	r0, #0
 8001b36:	45c8      	cmp	r8, r9
 8001b38:	d2d9      	bcs.n	8001aee <__ledf2+0x82>
 8001b3a:	e7ea      	b.n	8001b12 <__ledf2+0xa6>
 8001b3c:	9b01      	ldr	r3, [sp, #4]
 8001b3e:	4563      	cmp	r3, ip
 8001b40:	d0e4      	beq.n	8001b0c <__ledf2+0xa0>
 8001b42:	e7c8      	b.n	8001ad6 <__ledf2+0x6a>
 8001b44:	000007ff 	.word	0x000007ff

08001b48 <__aeabi_dmul>:
 8001b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b4a:	4657      	mov	r7, sl
 8001b4c:	464e      	mov	r6, r9
 8001b4e:	46de      	mov	lr, fp
 8001b50:	4645      	mov	r5, r8
 8001b52:	b5e0      	push	{r5, r6, r7, lr}
 8001b54:	001f      	movs	r7, r3
 8001b56:	030b      	lsls	r3, r1, #12
 8001b58:	0b1b      	lsrs	r3, r3, #12
 8001b5a:	0016      	movs	r6, r2
 8001b5c:	469a      	mov	sl, r3
 8001b5e:	0fca      	lsrs	r2, r1, #31
 8001b60:	004b      	lsls	r3, r1, #1
 8001b62:	0004      	movs	r4, r0
 8001b64:	4691      	mov	r9, r2
 8001b66:	b085      	sub	sp, #20
 8001b68:	0d5b      	lsrs	r3, r3, #21
 8001b6a:	d100      	bne.n	8001b6e <__aeabi_dmul+0x26>
 8001b6c:	e1cf      	b.n	8001f0e <__aeabi_dmul+0x3c6>
 8001b6e:	4acd      	ldr	r2, [pc, #820]	@ (8001ea4 <__aeabi_dmul+0x35c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d055      	beq.n	8001c20 <__aeabi_dmul+0xd8>
 8001b74:	4651      	mov	r1, sl
 8001b76:	0f42      	lsrs	r2, r0, #29
 8001b78:	00c9      	lsls	r1, r1, #3
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	2180      	movs	r1, #128	@ 0x80
 8001b7e:	0409      	lsls	r1, r1, #16
 8001b80:	4311      	orrs	r1, r2
 8001b82:	00c2      	lsls	r2, r0, #3
 8001b84:	4690      	mov	r8, r2
 8001b86:	4ac8      	ldr	r2, [pc, #800]	@ (8001ea8 <__aeabi_dmul+0x360>)
 8001b88:	468a      	mov	sl, r1
 8001b8a:	4693      	mov	fp, r2
 8001b8c:	449b      	add	fp, r3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2500      	movs	r5, #0
 8001b92:	9302      	str	r3, [sp, #8]
 8001b94:	033c      	lsls	r4, r7, #12
 8001b96:	007b      	lsls	r3, r7, #1
 8001b98:	0ffa      	lsrs	r2, r7, #31
 8001b9a:	9601      	str	r6, [sp, #4]
 8001b9c:	0b24      	lsrs	r4, r4, #12
 8001b9e:	0d5b      	lsrs	r3, r3, #21
 8001ba0:	9200      	str	r2, [sp, #0]
 8001ba2:	d100      	bne.n	8001ba6 <__aeabi_dmul+0x5e>
 8001ba4:	e188      	b.n	8001eb8 <__aeabi_dmul+0x370>
 8001ba6:	4abf      	ldr	r2, [pc, #764]	@ (8001ea4 <__aeabi_dmul+0x35c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d100      	bne.n	8001bae <__aeabi_dmul+0x66>
 8001bac:	e092      	b.n	8001cd4 <__aeabi_dmul+0x18c>
 8001bae:	4abe      	ldr	r2, [pc, #760]	@ (8001ea8 <__aeabi_dmul+0x360>)
 8001bb0:	4694      	mov	ip, r2
 8001bb2:	4463      	add	r3, ip
 8001bb4:	449b      	add	fp, r3
 8001bb6:	2d0a      	cmp	r5, #10
 8001bb8:	dc42      	bgt.n	8001c40 <__aeabi_dmul+0xf8>
 8001bba:	00e4      	lsls	r4, r4, #3
 8001bbc:	0f73      	lsrs	r3, r6, #29
 8001bbe:	4323      	orrs	r3, r4
 8001bc0:	2480      	movs	r4, #128	@ 0x80
 8001bc2:	4649      	mov	r1, r9
 8001bc4:	0424      	lsls	r4, r4, #16
 8001bc6:	431c      	orrs	r4, r3
 8001bc8:	00f3      	lsls	r3, r6, #3
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	9b00      	ldr	r3, [sp, #0]
 8001bce:	2000      	movs	r0, #0
 8001bd0:	4059      	eors	r1, r3
 8001bd2:	b2cb      	uxtb	r3, r1
 8001bd4:	9303      	str	r3, [sp, #12]
 8001bd6:	2d02      	cmp	r5, #2
 8001bd8:	dc00      	bgt.n	8001bdc <__aeabi_dmul+0x94>
 8001bda:	e094      	b.n	8001d06 <__aeabi_dmul+0x1be>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	40ab      	lsls	r3, r5
 8001be0:	001d      	movs	r5, r3
 8001be2:	23a6      	movs	r3, #166	@ 0xa6
 8001be4:	002a      	movs	r2, r5
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	401a      	ands	r2, r3
 8001bea:	421d      	tst	r5, r3
 8001bec:	d000      	beq.n	8001bf0 <__aeabi_dmul+0xa8>
 8001bee:	e229      	b.n	8002044 <__aeabi_dmul+0x4fc>
 8001bf0:	2390      	movs	r3, #144	@ 0x90
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	421d      	tst	r5, r3
 8001bf6:	d100      	bne.n	8001bfa <__aeabi_dmul+0xb2>
 8001bf8:	e24d      	b.n	8002096 <__aeabi_dmul+0x54e>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	2480      	movs	r4, #128	@ 0x80
 8001bfe:	4699      	mov	r9, r3
 8001c00:	0324      	lsls	r4, r4, #12
 8001c02:	4ba8      	ldr	r3, [pc, #672]	@ (8001ea4 <__aeabi_dmul+0x35c>)
 8001c04:	0010      	movs	r0, r2
 8001c06:	464a      	mov	r2, r9
 8001c08:	051b      	lsls	r3, r3, #20
 8001c0a:	4323      	orrs	r3, r4
 8001c0c:	07d2      	lsls	r2, r2, #31
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	0019      	movs	r1, r3
 8001c12:	b005      	add	sp, #20
 8001c14:	bcf0      	pop	{r4, r5, r6, r7}
 8001c16:	46bb      	mov	fp, r7
 8001c18:	46b2      	mov	sl, r6
 8001c1a:	46a9      	mov	r9, r5
 8001c1c:	46a0      	mov	r8, r4
 8001c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c20:	4652      	mov	r2, sl
 8001c22:	4302      	orrs	r2, r0
 8001c24:	4690      	mov	r8, r2
 8001c26:	d000      	beq.n	8001c2a <__aeabi_dmul+0xe2>
 8001c28:	e1ac      	b.n	8001f84 <__aeabi_dmul+0x43c>
 8001c2a:	469b      	mov	fp, r3
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	4692      	mov	sl, r2
 8001c30:	2508      	movs	r5, #8
 8001c32:	9302      	str	r3, [sp, #8]
 8001c34:	e7ae      	b.n	8001b94 <__aeabi_dmul+0x4c>
 8001c36:	9b00      	ldr	r3, [sp, #0]
 8001c38:	46a2      	mov	sl, r4
 8001c3a:	4699      	mov	r9, r3
 8001c3c:	9b01      	ldr	r3, [sp, #4]
 8001c3e:	4698      	mov	r8, r3
 8001c40:	9b02      	ldr	r3, [sp, #8]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d100      	bne.n	8001c48 <__aeabi_dmul+0x100>
 8001c46:	e1ca      	b.n	8001fde <__aeabi_dmul+0x496>
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dmul+0x106>
 8001c4c:	e192      	b.n	8001f74 <__aeabi_dmul+0x42c>
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d110      	bne.n	8001c74 <__aeabi_dmul+0x12c>
 8001c52:	2300      	movs	r3, #0
 8001c54:	2400      	movs	r4, #0
 8001c56:	2200      	movs	r2, #0
 8001c58:	e7d4      	b.n	8001c04 <__aeabi_dmul+0xbc>
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	087b      	lsrs	r3, r7, #1
 8001c5e:	403a      	ands	r2, r7
 8001c60:	4313      	orrs	r3, r2
 8001c62:	4652      	mov	r2, sl
 8001c64:	07d2      	lsls	r2, r2, #31
 8001c66:	4313      	orrs	r3, r2
 8001c68:	4698      	mov	r8, r3
 8001c6a:	4653      	mov	r3, sl
 8001c6c:	085b      	lsrs	r3, r3, #1
 8001c6e:	469a      	mov	sl, r3
 8001c70:	9b03      	ldr	r3, [sp, #12]
 8001c72:	4699      	mov	r9, r3
 8001c74:	465b      	mov	r3, fp
 8001c76:	1c58      	adds	r0, r3, #1
 8001c78:	2380      	movs	r3, #128	@ 0x80
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	445b      	add	r3, fp
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	dc00      	bgt.n	8001c84 <__aeabi_dmul+0x13c>
 8001c82:	e1b1      	b.n	8001fe8 <__aeabi_dmul+0x4a0>
 8001c84:	4642      	mov	r2, r8
 8001c86:	0752      	lsls	r2, r2, #29
 8001c88:	d00b      	beq.n	8001ca2 <__aeabi_dmul+0x15a>
 8001c8a:	220f      	movs	r2, #15
 8001c8c:	4641      	mov	r1, r8
 8001c8e:	400a      	ands	r2, r1
 8001c90:	2a04      	cmp	r2, #4
 8001c92:	d006      	beq.n	8001ca2 <__aeabi_dmul+0x15a>
 8001c94:	4642      	mov	r2, r8
 8001c96:	1d11      	adds	r1, r2, #4
 8001c98:	4541      	cmp	r1, r8
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	4688      	mov	r8, r1
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	4492      	add	sl, r2
 8001ca2:	4652      	mov	r2, sl
 8001ca4:	01d2      	lsls	r2, r2, #7
 8001ca6:	d506      	bpl.n	8001cb6 <__aeabi_dmul+0x16e>
 8001ca8:	4652      	mov	r2, sl
 8001caa:	4b80      	ldr	r3, [pc, #512]	@ (8001eac <__aeabi_dmul+0x364>)
 8001cac:	401a      	ands	r2, r3
 8001cae:	2380      	movs	r3, #128	@ 0x80
 8001cb0:	4692      	mov	sl, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	18c3      	adds	r3, r0, r3
 8001cb6:	4a7e      	ldr	r2, [pc, #504]	@ (8001eb0 <__aeabi_dmul+0x368>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	dd00      	ble.n	8001cbe <__aeabi_dmul+0x176>
 8001cbc:	e18f      	b.n	8001fde <__aeabi_dmul+0x496>
 8001cbe:	4642      	mov	r2, r8
 8001cc0:	08d1      	lsrs	r1, r2, #3
 8001cc2:	4652      	mov	r2, sl
 8001cc4:	0752      	lsls	r2, r2, #29
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	4651      	mov	r1, sl
 8001cca:	055b      	lsls	r3, r3, #21
 8001ccc:	024c      	lsls	r4, r1, #9
 8001cce:	0b24      	lsrs	r4, r4, #12
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	e797      	b.n	8001c04 <__aeabi_dmul+0xbc>
 8001cd4:	4b73      	ldr	r3, [pc, #460]	@ (8001ea4 <__aeabi_dmul+0x35c>)
 8001cd6:	4326      	orrs	r6, r4
 8001cd8:	469c      	mov	ip, r3
 8001cda:	44e3      	add	fp, ip
 8001cdc:	2e00      	cmp	r6, #0
 8001cde:	d100      	bne.n	8001ce2 <__aeabi_dmul+0x19a>
 8001ce0:	e16f      	b.n	8001fc2 <__aeabi_dmul+0x47a>
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	4649      	mov	r1, r9
 8001ce6:	431d      	orrs	r5, r3
 8001ce8:	9b00      	ldr	r3, [sp, #0]
 8001cea:	4059      	eors	r1, r3
 8001cec:	b2cb      	uxtb	r3, r1
 8001cee:	9303      	str	r3, [sp, #12]
 8001cf0:	2d0a      	cmp	r5, #10
 8001cf2:	dd00      	ble.n	8001cf6 <__aeabi_dmul+0x1ae>
 8001cf4:	e133      	b.n	8001f5e <__aeabi_dmul+0x416>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	40ab      	lsls	r3, r5
 8001cfa:	001d      	movs	r5, r3
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	9302      	str	r3, [sp, #8]
 8001d00:	2288      	movs	r2, #136	@ 0x88
 8001d02:	422a      	tst	r2, r5
 8001d04:	d197      	bne.n	8001c36 <__aeabi_dmul+0xee>
 8001d06:	4642      	mov	r2, r8
 8001d08:	4643      	mov	r3, r8
 8001d0a:	0412      	lsls	r2, r2, #16
 8001d0c:	0c12      	lsrs	r2, r2, #16
 8001d0e:	0016      	movs	r6, r2
 8001d10:	9801      	ldr	r0, [sp, #4]
 8001d12:	0c1d      	lsrs	r5, r3, #16
 8001d14:	0c03      	lsrs	r3, r0, #16
 8001d16:	0400      	lsls	r0, r0, #16
 8001d18:	0c00      	lsrs	r0, r0, #16
 8001d1a:	4346      	muls	r6, r0
 8001d1c:	46b4      	mov	ip, r6
 8001d1e:	001e      	movs	r6, r3
 8001d20:	436e      	muls	r6, r5
 8001d22:	9600      	str	r6, [sp, #0]
 8001d24:	0016      	movs	r6, r2
 8001d26:	0007      	movs	r7, r0
 8001d28:	435e      	muls	r6, r3
 8001d2a:	4661      	mov	r1, ip
 8001d2c:	46b0      	mov	r8, r6
 8001d2e:	436f      	muls	r7, r5
 8001d30:	0c0e      	lsrs	r6, r1, #16
 8001d32:	44b8      	add	r8, r7
 8001d34:	4446      	add	r6, r8
 8001d36:	42b7      	cmp	r7, r6
 8001d38:	d905      	bls.n	8001d46 <__aeabi_dmul+0x1fe>
 8001d3a:	2180      	movs	r1, #128	@ 0x80
 8001d3c:	0249      	lsls	r1, r1, #9
 8001d3e:	4688      	mov	r8, r1
 8001d40:	9f00      	ldr	r7, [sp, #0]
 8001d42:	4447      	add	r7, r8
 8001d44:	9700      	str	r7, [sp, #0]
 8001d46:	4661      	mov	r1, ip
 8001d48:	0409      	lsls	r1, r1, #16
 8001d4a:	0c09      	lsrs	r1, r1, #16
 8001d4c:	0c37      	lsrs	r7, r6, #16
 8001d4e:	0436      	lsls	r6, r6, #16
 8001d50:	468c      	mov	ip, r1
 8001d52:	0031      	movs	r1, r6
 8001d54:	4461      	add	r1, ip
 8001d56:	9101      	str	r1, [sp, #4]
 8001d58:	0011      	movs	r1, r2
 8001d5a:	0c26      	lsrs	r6, r4, #16
 8001d5c:	0424      	lsls	r4, r4, #16
 8001d5e:	0c24      	lsrs	r4, r4, #16
 8001d60:	4361      	muls	r1, r4
 8001d62:	468c      	mov	ip, r1
 8001d64:	0021      	movs	r1, r4
 8001d66:	4369      	muls	r1, r5
 8001d68:	4689      	mov	r9, r1
 8001d6a:	4661      	mov	r1, ip
 8001d6c:	0c09      	lsrs	r1, r1, #16
 8001d6e:	4688      	mov	r8, r1
 8001d70:	4372      	muls	r2, r6
 8001d72:	444a      	add	r2, r9
 8001d74:	4442      	add	r2, r8
 8001d76:	4375      	muls	r5, r6
 8001d78:	4591      	cmp	r9, r2
 8001d7a:	d903      	bls.n	8001d84 <__aeabi_dmul+0x23c>
 8001d7c:	2180      	movs	r1, #128	@ 0x80
 8001d7e:	0249      	lsls	r1, r1, #9
 8001d80:	4688      	mov	r8, r1
 8001d82:	4445      	add	r5, r8
 8001d84:	0c11      	lsrs	r1, r2, #16
 8001d86:	4688      	mov	r8, r1
 8001d88:	4661      	mov	r1, ip
 8001d8a:	0409      	lsls	r1, r1, #16
 8001d8c:	0c09      	lsrs	r1, r1, #16
 8001d8e:	468c      	mov	ip, r1
 8001d90:	0412      	lsls	r2, r2, #16
 8001d92:	4462      	add	r2, ip
 8001d94:	18b9      	adds	r1, r7, r2
 8001d96:	9102      	str	r1, [sp, #8]
 8001d98:	4651      	mov	r1, sl
 8001d9a:	0c09      	lsrs	r1, r1, #16
 8001d9c:	468c      	mov	ip, r1
 8001d9e:	4651      	mov	r1, sl
 8001da0:	040f      	lsls	r7, r1, #16
 8001da2:	0c3f      	lsrs	r7, r7, #16
 8001da4:	0039      	movs	r1, r7
 8001da6:	4341      	muls	r1, r0
 8001da8:	4445      	add	r5, r8
 8001daa:	4688      	mov	r8, r1
 8001dac:	4661      	mov	r1, ip
 8001dae:	4341      	muls	r1, r0
 8001db0:	468a      	mov	sl, r1
 8001db2:	4641      	mov	r1, r8
 8001db4:	4660      	mov	r0, ip
 8001db6:	0c09      	lsrs	r1, r1, #16
 8001db8:	4689      	mov	r9, r1
 8001dba:	4358      	muls	r0, r3
 8001dbc:	437b      	muls	r3, r7
 8001dbe:	4453      	add	r3, sl
 8001dc0:	444b      	add	r3, r9
 8001dc2:	459a      	cmp	sl, r3
 8001dc4:	d903      	bls.n	8001dce <__aeabi_dmul+0x286>
 8001dc6:	2180      	movs	r1, #128	@ 0x80
 8001dc8:	0249      	lsls	r1, r1, #9
 8001dca:	4689      	mov	r9, r1
 8001dcc:	4448      	add	r0, r9
 8001dce:	0c19      	lsrs	r1, r3, #16
 8001dd0:	4689      	mov	r9, r1
 8001dd2:	4641      	mov	r1, r8
 8001dd4:	0409      	lsls	r1, r1, #16
 8001dd6:	0c09      	lsrs	r1, r1, #16
 8001dd8:	4688      	mov	r8, r1
 8001dda:	0039      	movs	r1, r7
 8001ddc:	4361      	muls	r1, r4
 8001dde:	041b      	lsls	r3, r3, #16
 8001de0:	4443      	add	r3, r8
 8001de2:	4688      	mov	r8, r1
 8001de4:	4661      	mov	r1, ip
 8001de6:	434c      	muls	r4, r1
 8001de8:	4371      	muls	r1, r6
 8001dea:	468c      	mov	ip, r1
 8001dec:	4641      	mov	r1, r8
 8001dee:	4377      	muls	r7, r6
 8001df0:	0c0e      	lsrs	r6, r1, #16
 8001df2:	193f      	adds	r7, r7, r4
 8001df4:	19f6      	adds	r6, r6, r7
 8001df6:	4448      	add	r0, r9
 8001df8:	42b4      	cmp	r4, r6
 8001dfa:	d903      	bls.n	8001e04 <__aeabi_dmul+0x2bc>
 8001dfc:	2180      	movs	r1, #128	@ 0x80
 8001dfe:	0249      	lsls	r1, r1, #9
 8001e00:	4689      	mov	r9, r1
 8001e02:	44cc      	add	ip, r9
 8001e04:	9902      	ldr	r1, [sp, #8]
 8001e06:	9f00      	ldr	r7, [sp, #0]
 8001e08:	4689      	mov	r9, r1
 8001e0a:	0431      	lsls	r1, r6, #16
 8001e0c:	444f      	add	r7, r9
 8001e0e:	4689      	mov	r9, r1
 8001e10:	4641      	mov	r1, r8
 8001e12:	4297      	cmp	r7, r2
 8001e14:	4192      	sbcs	r2, r2
 8001e16:	040c      	lsls	r4, r1, #16
 8001e18:	0c24      	lsrs	r4, r4, #16
 8001e1a:	444c      	add	r4, r9
 8001e1c:	18ff      	adds	r7, r7, r3
 8001e1e:	4252      	negs	r2, r2
 8001e20:	1964      	adds	r4, r4, r5
 8001e22:	18a1      	adds	r1, r4, r2
 8001e24:	429f      	cmp	r7, r3
 8001e26:	419b      	sbcs	r3, r3
 8001e28:	4688      	mov	r8, r1
 8001e2a:	4682      	mov	sl, r0
 8001e2c:	425b      	negs	r3, r3
 8001e2e:	4699      	mov	r9, r3
 8001e30:	4590      	cmp	r8, r2
 8001e32:	4192      	sbcs	r2, r2
 8001e34:	42ac      	cmp	r4, r5
 8001e36:	41a4      	sbcs	r4, r4
 8001e38:	44c2      	add	sl, r8
 8001e3a:	44d1      	add	r9, sl
 8001e3c:	4252      	negs	r2, r2
 8001e3e:	4264      	negs	r4, r4
 8001e40:	4314      	orrs	r4, r2
 8001e42:	4599      	cmp	r9, r3
 8001e44:	419b      	sbcs	r3, r3
 8001e46:	4582      	cmp	sl, r0
 8001e48:	4192      	sbcs	r2, r2
 8001e4a:	425b      	negs	r3, r3
 8001e4c:	4252      	negs	r2, r2
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	464a      	mov	r2, r9
 8001e52:	0c36      	lsrs	r6, r6, #16
 8001e54:	19a4      	adds	r4, r4, r6
 8001e56:	18e3      	adds	r3, r4, r3
 8001e58:	4463      	add	r3, ip
 8001e5a:	025b      	lsls	r3, r3, #9
 8001e5c:	0dd2      	lsrs	r2, r2, #23
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	9901      	ldr	r1, [sp, #4]
 8001e62:	4692      	mov	sl, r2
 8001e64:	027a      	lsls	r2, r7, #9
 8001e66:	430a      	orrs	r2, r1
 8001e68:	1e50      	subs	r0, r2, #1
 8001e6a:	4182      	sbcs	r2, r0
 8001e6c:	0dff      	lsrs	r7, r7, #23
 8001e6e:	4317      	orrs	r7, r2
 8001e70:	464a      	mov	r2, r9
 8001e72:	0252      	lsls	r2, r2, #9
 8001e74:	4317      	orrs	r7, r2
 8001e76:	46b8      	mov	r8, r7
 8001e78:	01db      	lsls	r3, r3, #7
 8001e7a:	d500      	bpl.n	8001e7e <__aeabi_dmul+0x336>
 8001e7c:	e6ed      	b.n	8001c5a <__aeabi_dmul+0x112>
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb4 <__aeabi_dmul+0x36c>)
 8001e80:	9a03      	ldr	r2, [sp, #12]
 8001e82:	445b      	add	r3, fp
 8001e84:	4691      	mov	r9, r2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	dc00      	bgt.n	8001e8c <__aeabi_dmul+0x344>
 8001e8a:	e0ac      	b.n	8001fe6 <__aeabi_dmul+0x49e>
 8001e8c:	003a      	movs	r2, r7
 8001e8e:	0752      	lsls	r2, r2, #29
 8001e90:	d100      	bne.n	8001e94 <__aeabi_dmul+0x34c>
 8001e92:	e710      	b.n	8001cb6 <__aeabi_dmul+0x16e>
 8001e94:	220f      	movs	r2, #15
 8001e96:	4658      	mov	r0, fp
 8001e98:	403a      	ands	r2, r7
 8001e9a:	2a04      	cmp	r2, #4
 8001e9c:	d000      	beq.n	8001ea0 <__aeabi_dmul+0x358>
 8001e9e:	e6f9      	b.n	8001c94 <__aeabi_dmul+0x14c>
 8001ea0:	e709      	b.n	8001cb6 <__aeabi_dmul+0x16e>
 8001ea2:	46c0      	nop			@ (mov r8, r8)
 8001ea4:	000007ff 	.word	0x000007ff
 8001ea8:	fffffc01 	.word	0xfffffc01
 8001eac:	feffffff 	.word	0xfeffffff
 8001eb0:	000007fe 	.word	0x000007fe
 8001eb4:	000003ff 	.word	0x000003ff
 8001eb8:	0022      	movs	r2, r4
 8001eba:	4332      	orrs	r2, r6
 8001ebc:	d06f      	beq.n	8001f9e <__aeabi_dmul+0x456>
 8001ebe:	2c00      	cmp	r4, #0
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_dmul+0x37c>
 8001ec2:	e0c2      	b.n	800204a <__aeabi_dmul+0x502>
 8001ec4:	0020      	movs	r0, r4
 8001ec6:	f000 fea9 	bl	8002c1c <__clzsi2>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	0003      	movs	r3, r0
 8001ece:	3a0b      	subs	r2, #11
 8001ed0:	201d      	movs	r0, #29
 8001ed2:	1a82      	subs	r2, r0, r2
 8001ed4:	0030      	movs	r0, r6
 8001ed6:	0019      	movs	r1, r3
 8001ed8:	40d0      	lsrs	r0, r2
 8001eda:	3908      	subs	r1, #8
 8001edc:	408c      	lsls	r4, r1
 8001ede:	0002      	movs	r2, r0
 8001ee0:	4322      	orrs	r2, r4
 8001ee2:	0034      	movs	r4, r6
 8001ee4:	408c      	lsls	r4, r1
 8001ee6:	4659      	mov	r1, fp
 8001ee8:	1acb      	subs	r3, r1, r3
 8001eea:	4986      	ldr	r1, [pc, #536]	@ (8002104 <__aeabi_dmul+0x5bc>)
 8001eec:	468b      	mov	fp, r1
 8001eee:	449b      	add	fp, r3
 8001ef0:	2d0a      	cmp	r5, #10
 8001ef2:	dd00      	ble.n	8001ef6 <__aeabi_dmul+0x3ae>
 8001ef4:	e6a4      	b.n	8001c40 <__aeabi_dmul+0xf8>
 8001ef6:	4649      	mov	r1, r9
 8001ef8:	9b00      	ldr	r3, [sp, #0]
 8001efa:	9401      	str	r4, [sp, #4]
 8001efc:	4059      	eors	r1, r3
 8001efe:	b2cb      	uxtb	r3, r1
 8001f00:	0014      	movs	r4, r2
 8001f02:	2000      	movs	r0, #0
 8001f04:	9303      	str	r3, [sp, #12]
 8001f06:	2d02      	cmp	r5, #2
 8001f08:	dd00      	ble.n	8001f0c <__aeabi_dmul+0x3c4>
 8001f0a:	e667      	b.n	8001bdc <__aeabi_dmul+0x94>
 8001f0c:	e6fb      	b.n	8001d06 <__aeabi_dmul+0x1be>
 8001f0e:	4653      	mov	r3, sl
 8001f10:	4303      	orrs	r3, r0
 8001f12:	4698      	mov	r8, r3
 8001f14:	d03c      	beq.n	8001f90 <__aeabi_dmul+0x448>
 8001f16:	4653      	mov	r3, sl
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d100      	bne.n	8001f1e <__aeabi_dmul+0x3d6>
 8001f1c:	e0a3      	b.n	8002066 <__aeabi_dmul+0x51e>
 8001f1e:	4650      	mov	r0, sl
 8001f20:	f000 fe7c 	bl	8002c1c <__clzsi2>
 8001f24:	230b      	movs	r3, #11
 8001f26:	425b      	negs	r3, r3
 8001f28:	469c      	mov	ip, r3
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	4484      	add	ip, r0
 8001f2e:	0011      	movs	r1, r2
 8001f30:	4650      	mov	r0, sl
 8001f32:	3908      	subs	r1, #8
 8001f34:	4088      	lsls	r0, r1
 8001f36:	231d      	movs	r3, #29
 8001f38:	4680      	mov	r8, r0
 8001f3a:	4660      	mov	r0, ip
 8001f3c:	1a1b      	subs	r3, r3, r0
 8001f3e:	0020      	movs	r0, r4
 8001f40:	40d8      	lsrs	r0, r3
 8001f42:	0003      	movs	r3, r0
 8001f44:	4640      	mov	r0, r8
 8001f46:	4303      	orrs	r3, r0
 8001f48:	469a      	mov	sl, r3
 8001f4a:	0023      	movs	r3, r4
 8001f4c:	408b      	lsls	r3, r1
 8001f4e:	4698      	mov	r8, r3
 8001f50:	4b6c      	ldr	r3, [pc, #432]	@ (8002104 <__aeabi_dmul+0x5bc>)
 8001f52:	2500      	movs	r5, #0
 8001f54:	1a9b      	subs	r3, r3, r2
 8001f56:	469b      	mov	fp, r3
 8001f58:	2300      	movs	r3, #0
 8001f5a:	9302      	str	r3, [sp, #8]
 8001f5c:	e61a      	b.n	8001b94 <__aeabi_dmul+0x4c>
 8001f5e:	2d0f      	cmp	r5, #15
 8001f60:	d000      	beq.n	8001f64 <__aeabi_dmul+0x41c>
 8001f62:	e0c9      	b.n	80020f8 <__aeabi_dmul+0x5b0>
 8001f64:	2380      	movs	r3, #128	@ 0x80
 8001f66:	4652      	mov	r2, sl
 8001f68:	031b      	lsls	r3, r3, #12
 8001f6a:	421a      	tst	r2, r3
 8001f6c:	d002      	beq.n	8001f74 <__aeabi_dmul+0x42c>
 8001f6e:	421c      	tst	r4, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_dmul+0x42c>
 8001f72:	e092      	b.n	800209a <__aeabi_dmul+0x552>
 8001f74:	2480      	movs	r4, #128	@ 0x80
 8001f76:	4653      	mov	r3, sl
 8001f78:	0324      	lsls	r4, r4, #12
 8001f7a:	431c      	orrs	r4, r3
 8001f7c:	0324      	lsls	r4, r4, #12
 8001f7e:	4642      	mov	r2, r8
 8001f80:	0b24      	lsrs	r4, r4, #12
 8001f82:	e63e      	b.n	8001c02 <__aeabi_dmul+0xba>
 8001f84:	469b      	mov	fp, r3
 8001f86:	2303      	movs	r3, #3
 8001f88:	4680      	mov	r8, r0
 8001f8a:	250c      	movs	r5, #12
 8001f8c:	9302      	str	r3, [sp, #8]
 8001f8e:	e601      	b.n	8001b94 <__aeabi_dmul+0x4c>
 8001f90:	2300      	movs	r3, #0
 8001f92:	469a      	mov	sl, r3
 8001f94:	469b      	mov	fp, r3
 8001f96:	3301      	adds	r3, #1
 8001f98:	2504      	movs	r5, #4
 8001f9a:	9302      	str	r3, [sp, #8]
 8001f9c:	e5fa      	b.n	8001b94 <__aeabi_dmul+0x4c>
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	430d      	orrs	r5, r1
 8001fa2:	2d0a      	cmp	r5, #10
 8001fa4:	dd00      	ble.n	8001fa8 <__aeabi_dmul+0x460>
 8001fa6:	e64b      	b.n	8001c40 <__aeabi_dmul+0xf8>
 8001fa8:	4649      	mov	r1, r9
 8001faa:	9800      	ldr	r0, [sp, #0]
 8001fac:	4041      	eors	r1, r0
 8001fae:	b2c9      	uxtb	r1, r1
 8001fb0:	9103      	str	r1, [sp, #12]
 8001fb2:	2d02      	cmp	r5, #2
 8001fb4:	dc00      	bgt.n	8001fb8 <__aeabi_dmul+0x470>
 8001fb6:	e096      	b.n	80020e6 <__aeabi_dmul+0x59e>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	2400      	movs	r4, #0
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	9301      	str	r3, [sp, #4]
 8001fc0:	e60c      	b.n	8001bdc <__aeabi_dmul+0x94>
 8001fc2:	4649      	mov	r1, r9
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	9a00      	ldr	r2, [sp, #0]
 8001fc8:	432b      	orrs	r3, r5
 8001fca:	4051      	eors	r1, r2
 8001fcc:	b2ca      	uxtb	r2, r1
 8001fce:	9203      	str	r2, [sp, #12]
 8001fd0:	2b0a      	cmp	r3, #10
 8001fd2:	dd00      	ble.n	8001fd6 <__aeabi_dmul+0x48e>
 8001fd4:	e634      	b.n	8001c40 <__aeabi_dmul+0xf8>
 8001fd6:	2d00      	cmp	r5, #0
 8001fd8:	d157      	bne.n	800208a <__aeabi_dmul+0x542>
 8001fda:	9b03      	ldr	r3, [sp, #12]
 8001fdc:	4699      	mov	r9, r3
 8001fde:	2400      	movs	r4, #0
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	4b49      	ldr	r3, [pc, #292]	@ (8002108 <__aeabi_dmul+0x5c0>)
 8001fe4:	e60e      	b.n	8001c04 <__aeabi_dmul+0xbc>
 8001fe6:	4658      	mov	r0, fp
 8001fe8:	2101      	movs	r1, #1
 8001fea:	1ac9      	subs	r1, r1, r3
 8001fec:	2938      	cmp	r1, #56	@ 0x38
 8001fee:	dd00      	ble.n	8001ff2 <__aeabi_dmul+0x4aa>
 8001ff0:	e62f      	b.n	8001c52 <__aeabi_dmul+0x10a>
 8001ff2:	291f      	cmp	r1, #31
 8001ff4:	dd56      	ble.n	80020a4 <__aeabi_dmul+0x55c>
 8001ff6:	221f      	movs	r2, #31
 8001ff8:	4654      	mov	r4, sl
 8001ffa:	4252      	negs	r2, r2
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	40dc      	lsrs	r4, r3
 8002000:	2920      	cmp	r1, #32
 8002002:	d007      	beq.n	8002014 <__aeabi_dmul+0x4cc>
 8002004:	4b41      	ldr	r3, [pc, #260]	@ (800210c <__aeabi_dmul+0x5c4>)
 8002006:	4642      	mov	r2, r8
 8002008:	469c      	mov	ip, r3
 800200a:	4653      	mov	r3, sl
 800200c:	4460      	add	r0, ip
 800200e:	4083      	lsls	r3, r0
 8002010:	431a      	orrs	r2, r3
 8002012:	4690      	mov	r8, r2
 8002014:	4642      	mov	r2, r8
 8002016:	2107      	movs	r1, #7
 8002018:	1e53      	subs	r3, r2, #1
 800201a:	419a      	sbcs	r2, r3
 800201c:	000b      	movs	r3, r1
 800201e:	4322      	orrs	r2, r4
 8002020:	4013      	ands	r3, r2
 8002022:	2400      	movs	r4, #0
 8002024:	4211      	tst	r1, r2
 8002026:	d009      	beq.n	800203c <__aeabi_dmul+0x4f4>
 8002028:	230f      	movs	r3, #15
 800202a:	4013      	ands	r3, r2
 800202c:	2b04      	cmp	r3, #4
 800202e:	d05d      	beq.n	80020ec <__aeabi_dmul+0x5a4>
 8002030:	1d11      	adds	r1, r2, #4
 8002032:	4291      	cmp	r1, r2
 8002034:	419b      	sbcs	r3, r3
 8002036:	000a      	movs	r2, r1
 8002038:	425b      	negs	r3, r3
 800203a:	075b      	lsls	r3, r3, #29
 800203c:	08d2      	lsrs	r2, r2, #3
 800203e:	431a      	orrs	r2, r3
 8002040:	2300      	movs	r3, #0
 8002042:	e5df      	b.n	8001c04 <__aeabi_dmul+0xbc>
 8002044:	9b03      	ldr	r3, [sp, #12]
 8002046:	4699      	mov	r9, r3
 8002048:	e5fa      	b.n	8001c40 <__aeabi_dmul+0xf8>
 800204a:	9801      	ldr	r0, [sp, #4]
 800204c:	f000 fde6 	bl	8002c1c <__clzsi2>
 8002050:	0002      	movs	r2, r0
 8002052:	0003      	movs	r3, r0
 8002054:	3215      	adds	r2, #21
 8002056:	3320      	adds	r3, #32
 8002058:	2a1c      	cmp	r2, #28
 800205a:	dc00      	bgt.n	800205e <__aeabi_dmul+0x516>
 800205c:	e738      	b.n	8001ed0 <__aeabi_dmul+0x388>
 800205e:	9a01      	ldr	r2, [sp, #4]
 8002060:	3808      	subs	r0, #8
 8002062:	4082      	lsls	r2, r0
 8002064:	e73f      	b.n	8001ee6 <__aeabi_dmul+0x39e>
 8002066:	f000 fdd9 	bl	8002c1c <__clzsi2>
 800206a:	2315      	movs	r3, #21
 800206c:	469c      	mov	ip, r3
 800206e:	4484      	add	ip, r0
 8002070:	0002      	movs	r2, r0
 8002072:	4663      	mov	r3, ip
 8002074:	3220      	adds	r2, #32
 8002076:	2b1c      	cmp	r3, #28
 8002078:	dc00      	bgt.n	800207c <__aeabi_dmul+0x534>
 800207a:	e758      	b.n	8001f2e <__aeabi_dmul+0x3e6>
 800207c:	2300      	movs	r3, #0
 800207e:	4698      	mov	r8, r3
 8002080:	0023      	movs	r3, r4
 8002082:	3808      	subs	r0, #8
 8002084:	4083      	lsls	r3, r0
 8002086:	469a      	mov	sl, r3
 8002088:	e762      	b.n	8001f50 <__aeabi_dmul+0x408>
 800208a:	001d      	movs	r5, r3
 800208c:	2300      	movs	r3, #0
 800208e:	2400      	movs	r4, #0
 8002090:	2002      	movs	r0, #2
 8002092:	9301      	str	r3, [sp, #4]
 8002094:	e5a2      	b.n	8001bdc <__aeabi_dmul+0x94>
 8002096:	9002      	str	r0, [sp, #8]
 8002098:	e632      	b.n	8001d00 <__aeabi_dmul+0x1b8>
 800209a:	431c      	orrs	r4, r3
 800209c:	9b00      	ldr	r3, [sp, #0]
 800209e:	9a01      	ldr	r2, [sp, #4]
 80020a0:	4699      	mov	r9, r3
 80020a2:	e5ae      	b.n	8001c02 <__aeabi_dmul+0xba>
 80020a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002110 <__aeabi_dmul+0x5c8>)
 80020a6:	4652      	mov	r2, sl
 80020a8:	18c3      	adds	r3, r0, r3
 80020aa:	4640      	mov	r0, r8
 80020ac:	409a      	lsls	r2, r3
 80020ae:	40c8      	lsrs	r0, r1
 80020b0:	4302      	orrs	r2, r0
 80020b2:	4640      	mov	r0, r8
 80020b4:	4098      	lsls	r0, r3
 80020b6:	0003      	movs	r3, r0
 80020b8:	1e58      	subs	r0, r3, #1
 80020ba:	4183      	sbcs	r3, r0
 80020bc:	4654      	mov	r4, sl
 80020be:	431a      	orrs	r2, r3
 80020c0:	40cc      	lsrs	r4, r1
 80020c2:	0753      	lsls	r3, r2, #29
 80020c4:	d009      	beq.n	80020da <__aeabi_dmul+0x592>
 80020c6:	230f      	movs	r3, #15
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d005      	beq.n	80020da <__aeabi_dmul+0x592>
 80020ce:	1d13      	adds	r3, r2, #4
 80020d0:	4293      	cmp	r3, r2
 80020d2:	4192      	sbcs	r2, r2
 80020d4:	4252      	negs	r2, r2
 80020d6:	18a4      	adds	r4, r4, r2
 80020d8:	001a      	movs	r2, r3
 80020da:	0223      	lsls	r3, r4, #8
 80020dc:	d508      	bpl.n	80020f0 <__aeabi_dmul+0x5a8>
 80020de:	2301      	movs	r3, #1
 80020e0:	2400      	movs	r4, #0
 80020e2:	2200      	movs	r2, #0
 80020e4:	e58e      	b.n	8001c04 <__aeabi_dmul+0xbc>
 80020e6:	4689      	mov	r9, r1
 80020e8:	2400      	movs	r4, #0
 80020ea:	e58b      	b.n	8001c04 <__aeabi_dmul+0xbc>
 80020ec:	2300      	movs	r3, #0
 80020ee:	e7a5      	b.n	800203c <__aeabi_dmul+0x4f4>
 80020f0:	0763      	lsls	r3, r4, #29
 80020f2:	0264      	lsls	r4, r4, #9
 80020f4:	0b24      	lsrs	r4, r4, #12
 80020f6:	e7a1      	b.n	800203c <__aeabi_dmul+0x4f4>
 80020f8:	9b00      	ldr	r3, [sp, #0]
 80020fa:	46a2      	mov	sl, r4
 80020fc:	4699      	mov	r9, r3
 80020fe:	9b01      	ldr	r3, [sp, #4]
 8002100:	4698      	mov	r8, r3
 8002102:	e737      	b.n	8001f74 <__aeabi_dmul+0x42c>
 8002104:	fffffc0d 	.word	0xfffffc0d
 8002108:	000007ff 	.word	0x000007ff
 800210c:	0000043e 	.word	0x0000043e
 8002110:	0000041e 	.word	0x0000041e

08002114 <__aeabi_dsub>:
 8002114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002116:	4657      	mov	r7, sl
 8002118:	464e      	mov	r6, r9
 800211a:	4645      	mov	r5, r8
 800211c:	46de      	mov	lr, fp
 800211e:	b5e0      	push	{r5, r6, r7, lr}
 8002120:	b083      	sub	sp, #12
 8002122:	9000      	str	r0, [sp, #0]
 8002124:	9101      	str	r1, [sp, #4]
 8002126:	030c      	lsls	r4, r1, #12
 8002128:	004d      	lsls	r5, r1, #1
 800212a:	0fce      	lsrs	r6, r1, #31
 800212c:	0a61      	lsrs	r1, r4, #9
 800212e:	9c00      	ldr	r4, [sp, #0]
 8002130:	005f      	lsls	r7, r3, #1
 8002132:	0f64      	lsrs	r4, r4, #29
 8002134:	430c      	orrs	r4, r1
 8002136:	9900      	ldr	r1, [sp, #0]
 8002138:	9200      	str	r2, [sp, #0]
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	00c8      	lsls	r0, r1, #3
 800213e:	0319      	lsls	r1, r3, #12
 8002140:	0d7b      	lsrs	r3, r7, #21
 8002142:	4699      	mov	r9, r3
 8002144:	9b01      	ldr	r3, [sp, #4]
 8002146:	4fcc      	ldr	r7, [pc, #816]	@ (8002478 <__aeabi_dsub+0x364>)
 8002148:	0fdb      	lsrs	r3, r3, #31
 800214a:	469c      	mov	ip, r3
 800214c:	0a4b      	lsrs	r3, r1, #9
 800214e:	9900      	ldr	r1, [sp, #0]
 8002150:	4680      	mov	r8, r0
 8002152:	0f49      	lsrs	r1, r1, #29
 8002154:	4319      	orrs	r1, r3
 8002156:	9b00      	ldr	r3, [sp, #0]
 8002158:	468b      	mov	fp, r1
 800215a:	00da      	lsls	r2, r3, #3
 800215c:	4692      	mov	sl, r2
 800215e:	0d6d      	lsrs	r5, r5, #21
 8002160:	45b9      	cmp	r9, r7
 8002162:	d100      	bne.n	8002166 <__aeabi_dsub+0x52>
 8002164:	e0bf      	b.n	80022e6 <__aeabi_dsub+0x1d2>
 8002166:	2301      	movs	r3, #1
 8002168:	4661      	mov	r1, ip
 800216a:	4059      	eors	r1, r3
 800216c:	464b      	mov	r3, r9
 800216e:	468c      	mov	ip, r1
 8002170:	1aeb      	subs	r3, r5, r3
 8002172:	428e      	cmp	r6, r1
 8002174:	d075      	beq.n	8002262 <__aeabi_dsub+0x14e>
 8002176:	2b00      	cmp	r3, #0
 8002178:	dc00      	bgt.n	800217c <__aeabi_dsub+0x68>
 800217a:	e2a3      	b.n	80026c4 <__aeabi_dsub+0x5b0>
 800217c:	4649      	mov	r1, r9
 800217e:	2900      	cmp	r1, #0
 8002180:	d100      	bne.n	8002184 <__aeabi_dsub+0x70>
 8002182:	e0ce      	b.n	8002322 <__aeabi_dsub+0x20e>
 8002184:	42bd      	cmp	r5, r7
 8002186:	d100      	bne.n	800218a <__aeabi_dsub+0x76>
 8002188:	e200      	b.n	800258c <__aeabi_dsub+0x478>
 800218a:	2701      	movs	r7, #1
 800218c:	2b38      	cmp	r3, #56	@ 0x38
 800218e:	dc19      	bgt.n	80021c4 <__aeabi_dsub+0xb0>
 8002190:	2780      	movs	r7, #128	@ 0x80
 8002192:	4659      	mov	r1, fp
 8002194:	043f      	lsls	r7, r7, #16
 8002196:	4339      	orrs	r1, r7
 8002198:	468b      	mov	fp, r1
 800219a:	2b1f      	cmp	r3, #31
 800219c:	dd00      	ble.n	80021a0 <__aeabi_dsub+0x8c>
 800219e:	e1fa      	b.n	8002596 <__aeabi_dsub+0x482>
 80021a0:	2720      	movs	r7, #32
 80021a2:	1af9      	subs	r1, r7, r3
 80021a4:	468c      	mov	ip, r1
 80021a6:	4659      	mov	r1, fp
 80021a8:	4667      	mov	r7, ip
 80021aa:	40b9      	lsls	r1, r7
 80021ac:	000f      	movs	r7, r1
 80021ae:	0011      	movs	r1, r2
 80021b0:	40d9      	lsrs	r1, r3
 80021b2:	430f      	orrs	r7, r1
 80021b4:	4661      	mov	r1, ip
 80021b6:	408a      	lsls	r2, r1
 80021b8:	1e51      	subs	r1, r2, #1
 80021ba:	418a      	sbcs	r2, r1
 80021bc:	4659      	mov	r1, fp
 80021be:	40d9      	lsrs	r1, r3
 80021c0:	4317      	orrs	r7, r2
 80021c2:	1a64      	subs	r4, r4, r1
 80021c4:	1bc7      	subs	r7, r0, r7
 80021c6:	42b8      	cmp	r0, r7
 80021c8:	4180      	sbcs	r0, r0
 80021ca:	4240      	negs	r0, r0
 80021cc:	1a24      	subs	r4, r4, r0
 80021ce:	0223      	lsls	r3, r4, #8
 80021d0:	d400      	bmi.n	80021d4 <__aeabi_dsub+0xc0>
 80021d2:	e140      	b.n	8002456 <__aeabi_dsub+0x342>
 80021d4:	0264      	lsls	r4, r4, #9
 80021d6:	0a64      	lsrs	r4, r4, #9
 80021d8:	2c00      	cmp	r4, #0
 80021da:	d100      	bne.n	80021de <__aeabi_dsub+0xca>
 80021dc:	e154      	b.n	8002488 <__aeabi_dsub+0x374>
 80021de:	0020      	movs	r0, r4
 80021e0:	f000 fd1c 	bl	8002c1c <__clzsi2>
 80021e4:	0003      	movs	r3, r0
 80021e6:	3b08      	subs	r3, #8
 80021e8:	2120      	movs	r1, #32
 80021ea:	0038      	movs	r0, r7
 80021ec:	1aca      	subs	r2, r1, r3
 80021ee:	40d0      	lsrs	r0, r2
 80021f0:	409c      	lsls	r4, r3
 80021f2:	0002      	movs	r2, r0
 80021f4:	409f      	lsls	r7, r3
 80021f6:	4322      	orrs	r2, r4
 80021f8:	429d      	cmp	r5, r3
 80021fa:	dd00      	ble.n	80021fe <__aeabi_dsub+0xea>
 80021fc:	e1a6      	b.n	800254c <__aeabi_dsub+0x438>
 80021fe:	1b58      	subs	r0, r3, r5
 8002200:	3001      	adds	r0, #1
 8002202:	1a09      	subs	r1, r1, r0
 8002204:	003c      	movs	r4, r7
 8002206:	408f      	lsls	r7, r1
 8002208:	40c4      	lsrs	r4, r0
 800220a:	1e7b      	subs	r3, r7, #1
 800220c:	419f      	sbcs	r7, r3
 800220e:	0013      	movs	r3, r2
 8002210:	408b      	lsls	r3, r1
 8002212:	4327      	orrs	r7, r4
 8002214:	431f      	orrs	r7, r3
 8002216:	40c2      	lsrs	r2, r0
 8002218:	003b      	movs	r3, r7
 800221a:	0014      	movs	r4, r2
 800221c:	2500      	movs	r5, #0
 800221e:	4313      	orrs	r3, r2
 8002220:	d100      	bne.n	8002224 <__aeabi_dsub+0x110>
 8002222:	e1f7      	b.n	8002614 <__aeabi_dsub+0x500>
 8002224:	077b      	lsls	r3, r7, #29
 8002226:	d100      	bne.n	800222a <__aeabi_dsub+0x116>
 8002228:	e377      	b.n	800291a <__aeabi_dsub+0x806>
 800222a:	230f      	movs	r3, #15
 800222c:	0038      	movs	r0, r7
 800222e:	403b      	ands	r3, r7
 8002230:	2b04      	cmp	r3, #4
 8002232:	d004      	beq.n	800223e <__aeabi_dsub+0x12a>
 8002234:	1d38      	adds	r0, r7, #4
 8002236:	42b8      	cmp	r0, r7
 8002238:	41bf      	sbcs	r7, r7
 800223a:	427f      	negs	r7, r7
 800223c:	19e4      	adds	r4, r4, r7
 800223e:	0223      	lsls	r3, r4, #8
 8002240:	d400      	bmi.n	8002244 <__aeabi_dsub+0x130>
 8002242:	e368      	b.n	8002916 <__aeabi_dsub+0x802>
 8002244:	4b8c      	ldr	r3, [pc, #560]	@ (8002478 <__aeabi_dsub+0x364>)
 8002246:	3501      	adds	r5, #1
 8002248:	429d      	cmp	r5, r3
 800224a:	d100      	bne.n	800224e <__aeabi_dsub+0x13a>
 800224c:	e0f4      	b.n	8002438 <__aeabi_dsub+0x324>
 800224e:	4b8b      	ldr	r3, [pc, #556]	@ (800247c <__aeabi_dsub+0x368>)
 8002250:	056d      	lsls	r5, r5, #21
 8002252:	401c      	ands	r4, r3
 8002254:	0d6d      	lsrs	r5, r5, #21
 8002256:	0767      	lsls	r7, r4, #29
 8002258:	08c0      	lsrs	r0, r0, #3
 800225a:	0264      	lsls	r4, r4, #9
 800225c:	4307      	orrs	r7, r0
 800225e:	0b24      	lsrs	r4, r4, #12
 8002260:	e0ec      	b.n	800243c <__aeabi_dsub+0x328>
 8002262:	2b00      	cmp	r3, #0
 8002264:	dc00      	bgt.n	8002268 <__aeabi_dsub+0x154>
 8002266:	e329      	b.n	80028bc <__aeabi_dsub+0x7a8>
 8002268:	4649      	mov	r1, r9
 800226a:	2900      	cmp	r1, #0
 800226c:	d000      	beq.n	8002270 <__aeabi_dsub+0x15c>
 800226e:	e0d6      	b.n	800241e <__aeabi_dsub+0x30a>
 8002270:	4659      	mov	r1, fp
 8002272:	4311      	orrs	r1, r2
 8002274:	d100      	bne.n	8002278 <__aeabi_dsub+0x164>
 8002276:	e12e      	b.n	80024d6 <__aeabi_dsub+0x3c2>
 8002278:	1e59      	subs	r1, r3, #1
 800227a:	2b01      	cmp	r3, #1
 800227c:	d100      	bne.n	8002280 <__aeabi_dsub+0x16c>
 800227e:	e1e6      	b.n	800264e <__aeabi_dsub+0x53a>
 8002280:	42bb      	cmp	r3, r7
 8002282:	d100      	bne.n	8002286 <__aeabi_dsub+0x172>
 8002284:	e182      	b.n	800258c <__aeabi_dsub+0x478>
 8002286:	2701      	movs	r7, #1
 8002288:	000b      	movs	r3, r1
 800228a:	2938      	cmp	r1, #56	@ 0x38
 800228c:	dc14      	bgt.n	80022b8 <__aeabi_dsub+0x1a4>
 800228e:	2b1f      	cmp	r3, #31
 8002290:	dd00      	ble.n	8002294 <__aeabi_dsub+0x180>
 8002292:	e23c      	b.n	800270e <__aeabi_dsub+0x5fa>
 8002294:	2720      	movs	r7, #32
 8002296:	1af9      	subs	r1, r7, r3
 8002298:	468c      	mov	ip, r1
 800229a:	4659      	mov	r1, fp
 800229c:	4667      	mov	r7, ip
 800229e:	40b9      	lsls	r1, r7
 80022a0:	000f      	movs	r7, r1
 80022a2:	0011      	movs	r1, r2
 80022a4:	40d9      	lsrs	r1, r3
 80022a6:	430f      	orrs	r7, r1
 80022a8:	4661      	mov	r1, ip
 80022aa:	408a      	lsls	r2, r1
 80022ac:	1e51      	subs	r1, r2, #1
 80022ae:	418a      	sbcs	r2, r1
 80022b0:	4659      	mov	r1, fp
 80022b2:	40d9      	lsrs	r1, r3
 80022b4:	4317      	orrs	r7, r2
 80022b6:	1864      	adds	r4, r4, r1
 80022b8:	183f      	adds	r7, r7, r0
 80022ba:	4287      	cmp	r7, r0
 80022bc:	4180      	sbcs	r0, r0
 80022be:	4240      	negs	r0, r0
 80022c0:	1824      	adds	r4, r4, r0
 80022c2:	0223      	lsls	r3, r4, #8
 80022c4:	d400      	bmi.n	80022c8 <__aeabi_dsub+0x1b4>
 80022c6:	e0c6      	b.n	8002456 <__aeabi_dsub+0x342>
 80022c8:	4b6b      	ldr	r3, [pc, #428]	@ (8002478 <__aeabi_dsub+0x364>)
 80022ca:	3501      	adds	r5, #1
 80022cc:	429d      	cmp	r5, r3
 80022ce:	d100      	bne.n	80022d2 <__aeabi_dsub+0x1be>
 80022d0:	e0b2      	b.n	8002438 <__aeabi_dsub+0x324>
 80022d2:	2101      	movs	r1, #1
 80022d4:	4b69      	ldr	r3, [pc, #420]	@ (800247c <__aeabi_dsub+0x368>)
 80022d6:	087a      	lsrs	r2, r7, #1
 80022d8:	401c      	ands	r4, r3
 80022da:	4039      	ands	r1, r7
 80022dc:	430a      	orrs	r2, r1
 80022de:	07e7      	lsls	r7, r4, #31
 80022e0:	4317      	orrs	r7, r2
 80022e2:	0864      	lsrs	r4, r4, #1
 80022e4:	e79e      	b.n	8002224 <__aeabi_dsub+0x110>
 80022e6:	4b66      	ldr	r3, [pc, #408]	@ (8002480 <__aeabi_dsub+0x36c>)
 80022e8:	4311      	orrs	r1, r2
 80022ea:	468a      	mov	sl, r1
 80022ec:	18eb      	adds	r3, r5, r3
 80022ee:	2900      	cmp	r1, #0
 80022f0:	d028      	beq.n	8002344 <__aeabi_dsub+0x230>
 80022f2:	4566      	cmp	r6, ip
 80022f4:	d02c      	beq.n	8002350 <__aeabi_dsub+0x23c>
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d05b      	beq.n	80023b2 <__aeabi_dsub+0x29e>
 80022fa:	2d00      	cmp	r5, #0
 80022fc:	d100      	bne.n	8002300 <__aeabi_dsub+0x1ec>
 80022fe:	e12c      	b.n	800255a <__aeabi_dsub+0x446>
 8002300:	465b      	mov	r3, fp
 8002302:	4666      	mov	r6, ip
 8002304:	075f      	lsls	r7, r3, #29
 8002306:	08d2      	lsrs	r2, r2, #3
 8002308:	4317      	orrs	r7, r2
 800230a:	08dd      	lsrs	r5, r3, #3
 800230c:	003b      	movs	r3, r7
 800230e:	432b      	orrs	r3, r5
 8002310:	d100      	bne.n	8002314 <__aeabi_dsub+0x200>
 8002312:	e0e2      	b.n	80024da <__aeabi_dsub+0x3c6>
 8002314:	2480      	movs	r4, #128	@ 0x80
 8002316:	0324      	lsls	r4, r4, #12
 8002318:	432c      	orrs	r4, r5
 800231a:	0324      	lsls	r4, r4, #12
 800231c:	4d56      	ldr	r5, [pc, #344]	@ (8002478 <__aeabi_dsub+0x364>)
 800231e:	0b24      	lsrs	r4, r4, #12
 8002320:	e08c      	b.n	800243c <__aeabi_dsub+0x328>
 8002322:	4659      	mov	r1, fp
 8002324:	4311      	orrs	r1, r2
 8002326:	d100      	bne.n	800232a <__aeabi_dsub+0x216>
 8002328:	e0d5      	b.n	80024d6 <__aeabi_dsub+0x3c2>
 800232a:	1e59      	subs	r1, r3, #1
 800232c:	2b01      	cmp	r3, #1
 800232e:	d100      	bne.n	8002332 <__aeabi_dsub+0x21e>
 8002330:	e1b9      	b.n	80026a6 <__aeabi_dsub+0x592>
 8002332:	42bb      	cmp	r3, r7
 8002334:	d100      	bne.n	8002338 <__aeabi_dsub+0x224>
 8002336:	e1b1      	b.n	800269c <__aeabi_dsub+0x588>
 8002338:	2701      	movs	r7, #1
 800233a:	000b      	movs	r3, r1
 800233c:	2938      	cmp	r1, #56	@ 0x38
 800233e:	dd00      	ble.n	8002342 <__aeabi_dsub+0x22e>
 8002340:	e740      	b.n	80021c4 <__aeabi_dsub+0xb0>
 8002342:	e72a      	b.n	800219a <__aeabi_dsub+0x86>
 8002344:	4661      	mov	r1, ip
 8002346:	2701      	movs	r7, #1
 8002348:	4079      	eors	r1, r7
 800234a:	468c      	mov	ip, r1
 800234c:	4566      	cmp	r6, ip
 800234e:	d1d2      	bne.n	80022f6 <__aeabi_dsub+0x1e2>
 8002350:	2b00      	cmp	r3, #0
 8002352:	d100      	bne.n	8002356 <__aeabi_dsub+0x242>
 8002354:	e0c5      	b.n	80024e2 <__aeabi_dsub+0x3ce>
 8002356:	2d00      	cmp	r5, #0
 8002358:	d000      	beq.n	800235c <__aeabi_dsub+0x248>
 800235a:	e155      	b.n	8002608 <__aeabi_dsub+0x4f4>
 800235c:	464b      	mov	r3, r9
 800235e:	0025      	movs	r5, r4
 8002360:	4305      	orrs	r5, r0
 8002362:	d100      	bne.n	8002366 <__aeabi_dsub+0x252>
 8002364:	e212      	b.n	800278c <__aeabi_dsub+0x678>
 8002366:	1e59      	subs	r1, r3, #1
 8002368:	468c      	mov	ip, r1
 800236a:	2b01      	cmp	r3, #1
 800236c:	d100      	bne.n	8002370 <__aeabi_dsub+0x25c>
 800236e:	e249      	b.n	8002804 <__aeabi_dsub+0x6f0>
 8002370:	4d41      	ldr	r5, [pc, #260]	@ (8002478 <__aeabi_dsub+0x364>)
 8002372:	42ab      	cmp	r3, r5
 8002374:	d100      	bne.n	8002378 <__aeabi_dsub+0x264>
 8002376:	e28f      	b.n	8002898 <__aeabi_dsub+0x784>
 8002378:	2701      	movs	r7, #1
 800237a:	2938      	cmp	r1, #56	@ 0x38
 800237c:	dc11      	bgt.n	80023a2 <__aeabi_dsub+0x28e>
 800237e:	4663      	mov	r3, ip
 8002380:	2b1f      	cmp	r3, #31
 8002382:	dd00      	ble.n	8002386 <__aeabi_dsub+0x272>
 8002384:	e25b      	b.n	800283e <__aeabi_dsub+0x72a>
 8002386:	4661      	mov	r1, ip
 8002388:	2320      	movs	r3, #32
 800238a:	0027      	movs	r7, r4
 800238c:	1a5b      	subs	r3, r3, r1
 800238e:	0005      	movs	r5, r0
 8002390:	4098      	lsls	r0, r3
 8002392:	409f      	lsls	r7, r3
 8002394:	40cd      	lsrs	r5, r1
 8002396:	1e43      	subs	r3, r0, #1
 8002398:	4198      	sbcs	r0, r3
 800239a:	40cc      	lsrs	r4, r1
 800239c:	432f      	orrs	r7, r5
 800239e:	4307      	orrs	r7, r0
 80023a0:	44a3      	add	fp, r4
 80023a2:	18bf      	adds	r7, r7, r2
 80023a4:	4297      	cmp	r7, r2
 80023a6:	4192      	sbcs	r2, r2
 80023a8:	4252      	negs	r2, r2
 80023aa:	445a      	add	r2, fp
 80023ac:	0014      	movs	r4, r2
 80023ae:	464d      	mov	r5, r9
 80023b0:	e787      	b.n	80022c2 <__aeabi_dsub+0x1ae>
 80023b2:	4f34      	ldr	r7, [pc, #208]	@ (8002484 <__aeabi_dsub+0x370>)
 80023b4:	1c6b      	adds	r3, r5, #1
 80023b6:	423b      	tst	r3, r7
 80023b8:	d000      	beq.n	80023bc <__aeabi_dsub+0x2a8>
 80023ba:	e0b6      	b.n	800252a <__aeabi_dsub+0x416>
 80023bc:	4659      	mov	r1, fp
 80023be:	0023      	movs	r3, r4
 80023c0:	4311      	orrs	r1, r2
 80023c2:	000f      	movs	r7, r1
 80023c4:	4303      	orrs	r3, r0
 80023c6:	2d00      	cmp	r5, #0
 80023c8:	d000      	beq.n	80023cc <__aeabi_dsub+0x2b8>
 80023ca:	e126      	b.n	800261a <__aeabi_dsub+0x506>
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d100      	bne.n	80023d2 <__aeabi_dsub+0x2be>
 80023d0:	e1c0      	b.n	8002754 <__aeabi_dsub+0x640>
 80023d2:	2900      	cmp	r1, #0
 80023d4:	d100      	bne.n	80023d8 <__aeabi_dsub+0x2c4>
 80023d6:	e0a1      	b.n	800251c <__aeabi_dsub+0x408>
 80023d8:	1a83      	subs	r3, r0, r2
 80023da:	4698      	mov	r8, r3
 80023dc:	465b      	mov	r3, fp
 80023de:	4540      	cmp	r0, r8
 80023e0:	41ad      	sbcs	r5, r5
 80023e2:	1ae3      	subs	r3, r4, r3
 80023e4:	426d      	negs	r5, r5
 80023e6:	1b5b      	subs	r3, r3, r5
 80023e8:	2580      	movs	r5, #128	@ 0x80
 80023ea:	042d      	lsls	r5, r5, #16
 80023ec:	422b      	tst	r3, r5
 80023ee:	d100      	bne.n	80023f2 <__aeabi_dsub+0x2de>
 80023f0:	e14b      	b.n	800268a <__aeabi_dsub+0x576>
 80023f2:	465b      	mov	r3, fp
 80023f4:	1a10      	subs	r0, r2, r0
 80023f6:	4282      	cmp	r2, r0
 80023f8:	4192      	sbcs	r2, r2
 80023fa:	1b1c      	subs	r4, r3, r4
 80023fc:	0007      	movs	r7, r0
 80023fe:	2601      	movs	r6, #1
 8002400:	4663      	mov	r3, ip
 8002402:	4252      	negs	r2, r2
 8002404:	1aa4      	subs	r4, r4, r2
 8002406:	4327      	orrs	r7, r4
 8002408:	401e      	ands	r6, r3
 800240a:	2f00      	cmp	r7, #0
 800240c:	d100      	bne.n	8002410 <__aeabi_dsub+0x2fc>
 800240e:	e142      	b.n	8002696 <__aeabi_dsub+0x582>
 8002410:	422c      	tst	r4, r5
 8002412:	d100      	bne.n	8002416 <__aeabi_dsub+0x302>
 8002414:	e26d      	b.n	80028f2 <__aeabi_dsub+0x7de>
 8002416:	4b19      	ldr	r3, [pc, #100]	@ (800247c <__aeabi_dsub+0x368>)
 8002418:	2501      	movs	r5, #1
 800241a:	401c      	ands	r4, r3
 800241c:	e71b      	b.n	8002256 <__aeabi_dsub+0x142>
 800241e:	42bd      	cmp	r5, r7
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x310>
 8002422:	e13b      	b.n	800269c <__aeabi_dsub+0x588>
 8002424:	2701      	movs	r7, #1
 8002426:	2b38      	cmp	r3, #56	@ 0x38
 8002428:	dd00      	ble.n	800242c <__aeabi_dsub+0x318>
 800242a:	e745      	b.n	80022b8 <__aeabi_dsub+0x1a4>
 800242c:	2780      	movs	r7, #128	@ 0x80
 800242e:	4659      	mov	r1, fp
 8002430:	043f      	lsls	r7, r7, #16
 8002432:	4339      	orrs	r1, r7
 8002434:	468b      	mov	fp, r1
 8002436:	e72a      	b.n	800228e <__aeabi_dsub+0x17a>
 8002438:	2400      	movs	r4, #0
 800243a:	2700      	movs	r7, #0
 800243c:	052d      	lsls	r5, r5, #20
 800243e:	4325      	orrs	r5, r4
 8002440:	07f6      	lsls	r6, r6, #31
 8002442:	4335      	orrs	r5, r6
 8002444:	0038      	movs	r0, r7
 8002446:	0029      	movs	r1, r5
 8002448:	b003      	add	sp, #12
 800244a:	bcf0      	pop	{r4, r5, r6, r7}
 800244c:	46bb      	mov	fp, r7
 800244e:	46b2      	mov	sl, r6
 8002450:	46a9      	mov	r9, r5
 8002452:	46a0      	mov	r8, r4
 8002454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002456:	077b      	lsls	r3, r7, #29
 8002458:	d004      	beq.n	8002464 <__aeabi_dsub+0x350>
 800245a:	230f      	movs	r3, #15
 800245c:	403b      	ands	r3, r7
 800245e:	2b04      	cmp	r3, #4
 8002460:	d000      	beq.n	8002464 <__aeabi_dsub+0x350>
 8002462:	e6e7      	b.n	8002234 <__aeabi_dsub+0x120>
 8002464:	002b      	movs	r3, r5
 8002466:	08f8      	lsrs	r0, r7, #3
 8002468:	4a03      	ldr	r2, [pc, #12]	@ (8002478 <__aeabi_dsub+0x364>)
 800246a:	0767      	lsls	r7, r4, #29
 800246c:	4307      	orrs	r7, r0
 800246e:	08e5      	lsrs	r5, r4, #3
 8002470:	4293      	cmp	r3, r2
 8002472:	d100      	bne.n	8002476 <__aeabi_dsub+0x362>
 8002474:	e74a      	b.n	800230c <__aeabi_dsub+0x1f8>
 8002476:	e0a5      	b.n	80025c4 <__aeabi_dsub+0x4b0>
 8002478:	000007ff 	.word	0x000007ff
 800247c:	ff7fffff 	.word	0xff7fffff
 8002480:	fffff801 	.word	0xfffff801
 8002484:	000007fe 	.word	0x000007fe
 8002488:	0038      	movs	r0, r7
 800248a:	f000 fbc7 	bl	8002c1c <__clzsi2>
 800248e:	0003      	movs	r3, r0
 8002490:	3318      	adds	r3, #24
 8002492:	2b1f      	cmp	r3, #31
 8002494:	dc00      	bgt.n	8002498 <__aeabi_dsub+0x384>
 8002496:	e6a7      	b.n	80021e8 <__aeabi_dsub+0xd4>
 8002498:	003a      	movs	r2, r7
 800249a:	3808      	subs	r0, #8
 800249c:	4082      	lsls	r2, r0
 800249e:	429d      	cmp	r5, r3
 80024a0:	dd00      	ble.n	80024a4 <__aeabi_dsub+0x390>
 80024a2:	e08a      	b.n	80025ba <__aeabi_dsub+0x4a6>
 80024a4:	1b5b      	subs	r3, r3, r5
 80024a6:	1c58      	adds	r0, r3, #1
 80024a8:	281f      	cmp	r0, #31
 80024aa:	dc00      	bgt.n	80024ae <__aeabi_dsub+0x39a>
 80024ac:	e1d8      	b.n	8002860 <__aeabi_dsub+0x74c>
 80024ae:	0017      	movs	r7, r2
 80024b0:	3b1f      	subs	r3, #31
 80024b2:	40df      	lsrs	r7, r3
 80024b4:	2820      	cmp	r0, #32
 80024b6:	d005      	beq.n	80024c4 <__aeabi_dsub+0x3b0>
 80024b8:	2340      	movs	r3, #64	@ 0x40
 80024ba:	1a1b      	subs	r3, r3, r0
 80024bc:	409a      	lsls	r2, r3
 80024be:	1e53      	subs	r3, r2, #1
 80024c0:	419a      	sbcs	r2, r3
 80024c2:	4317      	orrs	r7, r2
 80024c4:	2500      	movs	r5, #0
 80024c6:	2f00      	cmp	r7, #0
 80024c8:	d100      	bne.n	80024cc <__aeabi_dsub+0x3b8>
 80024ca:	e0e5      	b.n	8002698 <__aeabi_dsub+0x584>
 80024cc:	077b      	lsls	r3, r7, #29
 80024ce:	d000      	beq.n	80024d2 <__aeabi_dsub+0x3be>
 80024d0:	e6ab      	b.n	800222a <__aeabi_dsub+0x116>
 80024d2:	002c      	movs	r4, r5
 80024d4:	e7c6      	b.n	8002464 <__aeabi_dsub+0x350>
 80024d6:	08c0      	lsrs	r0, r0, #3
 80024d8:	e7c6      	b.n	8002468 <__aeabi_dsub+0x354>
 80024da:	2700      	movs	r7, #0
 80024dc:	2400      	movs	r4, #0
 80024de:	4dd1      	ldr	r5, [pc, #836]	@ (8002824 <__aeabi_dsub+0x710>)
 80024e0:	e7ac      	b.n	800243c <__aeabi_dsub+0x328>
 80024e2:	4fd1      	ldr	r7, [pc, #836]	@ (8002828 <__aeabi_dsub+0x714>)
 80024e4:	1c6b      	adds	r3, r5, #1
 80024e6:	423b      	tst	r3, r7
 80024e8:	d171      	bne.n	80025ce <__aeabi_dsub+0x4ba>
 80024ea:	0023      	movs	r3, r4
 80024ec:	4303      	orrs	r3, r0
 80024ee:	2d00      	cmp	r5, #0
 80024f0:	d000      	beq.n	80024f4 <__aeabi_dsub+0x3e0>
 80024f2:	e14e      	b.n	8002792 <__aeabi_dsub+0x67e>
 80024f4:	4657      	mov	r7, sl
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d100      	bne.n	80024fc <__aeabi_dsub+0x3e8>
 80024fa:	e1b5      	b.n	8002868 <__aeabi_dsub+0x754>
 80024fc:	2f00      	cmp	r7, #0
 80024fe:	d00d      	beq.n	800251c <__aeabi_dsub+0x408>
 8002500:	1883      	adds	r3, r0, r2
 8002502:	4283      	cmp	r3, r0
 8002504:	4180      	sbcs	r0, r0
 8002506:	445c      	add	r4, fp
 8002508:	4240      	negs	r0, r0
 800250a:	1824      	adds	r4, r4, r0
 800250c:	0222      	lsls	r2, r4, #8
 800250e:	d500      	bpl.n	8002512 <__aeabi_dsub+0x3fe>
 8002510:	e1c8      	b.n	80028a4 <__aeabi_dsub+0x790>
 8002512:	001f      	movs	r7, r3
 8002514:	4698      	mov	r8, r3
 8002516:	4327      	orrs	r7, r4
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x408>
 800251a:	e0bc      	b.n	8002696 <__aeabi_dsub+0x582>
 800251c:	4643      	mov	r3, r8
 800251e:	0767      	lsls	r7, r4, #29
 8002520:	08db      	lsrs	r3, r3, #3
 8002522:	431f      	orrs	r7, r3
 8002524:	08e5      	lsrs	r5, r4, #3
 8002526:	2300      	movs	r3, #0
 8002528:	e04c      	b.n	80025c4 <__aeabi_dsub+0x4b0>
 800252a:	1a83      	subs	r3, r0, r2
 800252c:	4698      	mov	r8, r3
 800252e:	465b      	mov	r3, fp
 8002530:	4540      	cmp	r0, r8
 8002532:	41bf      	sbcs	r7, r7
 8002534:	1ae3      	subs	r3, r4, r3
 8002536:	427f      	negs	r7, r7
 8002538:	1bdb      	subs	r3, r3, r7
 800253a:	021f      	lsls	r7, r3, #8
 800253c:	d47c      	bmi.n	8002638 <__aeabi_dsub+0x524>
 800253e:	4647      	mov	r7, r8
 8002540:	431f      	orrs	r7, r3
 8002542:	d100      	bne.n	8002546 <__aeabi_dsub+0x432>
 8002544:	e0a6      	b.n	8002694 <__aeabi_dsub+0x580>
 8002546:	001c      	movs	r4, r3
 8002548:	4647      	mov	r7, r8
 800254a:	e645      	b.n	80021d8 <__aeabi_dsub+0xc4>
 800254c:	4cb7      	ldr	r4, [pc, #732]	@ (800282c <__aeabi_dsub+0x718>)
 800254e:	1aed      	subs	r5, r5, r3
 8002550:	4014      	ands	r4, r2
 8002552:	077b      	lsls	r3, r7, #29
 8002554:	d000      	beq.n	8002558 <__aeabi_dsub+0x444>
 8002556:	e780      	b.n	800245a <__aeabi_dsub+0x346>
 8002558:	e784      	b.n	8002464 <__aeabi_dsub+0x350>
 800255a:	464b      	mov	r3, r9
 800255c:	0025      	movs	r5, r4
 800255e:	4305      	orrs	r5, r0
 8002560:	d066      	beq.n	8002630 <__aeabi_dsub+0x51c>
 8002562:	1e5f      	subs	r7, r3, #1
 8002564:	2b01      	cmp	r3, #1
 8002566:	d100      	bne.n	800256a <__aeabi_dsub+0x456>
 8002568:	e0fc      	b.n	8002764 <__aeabi_dsub+0x650>
 800256a:	4dae      	ldr	r5, [pc, #696]	@ (8002824 <__aeabi_dsub+0x710>)
 800256c:	42ab      	cmp	r3, r5
 800256e:	d100      	bne.n	8002572 <__aeabi_dsub+0x45e>
 8002570:	e15e      	b.n	8002830 <__aeabi_dsub+0x71c>
 8002572:	4666      	mov	r6, ip
 8002574:	2f38      	cmp	r7, #56	@ 0x38
 8002576:	dc00      	bgt.n	800257a <__aeabi_dsub+0x466>
 8002578:	e0b4      	b.n	80026e4 <__aeabi_dsub+0x5d0>
 800257a:	2001      	movs	r0, #1
 800257c:	1a17      	subs	r7, r2, r0
 800257e:	42ba      	cmp	r2, r7
 8002580:	4192      	sbcs	r2, r2
 8002582:	465b      	mov	r3, fp
 8002584:	4252      	negs	r2, r2
 8002586:	464d      	mov	r5, r9
 8002588:	1a9c      	subs	r4, r3, r2
 800258a:	e620      	b.n	80021ce <__aeabi_dsub+0xba>
 800258c:	0767      	lsls	r7, r4, #29
 800258e:	08c0      	lsrs	r0, r0, #3
 8002590:	4307      	orrs	r7, r0
 8002592:	08e5      	lsrs	r5, r4, #3
 8002594:	e6ba      	b.n	800230c <__aeabi_dsub+0x1f8>
 8002596:	001f      	movs	r7, r3
 8002598:	4659      	mov	r1, fp
 800259a:	3f20      	subs	r7, #32
 800259c:	40f9      	lsrs	r1, r7
 800259e:	000f      	movs	r7, r1
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	d005      	beq.n	80025b0 <__aeabi_dsub+0x49c>
 80025a4:	2140      	movs	r1, #64	@ 0x40
 80025a6:	1acb      	subs	r3, r1, r3
 80025a8:	4659      	mov	r1, fp
 80025aa:	4099      	lsls	r1, r3
 80025ac:	430a      	orrs	r2, r1
 80025ae:	4692      	mov	sl, r2
 80025b0:	4653      	mov	r3, sl
 80025b2:	1e5a      	subs	r2, r3, #1
 80025b4:	4193      	sbcs	r3, r2
 80025b6:	431f      	orrs	r7, r3
 80025b8:	e604      	b.n	80021c4 <__aeabi_dsub+0xb0>
 80025ba:	1aeb      	subs	r3, r5, r3
 80025bc:	4d9b      	ldr	r5, [pc, #620]	@ (800282c <__aeabi_dsub+0x718>)
 80025be:	4015      	ands	r5, r2
 80025c0:	076f      	lsls	r7, r5, #29
 80025c2:	08ed      	lsrs	r5, r5, #3
 80025c4:	032c      	lsls	r4, r5, #12
 80025c6:	055d      	lsls	r5, r3, #21
 80025c8:	0b24      	lsrs	r4, r4, #12
 80025ca:	0d6d      	lsrs	r5, r5, #21
 80025cc:	e736      	b.n	800243c <__aeabi_dsub+0x328>
 80025ce:	4d95      	ldr	r5, [pc, #596]	@ (8002824 <__aeabi_dsub+0x710>)
 80025d0:	42ab      	cmp	r3, r5
 80025d2:	d100      	bne.n	80025d6 <__aeabi_dsub+0x4c2>
 80025d4:	e0d6      	b.n	8002784 <__aeabi_dsub+0x670>
 80025d6:	1882      	adds	r2, r0, r2
 80025d8:	0021      	movs	r1, r4
 80025da:	4282      	cmp	r2, r0
 80025dc:	4180      	sbcs	r0, r0
 80025de:	4459      	add	r1, fp
 80025e0:	4240      	negs	r0, r0
 80025e2:	1808      	adds	r0, r1, r0
 80025e4:	07c7      	lsls	r7, r0, #31
 80025e6:	0852      	lsrs	r2, r2, #1
 80025e8:	4317      	orrs	r7, r2
 80025ea:	0844      	lsrs	r4, r0, #1
 80025ec:	0752      	lsls	r2, r2, #29
 80025ee:	d400      	bmi.n	80025f2 <__aeabi_dsub+0x4de>
 80025f0:	e185      	b.n	80028fe <__aeabi_dsub+0x7ea>
 80025f2:	220f      	movs	r2, #15
 80025f4:	001d      	movs	r5, r3
 80025f6:	403a      	ands	r2, r7
 80025f8:	2a04      	cmp	r2, #4
 80025fa:	d000      	beq.n	80025fe <__aeabi_dsub+0x4ea>
 80025fc:	e61a      	b.n	8002234 <__aeabi_dsub+0x120>
 80025fe:	08ff      	lsrs	r7, r7, #3
 8002600:	0764      	lsls	r4, r4, #29
 8002602:	4327      	orrs	r7, r4
 8002604:	0905      	lsrs	r5, r0, #4
 8002606:	e7dd      	b.n	80025c4 <__aeabi_dsub+0x4b0>
 8002608:	465b      	mov	r3, fp
 800260a:	08d2      	lsrs	r2, r2, #3
 800260c:	075f      	lsls	r7, r3, #29
 800260e:	4317      	orrs	r7, r2
 8002610:	08dd      	lsrs	r5, r3, #3
 8002612:	e67b      	b.n	800230c <__aeabi_dsub+0x1f8>
 8002614:	2700      	movs	r7, #0
 8002616:	2400      	movs	r4, #0
 8002618:	e710      	b.n	800243c <__aeabi_dsub+0x328>
 800261a:	2b00      	cmp	r3, #0
 800261c:	d000      	beq.n	8002620 <__aeabi_dsub+0x50c>
 800261e:	e0d6      	b.n	80027ce <__aeabi_dsub+0x6ba>
 8002620:	2900      	cmp	r1, #0
 8002622:	d000      	beq.n	8002626 <__aeabi_dsub+0x512>
 8002624:	e12f      	b.n	8002886 <__aeabi_dsub+0x772>
 8002626:	2480      	movs	r4, #128	@ 0x80
 8002628:	2600      	movs	r6, #0
 800262a:	4d7e      	ldr	r5, [pc, #504]	@ (8002824 <__aeabi_dsub+0x710>)
 800262c:	0324      	lsls	r4, r4, #12
 800262e:	e705      	b.n	800243c <__aeabi_dsub+0x328>
 8002630:	4666      	mov	r6, ip
 8002632:	465c      	mov	r4, fp
 8002634:	08d0      	lsrs	r0, r2, #3
 8002636:	e717      	b.n	8002468 <__aeabi_dsub+0x354>
 8002638:	465b      	mov	r3, fp
 800263a:	1a17      	subs	r7, r2, r0
 800263c:	42ba      	cmp	r2, r7
 800263e:	4192      	sbcs	r2, r2
 8002640:	1b1c      	subs	r4, r3, r4
 8002642:	2601      	movs	r6, #1
 8002644:	4663      	mov	r3, ip
 8002646:	4252      	negs	r2, r2
 8002648:	1aa4      	subs	r4, r4, r2
 800264a:	401e      	ands	r6, r3
 800264c:	e5c4      	b.n	80021d8 <__aeabi_dsub+0xc4>
 800264e:	1883      	adds	r3, r0, r2
 8002650:	4283      	cmp	r3, r0
 8002652:	4180      	sbcs	r0, r0
 8002654:	445c      	add	r4, fp
 8002656:	4240      	negs	r0, r0
 8002658:	1825      	adds	r5, r4, r0
 800265a:	022a      	lsls	r2, r5, #8
 800265c:	d400      	bmi.n	8002660 <__aeabi_dsub+0x54c>
 800265e:	e0da      	b.n	8002816 <__aeabi_dsub+0x702>
 8002660:	4a72      	ldr	r2, [pc, #456]	@ (800282c <__aeabi_dsub+0x718>)
 8002662:	085b      	lsrs	r3, r3, #1
 8002664:	4015      	ands	r5, r2
 8002666:	07ea      	lsls	r2, r5, #31
 8002668:	431a      	orrs	r2, r3
 800266a:	0869      	lsrs	r1, r5, #1
 800266c:	075b      	lsls	r3, r3, #29
 800266e:	d400      	bmi.n	8002672 <__aeabi_dsub+0x55e>
 8002670:	e14a      	b.n	8002908 <__aeabi_dsub+0x7f4>
 8002672:	230f      	movs	r3, #15
 8002674:	4013      	ands	r3, r2
 8002676:	2b04      	cmp	r3, #4
 8002678:	d100      	bne.n	800267c <__aeabi_dsub+0x568>
 800267a:	e0fc      	b.n	8002876 <__aeabi_dsub+0x762>
 800267c:	1d17      	adds	r7, r2, #4
 800267e:	4297      	cmp	r7, r2
 8002680:	41a4      	sbcs	r4, r4
 8002682:	4264      	negs	r4, r4
 8002684:	2502      	movs	r5, #2
 8002686:	1864      	adds	r4, r4, r1
 8002688:	e6ec      	b.n	8002464 <__aeabi_dsub+0x350>
 800268a:	4647      	mov	r7, r8
 800268c:	001c      	movs	r4, r3
 800268e:	431f      	orrs	r7, r3
 8002690:	d000      	beq.n	8002694 <__aeabi_dsub+0x580>
 8002692:	e743      	b.n	800251c <__aeabi_dsub+0x408>
 8002694:	2600      	movs	r6, #0
 8002696:	2500      	movs	r5, #0
 8002698:	2400      	movs	r4, #0
 800269a:	e6cf      	b.n	800243c <__aeabi_dsub+0x328>
 800269c:	08c0      	lsrs	r0, r0, #3
 800269e:	0767      	lsls	r7, r4, #29
 80026a0:	4307      	orrs	r7, r0
 80026a2:	08e5      	lsrs	r5, r4, #3
 80026a4:	e632      	b.n	800230c <__aeabi_dsub+0x1f8>
 80026a6:	1a87      	subs	r7, r0, r2
 80026a8:	465b      	mov	r3, fp
 80026aa:	42b8      	cmp	r0, r7
 80026ac:	4180      	sbcs	r0, r0
 80026ae:	1ae4      	subs	r4, r4, r3
 80026b0:	4240      	negs	r0, r0
 80026b2:	1a24      	subs	r4, r4, r0
 80026b4:	0223      	lsls	r3, r4, #8
 80026b6:	d428      	bmi.n	800270a <__aeabi_dsub+0x5f6>
 80026b8:	0763      	lsls	r3, r4, #29
 80026ba:	08ff      	lsrs	r7, r7, #3
 80026bc:	431f      	orrs	r7, r3
 80026be:	08e5      	lsrs	r5, r4, #3
 80026c0:	2301      	movs	r3, #1
 80026c2:	e77f      	b.n	80025c4 <__aeabi_dsub+0x4b0>
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d100      	bne.n	80026ca <__aeabi_dsub+0x5b6>
 80026c8:	e673      	b.n	80023b2 <__aeabi_dsub+0x29e>
 80026ca:	464b      	mov	r3, r9
 80026cc:	1b5f      	subs	r7, r3, r5
 80026ce:	003b      	movs	r3, r7
 80026d0:	2d00      	cmp	r5, #0
 80026d2:	d100      	bne.n	80026d6 <__aeabi_dsub+0x5c2>
 80026d4:	e742      	b.n	800255c <__aeabi_dsub+0x448>
 80026d6:	2f38      	cmp	r7, #56	@ 0x38
 80026d8:	dd00      	ble.n	80026dc <__aeabi_dsub+0x5c8>
 80026da:	e0ec      	b.n	80028b6 <__aeabi_dsub+0x7a2>
 80026dc:	2380      	movs	r3, #128	@ 0x80
 80026de:	000e      	movs	r6, r1
 80026e0:	041b      	lsls	r3, r3, #16
 80026e2:	431c      	orrs	r4, r3
 80026e4:	2f1f      	cmp	r7, #31
 80026e6:	dc25      	bgt.n	8002734 <__aeabi_dsub+0x620>
 80026e8:	2520      	movs	r5, #32
 80026ea:	0023      	movs	r3, r4
 80026ec:	1bed      	subs	r5, r5, r7
 80026ee:	0001      	movs	r1, r0
 80026f0:	40a8      	lsls	r0, r5
 80026f2:	40ab      	lsls	r3, r5
 80026f4:	40f9      	lsrs	r1, r7
 80026f6:	1e45      	subs	r5, r0, #1
 80026f8:	41a8      	sbcs	r0, r5
 80026fa:	430b      	orrs	r3, r1
 80026fc:	40fc      	lsrs	r4, r7
 80026fe:	4318      	orrs	r0, r3
 8002700:	465b      	mov	r3, fp
 8002702:	1b1b      	subs	r3, r3, r4
 8002704:	469b      	mov	fp, r3
 8002706:	e739      	b.n	800257c <__aeabi_dsub+0x468>
 8002708:	4666      	mov	r6, ip
 800270a:	2501      	movs	r5, #1
 800270c:	e562      	b.n	80021d4 <__aeabi_dsub+0xc0>
 800270e:	001f      	movs	r7, r3
 8002710:	4659      	mov	r1, fp
 8002712:	3f20      	subs	r7, #32
 8002714:	40f9      	lsrs	r1, r7
 8002716:	468c      	mov	ip, r1
 8002718:	2b20      	cmp	r3, #32
 800271a:	d005      	beq.n	8002728 <__aeabi_dsub+0x614>
 800271c:	2740      	movs	r7, #64	@ 0x40
 800271e:	4659      	mov	r1, fp
 8002720:	1afb      	subs	r3, r7, r3
 8002722:	4099      	lsls	r1, r3
 8002724:	430a      	orrs	r2, r1
 8002726:	4692      	mov	sl, r2
 8002728:	4657      	mov	r7, sl
 800272a:	1e7b      	subs	r3, r7, #1
 800272c:	419f      	sbcs	r7, r3
 800272e:	4663      	mov	r3, ip
 8002730:	431f      	orrs	r7, r3
 8002732:	e5c1      	b.n	80022b8 <__aeabi_dsub+0x1a4>
 8002734:	003b      	movs	r3, r7
 8002736:	0025      	movs	r5, r4
 8002738:	3b20      	subs	r3, #32
 800273a:	40dd      	lsrs	r5, r3
 800273c:	2f20      	cmp	r7, #32
 800273e:	d004      	beq.n	800274a <__aeabi_dsub+0x636>
 8002740:	2340      	movs	r3, #64	@ 0x40
 8002742:	1bdb      	subs	r3, r3, r7
 8002744:	409c      	lsls	r4, r3
 8002746:	4320      	orrs	r0, r4
 8002748:	4680      	mov	r8, r0
 800274a:	4640      	mov	r0, r8
 800274c:	1e43      	subs	r3, r0, #1
 800274e:	4198      	sbcs	r0, r3
 8002750:	4328      	orrs	r0, r5
 8002752:	e713      	b.n	800257c <__aeabi_dsub+0x468>
 8002754:	2900      	cmp	r1, #0
 8002756:	d09d      	beq.n	8002694 <__aeabi_dsub+0x580>
 8002758:	2601      	movs	r6, #1
 800275a:	4663      	mov	r3, ip
 800275c:	465c      	mov	r4, fp
 800275e:	4690      	mov	r8, r2
 8002760:	401e      	ands	r6, r3
 8002762:	e6db      	b.n	800251c <__aeabi_dsub+0x408>
 8002764:	1a17      	subs	r7, r2, r0
 8002766:	465b      	mov	r3, fp
 8002768:	42ba      	cmp	r2, r7
 800276a:	4192      	sbcs	r2, r2
 800276c:	1b1c      	subs	r4, r3, r4
 800276e:	4252      	negs	r2, r2
 8002770:	1aa4      	subs	r4, r4, r2
 8002772:	0223      	lsls	r3, r4, #8
 8002774:	d4c8      	bmi.n	8002708 <__aeabi_dsub+0x5f4>
 8002776:	0763      	lsls	r3, r4, #29
 8002778:	08ff      	lsrs	r7, r7, #3
 800277a:	431f      	orrs	r7, r3
 800277c:	4666      	mov	r6, ip
 800277e:	2301      	movs	r3, #1
 8002780:	08e5      	lsrs	r5, r4, #3
 8002782:	e71f      	b.n	80025c4 <__aeabi_dsub+0x4b0>
 8002784:	001d      	movs	r5, r3
 8002786:	2400      	movs	r4, #0
 8002788:	2700      	movs	r7, #0
 800278a:	e657      	b.n	800243c <__aeabi_dsub+0x328>
 800278c:	465c      	mov	r4, fp
 800278e:	08d0      	lsrs	r0, r2, #3
 8002790:	e66a      	b.n	8002468 <__aeabi_dsub+0x354>
 8002792:	2b00      	cmp	r3, #0
 8002794:	d100      	bne.n	8002798 <__aeabi_dsub+0x684>
 8002796:	e737      	b.n	8002608 <__aeabi_dsub+0x4f4>
 8002798:	4653      	mov	r3, sl
 800279a:	08c0      	lsrs	r0, r0, #3
 800279c:	0767      	lsls	r7, r4, #29
 800279e:	4307      	orrs	r7, r0
 80027a0:	08e5      	lsrs	r5, r4, #3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d100      	bne.n	80027a8 <__aeabi_dsub+0x694>
 80027a6:	e5b1      	b.n	800230c <__aeabi_dsub+0x1f8>
 80027a8:	2380      	movs	r3, #128	@ 0x80
 80027aa:	031b      	lsls	r3, r3, #12
 80027ac:	421d      	tst	r5, r3
 80027ae:	d008      	beq.n	80027c2 <__aeabi_dsub+0x6ae>
 80027b0:	4659      	mov	r1, fp
 80027b2:	08c8      	lsrs	r0, r1, #3
 80027b4:	4218      	tst	r0, r3
 80027b6:	d104      	bne.n	80027c2 <__aeabi_dsub+0x6ae>
 80027b8:	08d2      	lsrs	r2, r2, #3
 80027ba:	0749      	lsls	r1, r1, #29
 80027bc:	430a      	orrs	r2, r1
 80027be:	0017      	movs	r7, r2
 80027c0:	0005      	movs	r5, r0
 80027c2:	0f7b      	lsrs	r3, r7, #29
 80027c4:	00ff      	lsls	r7, r7, #3
 80027c6:	08ff      	lsrs	r7, r7, #3
 80027c8:	075b      	lsls	r3, r3, #29
 80027ca:	431f      	orrs	r7, r3
 80027cc:	e59e      	b.n	800230c <__aeabi_dsub+0x1f8>
 80027ce:	08c0      	lsrs	r0, r0, #3
 80027d0:	0763      	lsls	r3, r4, #29
 80027d2:	4318      	orrs	r0, r3
 80027d4:	08e5      	lsrs	r5, r4, #3
 80027d6:	2900      	cmp	r1, #0
 80027d8:	d053      	beq.n	8002882 <__aeabi_dsub+0x76e>
 80027da:	2380      	movs	r3, #128	@ 0x80
 80027dc:	031b      	lsls	r3, r3, #12
 80027de:	421d      	tst	r5, r3
 80027e0:	d00a      	beq.n	80027f8 <__aeabi_dsub+0x6e4>
 80027e2:	4659      	mov	r1, fp
 80027e4:	08cc      	lsrs	r4, r1, #3
 80027e6:	421c      	tst	r4, r3
 80027e8:	d106      	bne.n	80027f8 <__aeabi_dsub+0x6e4>
 80027ea:	2601      	movs	r6, #1
 80027ec:	4663      	mov	r3, ip
 80027ee:	0025      	movs	r5, r4
 80027f0:	08d0      	lsrs	r0, r2, #3
 80027f2:	0749      	lsls	r1, r1, #29
 80027f4:	4308      	orrs	r0, r1
 80027f6:	401e      	ands	r6, r3
 80027f8:	0f47      	lsrs	r7, r0, #29
 80027fa:	00c0      	lsls	r0, r0, #3
 80027fc:	08c0      	lsrs	r0, r0, #3
 80027fe:	077f      	lsls	r7, r7, #29
 8002800:	4307      	orrs	r7, r0
 8002802:	e583      	b.n	800230c <__aeabi_dsub+0x1f8>
 8002804:	1883      	adds	r3, r0, r2
 8002806:	4293      	cmp	r3, r2
 8002808:	4192      	sbcs	r2, r2
 800280a:	445c      	add	r4, fp
 800280c:	4252      	negs	r2, r2
 800280e:	18a5      	adds	r5, r4, r2
 8002810:	022a      	lsls	r2, r5, #8
 8002812:	d500      	bpl.n	8002816 <__aeabi_dsub+0x702>
 8002814:	e724      	b.n	8002660 <__aeabi_dsub+0x54c>
 8002816:	076f      	lsls	r7, r5, #29
 8002818:	08db      	lsrs	r3, r3, #3
 800281a:	431f      	orrs	r7, r3
 800281c:	08ed      	lsrs	r5, r5, #3
 800281e:	2301      	movs	r3, #1
 8002820:	e6d0      	b.n	80025c4 <__aeabi_dsub+0x4b0>
 8002822:	46c0      	nop			@ (mov r8, r8)
 8002824:	000007ff 	.word	0x000007ff
 8002828:	000007fe 	.word	0x000007fe
 800282c:	ff7fffff 	.word	0xff7fffff
 8002830:	465b      	mov	r3, fp
 8002832:	08d2      	lsrs	r2, r2, #3
 8002834:	075f      	lsls	r7, r3, #29
 8002836:	4666      	mov	r6, ip
 8002838:	4317      	orrs	r7, r2
 800283a:	08dd      	lsrs	r5, r3, #3
 800283c:	e566      	b.n	800230c <__aeabi_dsub+0x1f8>
 800283e:	0025      	movs	r5, r4
 8002840:	3b20      	subs	r3, #32
 8002842:	40dd      	lsrs	r5, r3
 8002844:	4663      	mov	r3, ip
 8002846:	2b20      	cmp	r3, #32
 8002848:	d005      	beq.n	8002856 <__aeabi_dsub+0x742>
 800284a:	2340      	movs	r3, #64	@ 0x40
 800284c:	4661      	mov	r1, ip
 800284e:	1a5b      	subs	r3, r3, r1
 8002850:	409c      	lsls	r4, r3
 8002852:	4320      	orrs	r0, r4
 8002854:	4680      	mov	r8, r0
 8002856:	4647      	mov	r7, r8
 8002858:	1e7b      	subs	r3, r7, #1
 800285a:	419f      	sbcs	r7, r3
 800285c:	432f      	orrs	r7, r5
 800285e:	e5a0      	b.n	80023a2 <__aeabi_dsub+0x28e>
 8002860:	2120      	movs	r1, #32
 8002862:	2700      	movs	r7, #0
 8002864:	1a09      	subs	r1, r1, r0
 8002866:	e4d2      	b.n	800220e <__aeabi_dsub+0xfa>
 8002868:	2f00      	cmp	r7, #0
 800286a:	d100      	bne.n	800286e <__aeabi_dsub+0x75a>
 800286c:	e713      	b.n	8002696 <__aeabi_dsub+0x582>
 800286e:	465c      	mov	r4, fp
 8002870:	0017      	movs	r7, r2
 8002872:	2500      	movs	r5, #0
 8002874:	e5f6      	b.n	8002464 <__aeabi_dsub+0x350>
 8002876:	08d7      	lsrs	r7, r2, #3
 8002878:	0749      	lsls	r1, r1, #29
 800287a:	2302      	movs	r3, #2
 800287c:	430f      	orrs	r7, r1
 800287e:	092d      	lsrs	r5, r5, #4
 8002880:	e6a0      	b.n	80025c4 <__aeabi_dsub+0x4b0>
 8002882:	0007      	movs	r7, r0
 8002884:	e542      	b.n	800230c <__aeabi_dsub+0x1f8>
 8002886:	465b      	mov	r3, fp
 8002888:	2601      	movs	r6, #1
 800288a:	075f      	lsls	r7, r3, #29
 800288c:	08dd      	lsrs	r5, r3, #3
 800288e:	4663      	mov	r3, ip
 8002890:	08d2      	lsrs	r2, r2, #3
 8002892:	4317      	orrs	r7, r2
 8002894:	401e      	ands	r6, r3
 8002896:	e539      	b.n	800230c <__aeabi_dsub+0x1f8>
 8002898:	465b      	mov	r3, fp
 800289a:	08d2      	lsrs	r2, r2, #3
 800289c:	075f      	lsls	r7, r3, #29
 800289e:	4317      	orrs	r7, r2
 80028a0:	08dd      	lsrs	r5, r3, #3
 80028a2:	e533      	b.n	800230c <__aeabi_dsub+0x1f8>
 80028a4:	4a1e      	ldr	r2, [pc, #120]	@ (8002920 <__aeabi_dsub+0x80c>)
 80028a6:	08db      	lsrs	r3, r3, #3
 80028a8:	4022      	ands	r2, r4
 80028aa:	0757      	lsls	r7, r2, #29
 80028ac:	0252      	lsls	r2, r2, #9
 80028ae:	2501      	movs	r5, #1
 80028b0:	431f      	orrs	r7, r3
 80028b2:	0b14      	lsrs	r4, r2, #12
 80028b4:	e5c2      	b.n	800243c <__aeabi_dsub+0x328>
 80028b6:	000e      	movs	r6, r1
 80028b8:	2001      	movs	r0, #1
 80028ba:	e65f      	b.n	800257c <__aeabi_dsub+0x468>
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00d      	beq.n	80028dc <__aeabi_dsub+0x7c8>
 80028c0:	464b      	mov	r3, r9
 80028c2:	1b5b      	subs	r3, r3, r5
 80028c4:	469c      	mov	ip, r3
 80028c6:	2d00      	cmp	r5, #0
 80028c8:	d100      	bne.n	80028cc <__aeabi_dsub+0x7b8>
 80028ca:	e548      	b.n	800235e <__aeabi_dsub+0x24a>
 80028cc:	2701      	movs	r7, #1
 80028ce:	2b38      	cmp	r3, #56	@ 0x38
 80028d0:	dd00      	ble.n	80028d4 <__aeabi_dsub+0x7c0>
 80028d2:	e566      	b.n	80023a2 <__aeabi_dsub+0x28e>
 80028d4:	2380      	movs	r3, #128	@ 0x80
 80028d6:	041b      	lsls	r3, r3, #16
 80028d8:	431c      	orrs	r4, r3
 80028da:	e550      	b.n	800237e <__aeabi_dsub+0x26a>
 80028dc:	1c6b      	adds	r3, r5, #1
 80028de:	4d11      	ldr	r5, [pc, #68]	@ (8002924 <__aeabi_dsub+0x810>)
 80028e0:	422b      	tst	r3, r5
 80028e2:	d000      	beq.n	80028e6 <__aeabi_dsub+0x7d2>
 80028e4:	e673      	b.n	80025ce <__aeabi_dsub+0x4ba>
 80028e6:	4659      	mov	r1, fp
 80028e8:	0023      	movs	r3, r4
 80028ea:	4311      	orrs	r1, r2
 80028ec:	468a      	mov	sl, r1
 80028ee:	4303      	orrs	r3, r0
 80028f0:	e600      	b.n	80024f4 <__aeabi_dsub+0x3e0>
 80028f2:	0767      	lsls	r7, r4, #29
 80028f4:	08c0      	lsrs	r0, r0, #3
 80028f6:	2300      	movs	r3, #0
 80028f8:	4307      	orrs	r7, r0
 80028fa:	08e5      	lsrs	r5, r4, #3
 80028fc:	e662      	b.n	80025c4 <__aeabi_dsub+0x4b0>
 80028fe:	0764      	lsls	r4, r4, #29
 8002900:	08ff      	lsrs	r7, r7, #3
 8002902:	4327      	orrs	r7, r4
 8002904:	0905      	lsrs	r5, r0, #4
 8002906:	e65d      	b.n	80025c4 <__aeabi_dsub+0x4b0>
 8002908:	08d2      	lsrs	r2, r2, #3
 800290a:	0749      	lsls	r1, r1, #29
 800290c:	4311      	orrs	r1, r2
 800290e:	000f      	movs	r7, r1
 8002910:	2302      	movs	r3, #2
 8002912:	092d      	lsrs	r5, r5, #4
 8002914:	e656      	b.n	80025c4 <__aeabi_dsub+0x4b0>
 8002916:	0007      	movs	r7, r0
 8002918:	e5a4      	b.n	8002464 <__aeabi_dsub+0x350>
 800291a:	0038      	movs	r0, r7
 800291c:	e48f      	b.n	800223e <__aeabi_dsub+0x12a>
 800291e:	46c0      	nop			@ (mov r8, r8)
 8002920:	ff7fffff 	.word	0xff7fffff
 8002924:	000007fe 	.word	0x000007fe

08002928 <__aeabi_dcmpun>:
 8002928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800292a:	46c6      	mov	lr, r8
 800292c:	031e      	lsls	r6, r3, #12
 800292e:	0b36      	lsrs	r6, r6, #12
 8002930:	46b0      	mov	r8, r6
 8002932:	4e0d      	ldr	r6, [pc, #52]	@ (8002968 <__aeabi_dcmpun+0x40>)
 8002934:	030c      	lsls	r4, r1, #12
 8002936:	004d      	lsls	r5, r1, #1
 8002938:	005f      	lsls	r7, r3, #1
 800293a:	b500      	push	{lr}
 800293c:	0b24      	lsrs	r4, r4, #12
 800293e:	0d6d      	lsrs	r5, r5, #21
 8002940:	0d7f      	lsrs	r7, r7, #21
 8002942:	42b5      	cmp	r5, r6
 8002944:	d00b      	beq.n	800295e <__aeabi_dcmpun+0x36>
 8002946:	4908      	ldr	r1, [pc, #32]	@ (8002968 <__aeabi_dcmpun+0x40>)
 8002948:	2000      	movs	r0, #0
 800294a:	428f      	cmp	r7, r1
 800294c:	d104      	bne.n	8002958 <__aeabi_dcmpun+0x30>
 800294e:	4646      	mov	r6, r8
 8002950:	4316      	orrs	r6, r2
 8002952:	0030      	movs	r0, r6
 8002954:	1e43      	subs	r3, r0, #1
 8002956:	4198      	sbcs	r0, r3
 8002958:	bc80      	pop	{r7}
 800295a:	46b8      	mov	r8, r7
 800295c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800295e:	4304      	orrs	r4, r0
 8002960:	2001      	movs	r0, #1
 8002962:	2c00      	cmp	r4, #0
 8002964:	d1f8      	bne.n	8002958 <__aeabi_dcmpun+0x30>
 8002966:	e7ee      	b.n	8002946 <__aeabi_dcmpun+0x1e>
 8002968:	000007ff 	.word	0x000007ff

0800296c <__aeabi_d2iz>:
 800296c:	000b      	movs	r3, r1
 800296e:	0002      	movs	r2, r0
 8002970:	b570      	push	{r4, r5, r6, lr}
 8002972:	4d16      	ldr	r5, [pc, #88]	@ (80029cc <__aeabi_d2iz+0x60>)
 8002974:	030c      	lsls	r4, r1, #12
 8002976:	b082      	sub	sp, #8
 8002978:	0049      	lsls	r1, r1, #1
 800297a:	2000      	movs	r0, #0
 800297c:	9200      	str	r2, [sp, #0]
 800297e:	9301      	str	r3, [sp, #4]
 8002980:	0b24      	lsrs	r4, r4, #12
 8002982:	0d49      	lsrs	r1, r1, #21
 8002984:	0fde      	lsrs	r6, r3, #31
 8002986:	42a9      	cmp	r1, r5
 8002988:	dd04      	ble.n	8002994 <__aeabi_d2iz+0x28>
 800298a:	4811      	ldr	r0, [pc, #68]	@ (80029d0 <__aeabi_d2iz+0x64>)
 800298c:	4281      	cmp	r1, r0
 800298e:	dd03      	ble.n	8002998 <__aeabi_d2iz+0x2c>
 8002990:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <__aeabi_d2iz+0x68>)
 8002992:	18f0      	adds	r0, r6, r3
 8002994:	b002      	add	sp, #8
 8002996:	bd70      	pop	{r4, r5, r6, pc}
 8002998:	2080      	movs	r0, #128	@ 0x80
 800299a:	0340      	lsls	r0, r0, #13
 800299c:	4320      	orrs	r0, r4
 800299e:	4c0e      	ldr	r4, [pc, #56]	@ (80029d8 <__aeabi_d2iz+0x6c>)
 80029a0:	1a64      	subs	r4, r4, r1
 80029a2:	2c1f      	cmp	r4, #31
 80029a4:	dd08      	ble.n	80029b8 <__aeabi_d2iz+0x4c>
 80029a6:	4b0d      	ldr	r3, [pc, #52]	@ (80029dc <__aeabi_d2iz+0x70>)
 80029a8:	1a5b      	subs	r3, r3, r1
 80029aa:	40d8      	lsrs	r0, r3
 80029ac:	0003      	movs	r3, r0
 80029ae:	4258      	negs	r0, r3
 80029b0:	2e00      	cmp	r6, #0
 80029b2:	d1ef      	bne.n	8002994 <__aeabi_d2iz+0x28>
 80029b4:	0018      	movs	r0, r3
 80029b6:	e7ed      	b.n	8002994 <__aeabi_d2iz+0x28>
 80029b8:	4b09      	ldr	r3, [pc, #36]	@ (80029e0 <__aeabi_d2iz+0x74>)
 80029ba:	9a00      	ldr	r2, [sp, #0]
 80029bc:	469c      	mov	ip, r3
 80029be:	0003      	movs	r3, r0
 80029c0:	4461      	add	r1, ip
 80029c2:	408b      	lsls	r3, r1
 80029c4:	40e2      	lsrs	r2, r4
 80029c6:	4313      	orrs	r3, r2
 80029c8:	e7f1      	b.n	80029ae <__aeabi_d2iz+0x42>
 80029ca:	46c0      	nop			@ (mov r8, r8)
 80029cc:	000003fe 	.word	0x000003fe
 80029d0:	0000041d 	.word	0x0000041d
 80029d4:	7fffffff 	.word	0x7fffffff
 80029d8:	00000433 	.word	0x00000433
 80029dc:	00000413 	.word	0x00000413
 80029e0:	fffffbed 	.word	0xfffffbed

080029e4 <__aeabi_i2d>:
 80029e4:	b570      	push	{r4, r5, r6, lr}
 80029e6:	2800      	cmp	r0, #0
 80029e8:	d016      	beq.n	8002a18 <__aeabi_i2d+0x34>
 80029ea:	17c3      	asrs	r3, r0, #31
 80029ec:	18c5      	adds	r5, r0, r3
 80029ee:	405d      	eors	r5, r3
 80029f0:	0fc4      	lsrs	r4, r0, #31
 80029f2:	0028      	movs	r0, r5
 80029f4:	f000 f912 	bl	8002c1c <__clzsi2>
 80029f8:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <__aeabi_i2d+0x58>)
 80029fa:	1a1b      	subs	r3, r3, r0
 80029fc:	055b      	lsls	r3, r3, #21
 80029fe:	0d5b      	lsrs	r3, r3, #21
 8002a00:	280a      	cmp	r0, #10
 8002a02:	dc14      	bgt.n	8002a2e <__aeabi_i2d+0x4a>
 8002a04:	0002      	movs	r2, r0
 8002a06:	002e      	movs	r6, r5
 8002a08:	3215      	adds	r2, #21
 8002a0a:	4096      	lsls	r6, r2
 8002a0c:	220b      	movs	r2, #11
 8002a0e:	1a12      	subs	r2, r2, r0
 8002a10:	40d5      	lsrs	r5, r2
 8002a12:	032d      	lsls	r5, r5, #12
 8002a14:	0b2d      	lsrs	r5, r5, #12
 8002a16:	e003      	b.n	8002a20 <__aeabi_i2d+0x3c>
 8002a18:	2400      	movs	r4, #0
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2500      	movs	r5, #0
 8002a1e:	2600      	movs	r6, #0
 8002a20:	051b      	lsls	r3, r3, #20
 8002a22:	432b      	orrs	r3, r5
 8002a24:	07e4      	lsls	r4, r4, #31
 8002a26:	4323      	orrs	r3, r4
 8002a28:	0030      	movs	r0, r6
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	bd70      	pop	{r4, r5, r6, pc}
 8002a2e:	380b      	subs	r0, #11
 8002a30:	4085      	lsls	r5, r0
 8002a32:	032d      	lsls	r5, r5, #12
 8002a34:	2600      	movs	r6, #0
 8002a36:	0b2d      	lsrs	r5, r5, #12
 8002a38:	e7f2      	b.n	8002a20 <__aeabi_i2d+0x3c>
 8002a3a:	46c0      	nop			@ (mov r8, r8)
 8002a3c:	0000041e 	.word	0x0000041e

08002a40 <__aeabi_ui2d>:
 8002a40:	b510      	push	{r4, lr}
 8002a42:	1e04      	subs	r4, r0, #0
 8002a44:	d010      	beq.n	8002a68 <__aeabi_ui2d+0x28>
 8002a46:	f000 f8e9 	bl	8002c1c <__clzsi2>
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a84 <__aeabi_ui2d+0x44>)
 8002a4c:	1a1b      	subs	r3, r3, r0
 8002a4e:	055b      	lsls	r3, r3, #21
 8002a50:	0d5b      	lsrs	r3, r3, #21
 8002a52:	280a      	cmp	r0, #10
 8002a54:	dc0f      	bgt.n	8002a76 <__aeabi_ui2d+0x36>
 8002a56:	220b      	movs	r2, #11
 8002a58:	0021      	movs	r1, r4
 8002a5a:	1a12      	subs	r2, r2, r0
 8002a5c:	40d1      	lsrs	r1, r2
 8002a5e:	3015      	adds	r0, #21
 8002a60:	030a      	lsls	r2, r1, #12
 8002a62:	4084      	lsls	r4, r0
 8002a64:	0b12      	lsrs	r2, r2, #12
 8002a66:	e001      	b.n	8002a6c <__aeabi_ui2d+0x2c>
 8002a68:	2300      	movs	r3, #0
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	051b      	lsls	r3, r3, #20
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	0020      	movs	r0, r4
 8002a72:	0019      	movs	r1, r3
 8002a74:	bd10      	pop	{r4, pc}
 8002a76:	0022      	movs	r2, r4
 8002a78:	380b      	subs	r0, #11
 8002a7a:	4082      	lsls	r2, r0
 8002a7c:	0312      	lsls	r2, r2, #12
 8002a7e:	2400      	movs	r4, #0
 8002a80:	0b12      	lsrs	r2, r2, #12
 8002a82:	e7f3      	b.n	8002a6c <__aeabi_ui2d+0x2c>
 8002a84:	0000041e 	.word	0x0000041e

08002a88 <__aeabi_f2d>:
 8002a88:	b570      	push	{r4, r5, r6, lr}
 8002a8a:	0242      	lsls	r2, r0, #9
 8002a8c:	0043      	lsls	r3, r0, #1
 8002a8e:	0fc4      	lsrs	r4, r0, #31
 8002a90:	20fe      	movs	r0, #254	@ 0xfe
 8002a92:	0e1b      	lsrs	r3, r3, #24
 8002a94:	1c59      	adds	r1, r3, #1
 8002a96:	0a55      	lsrs	r5, r2, #9
 8002a98:	4208      	tst	r0, r1
 8002a9a:	d00c      	beq.n	8002ab6 <__aeabi_f2d+0x2e>
 8002a9c:	21e0      	movs	r1, #224	@ 0xe0
 8002a9e:	0089      	lsls	r1, r1, #2
 8002aa0:	468c      	mov	ip, r1
 8002aa2:	076d      	lsls	r5, r5, #29
 8002aa4:	0b12      	lsrs	r2, r2, #12
 8002aa6:	4463      	add	r3, ip
 8002aa8:	051b      	lsls	r3, r3, #20
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	07e4      	lsls	r4, r4, #31
 8002aae:	4323      	orrs	r3, r4
 8002ab0:	0028      	movs	r0, r5
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	bd70      	pop	{r4, r5, r6, pc}
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d114      	bne.n	8002ae4 <__aeabi_f2d+0x5c>
 8002aba:	2d00      	cmp	r5, #0
 8002abc:	d01b      	beq.n	8002af6 <__aeabi_f2d+0x6e>
 8002abe:	0028      	movs	r0, r5
 8002ac0:	f000 f8ac 	bl	8002c1c <__clzsi2>
 8002ac4:	280a      	cmp	r0, #10
 8002ac6:	dc1c      	bgt.n	8002b02 <__aeabi_f2d+0x7a>
 8002ac8:	230b      	movs	r3, #11
 8002aca:	002a      	movs	r2, r5
 8002acc:	1a1b      	subs	r3, r3, r0
 8002ace:	40da      	lsrs	r2, r3
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	3315      	adds	r3, #21
 8002ad4:	409d      	lsls	r5, r3
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b10 <__aeabi_f2d+0x88>)
 8002ad8:	0312      	lsls	r2, r2, #12
 8002ada:	1a1b      	subs	r3, r3, r0
 8002adc:	055b      	lsls	r3, r3, #21
 8002ade:	0b12      	lsrs	r2, r2, #12
 8002ae0:	0d5b      	lsrs	r3, r3, #21
 8002ae2:	e7e1      	b.n	8002aa8 <__aeabi_f2d+0x20>
 8002ae4:	2d00      	cmp	r5, #0
 8002ae6:	d009      	beq.n	8002afc <__aeabi_f2d+0x74>
 8002ae8:	0b13      	lsrs	r3, r2, #12
 8002aea:	2280      	movs	r2, #128	@ 0x80
 8002aec:	0312      	lsls	r2, r2, #12
 8002aee:	431a      	orrs	r2, r3
 8002af0:	076d      	lsls	r5, r5, #29
 8002af2:	4b08      	ldr	r3, [pc, #32]	@ (8002b14 <__aeabi_f2d+0x8c>)
 8002af4:	e7d8      	b.n	8002aa8 <__aeabi_f2d+0x20>
 8002af6:	2300      	movs	r3, #0
 8002af8:	2200      	movs	r2, #0
 8002afa:	e7d5      	b.n	8002aa8 <__aeabi_f2d+0x20>
 8002afc:	2200      	movs	r2, #0
 8002afe:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <__aeabi_f2d+0x8c>)
 8002b00:	e7d2      	b.n	8002aa8 <__aeabi_f2d+0x20>
 8002b02:	0003      	movs	r3, r0
 8002b04:	002a      	movs	r2, r5
 8002b06:	3b0b      	subs	r3, #11
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	2500      	movs	r5, #0
 8002b0c:	e7e3      	b.n	8002ad6 <__aeabi_f2d+0x4e>
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	00000389 	.word	0x00000389
 8002b14:	000007ff 	.word	0x000007ff

08002b18 <__aeabi_d2f>:
 8002b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b1a:	004b      	lsls	r3, r1, #1
 8002b1c:	030f      	lsls	r7, r1, #12
 8002b1e:	0d5b      	lsrs	r3, r3, #21
 8002b20:	4c3a      	ldr	r4, [pc, #232]	@ (8002c0c <__aeabi_d2f+0xf4>)
 8002b22:	0f45      	lsrs	r5, r0, #29
 8002b24:	b083      	sub	sp, #12
 8002b26:	0a7f      	lsrs	r7, r7, #9
 8002b28:	1c5e      	adds	r6, r3, #1
 8002b2a:	432f      	orrs	r7, r5
 8002b2c:	9000      	str	r0, [sp, #0]
 8002b2e:	9101      	str	r1, [sp, #4]
 8002b30:	0fca      	lsrs	r2, r1, #31
 8002b32:	00c5      	lsls	r5, r0, #3
 8002b34:	4226      	tst	r6, r4
 8002b36:	d00b      	beq.n	8002b50 <__aeabi_d2f+0x38>
 8002b38:	4935      	ldr	r1, [pc, #212]	@ (8002c10 <__aeabi_d2f+0xf8>)
 8002b3a:	185c      	adds	r4, r3, r1
 8002b3c:	2cfe      	cmp	r4, #254	@ 0xfe
 8002b3e:	dd13      	ble.n	8002b68 <__aeabi_d2f+0x50>
 8002b40:	20ff      	movs	r0, #255	@ 0xff
 8002b42:	2300      	movs	r3, #0
 8002b44:	05c0      	lsls	r0, r0, #23
 8002b46:	4318      	orrs	r0, r3
 8002b48:	07d2      	lsls	r2, r2, #31
 8002b4a:	4310      	orrs	r0, r2
 8002b4c:	b003      	add	sp, #12
 8002b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b50:	433d      	orrs	r5, r7
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <__aeabi_d2f+0x42>
 8002b56:	2000      	movs	r0, #0
 8002b58:	e7f4      	b.n	8002b44 <__aeabi_d2f+0x2c>
 8002b5a:	2d00      	cmp	r5, #0
 8002b5c:	d0f0      	beq.n	8002b40 <__aeabi_d2f+0x28>
 8002b5e:	2380      	movs	r3, #128	@ 0x80
 8002b60:	03db      	lsls	r3, r3, #15
 8002b62:	20ff      	movs	r0, #255	@ 0xff
 8002b64:	433b      	orrs	r3, r7
 8002b66:	e7ed      	b.n	8002b44 <__aeabi_d2f+0x2c>
 8002b68:	2c00      	cmp	r4, #0
 8002b6a:	dd0c      	ble.n	8002b86 <__aeabi_d2f+0x6e>
 8002b6c:	9b00      	ldr	r3, [sp, #0]
 8002b6e:	00ff      	lsls	r7, r7, #3
 8002b70:	019b      	lsls	r3, r3, #6
 8002b72:	1e58      	subs	r0, r3, #1
 8002b74:	4183      	sbcs	r3, r0
 8002b76:	0f69      	lsrs	r1, r5, #29
 8002b78:	433b      	orrs	r3, r7
 8002b7a:	430b      	orrs	r3, r1
 8002b7c:	0759      	lsls	r1, r3, #29
 8002b7e:	d127      	bne.n	8002bd0 <__aeabi_d2f+0xb8>
 8002b80:	08db      	lsrs	r3, r3, #3
 8002b82:	b2e0      	uxtb	r0, r4
 8002b84:	e7de      	b.n	8002b44 <__aeabi_d2f+0x2c>
 8002b86:	0021      	movs	r1, r4
 8002b88:	3117      	adds	r1, #23
 8002b8a:	db31      	blt.n	8002bf0 <__aeabi_d2f+0xd8>
 8002b8c:	2180      	movs	r1, #128	@ 0x80
 8002b8e:	201e      	movs	r0, #30
 8002b90:	0409      	lsls	r1, r1, #16
 8002b92:	4339      	orrs	r1, r7
 8002b94:	1b00      	subs	r0, r0, r4
 8002b96:	281f      	cmp	r0, #31
 8002b98:	dd2d      	ble.n	8002bf6 <__aeabi_d2f+0xde>
 8002b9a:	2602      	movs	r6, #2
 8002b9c:	4276      	negs	r6, r6
 8002b9e:	1b34      	subs	r4, r6, r4
 8002ba0:	000e      	movs	r6, r1
 8002ba2:	40e6      	lsrs	r6, r4
 8002ba4:	0034      	movs	r4, r6
 8002ba6:	2820      	cmp	r0, #32
 8002ba8:	d004      	beq.n	8002bb4 <__aeabi_d2f+0x9c>
 8002baa:	481a      	ldr	r0, [pc, #104]	@ (8002c14 <__aeabi_d2f+0xfc>)
 8002bac:	4684      	mov	ip, r0
 8002bae:	4463      	add	r3, ip
 8002bb0:	4099      	lsls	r1, r3
 8002bb2:	430d      	orrs	r5, r1
 8002bb4:	002b      	movs	r3, r5
 8002bb6:	1e59      	subs	r1, r3, #1
 8002bb8:	418b      	sbcs	r3, r1
 8002bba:	4323      	orrs	r3, r4
 8002bbc:	0759      	lsls	r1, r3, #29
 8002bbe:	d003      	beq.n	8002bc8 <__aeabi_d2f+0xb0>
 8002bc0:	210f      	movs	r1, #15
 8002bc2:	4019      	ands	r1, r3
 8002bc4:	2904      	cmp	r1, #4
 8002bc6:	d10b      	bne.n	8002be0 <__aeabi_d2f+0xc8>
 8002bc8:	019b      	lsls	r3, r3, #6
 8002bca:	2000      	movs	r0, #0
 8002bcc:	0a5b      	lsrs	r3, r3, #9
 8002bce:	e7b9      	b.n	8002b44 <__aeabi_d2f+0x2c>
 8002bd0:	210f      	movs	r1, #15
 8002bd2:	4019      	ands	r1, r3
 8002bd4:	2904      	cmp	r1, #4
 8002bd6:	d104      	bne.n	8002be2 <__aeabi_d2f+0xca>
 8002bd8:	019b      	lsls	r3, r3, #6
 8002bda:	0a5b      	lsrs	r3, r3, #9
 8002bdc:	b2e0      	uxtb	r0, r4
 8002bde:	e7b1      	b.n	8002b44 <__aeabi_d2f+0x2c>
 8002be0:	2400      	movs	r4, #0
 8002be2:	3304      	adds	r3, #4
 8002be4:	0159      	lsls	r1, r3, #5
 8002be6:	d5f7      	bpl.n	8002bd8 <__aeabi_d2f+0xc0>
 8002be8:	3401      	adds	r4, #1
 8002bea:	2300      	movs	r3, #0
 8002bec:	b2e0      	uxtb	r0, r4
 8002bee:	e7a9      	b.n	8002b44 <__aeabi_d2f+0x2c>
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	e7a6      	b.n	8002b44 <__aeabi_d2f+0x2c>
 8002bf6:	4c08      	ldr	r4, [pc, #32]	@ (8002c18 <__aeabi_d2f+0x100>)
 8002bf8:	191c      	adds	r4, r3, r4
 8002bfa:	002b      	movs	r3, r5
 8002bfc:	40a5      	lsls	r5, r4
 8002bfe:	40c3      	lsrs	r3, r0
 8002c00:	40a1      	lsls	r1, r4
 8002c02:	1e68      	subs	r0, r5, #1
 8002c04:	4185      	sbcs	r5, r0
 8002c06:	4329      	orrs	r1, r5
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	e7d7      	b.n	8002bbc <__aeabi_d2f+0xa4>
 8002c0c:	000007fe 	.word	0x000007fe
 8002c10:	fffffc80 	.word	0xfffffc80
 8002c14:	fffffca2 	.word	0xfffffca2
 8002c18:	fffffc82 	.word	0xfffffc82

08002c1c <__clzsi2>:
 8002c1c:	211c      	movs	r1, #28
 8002c1e:	2301      	movs	r3, #1
 8002c20:	041b      	lsls	r3, r3, #16
 8002c22:	4298      	cmp	r0, r3
 8002c24:	d301      	bcc.n	8002c2a <__clzsi2+0xe>
 8002c26:	0c00      	lsrs	r0, r0, #16
 8002c28:	3910      	subs	r1, #16
 8002c2a:	0a1b      	lsrs	r3, r3, #8
 8002c2c:	4298      	cmp	r0, r3
 8002c2e:	d301      	bcc.n	8002c34 <__clzsi2+0x18>
 8002c30:	0a00      	lsrs	r0, r0, #8
 8002c32:	3908      	subs	r1, #8
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	4298      	cmp	r0, r3
 8002c38:	d301      	bcc.n	8002c3e <__clzsi2+0x22>
 8002c3a:	0900      	lsrs	r0, r0, #4
 8002c3c:	3904      	subs	r1, #4
 8002c3e:	a202      	add	r2, pc, #8	@ (adr r2, 8002c48 <__clzsi2+0x2c>)
 8002c40:	5c10      	ldrb	r0, [r2, r0]
 8002c42:	1840      	adds	r0, r0, r1
 8002c44:	4770      	bx	lr
 8002c46:	46c0      	nop			@ (mov r8, r8)
 8002c48:	02020304 	.word	0x02020304
 8002c4c:	01010101 	.word	0x01010101
	...

08002c58 <__clzdi2>:
 8002c58:	b510      	push	{r4, lr}
 8002c5a:	2900      	cmp	r1, #0
 8002c5c:	d103      	bne.n	8002c66 <__clzdi2+0xe>
 8002c5e:	f7ff ffdd 	bl	8002c1c <__clzsi2>
 8002c62:	3020      	adds	r0, #32
 8002c64:	e002      	b.n	8002c6c <__clzdi2+0x14>
 8002c66:	0008      	movs	r0, r1
 8002c68:	f7ff ffd8 	bl	8002c1c <__clzsi2>
 8002c6c:	bd10      	pop	{r4, pc}
 8002c6e:	46c0      	nop			@ (mov r8, r8)

08002c70 <example>:
#include <stdio.h>
#include <string.h>
#include "main.h"


void example() {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0


	HAL_Delay(1500);
 8002c74:	4b03      	ldr	r3, [pc, #12]	@ (8002c84 <example+0x14>)
 8002c76:	0018      	movs	r0, r3
 8002c78:	f000 fcea 	bl	8003650 <HAL_Delay>
}
 8002c7c:	46c0      	nop			@ (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	46c0      	nop			@ (mov r8, r8)
 8002c84:	000005dc 	.word	0x000005dc

08002c88 <ReadTemperature>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define Vref 3.3
#define Vstep Vref/4096 // 12 bit ADC
float ReadTemperature(uint32_t channel) {
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b08e      	sub	sp, #56	@ 0x38
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]

	// NTC thermistor coefficients
		float A = 0.001210656;
 8002c90:	4b75      	ldr	r3, [pc, #468]	@ (8002e68 <ReadTemperature+0x1e0>)
 8002c92:	633b      	str	r3, [r7, #48]	@ 0x30
		float B = 0.000226946;
 8002c94:	4b75      	ldr	r3, [pc, #468]	@ (8002e6c <ReadTemperature+0x1e4>)
 8002c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
		float C = 6.7980e-8;
 8002c98:	4b75      	ldr	r3, [pc, #468]	@ (8002e70 <ReadTemperature+0x1e8>)
 8002c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
		float D = 0;  // adjust for better precision
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	627b      	str	r3, [r7, #36]	@ 0x24
	    uint32_t ADCValue;
	    float voltage;
	    static unsigned char bADCReady = 1;

	    // Check if ADC is ready for a new conversion
	    if (bADCReady == 1) {
 8002ca0:	4b74      	ldr	r3, [pc, #464]	@ (8002e74 <ReadTemperature+0x1ec>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d10b      	bne.n	8002cc0 <ReadTemperature+0x38>
	        // Start ADC conversion
	        if (HAL_ADC_Start(&hadc) != HAL_OK) {
 8002ca8:	4b73      	ldr	r3, [pc, #460]	@ (8002e78 <ReadTemperature+0x1f0>)
 8002caa:	0018      	movs	r0, r3
 8002cac:	f000 fe68 	bl	8003980 <HAL_ADC_Start>
 8002cb0:	1e03      	subs	r3, r0, #0
 8002cb2:	d002      	beq.n	8002cba <ReadTemperature+0x32>
	            // Start Conversion Error
	            Error_Handler();
 8002cb4:	f000 faba 	bl	800322c <Error_Handler>
 8002cb8:	e002      	b.n	8002cc0 <ReadTemperature+0x38>
	        } else {
	            bADCReady = 0; // ADC conversion in progress
 8002cba:	4b6e      	ldr	r3, [pc, #440]	@ (8002e74 <ReadTemperature+0x1ec>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
	        }
	    }

	    // Poll for ADC conversion completion
	    HAL_ADC_PollForConversion(&hadc, 10);
 8002cc0:	4b6d      	ldr	r3, [pc, #436]	@ (8002e78 <ReadTemperature+0x1f0>)
 8002cc2:	210a      	movs	r1, #10
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f000 feaf 	bl	8003a28 <HAL_ADC_PollForConversion>

	    // Check if the conversion is complete
	    if ((HAL_ADC_GetState(&hadc) & HAL_ADC_STATE_REG_EOC) == HAL_ADC_STATE_REG_EOC) {
 8002cca:	4b6b      	ldr	r3, [pc, #428]	@ (8002e78 <ReadTemperature+0x1f0>)
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f000 fff3 	bl	8003cb8 <HAL_ADC_GetState>
 8002cd2:	0002      	movs	r2, r0
 8002cd4:	2380      	movs	r3, #128	@ 0x80
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	401a      	ands	r2, r3
 8002cda:	2380      	movs	r3, #128	@ 0x80
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d000      	beq.n	8002ce4 <ReadTemperature+0x5c>
 8002ce2:	e0bc      	b.n	8002e5e <ReadTemperature+0x1d6>
	        // Select the channel to read
	        ADC_ChannelConfTypeDef sConfig;
	        sConfig.Channel = channel; // Set the channel
 8002ce4:	2108      	movs	r1, #8
 8002ce6:	2008      	movs	r0, #8
 8002ce8:	180b      	adds	r3, r1, r0
 8002cea:	19db      	adds	r3, r3, r7
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	601a      	str	r2, [r3, #0]
	        sConfig.Rank = 1;          // Rank of the channel in the sequencer
 8002cf0:	180b      	adds	r3, r1, r0
 8002cf2:	19db      	adds	r3, r3, r7
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	605a      	str	r2, [r3, #4]
	        hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5; // Set sampling time
 8002cf8:	4b5f      	ldr	r3, [pc, #380]	@ (8002e78 <ReadTemperature+0x1f0>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	639a      	str	r2, [r3, #56]	@ 0x38
	        HAL_ADC_ConfigChannel(&hadc, &sConfig); // Configure the ADC channel
 8002cfe:	180b      	adds	r3, r1, r0
 8002d00:	19da      	adds	r2, r3, r7
 8002d02:	4b5d      	ldr	r3, [pc, #372]	@ (8002e78 <ReadTemperature+0x1f0>)
 8002d04:	0011      	movs	r1, r2
 8002d06:	0018      	movs	r0, r3
 8002d08:	f000 ff36 	bl	8003b78 <HAL_ADC_ConfigChannel>

	        // Get the converted value
	        ADCValue = HAL_ADC_GetValue(&hadc); // Read ADC result
 8002d0c:	4b5a      	ldr	r3, [pc, #360]	@ (8002e78 <ReadTemperature+0x1f0>)
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f000 ff26 	bl	8003b60 <HAL_ADC_GetValue>
 8002d14:	0003      	movs	r3, r0
 8002d16:	623b      	str	r3, [r7, #32]
	        voltage = ADCValue * Vstep; // Calculate voltage
 8002d18:	6a38      	ldr	r0, [r7, #32]
 8002d1a:	f7ff fe91 	bl	8002a40 <__aeabi_ui2d>
 8002d1e:	4a57      	ldr	r2, [pc, #348]	@ (8002e7c <ReadTemperature+0x1f4>)
 8002d20:	4b57      	ldr	r3, [pc, #348]	@ (8002e80 <ReadTemperature+0x1f8>)
 8002d22:	f7fe ff11 	bl	8001b48 <__aeabi_dmul>
 8002d26:	0002      	movs	r2, r0
 8002d28:	000b      	movs	r3, r1
 8002d2a:	0010      	movs	r0, r2
 8002d2c:	0019      	movs	r1, r3
 8002d2e:	2200      	movs	r2, #0
 8002d30:	4b54      	ldr	r3, [pc, #336]	@ (8002e84 <ReadTemperature+0x1fc>)
 8002d32:	f7fe facf 	bl	80012d4 <__aeabi_ddiv>
 8002d36:	0002      	movs	r2, r0
 8002d38:	000b      	movs	r3, r1
 8002d3a:	0010      	movs	r0, r2
 8002d3c:	0019      	movs	r1, r3
 8002d3e:	f7ff feeb 	bl	8002b18 <__aeabi_d2f>
 8002d42:	1c03      	adds	r3, r0, #0
 8002d44:	61fb      	str	r3, [r7, #28]

	        // Calculate resistance and temperature
	        resistance = 5714.3 * voltage;
 8002d46:	69f8      	ldr	r0, [r7, #28]
 8002d48:	f7ff fe9e 	bl	8002a88 <__aeabi_f2d>
 8002d4c:	4a4e      	ldr	r2, [pc, #312]	@ (8002e88 <ReadTemperature+0x200>)
 8002d4e:	4b4f      	ldr	r3, [pc, #316]	@ (8002e8c <ReadTemperature+0x204>)
 8002d50:	f7fe fefa 	bl	8001b48 <__aeabi_dmul>
 8002d54:	0002      	movs	r2, r0
 8002d56:	000b      	movs	r3, r1
 8002d58:	0010      	movs	r0, r2
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	f7ff fedc 	bl	8002b18 <__aeabi_d2f>
 8002d60:	1c03      	adds	r3, r0, #0
 8002d62:	61bb      	str	r3, [r7, #24]
	        temperature = 1 / (A + B * log(resistance) + C * pow(log(resistance), 2) + D * pow(log(resistance), 3)) - 273.15;
 8002d64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d66:	f7ff fe8f 	bl	8002a88 <__aeabi_f2d>
 8002d6a:	0004      	movs	r4, r0
 8002d6c:	000d      	movs	r5, r1
 8002d6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002d70:	f7ff fe8a 	bl	8002a88 <__aeabi_f2d>
 8002d74:	6038      	str	r0, [r7, #0]
 8002d76:	6079      	str	r1, [r7, #4]
 8002d78:	69b8      	ldr	r0, [r7, #24]
 8002d7a:	f7ff fe85 	bl	8002a88 <__aeabi_f2d>
 8002d7e:	0002      	movs	r2, r0
 8002d80:	000b      	movs	r3, r1
 8002d82:	0010      	movs	r0, r2
 8002d84:	0019      	movs	r1, r3
 8002d86:	f005 fea1 	bl	8008acc <log>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	000b      	movs	r3, r1
 8002d8e:	6838      	ldr	r0, [r7, #0]
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	f7fe fed9 	bl	8001b48 <__aeabi_dmul>
 8002d96:	0002      	movs	r2, r0
 8002d98:	000b      	movs	r3, r1
 8002d9a:	0020      	movs	r0, r4
 8002d9c:	0029      	movs	r1, r5
 8002d9e:	f7fd fed3 	bl	8000b48 <__aeabi_dadd>
 8002da2:	0002      	movs	r2, r0
 8002da4:	000b      	movs	r3, r1
 8002da6:	603a      	str	r2, [r7, #0]
 8002da8:	607b      	str	r3, [r7, #4]
 8002daa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002dac:	f7ff fe6c 	bl	8002a88 <__aeabi_f2d>
 8002db0:	0004      	movs	r4, r0
 8002db2:	000d      	movs	r5, r1
 8002db4:	69b8      	ldr	r0, [r7, #24]
 8002db6:	f7ff fe67 	bl	8002a88 <__aeabi_f2d>
 8002dba:	0002      	movs	r2, r0
 8002dbc:	000b      	movs	r3, r1
 8002dbe:	0010      	movs	r0, r2
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	f005 fe83 	bl	8008acc <log>
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2380      	movs	r3, #128	@ 0x80
 8002dca:	05db      	lsls	r3, r3, #23
 8002dcc:	f005 feb4 	bl	8008b38 <pow>
 8002dd0:	0002      	movs	r2, r0
 8002dd2:	000b      	movs	r3, r1
 8002dd4:	0020      	movs	r0, r4
 8002dd6:	0029      	movs	r1, r5
 8002dd8:	f7fe feb6 	bl	8001b48 <__aeabi_dmul>
 8002ddc:	0002      	movs	r2, r0
 8002dde:	000b      	movs	r3, r1
 8002de0:	6838      	ldr	r0, [r7, #0]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	f7fd feb0 	bl	8000b48 <__aeabi_dadd>
 8002de8:	0002      	movs	r2, r0
 8002dea:	000b      	movs	r3, r1
 8002dec:	603a      	str	r2, [r7, #0]
 8002dee:	607b      	str	r3, [r7, #4]
 8002df0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002df2:	f7ff fe49 	bl	8002a88 <__aeabi_f2d>
 8002df6:	0004      	movs	r4, r0
 8002df8:	000d      	movs	r5, r1
 8002dfa:	69b8      	ldr	r0, [r7, #24]
 8002dfc:	f7ff fe44 	bl	8002a88 <__aeabi_f2d>
 8002e00:	0002      	movs	r2, r0
 8002e02:	000b      	movs	r3, r1
 8002e04:	0010      	movs	r0, r2
 8002e06:	0019      	movs	r1, r3
 8002e08:	f005 fe60 	bl	8008acc <log>
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	4b20      	ldr	r3, [pc, #128]	@ (8002e90 <ReadTemperature+0x208>)
 8002e10:	f005 fe92 	bl	8008b38 <pow>
 8002e14:	0002      	movs	r2, r0
 8002e16:	000b      	movs	r3, r1
 8002e18:	0020      	movs	r0, r4
 8002e1a:	0029      	movs	r1, r5
 8002e1c:	f7fe fe94 	bl	8001b48 <__aeabi_dmul>
 8002e20:	0002      	movs	r2, r0
 8002e22:	000b      	movs	r3, r1
 8002e24:	6838      	ldr	r0, [r7, #0]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	f7fd fe8e 	bl	8000b48 <__aeabi_dadd>
 8002e2c:	0002      	movs	r2, r0
 8002e2e:	000b      	movs	r3, r1
 8002e30:	2000      	movs	r0, #0
 8002e32:	4918      	ldr	r1, [pc, #96]	@ (8002e94 <ReadTemperature+0x20c>)
 8002e34:	f7fe fa4e 	bl	80012d4 <__aeabi_ddiv>
 8002e38:	0002      	movs	r2, r0
 8002e3a:	000b      	movs	r3, r1
 8002e3c:	0010      	movs	r0, r2
 8002e3e:	0019      	movs	r1, r3
 8002e40:	4a0e      	ldr	r2, [pc, #56]	@ (8002e7c <ReadTemperature+0x1f4>)
 8002e42:	4b15      	ldr	r3, [pc, #84]	@ (8002e98 <ReadTemperature+0x210>)
 8002e44:	f7ff f966 	bl	8002114 <__aeabi_dsub>
 8002e48:	0002      	movs	r2, r0
 8002e4a:	000b      	movs	r3, r1
 8002e4c:	0010      	movs	r0, r2
 8002e4e:	0019      	movs	r1, r3
 8002e50:	f7ff fe62 	bl	8002b18 <__aeabi_d2f>
 8002e54:	1c03      	adds	r3, r0, #0
 8002e56:	637b      	str	r3, [r7, #52]	@ 0x34

	        bADCReady = 1; // ADC conversion complete, ready for next conversion
 8002e58:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <ReadTemperature+0x1ec>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
	    }

	    return temperature;
 8002e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8002e60:	1c18      	adds	r0, r3, #0
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b00e      	add	sp, #56	@ 0x38
 8002e66:	bdb0      	pop	{r4, r5, r7, pc}
 8002e68:	3a9eaee0 	.word	0x3a9eaee0
 8002e6c:	396df85a 	.word	0x396df85a
 8002e70:	3391fc66 	.word	0x3391fc66
 8002e74:	20000000 	.word	0x20000000
 8002e78:	200001f4 	.word	0x200001f4
 8002e7c:	66666666 	.word	0x66666666
 8002e80:	400a6666 	.word	0x400a6666
 8002e84:	40b00000 	.word	0x40b00000
 8002e88:	cccccccd 	.word	0xcccccccd
 8002e8c:	40b6524c 	.word	0x40b6524c
 8002e90:	40080000 	.word	0x40080000
 8002e94:	3ff00000 	.word	0x3ff00000
 8002e98:	40711266 	.word	0x40711266

08002e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ea2:	f000 fb65 	bl	8003570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ea6:	f000 f84f 	bl	8002f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002eaa:	f000 f95b 	bl	8003164 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002eae:	f000 f929 	bl	8003104 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8002eb2:	f000 f8b5 	bl	8003020 <MX_ADC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(msg, "T1: %f T2: %f diff: %f \r", ReadTemperature(ADC_CHANNEL_0), ReadTemperature(ADC_CHANNEL_1), (ReadTemperature(ADC_CHANNEL_0) - ReadTemperature(ADC_CHANNEL_1)));
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	f7ff fee6 	bl	8002c88 <ReadTemperature>
 8002ebc:	1c03      	adds	r3, r0, #0
 8002ebe:	1c18      	adds	r0, r3, #0
 8002ec0:	f7ff fde2 	bl	8002a88 <__aeabi_f2d>
 8002ec4:	6038      	str	r0, [r7, #0]
 8002ec6:	6079      	str	r1, [r7, #4]
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f38 <main+0x9c>)
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f7ff fedc 	bl	8002c88 <ReadTemperature>
 8002ed0:	1c03      	adds	r3, r0, #0
 8002ed2:	1c18      	adds	r0, r3, #0
 8002ed4:	f7ff fdd8 	bl	8002a88 <__aeabi_f2d>
 8002ed8:	0004      	movs	r4, r0
 8002eda:	000d      	movs	r5, r1
 8002edc:	2001      	movs	r0, #1
 8002ede:	f7ff fed3 	bl	8002c88 <ReadTemperature>
 8002ee2:	1c06      	adds	r6, r0, #0
 8002ee4:	4b14      	ldr	r3, [pc, #80]	@ (8002f38 <main+0x9c>)
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f7ff fece 	bl	8002c88 <ReadTemperature>
 8002eec:	1c03      	adds	r3, r0, #0
 8002eee:	1c19      	adds	r1, r3, #0
 8002ef0:	1c30      	adds	r0, r6, #0
 8002ef2:	f7fd fbc5 	bl	8000680 <__aeabi_fsub>
 8002ef6:	1c03      	adds	r3, r0, #0
 8002ef8:	1c18      	adds	r0, r3, #0
 8002efa:	f7ff fdc5 	bl	8002a88 <__aeabi_f2d>
 8002efe:	0002      	movs	r2, r0
 8002f00:	000b      	movs	r3, r1
 8002f02:	490e      	ldr	r1, [pc, #56]	@ (8002f3c <main+0xa0>)
 8002f04:	480e      	ldr	r0, [pc, #56]	@ (8002f40 <main+0xa4>)
 8002f06:	9202      	str	r2, [sp, #8]
 8002f08:	9303      	str	r3, [sp, #12]
 8002f0a:	9400      	str	r4, [sp, #0]
 8002f0c:	9501      	str	r5, [sp, #4]
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f003 fc0f 	bl	8006734 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002f16:	4b0a      	ldr	r3, [pc, #40]	@ (8002f40 <main+0xa4>)
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f7fd f8f5 	bl	8000108 <strlen>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	2301      	movs	r3, #1
 8002f24:	425b      	negs	r3, r3
 8002f26:	4906      	ldr	r1, [pc, #24]	@ (8002f40 <main+0xa4>)
 8002f28:	4806      	ldr	r0, [pc, #24]	@ (8002f44 <main+0xa8>)
 8002f2a:	f002 f971 	bl	8005210 <HAL_UART_Transmit>
	  //sprintf(msg, "T2: %f \r ", ReadTemperature(ADC_CHANNEL_1));
	  //HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

	  //sprintf(msg, "Diff: %f \r\n", (ReadTemperature(ADC_CHANNEL_0) - ReadTemperature(ADC_CHANNEL_1)));
	  //HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	  example();
 8002f2e:	f7ff fe9f 	bl	8002c70 <example>
	  sprintf(msg, "T1: %f T2: %f diff: %f \r", ReadTemperature(ADC_CHANNEL_0), ReadTemperature(ADC_CHANNEL_1), (ReadTemperature(ADC_CHANNEL_0) - ReadTemperature(ADC_CHANNEL_1)));
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	e7bf      	b.n	8002eb6 <main+0x1a>
 8002f36:	46c0      	nop			@ (mov r8, r8)
 8002f38:	04000002 	.word	0x04000002
 8002f3c:	08009ce0 	.word	0x08009ce0
 8002f40:	200002d8 	.word	0x200002d8
 8002f44:	20000250 	.word	0x20000250

08002f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f48:	b590      	push	{r4, r7, lr}
 8002f4a:	b09f      	sub	sp, #124	@ 0x7c
 8002f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f4e:	2440      	movs	r4, #64	@ 0x40
 8002f50:	193b      	adds	r3, r7, r4
 8002f52:	0018      	movs	r0, r3
 8002f54:	2338      	movs	r3, #56	@ 0x38
 8002f56:	001a      	movs	r2, r3
 8002f58:	2100      	movs	r1, #0
 8002f5a:	f003 fc59 	bl	8006810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f5e:	232c      	movs	r3, #44	@ 0x2c
 8002f60:	18fb      	adds	r3, r7, r3
 8002f62:	0018      	movs	r0, r3
 8002f64:	2314      	movs	r3, #20
 8002f66:	001a      	movs	r2, r3
 8002f68:	2100      	movs	r1, #0
 8002f6a:	f003 fc51 	bl	8006810 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f6e:	1d3b      	adds	r3, r7, #4
 8002f70:	0018      	movs	r0, r3
 8002f72:	2328      	movs	r3, #40	@ 0x28
 8002f74:	001a      	movs	r2, r3
 8002f76:	2100      	movs	r1, #0
 8002f78:	f003 fc4a 	bl	8006810 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f7c:	4b26      	ldr	r3, [pc, #152]	@ (8003018 <SystemClock_Config+0xd0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a26      	ldr	r2, [pc, #152]	@ (800301c <SystemClock_Config+0xd4>)
 8002f82:	401a      	ands	r2, r3
 8002f84:	4b24      	ldr	r3, [pc, #144]	@ (8003018 <SystemClock_Config+0xd0>)
 8002f86:	2180      	movs	r1, #128	@ 0x80
 8002f88:	0109      	lsls	r1, r1, #4
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002f8e:	0021      	movs	r1, r4
 8002f90:	187b      	adds	r3, r7, r1
 8002f92:	2210      	movs	r2, #16
 8002f94:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002f96:	187b      	adds	r3, r7, r1
 8002f98:	2201      	movs	r2, #1
 8002f9a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002f9c:	187b      	adds	r3, r7, r1
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002fa2:	187b      	adds	r3, r7, r1
 8002fa4:	22a0      	movs	r2, #160	@ 0xa0
 8002fa6:	0212      	lsls	r2, r2, #8
 8002fa8:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002faa:	187b      	adds	r3, r7, r1
 8002fac:	2200      	movs	r2, #0
 8002fae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fb0:	187b      	adds	r3, r7, r1
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f001 f962 	bl	800427c <HAL_RCC_OscConfig>
 8002fb8:	1e03      	subs	r3, r0, #0
 8002fba:	d001      	beq.n	8002fc0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002fbc:	f000 f936 	bl	800322c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fc0:	212c      	movs	r1, #44	@ 0x2c
 8002fc2:	187b      	adds	r3, r7, r1
 8002fc4:	220f      	movs	r2, #15
 8002fc6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002fc8:	187b      	adds	r3, r7, r1
 8002fca:	2200      	movs	r2, #0
 8002fcc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fce:	187b      	adds	r3, r7, r1
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002fd4:	187b      	adds	r3, r7, r1
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fda:	187b      	adds	r3, r7, r1
 8002fdc:	2200      	movs	r2, #0
 8002fde:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002fe0:	187b      	adds	r3, r7, r1
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f001 fd1d 	bl	8004a24 <HAL_RCC_ClockConfig>
 8002fea:	1e03      	subs	r3, r0, #0
 8002fec:	d001      	beq.n	8002ff2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002fee:	f000 f91d 	bl	800322c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ff2:	1d3b      	adds	r3, r7, #4
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ff8:	1d3b      	adds	r3, r7, #4
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ffe:	1d3b      	adds	r3, r7, #4
 8003000:	0018      	movs	r0, r3
 8003002:	f001 ff13 	bl	8004e2c <HAL_RCCEx_PeriphCLKConfig>
 8003006:	1e03      	subs	r3, r0, #0
 8003008:	d001      	beq.n	800300e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800300a:	f000 f90f 	bl	800322c <Error_Handler>
  }
}
 800300e:	46c0      	nop			@ (mov r8, r8)
 8003010:	46bd      	mov	sp, r7
 8003012:	b01f      	add	sp, #124	@ 0x7c
 8003014:	bd90      	pop	{r4, r7, pc}
 8003016:	46c0      	nop			@ (mov r8, r8)
 8003018:	40007000 	.word	0x40007000
 800301c:	ffffe7ff 	.word	0xffffe7ff

08003020 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003026:	003b      	movs	r3, r7
 8003028:	0018      	movs	r0, r3
 800302a:	2308      	movs	r3, #8
 800302c:	001a      	movs	r2, r3
 800302e:	2100      	movs	r1, #0
 8003030:	f003 fbee 	bl	8006810 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003034:	4b30      	ldr	r3, [pc, #192]	@ (80030f8 <MX_ADC_Init+0xd8>)
 8003036:	4a31      	ldr	r2, [pc, #196]	@ (80030fc <MX_ADC_Init+0xdc>)
 8003038:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800303a:	4b2f      	ldr	r3, [pc, #188]	@ (80030f8 <MX_ADC_Init+0xd8>)
 800303c:	2200      	movs	r2, #0
 800303e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8003040:	4b2d      	ldr	r3, [pc, #180]	@ (80030f8 <MX_ADC_Init+0xd8>)
 8003042:	22c0      	movs	r2, #192	@ 0xc0
 8003044:	0612      	lsls	r2, r2, #24
 8003046:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003048:	4b2b      	ldr	r3, [pc, #172]	@ (80030f8 <MX_ADC_Init+0xd8>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800304e:	4b2a      	ldr	r3, [pc, #168]	@ (80030f8 <MX_ADC_Init+0xd8>)
 8003050:	2200      	movs	r2, #0
 8003052:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003054:	4b28      	ldr	r3, [pc, #160]	@ (80030f8 <MX_ADC_Init+0xd8>)
 8003056:	2201      	movs	r2, #1
 8003058:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800305a:	4b27      	ldr	r3, [pc, #156]	@ (80030f8 <MX_ADC_Init+0xd8>)
 800305c:	2200      	movs	r2, #0
 800305e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003060:	4b25      	ldr	r3, [pc, #148]	@ (80030f8 <MX_ADC_Init+0xd8>)
 8003062:	2220      	movs	r2, #32
 8003064:	2100      	movs	r1, #0
 8003066:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003068:	4b23      	ldr	r3, [pc, #140]	@ (80030f8 <MX_ADC_Init+0xd8>)
 800306a:	2221      	movs	r2, #33	@ 0x21
 800306c:	2100      	movs	r1, #0
 800306e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003070:	4b21      	ldr	r3, [pc, #132]	@ (80030f8 <MX_ADC_Init+0xd8>)
 8003072:	2200      	movs	r2, #0
 8003074:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003076:	4b20      	ldr	r3, [pc, #128]	@ (80030f8 <MX_ADC_Init+0xd8>)
 8003078:	22c2      	movs	r2, #194	@ 0xc2
 800307a:	32ff      	adds	r2, #255	@ 0xff
 800307c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800307e:	4b1e      	ldr	r3, [pc, #120]	@ (80030f8 <MX_ADC_Init+0xd8>)
 8003080:	222c      	movs	r2, #44	@ 0x2c
 8003082:	2100      	movs	r1, #0
 8003084:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003086:	4b1c      	ldr	r3, [pc, #112]	@ (80030f8 <MX_ADC_Init+0xd8>)
 8003088:	2204      	movs	r2, #4
 800308a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800308c:	4b1a      	ldr	r3, [pc, #104]	@ (80030f8 <MX_ADC_Init+0xd8>)
 800308e:	2200      	movs	r2, #0
 8003090:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003092:	4b19      	ldr	r3, [pc, #100]	@ (80030f8 <MX_ADC_Init+0xd8>)
 8003094:	2200      	movs	r2, #0
 8003096:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8003098:	4b17      	ldr	r3, [pc, #92]	@ (80030f8 <MX_ADC_Init+0xd8>)
 800309a:	2201      	movs	r2, #1
 800309c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800309e:	4b16      	ldr	r3, [pc, #88]	@ (80030f8 <MX_ADC_Init+0xd8>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80030a4:	4b14      	ldr	r3, [pc, #80]	@ (80030f8 <MX_ADC_Init+0xd8>)
 80030a6:	0018      	movs	r0, r3
 80030a8:	f000 faf6 	bl	8003698 <HAL_ADC_Init>
 80030ac:	1e03      	subs	r3, r0, #0
 80030ae:	d001      	beq.n	80030b4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80030b0:	f000 f8bc 	bl	800322c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80030b4:	003b      	movs	r3, r7
 80030b6:	2201      	movs	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80030ba:	003b      	movs	r3, r7
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	0152      	lsls	r2, r2, #5
 80030c0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80030c2:	003a      	movs	r2, r7
 80030c4:	4b0c      	ldr	r3, [pc, #48]	@ (80030f8 <MX_ADC_Init+0xd8>)
 80030c6:	0011      	movs	r1, r2
 80030c8:	0018      	movs	r0, r3
 80030ca:	f000 fd55 	bl	8003b78 <HAL_ADC_ConfigChannel>
 80030ce:	1e03      	subs	r3, r0, #0
 80030d0:	d001      	beq.n	80030d6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80030d2:	f000 f8ab 	bl	800322c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80030d6:	003b      	movs	r3, r7
 80030d8:	4a09      	ldr	r2, [pc, #36]	@ (8003100 <MX_ADC_Init+0xe0>)
 80030da:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80030dc:	003a      	movs	r2, r7
 80030de:	4b06      	ldr	r3, [pc, #24]	@ (80030f8 <MX_ADC_Init+0xd8>)
 80030e0:	0011      	movs	r1, r2
 80030e2:	0018      	movs	r0, r3
 80030e4:	f000 fd48 	bl	8003b78 <HAL_ADC_ConfigChannel>
 80030e8:	1e03      	subs	r3, r0, #0
 80030ea:	d001      	beq.n	80030f0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80030ec:	f000 f89e 	bl	800322c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80030f0:	46c0      	nop			@ (mov r8, r8)
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b002      	add	sp, #8
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	200001f4 	.word	0x200001f4
 80030fc:	40012400 	.word	0x40012400
 8003100:	04000002 	.word	0x04000002

08003104 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003108:	4b14      	ldr	r3, [pc, #80]	@ (800315c <MX_USART2_UART_Init+0x58>)
 800310a:	4a15      	ldr	r2, [pc, #84]	@ (8003160 <MX_USART2_UART_Init+0x5c>)
 800310c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800310e:	4b13      	ldr	r3, [pc, #76]	@ (800315c <MX_USART2_UART_Init+0x58>)
 8003110:	22e1      	movs	r2, #225	@ 0xe1
 8003112:	0252      	lsls	r2, r2, #9
 8003114:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003116:	4b11      	ldr	r3, [pc, #68]	@ (800315c <MX_USART2_UART_Init+0x58>)
 8003118:	2200      	movs	r2, #0
 800311a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800311c:	4b0f      	ldr	r3, [pc, #60]	@ (800315c <MX_USART2_UART_Init+0x58>)
 800311e:	2200      	movs	r2, #0
 8003120:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003122:	4b0e      	ldr	r3, [pc, #56]	@ (800315c <MX_USART2_UART_Init+0x58>)
 8003124:	2200      	movs	r2, #0
 8003126:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003128:	4b0c      	ldr	r3, [pc, #48]	@ (800315c <MX_USART2_UART_Init+0x58>)
 800312a:	220c      	movs	r2, #12
 800312c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800312e:	4b0b      	ldr	r3, [pc, #44]	@ (800315c <MX_USART2_UART_Init+0x58>)
 8003130:	2200      	movs	r2, #0
 8003132:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003134:	4b09      	ldr	r3, [pc, #36]	@ (800315c <MX_USART2_UART_Init+0x58>)
 8003136:	2200      	movs	r2, #0
 8003138:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800313a:	4b08      	ldr	r3, [pc, #32]	@ (800315c <MX_USART2_UART_Init+0x58>)
 800313c:	2200      	movs	r2, #0
 800313e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003140:	4b06      	ldr	r3, [pc, #24]	@ (800315c <MX_USART2_UART_Init+0x58>)
 8003142:	2200      	movs	r2, #0
 8003144:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003146:	4b05      	ldr	r3, [pc, #20]	@ (800315c <MX_USART2_UART_Init+0x58>)
 8003148:	0018      	movs	r0, r3
 800314a:	f002 f80d 	bl	8005168 <HAL_UART_Init>
 800314e:	1e03      	subs	r3, r0, #0
 8003150:	d001      	beq.n	8003156 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003152:	f000 f86b 	bl	800322c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003156:	46c0      	nop			@ (mov r8, r8)
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20000250 	.word	0x20000250
 8003160:	40004400 	.word	0x40004400

08003164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003164:	b590      	push	{r4, r7, lr}
 8003166:	b089      	sub	sp, #36	@ 0x24
 8003168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316a:	240c      	movs	r4, #12
 800316c:	193b      	adds	r3, r7, r4
 800316e:	0018      	movs	r0, r3
 8003170:	2314      	movs	r3, #20
 8003172:	001a      	movs	r2, r3
 8003174:	2100      	movs	r1, #0
 8003176:	f003 fb4b 	bl	8006810 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800317a:	4b2a      	ldr	r3, [pc, #168]	@ (8003224 <MX_GPIO_Init+0xc0>)
 800317c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800317e:	4b29      	ldr	r3, [pc, #164]	@ (8003224 <MX_GPIO_Init+0xc0>)
 8003180:	2104      	movs	r1, #4
 8003182:	430a      	orrs	r2, r1
 8003184:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003186:	4b27      	ldr	r3, [pc, #156]	@ (8003224 <MX_GPIO_Init+0xc0>)
 8003188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318a:	2204      	movs	r2, #4
 800318c:	4013      	ands	r3, r2
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003192:	4b24      	ldr	r3, [pc, #144]	@ (8003224 <MX_GPIO_Init+0xc0>)
 8003194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003196:	4b23      	ldr	r3, [pc, #140]	@ (8003224 <MX_GPIO_Init+0xc0>)
 8003198:	2180      	movs	r1, #128	@ 0x80
 800319a:	430a      	orrs	r2, r1
 800319c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800319e:	4b21      	ldr	r3, [pc, #132]	@ (8003224 <MX_GPIO_Init+0xc0>)
 80031a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a2:	2280      	movs	r2, #128	@ 0x80
 80031a4:	4013      	ands	r3, r2
 80031a6:	607b      	str	r3, [r7, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003224 <MX_GPIO_Init+0xc0>)
 80031ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003224 <MX_GPIO_Init+0xc0>)
 80031b0:	2101      	movs	r1, #1
 80031b2:	430a      	orrs	r2, r1
 80031b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80031b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003224 <MX_GPIO_Init+0xc0>)
 80031b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ba:	2201      	movs	r2, #1
 80031bc:	4013      	ands	r3, r2
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80031c2:	23a0      	movs	r3, #160	@ 0xa0
 80031c4:	05db      	lsls	r3, r3, #23
 80031c6:	2200      	movs	r2, #0
 80031c8:	2120      	movs	r1, #32
 80031ca:	0018      	movs	r0, r3
 80031cc:	f001 f838 	bl	8004240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80031d0:	193b      	adds	r3, r7, r4
 80031d2:	2280      	movs	r2, #128	@ 0x80
 80031d4:	0192      	lsls	r2, r2, #6
 80031d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80031d8:	193b      	adds	r3, r7, r4
 80031da:	2284      	movs	r2, #132	@ 0x84
 80031dc:	0392      	lsls	r2, r2, #14
 80031de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e0:	193b      	adds	r3, r7, r4
 80031e2:	2200      	movs	r2, #0
 80031e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80031e6:	193b      	adds	r3, r7, r4
 80031e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003228 <MX_GPIO_Init+0xc4>)
 80031ea:	0019      	movs	r1, r3
 80031ec:	0010      	movs	r0, r2
 80031ee:	f000 fea9 	bl	8003f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80031f2:	0021      	movs	r1, r4
 80031f4:	187b      	adds	r3, r7, r1
 80031f6:	2220      	movs	r2, #32
 80031f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031fa:	187b      	adds	r3, r7, r1
 80031fc:	2201      	movs	r2, #1
 80031fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003200:	187b      	adds	r3, r7, r1
 8003202:	2200      	movs	r2, #0
 8003204:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003206:	187b      	adds	r3, r7, r1
 8003208:	2200      	movs	r2, #0
 800320a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800320c:	187a      	adds	r2, r7, r1
 800320e:	23a0      	movs	r3, #160	@ 0xa0
 8003210:	05db      	lsls	r3, r3, #23
 8003212:	0011      	movs	r1, r2
 8003214:	0018      	movs	r0, r3
 8003216:	f000 fe95 	bl	8003f44 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800321a:	46c0      	nop			@ (mov r8, r8)
 800321c:	46bd      	mov	sp, r7
 800321e:	b009      	add	sp, #36	@ 0x24
 8003220:	bd90      	pop	{r4, r7, pc}
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	40021000 	.word	0x40021000
 8003228:	50000800 	.word	0x50000800

0800322c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003230:	b672      	cpsid	i
}
 8003232:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003234:	46c0      	nop			@ (mov r8, r8)
 8003236:	e7fd      	b.n	8003234 <Error_Handler+0x8>

08003238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323c:	4b07      	ldr	r3, [pc, #28]	@ (800325c <HAL_MspInit+0x24>)
 800323e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003240:	4b06      	ldr	r3, [pc, #24]	@ (800325c <HAL_MspInit+0x24>)
 8003242:	2101      	movs	r1, #1
 8003244:	430a      	orrs	r2, r1
 8003246:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003248:	4b04      	ldr	r3, [pc, #16]	@ (800325c <HAL_MspInit+0x24>)
 800324a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800324c:	4b03      	ldr	r3, [pc, #12]	@ (800325c <HAL_MspInit+0x24>)
 800324e:	2180      	movs	r1, #128	@ 0x80
 8003250:	0549      	lsls	r1, r1, #21
 8003252:	430a      	orrs	r2, r1
 8003254:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003256:	46c0      	nop			@ (mov r8, r8)
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40021000 	.word	0x40021000

08003260 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003260:	b590      	push	{r4, r7, lr}
 8003262:	b089      	sub	sp, #36	@ 0x24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003268:	240c      	movs	r4, #12
 800326a:	193b      	adds	r3, r7, r4
 800326c:	0018      	movs	r0, r3
 800326e:	2314      	movs	r3, #20
 8003270:	001a      	movs	r2, r3
 8003272:	2100      	movs	r1, #0
 8003274:	f003 facc 	bl	8006810 <memset>
  if(hadc->Instance==ADC1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a14      	ldr	r2, [pc, #80]	@ (80032d0 <HAL_ADC_MspInit+0x70>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d122      	bne.n	80032c8 <HAL_ADC_MspInit+0x68>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003282:	4b14      	ldr	r3, [pc, #80]	@ (80032d4 <HAL_ADC_MspInit+0x74>)
 8003284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003286:	4b13      	ldr	r3, [pc, #76]	@ (80032d4 <HAL_ADC_MspInit+0x74>)
 8003288:	2180      	movs	r1, #128	@ 0x80
 800328a:	0089      	lsls	r1, r1, #2
 800328c:	430a      	orrs	r2, r1
 800328e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003290:	4b10      	ldr	r3, [pc, #64]	@ (80032d4 <HAL_ADC_MspInit+0x74>)
 8003292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003294:	4b0f      	ldr	r3, [pc, #60]	@ (80032d4 <HAL_ADC_MspInit+0x74>)
 8003296:	2101      	movs	r1, #1
 8003298:	430a      	orrs	r2, r1
 800329a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800329c:	4b0d      	ldr	r3, [pc, #52]	@ (80032d4 <HAL_ADC_MspInit+0x74>)
 800329e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a0:	2201      	movs	r2, #1
 80032a2:	4013      	ands	r3, r2
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80032a8:	193b      	adds	r3, r7, r4
 80032aa:	2203      	movs	r2, #3
 80032ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032ae:	193b      	adds	r3, r7, r4
 80032b0:	2203      	movs	r2, #3
 80032b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	193b      	adds	r3, r7, r4
 80032b6:	2200      	movs	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ba:	193a      	adds	r2, r7, r4
 80032bc:	23a0      	movs	r3, #160	@ 0xa0
 80032be:	05db      	lsls	r3, r3, #23
 80032c0:	0011      	movs	r1, r2
 80032c2:	0018      	movs	r0, r3
 80032c4:	f000 fe3e 	bl	8003f44 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80032c8:	46c0      	nop			@ (mov r8, r8)
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b009      	add	sp, #36	@ 0x24
 80032ce:	bd90      	pop	{r4, r7, pc}
 80032d0:	40012400 	.word	0x40012400
 80032d4:	40021000 	.word	0x40021000

080032d8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032d8:	b590      	push	{r4, r7, lr}
 80032da:	b089      	sub	sp, #36	@ 0x24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e0:	240c      	movs	r4, #12
 80032e2:	193b      	adds	r3, r7, r4
 80032e4:	0018      	movs	r0, r3
 80032e6:	2314      	movs	r3, #20
 80032e8:	001a      	movs	r2, r3
 80032ea:	2100      	movs	r1, #0
 80032ec:	f003 fa90 	bl	8006810 <memset>
  if(huart->Instance==USART2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a18      	ldr	r2, [pc, #96]	@ (8003358 <HAL_UART_MspInit+0x80>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d129      	bne.n	800334e <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032fa:	4b18      	ldr	r3, [pc, #96]	@ (800335c <HAL_UART_MspInit+0x84>)
 80032fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032fe:	4b17      	ldr	r3, [pc, #92]	@ (800335c <HAL_UART_MspInit+0x84>)
 8003300:	2180      	movs	r1, #128	@ 0x80
 8003302:	0289      	lsls	r1, r1, #10
 8003304:	430a      	orrs	r2, r1
 8003306:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003308:	4b14      	ldr	r3, [pc, #80]	@ (800335c <HAL_UART_MspInit+0x84>)
 800330a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800330c:	4b13      	ldr	r3, [pc, #76]	@ (800335c <HAL_UART_MspInit+0x84>)
 800330e:	2101      	movs	r1, #1
 8003310:	430a      	orrs	r2, r1
 8003312:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003314:	4b11      	ldr	r3, [pc, #68]	@ (800335c <HAL_UART_MspInit+0x84>)
 8003316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003318:	2201      	movs	r2, #1
 800331a:	4013      	ands	r3, r2
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003320:	0021      	movs	r1, r4
 8003322:	187b      	adds	r3, r7, r1
 8003324:	220c      	movs	r2, #12
 8003326:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003328:	187b      	adds	r3, r7, r1
 800332a:	2202      	movs	r2, #2
 800332c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	187b      	adds	r3, r7, r1
 8003330:	2200      	movs	r2, #0
 8003332:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003334:	187b      	adds	r3, r7, r1
 8003336:	2203      	movs	r2, #3
 8003338:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800333a:	187b      	adds	r3, r7, r1
 800333c:	2204      	movs	r2, #4
 800333e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003340:	187a      	adds	r2, r7, r1
 8003342:	23a0      	movs	r3, #160	@ 0xa0
 8003344:	05db      	lsls	r3, r3, #23
 8003346:	0011      	movs	r1, r2
 8003348:	0018      	movs	r0, r3
 800334a:	f000 fdfb 	bl	8003f44 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800334e:	46c0      	nop			@ (mov r8, r8)
 8003350:	46bd      	mov	sp, r7
 8003352:	b009      	add	sp, #36	@ 0x24
 8003354:	bd90      	pop	{r4, r7, pc}
 8003356:	46c0      	nop			@ (mov r8, r8)
 8003358:	40004400 	.word	0x40004400
 800335c:	40021000 	.word	0x40021000

08003360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003364:	46c0      	nop			@ (mov r8, r8)
 8003366:	e7fd      	b.n	8003364 <NMI_Handler+0x4>

08003368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800336c:	46c0      	nop			@ (mov r8, r8)
 800336e:	e7fd      	b.n	800336c <HardFault_Handler+0x4>

08003370 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003374:	46c0      	nop			@ (mov r8, r8)
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800337e:	46c0      	nop			@ (mov r8, r8)
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003388:	f000 f946 	bl	8003618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800338c:	46c0      	nop			@ (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	af00      	add	r7, sp, #0
  return 1;
 8003396:	2301      	movs	r3, #1
}
 8003398:	0018      	movs	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <_kill>:

int _kill(int pid, int sig)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033a8:	f003 fa8c 	bl	80068c4 <__errno>
 80033ac:	0003      	movs	r3, r0
 80033ae:	2216      	movs	r2, #22
 80033b0:	601a      	str	r2, [r3, #0]
  return -1;
 80033b2:	2301      	movs	r3, #1
 80033b4:	425b      	negs	r3, r3
}
 80033b6:	0018      	movs	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b002      	add	sp, #8
 80033bc:	bd80      	pop	{r7, pc}

080033be <_exit>:

void _exit (int status)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033c6:	2301      	movs	r3, #1
 80033c8:	425a      	negs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	0011      	movs	r1, r2
 80033ce:	0018      	movs	r0, r3
 80033d0:	f7ff ffe5 	bl	800339e <_kill>
  while (1) {}    /* Make sure we hang here */
 80033d4:	46c0      	nop			@ (mov r8, r8)
 80033d6:	e7fd      	b.n	80033d4 <_exit+0x16>

080033d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	e00a      	b.n	8003400 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033ea:	e000      	b.n	80033ee <_read+0x16>
 80033ec:	bf00      	nop
 80033ee:	0001      	movs	r1, r0
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	60ba      	str	r2, [r7, #8]
 80033f6:	b2ca      	uxtb	r2, r1
 80033f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	3301      	adds	r3, #1
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	429a      	cmp	r2, r3
 8003406:	dbf0      	blt.n	80033ea <_read+0x12>
  }

  return len;
 8003408:	687b      	ldr	r3, [r7, #4]
}
 800340a:	0018      	movs	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	b006      	add	sp, #24
 8003410:	bd80      	pop	{r7, pc}

08003412 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b086      	sub	sp, #24
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	e009      	b.n	8003438 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	60ba      	str	r2, [r7, #8]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	0018      	movs	r0, r3
 800342e:	e000      	b.n	8003432 <_write+0x20>
 8003430:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	3301      	adds	r3, #1
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	429a      	cmp	r2, r3
 800343e:	dbf1      	blt.n	8003424 <_write+0x12>
  }
  return len;
 8003440:	687b      	ldr	r3, [r7, #4]
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b006      	add	sp, #24
 8003448:	bd80      	pop	{r7, pc}

0800344a <_close>:

int _close(int file)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003452:	2301      	movs	r3, #1
 8003454:	425b      	negs	r3, r3
}
 8003456:	0018      	movs	r0, r3
 8003458:	46bd      	mov	sp, r7
 800345a:	b002      	add	sp, #8
 800345c:	bd80      	pop	{r7, pc}

0800345e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	2280      	movs	r2, #128	@ 0x80
 800346c:	0192      	lsls	r2, r2, #6
 800346e:	605a      	str	r2, [r3, #4]
  return 0;
 8003470:	2300      	movs	r3, #0
}
 8003472:	0018      	movs	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	b002      	add	sp, #8
 8003478:	bd80      	pop	{r7, pc}

0800347a <_isatty>:

int _isatty(int file)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003482:	2301      	movs	r3, #1
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b002      	add	sp, #8
 800348a:	bd80      	pop	{r7, pc}

0800348c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003498:	2300      	movs	r3, #0
}
 800349a:	0018      	movs	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	b004      	add	sp, #16
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034ac:	4a14      	ldr	r2, [pc, #80]	@ (8003500 <_sbrk+0x5c>)
 80034ae:	4b15      	ldr	r3, [pc, #84]	@ (8003504 <_sbrk+0x60>)
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034b8:	4b13      	ldr	r3, [pc, #76]	@ (8003508 <_sbrk+0x64>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034c0:	4b11      	ldr	r3, [pc, #68]	@ (8003508 <_sbrk+0x64>)
 80034c2:	4a12      	ldr	r2, [pc, #72]	@ (800350c <_sbrk+0x68>)
 80034c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034c6:	4b10      	ldr	r3, [pc, #64]	@ (8003508 <_sbrk+0x64>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	18d3      	adds	r3, r2, r3
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d207      	bcs.n	80034e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034d4:	f003 f9f6 	bl	80068c4 <__errno>
 80034d8:	0003      	movs	r3, r0
 80034da:	220c      	movs	r2, #12
 80034dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034de:	2301      	movs	r3, #1
 80034e0:	425b      	negs	r3, r3
 80034e2:	e009      	b.n	80034f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034e4:	4b08      	ldr	r3, [pc, #32]	@ (8003508 <_sbrk+0x64>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034ea:	4b07      	ldr	r3, [pc, #28]	@ (8003508 <_sbrk+0x64>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	18d2      	adds	r2, r2, r3
 80034f2:	4b05      	ldr	r3, [pc, #20]	@ (8003508 <_sbrk+0x64>)
 80034f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80034f6:	68fb      	ldr	r3, [r7, #12]
}
 80034f8:	0018      	movs	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b006      	add	sp, #24
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20005000 	.word	0x20005000
 8003504:	00000400 	.word	0x00000400
 8003508:	200003a0 	.word	0x200003a0
 800350c:	200004f8 	.word	0x200004f8

08003510 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003514:	46c0      	nop			@ (mov r8, r8)
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800351c:	480d      	ldr	r0, [pc, #52]	@ (8003554 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800351e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003520:	f7ff fff6 	bl	8003510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003524:	480c      	ldr	r0, [pc, #48]	@ (8003558 <LoopForever+0x6>)
  ldr r1, =_edata
 8003526:	490d      	ldr	r1, [pc, #52]	@ (800355c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003528:	4a0d      	ldr	r2, [pc, #52]	@ (8003560 <LoopForever+0xe>)
  movs r3, #0
 800352a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800352c:	e002      	b.n	8003534 <LoopCopyDataInit>

0800352e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800352e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003532:	3304      	adds	r3, #4

08003534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003538:	d3f9      	bcc.n	800352e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800353a:	4a0a      	ldr	r2, [pc, #40]	@ (8003564 <LoopForever+0x12>)
  ldr r4, =_ebss
 800353c:	4c0a      	ldr	r4, [pc, #40]	@ (8003568 <LoopForever+0x16>)
  movs r3, #0
 800353e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003540:	e001      	b.n	8003546 <LoopFillZerobss>

08003542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003544:	3204      	adds	r2, #4

08003546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003548:	d3fb      	bcc.n	8003542 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800354a:	f003 f9c1 	bl	80068d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800354e:	f7ff fca5 	bl	8002e9c <main>

08003552 <LoopForever>:

LoopForever:
    b LoopForever
 8003552:	e7fe      	b.n	8003552 <LoopForever>
   ldr   r0, =_estack
 8003554:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800355c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003560:	0800a170 	.word	0x0800a170
  ldr r2, =_sbss
 8003564:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003568:	200004f4 	.word	0x200004f4

0800356c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800356c:	e7fe      	b.n	800356c <ADC1_COMP_IRQHandler>
	...

08003570 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003576:	1dfb      	adds	r3, r7, #7
 8003578:	2200      	movs	r2, #0
 800357a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800357c:	4b0b      	ldr	r3, [pc, #44]	@ (80035ac <HAL_Init+0x3c>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4b0a      	ldr	r3, [pc, #40]	@ (80035ac <HAL_Init+0x3c>)
 8003582:	2140      	movs	r1, #64	@ 0x40
 8003584:	430a      	orrs	r2, r1
 8003586:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003588:	2000      	movs	r0, #0
 800358a:	f000 f811 	bl	80035b0 <HAL_InitTick>
 800358e:	1e03      	subs	r3, r0, #0
 8003590:	d003      	beq.n	800359a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003592:	1dfb      	adds	r3, r7, #7
 8003594:	2201      	movs	r2, #1
 8003596:	701a      	strb	r2, [r3, #0]
 8003598:	e001      	b.n	800359e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800359a:	f7ff fe4d 	bl	8003238 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800359e:	1dfb      	adds	r3, r7, #7
 80035a0:	781b      	ldrb	r3, [r3, #0]
}
 80035a2:	0018      	movs	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b002      	add	sp, #8
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	46c0      	nop			@ (mov r8, r8)
 80035ac:	40022000 	.word	0x40022000

080035b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035b0:	b590      	push	{r4, r7, lr}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035b8:	4b14      	ldr	r3, [pc, #80]	@ (800360c <HAL_InitTick+0x5c>)
 80035ba:	681c      	ldr	r4, [r3, #0]
 80035bc:	4b14      	ldr	r3, [pc, #80]	@ (8003610 <HAL_InitTick+0x60>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	0019      	movs	r1, r3
 80035c2:	23fa      	movs	r3, #250	@ 0xfa
 80035c4:	0098      	lsls	r0, r3, #2
 80035c6:	f7fc fdbb 	bl	8000140 <__udivsi3>
 80035ca:	0003      	movs	r3, r0
 80035cc:	0019      	movs	r1, r3
 80035ce:	0020      	movs	r0, r4
 80035d0:	f7fc fdb6 	bl	8000140 <__udivsi3>
 80035d4:	0003      	movs	r3, r0
 80035d6:	0018      	movs	r0, r3
 80035d8:	f000 fca7 	bl	8003f2a <HAL_SYSTICK_Config>
 80035dc:	1e03      	subs	r3, r0, #0
 80035de:	d001      	beq.n	80035e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e00f      	b.n	8003604 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d80b      	bhi.n	8003602 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	2301      	movs	r3, #1
 80035ee:	425b      	negs	r3, r3
 80035f0:	2200      	movs	r2, #0
 80035f2:	0018      	movs	r0, r3
 80035f4:	f000 fc84 	bl	8003f00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035f8:	4b06      	ldr	r3, [pc, #24]	@ (8003614 <HAL_InitTick+0x64>)
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	e000      	b.n	8003604 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
}
 8003604:	0018      	movs	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	b003      	add	sp, #12
 800360a:	bd90      	pop	{r4, r7, pc}
 800360c:	20000004 	.word	0x20000004
 8003610:	2000000c 	.word	0x2000000c
 8003614:	20000008 	.word	0x20000008

08003618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800361c:	4b05      	ldr	r3, [pc, #20]	@ (8003634 <HAL_IncTick+0x1c>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	001a      	movs	r2, r3
 8003622:	4b05      	ldr	r3, [pc, #20]	@ (8003638 <HAL_IncTick+0x20>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	18d2      	adds	r2, r2, r3
 8003628:	4b03      	ldr	r3, [pc, #12]	@ (8003638 <HAL_IncTick+0x20>)
 800362a:	601a      	str	r2, [r3, #0]
}
 800362c:	46c0      	nop			@ (mov r8, r8)
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	46c0      	nop			@ (mov r8, r8)
 8003634:	2000000c 	.word	0x2000000c
 8003638:	200003a4 	.word	0x200003a4

0800363c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  return uwTick;
 8003640:	4b02      	ldr	r3, [pc, #8]	@ (800364c <HAL_GetTick+0x10>)
 8003642:	681b      	ldr	r3, [r3, #0]
}
 8003644:	0018      	movs	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	46c0      	nop			@ (mov r8, r8)
 800364c:	200003a4 	.word	0x200003a4

08003650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003658:	f7ff fff0 	bl	800363c <HAL_GetTick>
 800365c:	0003      	movs	r3, r0
 800365e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	3301      	adds	r3, #1
 8003668:	d005      	beq.n	8003676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800366a:	4b0a      	ldr	r3, [pc, #40]	@ (8003694 <HAL_Delay+0x44>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	001a      	movs	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	189b      	adds	r3, r3, r2
 8003674:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003676:	46c0      	nop			@ (mov r8, r8)
 8003678:	f7ff ffe0 	bl	800363c <HAL_GetTick>
 800367c:	0002      	movs	r2, r0
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	429a      	cmp	r2, r3
 8003686:	d8f7      	bhi.n	8003678 <HAL_Delay+0x28>
  {
  }
}
 8003688:	46c0      	nop			@ (mov r8, r8)
 800368a:	46c0      	nop			@ (mov r8, r8)
 800368c:	46bd      	mov	sp, r7
 800368e:	b004      	add	sp, #16
 8003690:	bd80      	pop	{r7, pc}
 8003692:	46c0      	nop			@ (mov r8, r8)
 8003694:	2000000c 	.word	0x2000000c

08003698 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e159      	b.n	800395e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10a      	bne.n	80036c8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2250      	movs	r2, #80	@ 0x50
 80036bc:	2100      	movs	r1, #0
 80036be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	0018      	movs	r0, r3
 80036c4:	f7ff fdcc 	bl	8003260 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036cc:	2210      	movs	r2, #16
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b10      	cmp	r3, #16
 80036d2:	d005      	beq.n	80036e0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2204      	movs	r2, #4
 80036dc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80036de:	d00b      	beq.n	80036f8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e4:	2210      	movs	r2, #16
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2250      	movs	r2, #80	@ 0x50
 80036f0:	2100      	movs	r1, #0
 80036f2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e132      	b.n	800395e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036fc:	4a9a      	ldr	r2, [pc, #616]	@ (8003968 <HAL_ADC_Init+0x2d0>)
 80036fe:	4013      	ands	r3, r2
 8003700:	2202      	movs	r2, #2
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2203      	movs	r2, #3
 8003710:	4013      	ands	r3, r2
 8003712:	2b01      	cmp	r3, #1
 8003714:	d108      	bne.n	8003728 <HAL_ADC_Init+0x90>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2201      	movs	r2, #1
 800371e:	4013      	ands	r3, r2
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_ADC_Init+0x90>
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <HAL_ADC_Init+0x92>
 8003728:	2300      	movs	r3, #0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d149      	bne.n	80037c2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	23c0      	movs	r3, #192	@ 0xc0
 8003734:	061b      	lsls	r3, r3, #24
 8003736:	429a      	cmp	r2, r3
 8003738:	d00b      	beq.n	8003752 <HAL_ADC_Init+0xba>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	2380      	movs	r3, #128	@ 0x80
 8003740:	05db      	lsls	r3, r3, #23
 8003742:	429a      	cmp	r2, r3
 8003744:	d005      	beq.n	8003752 <HAL_ADC_Init+0xba>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	2380      	movs	r3, #128	@ 0x80
 800374c:	061b      	lsls	r3, r3, #24
 800374e:	429a      	cmp	r2, r3
 8003750:	d111      	bne.n	8003776 <HAL_ADC_Init+0xde>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	0092      	lsls	r2, r2, #2
 800375e:	0892      	lsrs	r2, r2, #2
 8003760:	611a      	str	r2, [r3, #16]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6919      	ldr	r1, [r3, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	611a      	str	r2, [r3, #16]
 8003774:	e014      	b.n	80037a0 <HAL_ADC_Init+0x108>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	0092      	lsls	r2, r2, #2
 8003782:	0892      	lsrs	r2, r2, #2
 8003784:	611a      	str	r2, [r3, #16]
 8003786:	4b79      	ldr	r3, [pc, #484]	@ (800396c <HAL_ADC_Init+0x2d4>)
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	4b78      	ldr	r3, [pc, #480]	@ (800396c <HAL_ADC_Init+0x2d4>)
 800378c:	4978      	ldr	r1, [pc, #480]	@ (8003970 <HAL_ADC_Init+0x2d8>)
 800378e:	400a      	ands	r2, r1
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	4b76      	ldr	r3, [pc, #472]	@ (800396c <HAL_ADC_Init+0x2d4>)
 8003794:	6819      	ldr	r1, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	4b74      	ldr	r3, [pc, #464]	@ (800396c <HAL_ADC_Init+0x2d4>)
 800379c:	430a      	orrs	r2, r1
 800379e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2118      	movs	r1, #24
 80037ac:	438a      	bics	r2, r1
 80037ae:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68d9      	ldr	r1, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80037c2:	4b6a      	ldr	r3, [pc, #424]	@ (800396c <HAL_ADC_Init+0x2d4>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	4b69      	ldr	r3, [pc, #420]	@ (800396c <HAL_ADC_Init+0x2d4>)
 80037c8:	496a      	ldr	r1, [pc, #424]	@ (8003974 <HAL_ADC_Init+0x2dc>)
 80037ca:	400a      	ands	r2, r1
 80037cc:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80037ce:	4b67      	ldr	r3, [pc, #412]	@ (800396c <HAL_ADC_Init+0x2d4>)
 80037d0:	6819      	ldr	r1, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d6:	065a      	lsls	r2, r3, #25
 80037d8:	4b64      	ldr	r3, [pc, #400]	@ (800396c <HAL_ADC_Init+0x2d4>)
 80037da:	430a      	orrs	r2, r1
 80037dc:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	2380      	movs	r3, #128	@ 0x80
 80037e6:	055b      	lsls	r3, r3, #21
 80037e8:	4013      	ands	r3, r2
 80037ea:	d108      	bne.n	80037fe <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2180      	movs	r1, #128	@ 0x80
 80037f8:	0549      	lsls	r1, r1, #21
 80037fa:	430a      	orrs	r2, r1
 80037fc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	495b      	ldr	r1, [pc, #364]	@ (8003978 <HAL_ADC_Init+0x2e0>)
 800380a:	400a      	ands	r2, r1
 800380c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68d9      	ldr	r1, [r3, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d101      	bne.n	8003824 <HAL_ADC_Init+0x18c>
 8003820:	2304      	movs	r3, #4
 8003822:	e000      	b.n	8003826 <HAL_ADC_Init+0x18e>
 8003824:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003826:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2020      	movs	r0, #32
 800382c:	5c1b      	ldrb	r3, [r3, r0]
 800382e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003830:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	202c      	movs	r0, #44	@ 0x2c
 8003836:	5c1b      	ldrb	r3, [r3, r0]
 8003838:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800383a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003840:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003848:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003850:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800385e:	23c2      	movs	r3, #194	@ 0xc2
 8003860:	33ff      	adds	r3, #255	@ 0xff
 8003862:	429a      	cmp	r2, r3
 8003864:	d00b      	beq.n	800387e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68d9      	ldr	r1, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2221      	movs	r2, #33	@ 0x21
 8003882:	5c9b      	ldrb	r3, [r3, r2]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d11a      	bne.n	80038be <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	5c9b      	ldrb	r3, [r3, r2]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2180      	movs	r1, #128	@ 0x80
 800389e:	0249      	lsls	r1, r1, #9
 80038a0:	430a      	orrs	r2, r1
 80038a2:	60da      	str	r2, [r3, #12]
 80038a4:	e00b      	b.n	80038be <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038aa:	2220      	movs	r2, #32
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b6:	2201      	movs	r2, #1
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d11f      	bne.n	8003906 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	492a      	ldr	r1, [pc, #168]	@ (800397c <HAL_ADC_Init+0x2e4>)
 80038d2:	400a      	ands	r2, r1
 80038d4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6919      	ldr	r1, [r3, #16]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80038e4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80038ea:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2101      	movs	r1, #1
 8003900:	430a      	orrs	r2, r1
 8003902:	611a      	str	r2, [r3, #16]
 8003904:	e00e      	b.n	8003924 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	2201      	movs	r2, #1
 800390e:	4013      	ands	r3, r2
 8003910:	2b01      	cmp	r3, #1
 8003912:	d107      	bne.n	8003924 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2101      	movs	r1, #1
 8003920:	438a      	bics	r2, r1
 8003922:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2107      	movs	r1, #7
 8003930:	438a      	bics	r2, r1
 8003932:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6959      	ldr	r1, [r3, #20]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003950:	2203      	movs	r2, #3
 8003952:	4393      	bics	r3, r2
 8003954:	2201      	movs	r2, #1
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	0018      	movs	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	b002      	add	sp, #8
 8003964:	bd80      	pop	{r7, pc}
 8003966:	46c0      	nop			@ (mov r8, r8)
 8003968:	fffffefd 	.word	0xfffffefd
 800396c:	40012708 	.word	0x40012708
 8003970:	ffc3ffff 	.word	0xffc3ffff
 8003974:	fdffffff 	.word	0xfdffffff
 8003978:	fffe0219 	.word	0xfffe0219
 800397c:	fffffc03 	.word	0xfffffc03

08003980 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003980:	b590      	push	{r4, r7, lr}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003988:	230f      	movs	r3, #15
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	2200      	movs	r2, #0
 800398e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2204      	movs	r2, #4
 8003998:	4013      	ands	r3, r2
 800399a:	d138      	bne.n	8003a0e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2250      	movs	r2, #80	@ 0x50
 80039a0:	5c9b      	ldrb	r3, [r3, r2]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_ADC_Start+0x2a>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e038      	b.n	8003a1c <HAL_ADC_Start+0x9c>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2250      	movs	r2, #80	@ 0x50
 80039ae:	2101      	movs	r1, #1
 80039b0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d007      	beq.n	80039ca <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80039ba:	230f      	movs	r3, #15
 80039bc:	18fc      	adds	r4, r7, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	0018      	movs	r0, r3
 80039c2:	f000 f983 	bl	8003ccc <ADC_Enable>
 80039c6:	0003      	movs	r3, r0
 80039c8:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80039ca:	230f      	movs	r3, #15
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d120      	bne.n	8003a16 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d8:	4a12      	ldr	r2, [pc, #72]	@ (8003a24 <HAL_ADC_Start+0xa4>)
 80039da:	4013      	ands	r3, r2
 80039dc:	2280      	movs	r2, #128	@ 0x80
 80039de:	0052      	lsls	r2, r2, #1
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2250      	movs	r2, #80	@ 0x50
 80039f0:	2100      	movs	r1, #0
 80039f2:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	221c      	movs	r2, #28
 80039fa:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2104      	movs	r1, #4
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	609a      	str	r2, [r3, #8]
 8003a0c:	e003      	b.n	8003a16 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a0e:	230f      	movs	r3, #15
 8003a10:	18fb      	adds	r3, r7, r3
 8003a12:	2202      	movs	r2, #2
 8003a14:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a16:	230f      	movs	r3, #15
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	781b      	ldrb	r3, [r3, #0]
}
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b005      	add	sp, #20
 8003a22:	bd90      	pop	{r4, r7, pc}
 8003a24:	fffff0fe 	.word	0xfffff0fe

08003a28 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d102      	bne.n	8003a48 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003a42:	2308      	movs	r3, #8
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	e014      	b.n	8003a72 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d10b      	bne.n	8003a6e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2250      	movs	r2, #80	@ 0x50
 8003a66:	2100      	movs	r1, #0
 8003a68:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e072      	b.n	8003b54 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003a6e:	230c      	movs	r3, #12
 8003a70:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003a72:	f7ff fde3 	bl	800363c <HAL_GetTick>
 8003a76:	0003      	movs	r3, r0
 8003a78:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003a7a:	e01f      	b.n	8003abc <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	d01c      	beq.n	8003abc <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d007      	beq.n	8003a98 <HAL_ADC_PollForConversion+0x70>
 8003a88:	f7ff fdd8 	bl	800363c <HAL_GetTick>
 8003a8c:	0002      	movs	r2, r0
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d211      	bcs.n	8003abc <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d10b      	bne.n	8003abc <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2250      	movs	r2, #80	@ 0x50
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e04b      	b.n	8003b54 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d0d9      	beq.n	8003a7c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003acc:	2280      	movs	r2, #128	@ 0x80
 8003ace:	0092      	lsls	r2, r2, #2
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	23c0      	movs	r3, #192	@ 0xc0
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d12e      	bne.n	8003b42 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d129      	bne.n	8003b42 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2208      	movs	r2, #8
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d122      	bne.n	8003b42 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2204      	movs	r2, #4
 8003b04:	4013      	ands	r3, r2
 8003b06:	d110      	bne.n	8003b2a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	210c      	movs	r1, #12
 8003b14:	438a      	bics	r2, r1
 8003b16:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1c:	4a0f      	ldr	r2, [pc, #60]	@ (8003b5c <HAL_ADC_PollForConversion+0x134>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	2201      	movs	r2, #1
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	655a      	str	r2, [r3, #84]	@ 0x54
 8003b28:	e00b      	b.n	8003b42 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b2e:	2220      	movs	r2, #32
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d103      	bne.n	8003b52 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	220c      	movs	r2, #12
 8003b50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	0018      	movs	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b004      	add	sp, #16
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	fffffefe 	.word	0xfffffefe

08003b60 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003b6e:	0018      	movs	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b002      	add	sp, #8
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2250      	movs	r2, #80	@ 0x50
 8003b86:	5c9b      	ldrb	r3, [r3, r2]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x18>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e085      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x124>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2250      	movs	r2, #80	@ 0x50
 8003b94:	2101      	movs	r1, #1
 8003b96:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2204      	movs	r2, #4
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d00b      	beq.n	8003bbc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba8:	2220      	movs	r2, #32
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2250      	movs	r2, #80	@ 0x50
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e06f      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	4a38      	ldr	r2, [pc, #224]	@ (8003ca4 <HAL_ADC_ConfigChannel+0x12c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d035      	beq.n	8003c32 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	035b      	lsls	r3, r3, #13
 8003bd2:	0b5a      	lsrs	r2, r3, #13
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	2380      	movs	r3, #128	@ 0x80
 8003be2:	02db      	lsls	r3, r3, #11
 8003be4:	4013      	ands	r3, r2
 8003be6:	d009      	beq.n	8003bfc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8003be8:	4b2f      	ldr	r3, [pc, #188]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x130>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	4b2e      	ldr	r3, [pc, #184]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x130>)
 8003bee:	2180      	movs	r1, #128	@ 0x80
 8003bf0:	0409      	lsls	r1, r1, #16
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003bf6:	200a      	movs	r0, #10
 8003bf8:	f000 f8d0 	bl	8003d9c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	2380      	movs	r3, #128	@ 0x80
 8003c02:	029b      	lsls	r3, r3, #10
 8003c04:	4013      	ands	r3, r2
 8003c06:	d006      	beq.n	8003c16 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8003c08:	4b27      	ldr	r3, [pc, #156]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x130>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	4b26      	ldr	r3, [pc, #152]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x130>)
 8003c0e:	2180      	movs	r1, #128	@ 0x80
 8003c10:	03c9      	lsls	r1, r1, #15
 8003c12:	430a      	orrs	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	2380      	movs	r3, #128	@ 0x80
 8003c1c:	025b      	lsls	r3, r3, #9
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d037      	beq.n	8003c92 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8003c22:	4b21      	ldr	r3, [pc, #132]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x130>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	4b20      	ldr	r3, [pc, #128]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x130>)
 8003c28:	2180      	movs	r1, #128	@ 0x80
 8003c2a:	0449      	lsls	r1, r1, #17
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	e02f      	b.n	8003c92 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	035b      	lsls	r3, r3, #13
 8003c3e:	0b5b      	lsrs	r3, r3, #13
 8003c40:	43d9      	mvns	r1, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	400a      	ands	r2, r1
 8003c48:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	2380      	movs	r3, #128	@ 0x80
 8003c50:	02db      	lsls	r3, r3, #11
 8003c52:	4013      	ands	r3, r2
 8003c54:	d005      	beq.n	8003c62 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8003c56:	4b14      	ldr	r3, [pc, #80]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x130>)
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	4b13      	ldr	r3, [pc, #76]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x130>)
 8003c5c:	4913      	ldr	r1, [pc, #76]	@ (8003cac <HAL_ADC_ConfigChannel+0x134>)
 8003c5e:	400a      	ands	r2, r1
 8003c60:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	2380      	movs	r3, #128	@ 0x80
 8003c68:	029b      	lsls	r3, r3, #10
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d005      	beq.n	8003c7a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8003c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x130>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x130>)
 8003c74:	490e      	ldr	r1, [pc, #56]	@ (8003cb0 <HAL_ADC_ConfigChannel+0x138>)
 8003c76:	400a      	ands	r2, r1
 8003c78:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	2380      	movs	r3, #128	@ 0x80
 8003c80:	025b      	lsls	r3, r3, #9
 8003c82:	4013      	ands	r3, r2
 8003c84:	d005      	beq.n	8003c92 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8003c86:	4b08      	ldr	r3, [pc, #32]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x130>)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4b07      	ldr	r3, [pc, #28]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x130>)
 8003c8c:	4909      	ldr	r1, [pc, #36]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x13c>)
 8003c8e:	400a      	ands	r2, r1
 8003c90:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2250      	movs	r2, #80	@ 0x50
 8003c96:	2100      	movs	r1, #0
 8003c98:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b002      	add	sp, #8
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	00001001 	.word	0x00001001
 8003ca8:	40012708 	.word	0x40012708
 8003cac:	ff7fffff 	.word	0xff7fffff
 8003cb0:	ffbfffff 	.word	0xffbfffff
 8003cb4:	feffffff 	.word	0xfeffffff

08003cb8 <HAL_ADC_GetState>:
  *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
  * @param  hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b002      	add	sp, #8
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2203      	movs	r2, #3
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d108      	bne.n	8003cf8 <ADC_Enable+0x2c>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2201      	movs	r2, #1
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <ADC_Enable+0x2c>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <ADC_Enable+0x2e>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d146      	bne.n	8003d8c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	4a24      	ldr	r2, [pc, #144]	@ (8003d98 <ADC_Enable+0xcc>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	d00d      	beq.n	8003d26 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0e:	2210      	movs	r2, #16
 8003d10:	431a      	orrs	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e033      	b.n	8003d8e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2101      	movs	r1, #1
 8003d32:	430a      	orrs	r2, r1
 8003d34:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003d36:	2001      	movs	r0, #1
 8003d38:	f000 f830 	bl	8003d9c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d3c:	f7ff fc7e 	bl	800363c <HAL_GetTick>
 8003d40:	0003      	movs	r3, r0
 8003d42:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003d44:	e01b      	b.n	8003d7e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d46:	f7ff fc79 	bl	800363c <HAL_GetTick>
 8003d4a:	0002      	movs	r2, r0
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b0a      	cmp	r3, #10
 8003d52:	d914      	bls.n	8003d7e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d00d      	beq.n	8003d7e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d66:	2210      	movs	r2, #16
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d72:	2201      	movs	r2, #1
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e007      	b.n	8003d8e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2201      	movs	r2, #1
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d1dc      	bne.n	8003d46 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	0018      	movs	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b004      	add	sp, #16
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	46c0      	nop			@ (mov r8, r8)
 8003d98:	80000017 	.word	0x80000017

08003d9c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003da4:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd4 <ADC_DelayMicroSecond+0x38>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	490b      	ldr	r1, [pc, #44]	@ (8003dd8 <ADC_DelayMicroSecond+0x3c>)
 8003daa:	0018      	movs	r0, r3
 8003dac:	f7fc f9c8 	bl	8000140 <__udivsi3>
 8003db0:	0003      	movs	r3, r0
 8003db2:	001a      	movs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4353      	muls	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8003dba:	e002      	b.n	8003dc2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1f9      	bne.n	8003dbc <ADC_DelayMicroSecond+0x20>
  }
}
 8003dc8:	46c0      	nop			@ (mov r8, r8)
 8003dca:	46c0      	nop			@ (mov r8, r8)
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b004      	add	sp, #16
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	46c0      	nop			@ (mov r8, r8)
 8003dd4:	20000004 	.word	0x20000004
 8003dd8:	000f4240 	.word	0x000f4240

08003ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ddc:	b590      	push	{r4, r7, lr}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	0002      	movs	r2, r0
 8003de4:	6039      	str	r1, [r7, #0]
 8003de6:	1dfb      	adds	r3, r7, #7
 8003de8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003dea:	1dfb      	adds	r3, r7, #7
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b7f      	cmp	r3, #127	@ 0x7f
 8003df0:	d828      	bhi.n	8003e44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003df2:	4a2f      	ldr	r2, [pc, #188]	@ (8003eb0 <__NVIC_SetPriority+0xd4>)
 8003df4:	1dfb      	adds	r3, r7, #7
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	b25b      	sxtb	r3, r3
 8003dfa:	089b      	lsrs	r3, r3, #2
 8003dfc:	33c0      	adds	r3, #192	@ 0xc0
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	589b      	ldr	r3, [r3, r2]
 8003e02:	1dfa      	adds	r2, r7, #7
 8003e04:	7812      	ldrb	r2, [r2, #0]
 8003e06:	0011      	movs	r1, r2
 8003e08:	2203      	movs	r2, #3
 8003e0a:	400a      	ands	r2, r1
 8003e0c:	00d2      	lsls	r2, r2, #3
 8003e0e:	21ff      	movs	r1, #255	@ 0xff
 8003e10:	4091      	lsls	r1, r2
 8003e12:	000a      	movs	r2, r1
 8003e14:	43d2      	mvns	r2, r2
 8003e16:	401a      	ands	r2, r3
 8003e18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	019b      	lsls	r3, r3, #6
 8003e1e:	22ff      	movs	r2, #255	@ 0xff
 8003e20:	401a      	ands	r2, r3
 8003e22:	1dfb      	adds	r3, r7, #7
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	0018      	movs	r0, r3
 8003e28:	2303      	movs	r3, #3
 8003e2a:	4003      	ands	r3, r0
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e30:	481f      	ldr	r0, [pc, #124]	@ (8003eb0 <__NVIC_SetPriority+0xd4>)
 8003e32:	1dfb      	adds	r3, r7, #7
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	b25b      	sxtb	r3, r3
 8003e38:	089b      	lsrs	r3, r3, #2
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	33c0      	adds	r3, #192	@ 0xc0
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003e42:	e031      	b.n	8003ea8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e44:	4a1b      	ldr	r2, [pc, #108]	@ (8003eb4 <__NVIC_SetPriority+0xd8>)
 8003e46:	1dfb      	adds	r3, r7, #7
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	0019      	movs	r1, r3
 8003e4c:	230f      	movs	r3, #15
 8003e4e:	400b      	ands	r3, r1
 8003e50:	3b08      	subs	r3, #8
 8003e52:	089b      	lsrs	r3, r3, #2
 8003e54:	3306      	adds	r3, #6
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	18d3      	adds	r3, r2, r3
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	1dfa      	adds	r2, r7, #7
 8003e60:	7812      	ldrb	r2, [r2, #0]
 8003e62:	0011      	movs	r1, r2
 8003e64:	2203      	movs	r2, #3
 8003e66:	400a      	ands	r2, r1
 8003e68:	00d2      	lsls	r2, r2, #3
 8003e6a:	21ff      	movs	r1, #255	@ 0xff
 8003e6c:	4091      	lsls	r1, r2
 8003e6e:	000a      	movs	r2, r1
 8003e70:	43d2      	mvns	r2, r2
 8003e72:	401a      	ands	r2, r3
 8003e74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	019b      	lsls	r3, r3, #6
 8003e7a:	22ff      	movs	r2, #255	@ 0xff
 8003e7c:	401a      	ands	r2, r3
 8003e7e:	1dfb      	adds	r3, r7, #7
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	0018      	movs	r0, r3
 8003e84:	2303      	movs	r3, #3
 8003e86:	4003      	ands	r3, r0
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e8c:	4809      	ldr	r0, [pc, #36]	@ (8003eb4 <__NVIC_SetPriority+0xd8>)
 8003e8e:	1dfb      	adds	r3, r7, #7
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	001c      	movs	r4, r3
 8003e94:	230f      	movs	r3, #15
 8003e96:	4023      	ands	r3, r4
 8003e98:	3b08      	subs	r3, #8
 8003e9a:	089b      	lsrs	r3, r3, #2
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	3306      	adds	r3, #6
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	18c3      	adds	r3, r0, r3
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	601a      	str	r2, [r3, #0]
}
 8003ea8:	46c0      	nop			@ (mov r8, r8)
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b003      	add	sp, #12
 8003eae:	bd90      	pop	{r4, r7, pc}
 8003eb0:	e000e100 	.word	0xe000e100
 8003eb4:	e000ed00 	.word	0xe000ed00

08003eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	1e5a      	subs	r2, r3, #1
 8003ec4:	2380      	movs	r3, #128	@ 0x80
 8003ec6:	045b      	lsls	r3, r3, #17
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d301      	bcc.n	8003ed0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e010      	b.n	8003ef2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8003efc <SysTick_Config+0x44>)
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	3a01      	subs	r2, #1
 8003ed6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ed8:	2301      	movs	r3, #1
 8003eda:	425b      	negs	r3, r3
 8003edc:	2103      	movs	r1, #3
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f7ff ff7c 	bl	8003ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ee4:	4b05      	ldr	r3, [pc, #20]	@ (8003efc <SysTick_Config+0x44>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eea:	4b04      	ldr	r3, [pc, #16]	@ (8003efc <SysTick_Config+0x44>)
 8003eec:	2207      	movs	r2, #7
 8003eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b002      	add	sp, #8
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	46c0      	nop			@ (mov r8, r8)
 8003efc:	e000e010 	.word	0xe000e010

08003f00 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	607a      	str	r2, [r7, #4]
 8003f0a:	210f      	movs	r1, #15
 8003f0c:	187b      	adds	r3, r7, r1
 8003f0e:	1c02      	adds	r2, r0, #0
 8003f10:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	187b      	adds	r3, r7, r1
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	b25b      	sxtb	r3, r3
 8003f1a:	0011      	movs	r1, r2
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f7ff ff5d 	bl	8003ddc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8003f22:	46c0      	nop			@ (mov r8, r8)
 8003f24:	46bd      	mov	sp, r7
 8003f26:	b004      	add	sp, #16
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7ff ffbf 	bl	8003eb8 <SysTick_Config>
 8003f3a:	0003      	movs	r3, r0
}
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b002      	add	sp, #8
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003f5a:	e155      	b.n	8004208 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2101      	movs	r1, #1
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4091      	lsls	r1, r2
 8003f66:	000a      	movs	r2, r1
 8003f68:	4013      	ands	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d100      	bne.n	8003f74 <HAL_GPIO_Init+0x30>
 8003f72:	e146      	b.n	8004202 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2203      	movs	r2, #3
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d005      	beq.n	8003f8c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2203      	movs	r2, #3
 8003f86:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d130      	bne.n	8003fee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	2203      	movs	r2, #3
 8003f98:	409a      	lsls	r2, r3
 8003f9a:	0013      	movs	r3, r2
 8003f9c:	43da      	mvns	r2, r3
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	409a      	lsls	r2, r3
 8003fae:	0013      	movs	r3, r2
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	409a      	lsls	r2, r3
 8003fc8:	0013      	movs	r3, r2
 8003fca:	43da      	mvns	r2, r3
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	091b      	lsrs	r3, r3, #4
 8003fd8:	2201      	movs	r2, #1
 8003fda:	401a      	ands	r2, r3
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	0013      	movs	r3, r2
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2203      	movs	r2, #3
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d017      	beq.n	800402a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	2203      	movs	r2, #3
 8004006:	409a      	lsls	r2, r3
 8004008:	0013      	movs	r3, r2
 800400a:	43da      	mvns	r2, r3
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4013      	ands	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	409a      	lsls	r2, r3
 800401c:	0013      	movs	r3, r2
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2203      	movs	r2, #3
 8004030:	4013      	ands	r3, r2
 8004032:	2b02      	cmp	r3, #2
 8004034:	d123      	bne.n	800407e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	08da      	lsrs	r2, r3, #3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3208      	adds	r2, #8
 800403e:	0092      	lsls	r2, r2, #2
 8004040:	58d3      	ldr	r3, [r2, r3]
 8004042:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2207      	movs	r2, #7
 8004048:	4013      	ands	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	220f      	movs	r2, #15
 800404e:	409a      	lsls	r2, r3
 8004050:	0013      	movs	r3, r2
 8004052:	43da      	mvns	r2, r3
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4013      	ands	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2107      	movs	r1, #7
 8004062:	400b      	ands	r3, r1
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	409a      	lsls	r2, r3
 8004068:	0013      	movs	r3, r2
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	08da      	lsrs	r2, r3, #3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3208      	adds	r2, #8
 8004078:	0092      	lsls	r2, r2, #2
 800407a:	6939      	ldr	r1, [r7, #16]
 800407c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	2203      	movs	r2, #3
 800408a:	409a      	lsls	r2, r3
 800408c:	0013      	movs	r3, r2
 800408e:	43da      	mvns	r2, r3
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	4013      	ands	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2203      	movs	r2, #3
 800409c:	401a      	ands	r2, r3
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	409a      	lsls	r2, r3
 80040a4:	0013      	movs	r3, r2
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	23c0      	movs	r3, #192	@ 0xc0
 80040b8:	029b      	lsls	r3, r3, #10
 80040ba:	4013      	ands	r3, r2
 80040bc:	d100      	bne.n	80040c0 <HAL_GPIO_Init+0x17c>
 80040be:	e0a0      	b.n	8004202 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040c0:	4b57      	ldr	r3, [pc, #348]	@ (8004220 <HAL_GPIO_Init+0x2dc>)
 80040c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040c4:	4b56      	ldr	r3, [pc, #344]	@ (8004220 <HAL_GPIO_Init+0x2dc>)
 80040c6:	2101      	movs	r1, #1
 80040c8:	430a      	orrs	r2, r1
 80040ca:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80040cc:	4a55      	ldr	r2, [pc, #340]	@ (8004224 <HAL_GPIO_Init+0x2e0>)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	089b      	lsrs	r3, r3, #2
 80040d2:	3302      	adds	r3, #2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	589b      	ldr	r3, [r3, r2]
 80040d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2203      	movs	r2, #3
 80040de:	4013      	ands	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	220f      	movs	r2, #15
 80040e4:	409a      	lsls	r2, r3
 80040e6:	0013      	movs	r3, r2
 80040e8:	43da      	mvns	r2, r3
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	4013      	ands	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	23a0      	movs	r3, #160	@ 0xa0
 80040f4:	05db      	lsls	r3, r3, #23
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d01f      	beq.n	800413a <HAL_GPIO_Init+0x1f6>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a4a      	ldr	r2, [pc, #296]	@ (8004228 <HAL_GPIO_Init+0x2e4>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d019      	beq.n	8004136 <HAL_GPIO_Init+0x1f2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a49      	ldr	r2, [pc, #292]	@ (800422c <HAL_GPIO_Init+0x2e8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d013      	beq.n	8004132 <HAL_GPIO_Init+0x1ee>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a48      	ldr	r2, [pc, #288]	@ (8004230 <HAL_GPIO_Init+0x2ec>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00d      	beq.n	800412e <HAL_GPIO_Init+0x1ea>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a47      	ldr	r2, [pc, #284]	@ (8004234 <HAL_GPIO_Init+0x2f0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d007      	beq.n	800412a <HAL_GPIO_Init+0x1e6>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a46      	ldr	r2, [pc, #280]	@ (8004238 <HAL_GPIO_Init+0x2f4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d101      	bne.n	8004126 <HAL_GPIO_Init+0x1e2>
 8004122:	2305      	movs	r3, #5
 8004124:	e00a      	b.n	800413c <HAL_GPIO_Init+0x1f8>
 8004126:	2306      	movs	r3, #6
 8004128:	e008      	b.n	800413c <HAL_GPIO_Init+0x1f8>
 800412a:	2304      	movs	r3, #4
 800412c:	e006      	b.n	800413c <HAL_GPIO_Init+0x1f8>
 800412e:	2303      	movs	r3, #3
 8004130:	e004      	b.n	800413c <HAL_GPIO_Init+0x1f8>
 8004132:	2302      	movs	r3, #2
 8004134:	e002      	b.n	800413c <HAL_GPIO_Init+0x1f8>
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <HAL_GPIO_Init+0x1f8>
 800413a:	2300      	movs	r3, #0
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	2103      	movs	r1, #3
 8004140:	400a      	ands	r2, r1
 8004142:	0092      	lsls	r2, r2, #2
 8004144:	4093      	lsls	r3, r2
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800414c:	4935      	ldr	r1, [pc, #212]	@ (8004224 <HAL_GPIO_Init+0x2e0>)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	089b      	lsrs	r3, r3, #2
 8004152:	3302      	adds	r3, #2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800415a:	4b38      	ldr	r3, [pc, #224]	@ (800423c <HAL_GPIO_Init+0x2f8>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	43da      	mvns	r2, r3
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4013      	ands	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	2380      	movs	r3, #128	@ 0x80
 8004170:	035b      	lsls	r3, r3, #13
 8004172:	4013      	ands	r3, r2
 8004174:	d003      	beq.n	800417e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800417e:	4b2f      	ldr	r3, [pc, #188]	@ (800423c <HAL_GPIO_Init+0x2f8>)
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004184:	4b2d      	ldr	r3, [pc, #180]	@ (800423c <HAL_GPIO_Init+0x2f8>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	43da      	mvns	r2, r3
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4013      	ands	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	2380      	movs	r3, #128	@ 0x80
 800419a:	039b      	lsls	r3, r3, #14
 800419c:	4013      	ands	r3, r2
 800419e:	d003      	beq.n	80041a8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80041a8:	4b24      	ldr	r3, [pc, #144]	@ (800423c <HAL_GPIO_Init+0x2f8>)
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80041ae:	4b23      	ldr	r3, [pc, #140]	@ (800423c <HAL_GPIO_Init+0x2f8>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	43da      	mvns	r2, r3
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4013      	ands	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	2380      	movs	r3, #128	@ 0x80
 80041c4:	029b      	lsls	r3, r3, #10
 80041c6:	4013      	ands	r3, r2
 80041c8:	d003      	beq.n	80041d2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80041d2:	4b1a      	ldr	r3, [pc, #104]	@ (800423c <HAL_GPIO_Init+0x2f8>)
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041d8:	4b18      	ldr	r3, [pc, #96]	@ (800423c <HAL_GPIO_Init+0x2f8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	43da      	mvns	r2, r3
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4013      	ands	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	2380      	movs	r3, #128	@ 0x80
 80041ee:	025b      	lsls	r3, r3, #9
 80041f0:	4013      	ands	r3, r2
 80041f2:	d003      	beq.n	80041fc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80041fc:	4b0f      	ldr	r3, [pc, #60]	@ (800423c <HAL_GPIO_Init+0x2f8>)
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	3301      	adds	r3, #1
 8004206:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	40da      	lsrs	r2, r3
 8004210:	1e13      	subs	r3, r2, #0
 8004212:	d000      	beq.n	8004216 <HAL_GPIO_Init+0x2d2>
 8004214:	e6a2      	b.n	8003f5c <HAL_GPIO_Init+0x18>
  }
}
 8004216:	46c0      	nop			@ (mov r8, r8)
 8004218:	46c0      	nop			@ (mov r8, r8)
 800421a:	46bd      	mov	sp, r7
 800421c:	b006      	add	sp, #24
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40021000 	.word	0x40021000
 8004224:	40010000 	.word	0x40010000
 8004228:	50000400 	.word	0x50000400
 800422c:	50000800 	.word	0x50000800
 8004230:	50000c00 	.word	0x50000c00
 8004234:	50001000 	.word	0x50001000
 8004238:	50001c00 	.word	0x50001c00
 800423c:	40010400 	.word	0x40010400

08004240 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	0008      	movs	r0, r1
 800424a:	0011      	movs	r1, r2
 800424c:	1cbb      	adds	r3, r7, #2
 800424e:	1c02      	adds	r2, r0, #0
 8004250:	801a      	strh	r2, [r3, #0]
 8004252:	1c7b      	adds	r3, r7, #1
 8004254:	1c0a      	adds	r2, r1, #0
 8004256:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004258:	1c7b      	adds	r3, r7, #1
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d004      	beq.n	800426a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004260:	1cbb      	adds	r3, r7, #2
 8004262:	881a      	ldrh	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004268:	e003      	b.n	8004272 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800426a:	1cbb      	adds	r3, r7, #2
 800426c:	881a      	ldrh	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004272:	46c0      	nop			@ (mov r8, r8)
 8004274:	46bd      	mov	sp, r7
 8004276:	b002      	add	sp, #8
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800427c:	b5b0      	push	{r4, r5, r7, lr}
 800427e:	b08a      	sub	sp, #40	@ 0x28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d102      	bne.n	8004290 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	f000 fbbf 	bl	8004a0e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004290:	4bc9      	ldr	r3, [pc, #804]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	220c      	movs	r2, #12
 8004296:	4013      	ands	r3, r2
 8004298:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800429a:	4bc7      	ldr	r3, [pc, #796]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	2380      	movs	r3, #128	@ 0x80
 80042a0:	025b      	lsls	r3, r3, #9
 80042a2:	4013      	ands	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2201      	movs	r2, #1
 80042ac:	4013      	ands	r3, r2
 80042ae:	d100      	bne.n	80042b2 <HAL_RCC_OscConfig+0x36>
 80042b0:	e07e      	b.n	80043b0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d007      	beq.n	80042c8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	2b0c      	cmp	r3, #12
 80042bc:	d112      	bne.n	80042e4 <HAL_RCC_OscConfig+0x68>
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	2380      	movs	r3, #128	@ 0x80
 80042c2:	025b      	lsls	r3, r3, #9
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d10d      	bne.n	80042e4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c8:	4bbb      	ldr	r3, [pc, #748]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	2380      	movs	r3, #128	@ 0x80
 80042ce:	029b      	lsls	r3, r3, #10
 80042d0:	4013      	ands	r3, r2
 80042d2:	d100      	bne.n	80042d6 <HAL_RCC_OscConfig+0x5a>
 80042d4:	e06b      	b.n	80043ae <HAL_RCC_OscConfig+0x132>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d167      	bne.n	80043ae <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	f000 fb95 	bl	8004a0e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	2380      	movs	r3, #128	@ 0x80
 80042ea:	025b      	lsls	r3, r3, #9
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d107      	bne.n	8004300 <HAL_RCC_OscConfig+0x84>
 80042f0:	4bb1      	ldr	r3, [pc, #708]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	4bb0      	ldr	r3, [pc, #704]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 80042f6:	2180      	movs	r1, #128	@ 0x80
 80042f8:	0249      	lsls	r1, r1, #9
 80042fa:	430a      	orrs	r2, r1
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	e027      	b.n	8004350 <HAL_RCC_OscConfig+0xd4>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	23a0      	movs	r3, #160	@ 0xa0
 8004306:	02db      	lsls	r3, r3, #11
 8004308:	429a      	cmp	r2, r3
 800430a:	d10e      	bne.n	800432a <HAL_RCC_OscConfig+0xae>
 800430c:	4baa      	ldr	r3, [pc, #680]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	4ba9      	ldr	r3, [pc, #676]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 8004312:	2180      	movs	r1, #128	@ 0x80
 8004314:	02c9      	lsls	r1, r1, #11
 8004316:	430a      	orrs	r2, r1
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	4ba7      	ldr	r3, [pc, #668]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4ba6      	ldr	r3, [pc, #664]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 8004320:	2180      	movs	r1, #128	@ 0x80
 8004322:	0249      	lsls	r1, r1, #9
 8004324:	430a      	orrs	r2, r1
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	e012      	b.n	8004350 <HAL_RCC_OscConfig+0xd4>
 800432a:	4ba3      	ldr	r3, [pc, #652]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	4ba2      	ldr	r3, [pc, #648]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 8004330:	49a2      	ldr	r1, [pc, #648]	@ (80045bc <HAL_RCC_OscConfig+0x340>)
 8004332:	400a      	ands	r2, r1
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	4ba0      	ldr	r3, [pc, #640]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	2380      	movs	r3, #128	@ 0x80
 800433c:	025b      	lsls	r3, r3, #9
 800433e:	4013      	ands	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4b9c      	ldr	r3, [pc, #624]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	4b9b      	ldr	r3, [pc, #620]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 800434a:	499d      	ldr	r1, [pc, #628]	@ (80045c0 <HAL_RCC_OscConfig+0x344>)
 800434c:	400a      	ands	r2, r1
 800434e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d015      	beq.n	8004384 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004358:	f7ff f970 	bl	800363c <HAL_GetTick>
 800435c:	0003      	movs	r3, r0
 800435e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004360:	e009      	b.n	8004376 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004362:	f7ff f96b 	bl	800363c <HAL_GetTick>
 8004366:	0002      	movs	r2, r0
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b64      	cmp	r3, #100	@ 0x64
 800436e:	d902      	bls.n	8004376 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	f000 fb4c 	bl	8004a0e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004376:	4b90      	ldr	r3, [pc, #576]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	2380      	movs	r3, #128	@ 0x80
 800437c:	029b      	lsls	r3, r3, #10
 800437e:	4013      	ands	r3, r2
 8004380:	d0ef      	beq.n	8004362 <HAL_RCC_OscConfig+0xe6>
 8004382:	e015      	b.n	80043b0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004384:	f7ff f95a 	bl	800363c <HAL_GetTick>
 8004388:	0003      	movs	r3, r0
 800438a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800438c:	e008      	b.n	80043a0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800438e:	f7ff f955 	bl	800363c <HAL_GetTick>
 8004392:	0002      	movs	r2, r0
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b64      	cmp	r3, #100	@ 0x64
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e336      	b.n	8004a0e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043a0:	4b85      	ldr	r3, [pc, #532]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	2380      	movs	r3, #128	@ 0x80
 80043a6:	029b      	lsls	r3, r3, #10
 80043a8:	4013      	ands	r3, r2
 80043aa:	d1f0      	bne.n	800438e <HAL_RCC_OscConfig+0x112>
 80043ac:	e000      	b.n	80043b0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ae:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2202      	movs	r2, #2
 80043b6:	4013      	ands	r3, r2
 80043b8:	d100      	bne.n	80043bc <HAL_RCC_OscConfig+0x140>
 80043ba:	e099      	b.n	80044f0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80043c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c4:	2220      	movs	r2, #32
 80043c6:	4013      	ands	r3, r2
 80043c8:	d009      	beq.n	80043de <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80043ca:	4b7b      	ldr	r3, [pc, #492]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	4b7a      	ldr	r3, [pc, #488]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 80043d0:	2120      	movs	r1, #32
 80043d2:	430a      	orrs	r2, r1
 80043d4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	2220      	movs	r2, #32
 80043da:	4393      	bics	r3, r2
 80043dc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	2b0c      	cmp	r3, #12
 80043e8:	d13e      	bne.n	8004468 <HAL_RCC_OscConfig+0x1ec>
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d13b      	bne.n	8004468 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80043f0:	4b71      	ldr	r3, [pc, #452]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2204      	movs	r2, #4
 80043f6:	4013      	ands	r3, r2
 80043f8:	d004      	beq.n	8004404 <HAL_RCC_OscConfig+0x188>
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e304      	b.n	8004a0e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004404:	4b6c      	ldr	r3, [pc, #432]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	4a6e      	ldr	r2, [pc, #440]	@ (80045c4 <HAL_RCC_OscConfig+0x348>)
 800440a:	4013      	ands	r3, r2
 800440c:	0019      	movs	r1, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	021a      	lsls	r2, r3, #8
 8004414:	4b68      	ldr	r3, [pc, #416]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 8004416:	430a      	orrs	r2, r1
 8004418:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800441a:	4b67      	ldr	r3, [pc, #412]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2209      	movs	r2, #9
 8004420:	4393      	bics	r3, r2
 8004422:	0019      	movs	r1, r3
 8004424:	4b64      	ldr	r3, [pc, #400]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 8004426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004428:	430a      	orrs	r2, r1
 800442a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800442c:	f000 fc42 	bl	8004cb4 <HAL_RCC_GetSysClockFreq>
 8004430:	0001      	movs	r1, r0
 8004432:	4b61      	ldr	r3, [pc, #388]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	091b      	lsrs	r3, r3, #4
 8004438:	220f      	movs	r2, #15
 800443a:	4013      	ands	r3, r2
 800443c:	4a62      	ldr	r2, [pc, #392]	@ (80045c8 <HAL_RCC_OscConfig+0x34c>)
 800443e:	5cd3      	ldrb	r3, [r2, r3]
 8004440:	000a      	movs	r2, r1
 8004442:	40da      	lsrs	r2, r3
 8004444:	4b61      	ldr	r3, [pc, #388]	@ (80045cc <HAL_RCC_OscConfig+0x350>)
 8004446:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004448:	4b61      	ldr	r3, [pc, #388]	@ (80045d0 <HAL_RCC_OscConfig+0x354>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2513      	movs	r5, #19
 800444e:	197c      	adds	r4, r7, r5
 8004450:	0018      	movs	r0, r3
 8004452:	f7ff f8ad 	bl	80035b0 <HAL_InitTick>
 8004456:	0003      	movs	r3, r0
 8004458:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800445a:	197b      	adds	r3, r7, r5
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d046      	beq.n	80044f0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8004462:	197b      	adds	r3, r7, r5
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	e2d2      	b.n	8004a0e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446a:	2b00      	cmp	r3, #0
 800446c:	d027      	beq.n	80044be <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800446e:	4b52      	ldr	r3, [pc, #328]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2209      	movs	r2, #9
 8004474:	4393      	bics	r3, r2
 8004476:	0019      	movs	r1, r3
 8004478:	4b4f      	ldr	r3, [pc, #316]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 800447a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800447c:	430a      	orrs	r2, r1
 800447e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004480:	f7ff f8dc 	bl	800363c <HAL_GetTick>
 8004484:	0003      	movs	r3, r0
 8004486:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800448a:	f7ff f8d7 	bl	800363c <HAL_GetTick>
 800448e:	0002      	movs	r2, r0
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e2b8      	b.n	8004a0e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800449c:	4b46      	ldr	r3, [pc, #280]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2204      	movs	r2, #4
 80044a2:	4013      	ands	r3, r2
 80044a4:	d0f1      	beq.n	800448a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a6:	4b44      	ldr	r3, [pc, #272]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	4a46      	ldr	r2, [pc, #280]	@ (80045c4 <HAL_RCC_OscConfig+0x348>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	0019      	movs	r1, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	021a      	lsls	r2, r3, #8
 80044b6:	4b40      	ldr	r3, [pc, #256]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 80044b8:	430a      	orrs	r2, r1
 80044ba:	605a      	str	r2, [r3, #4]
 80044bc:	e018      	b.n	80044f0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044be:	4b3e      	ldr	r3, [pc, #248]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	4b3d      	ldr	r3, [pc, #244]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 80044c4:	2101      	movs	r1, #1
 80044c6:	438a      	bics	r2, r1
 80044c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ca:	f7ff f8b7 	bl	800363c <HAL_GetTick>
 80044ce:	0003      	movs	r3, r0
 80044d0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044d4:	f7ff f8b2 	bl	800363c <HAL_GetTick>
 80044d8:	0002      	movs	r2, r0
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e293      	b.n	8004a0e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044e6:	4b34      	ldr	r3, [pc, #208]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2204      	movs	r2, #4
 80044ec:	4013      	ands	r3, r2
 80044ee:	d1f1      	bne.n	80044d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2210      	movs	r2, #16
 80044f6:	4013      	ands	r3, r2
 80044f8:	d100      	bne.n	80044fc <HAL_RCC_OscConfig+0x280>
 80044fa:	e0a2      	b.n	8004642 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d140      	bne.n	8004584 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004502:	4b2d      	ldr	r3, [pc, #180]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	2380      	movs	r3, #128	@ 0x80
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4013      	ands	r3, r2
 800450c:	d005      	beq.n	800451a <HAL_RCC_OscConfig+0x29e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e279      	b.n	8004a0e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800451a:	4b27      	ldr	r3, [pc, #156]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	4a2d      	ldr	r2, [pc, #180]	@ (80045d4 <HAL_RCC_OscConfig+0x358>)
 8004520:	4013      	ands	r3, r2
 8004522:	0019      	movs	r1, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004528:	4b23      	ldr	r3, [pc, #140]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 800452a:	430a      	orrs	r2, r1
 800452c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800452e:	4b22      	ldr	r3, [pc, #136]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	021b      	lsls	r3, r3, #8
 8004534:	0a19      	lsrs	r1, r3, #8
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	061a      	lsls	r2, r3, #24
 800453c:	4b1e      	ldr	r3, [pc, #120]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004546:	0b5b      	lsrs	r3, r3, #13
 8004548:	3301      	adds	r3, #1
 800454a:	2280      	movs	r2, #128	@ 0x80
 800454c:	0212      	lsls	r2, r2, #8
 800454e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004550:	4b19      	ldr	r3, [pc, #100]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	091b      	lsrs	r3, r3, #4
 8004556:	210f      	movs	r1, #15
 8004558:	400b      	ands	r3, r1
 800455a:	491b      	ldr	r1, [pc, #108]	@ (80045c8 <HAL_RCC_OscConfig+0x34c>)
 800455c:	5ccb      	ldrb	r3, [r1, r3]
 800455e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004560:	4b1a      	ldr	r3, [pc, #104]	@ (80045cc <HAL_RCC_OscConfig+0x350>)
 8004562:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004564:	4b1a      	ldr	r3, [pc, #104]	@ (80045d0 <HAL_RCC_OscConfig+0x354>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2513      	movs	r5, #19
 800456a:	197c      	adds	r4, r7, r5
 800456c:	0018      	movs	r0, r3
 800456e:	f7ff f81f 	bl	80035b0 <HAL_InitTick>
 8004572:	0003      	movs	r3, r0
 8004574:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004576:	197b      	adds	r3, r7, r5
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d061      	beq.n	8004642 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800457e:	197b      	adds	r3, r7, r5
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	e244      	b.n	8004a0e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d040      	beq.n	800460e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800458c:	4b0a      	ldr	r3, [pc, #40]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4b09      	ldr	r3, [pc, #36]	@ (80045b8 <HAL_RCC_OscConfig+0x33c>)
 8004592:	2180      	movs	r1, #128	@ 0x80
 8004594:	0049      	lsls	r1, r1, #1
 8004596:	430a      	orrs	r2, r1
 8004598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459a:	f7ff f84f 	bl	800363c <HAL_GetTick>
 800459e:	0003      	movs	r3, r0
 80045a0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045a2:	e019      	b.n	80045d8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045a4:	f7ff f84a 	bl	800363c <HAL_GetTick>
 80045a8:	0002      	movs	r2, r0
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d912      	bls.n	80045d8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e22b      	b.n	8004a0e <HAL_RCC_OscConfig+0x792>
 80045b6:	46c0      	nop			@ (mov r8, r8)
 80045b8:	40021000 	.word	0x40021000
 80045bc:	fffeffff 	.word	0xfffeffff
 80045c0:	fffbffff 	.word	0xfffbffff
 80045c4:	ffffe0ff 	.word	0xffffe0ff
 80045c8:	08009d3c 	.word	0x08009d3c
 80045cc:	20000004 	.word	0x20000004
 80045d0:	20000008 	.word	0x20000008
 80045d4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045d8:	4bca      	ldr	r3, [pc, #808]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	2380      	movs	r3, #128	@ 0x80
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4013      	ands	r3, r2
 80045e2:	d0df      	beq.n	80045a4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045e4:	4bc7      	ldr	r3, [pc, #796]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	4ac7      	ldr	r2, [pc, #796]	@ (8004908 <HAL_RCC_OscConfig+0x68c>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	0019      	movs	r1, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045f2:	4bc4      	ldr	r3, [pc, #784]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 80045f4:	430a      	orrs	r2, r1
 80045f6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045f8:	4bc2      	ldr	r3, [pc, #776]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	021b      	lsls	r3, r3, #8
 80045fe:	0a19      	lsrs	r1, r3, #8
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	061a      	lsls	r2, r3, #24
 8004606:	4bbf      	ldr	r3, [pc, #764]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 8004608:	430a      	orrs	r2, r1
 800460a:	605a      	str	r2, [r3, #4]
 800460c:	e019      	b.n	8004642 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800460e:	4bbd      	ldr	r3, [pc, #756]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	4bbc      	ldr	r3, [pc, #752]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 8004614:	49bd      	ldr	r1, [pc, #756]	@ (800490c <HAL_RCC_OscConfig+0x690>)
 8004616:	400a      	ands	r2, r1
 8004618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461a:	f7ff f80f 	bl	800363c <HAL_GetTick>
 800461e:	0003      	movs	r3, r0
 8004620:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004624:	f7ff f80a 	bl	800363c <HAL_GetTick>
 8004628:	0002      	movs	r2, r0
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e1eb      	b.n	8004a0e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004636:	4bb3      	ldr	r3, [pc, #716]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	2380      	movs	r3, #128	@ 0x80
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4013      	ands	r3, r2
 8004640:	d1f0      	bne.n	8004624 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2208      	movs	r2, #8
 8004648:	4013      	ands	r3, r2
 800464a:	d036      	beq.n	80046ba <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d019      	beq.n	8004688 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004654:	4bab      	ldr	r3, [pc, #684]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 8004656:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004658:	4baa      	ldr	r3, [pc, #680]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 800465a:	2101      	movs	r1, #1
 800465c:	430a      	orrs	r2, r1
 800465e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004660:	f7fe ffec 	bl	800363c <HAL_GetTick>
 8004664:	0003      	movs	r3, r0
 8004666:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800466a:	f7fe ffe7 	bl	800363c <HAL_GetTick>
 800466e:	0002      	movs	r2, r0
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e1c8      	b.n	8004a0e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800467c:	4ba1      	ldr	r3, [pc, #644]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 800467e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004680:	2202      	movs	r2, #2
 8004682:	4013      	ands	r3, r2
 8004684:	d0f1      	beq.n	800466a <HAL_RCC_OscConfig+0x3ee>
 8004686:	e018      	b.n	80046ba <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004688:	4b9e      	ldr	r3, [pc, #632]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 800468a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800468c:	4b9d      	ldr	r3, [pc, #628]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 800468e:	2101      	movs	r1, #1
 8004690:	438a      	bics	r2, r1
 8004692:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004694:	f7fe ffd2 	bl	800363c <HAL_GetTick>
 8004698:	0003      	movs	r3, r0
 800469a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800469e:	f7fe ffcd 	bl	800363c <HAL_GetTick>
 80046a2:	0002      	movs	r2, r0
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e1ae      	b.n	8004a0e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046b0:	4b94      	ldr	r3, [pc, #592]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 80046b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b4:	2202      	movs	r2, #2
 80046b6:	4013      	ands	r3, r2
 80046b8:	d1f1      	bne.n	800469e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2204      	movs	r2, #4
 80046c0:	4013      	ands	r3, r2
 80046c2:	d100      	bne.n	80046c6 <HAL_RCC_OscConfig+0x44a>
 80046c4:	e0ae      	b.n	8004824 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c6:	2023      	movs	r0, #35	@ 0x23
 80046c8:	183b      	adds	r3, r7, r0
 80046ca:	2200      	movs	r2, #0
 80046cc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ce:	4b8d      	ldr	r3, [pc, #564]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 80046d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046d2:	2380      	movs	r3, #128	@ 0x80
 80046d4:	055b      	lsls	r3, r3, #21
 80046d6:	4013      	ands	r3, r2
 80046d8:	d109      	bne.n	80046ee <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046da:	4b8a      	ldr	r3, [pc, #552]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 80046dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046de:	4b89      	ldr	r3, [pc, #548]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 80046e0:	2180      	movs	r1, #128	@ 0x80
 80046e2:	0549      	lsls	r1, r1, #21
 80046e4:	430a      	orrs	r2, r1
 80046e6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80046e8:	183b      	adds	r3, r7, r0
 80046ea:	2201      	movs	r2, #1
 80046ec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ee:	4b88      	ldr	r3, [pc, #544]	@ (8004910 <HAL_RCC_OscConfig+0x694>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	2380      	movs	r3, #128	@ 0x80
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	4013      	ands	r3, r2
 80046f8:	d11a      	bne.n	8004730 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046fa:	4b85      	ldr	r3, [pc, #532]	@ (8004910 <HAL_RCC_OscConfig+0x694>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	4b84      	ldr	r3, [pc, #528]	@ (8004910 <HAL_RCC_OscConfig+0x694>)
 8004700:	2180      	movs	r1, #128	@ 0x80
 8004702:	0049      	lsls	r1, r1, #1
 8004704:	430a      	orrs	r2, r1
 8004706:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004708:	f7fe ff98 	bl	800363c <HAL_GetTick>
 800470c:	0003      	movs	r3, r0
 800470e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004712:	f7fe ff93 	bl	800363c <HAL_GetTick>
 8004716:	0002      	movs	r2, r0
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b64      	cmp	r3, #100	@ 0x64
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e174      	b.n	8004a0e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004724:	4b7a      	ldr	r3, [pc, #488]	@ (8004910 <HAL_RCC_OscConfig+0x694>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	2380      	movs	r3, #128	@ 0x80
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	4013      	ands	r3, r2
 800472e:	d0f0      	beq.n	8004712 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	2380      	movs	r3, #128	@ 0x80
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	429a      	cmp	r2, r3
 800473a:	d107      	bne.n	800474c <HAL_RCC_OscConfig+0x4d0>
 800473c:	4b71      	ldr	r3, [pc, #452]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 800473e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004740:	4b70      	ldr	r3, [pc, #448]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 8004742:	2180      	movs	r1, #128	@ 0x80
 8004744:	0049      	lsls	r1, r1, #1
 8004746:	430a      	orrs	r2, r1
 8004748:	651a      	str	r2, [r3, #80]	@ 0x50
 800474a:	e031      	b.n	80047b0 <HAL_RCC_OscConfig+0x534>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10c      	bne.n	800476e <HAL_RCC_OscConfig+0x4f2>
 8004754:	4b6b      	ldr	r3, [pc, #428]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 8004756:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004758:	4b6a      	ldr	r3, [pc, #424]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 800475a:	496c      	ldr	r1, [pc, #432]	@ (800490c <HAL_RCC_OscConfig+0x690>)
 800475c:	400a      	ands	r2, r1
 800475e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004760:	4b68      	ldr	r3, [pc, #416]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 8004762:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004764:	4b67      	ldr	r3, [pc, #412]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 8004766:	496b      	ldr	r1, [pc, #428]	@ (8004914 <HAL_RCC_OscConfig+0x698>)
 8004768:	400a      	ands	r2, r1
 800476a:	651a      	str	r2, [r3, #80]	@ 0x50
 800476c:	e020      	b.n	80047b0 <HAL_RCC_OscConfig+0x534>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	23a0      	movs	r3, #160	@ 0xa0
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	429a      	cmp	r2, r3
 8004778:	d10e      	bne.n	8004798 <HAL_RCC_OscConfig+0x51c>
 800477a:	4b62      	ldr	r3, [pc, #392]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 800477c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800477e:	4b61      	ldr	r3, [pc, #388]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 8004780:	2180      	movs	r1, #128	@ 0x80
 8004782:	00c9      	lsls	r1, r1, #3
 8004784:	430a      	orrs	r2, r1
 8004786:	651a      	str	r2, [r3, #80]	@ 0x50
 8004788:	4b5e      	ldr	r3, [pc, #376]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 800478a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800478c:	4b5d      	ldr	r3, [pc, #372]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 800478e:	2180      	movs	r1, #128	@ 0x80
 8004790:	0049      	lsls	r1, r1, #1
 8004792:	430a      	orrs	r2, r1
 8004794:	651a      	str	r2, [r3, #80]	@ 0x50
 8004796:	e00b      	b.n	80047b0 <HAL_RCC_OscConfig+0x534>
 8004798:	4b5a      	ldr	r3, [pc, #360]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 800479a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800479c:	4b59      	ldr	r3, [pc, #356]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 800479e:	495b      	ldr	r1, [pc, #364]	@ (800490c <HAL_RCC_OscConfig+0x690>)
 80047a0:	400a      	ands	r2, r1
 80047a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80047a4:	4b57      	ldr	r3, [pc, #348]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 80047a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80047a8:	4b56      	ldr	r3, [pc, #344]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 80047aa:	495a      	ldr	r1, [pc, #360]	@ (8004914 <HAL_RCC_OscConfig+0x698>)
 80047ac:	400a      	ands	r2, r1
 80047ae:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d015      	beq.n	80047e4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b8:	f7fe ff40 	bl	800363c <HAL_GetTick>
 80047bc:	0003      	movs	r3, r0
 80047be:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047c0:	e009      	b.n	80047d6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047c2:	f7fe ff3b 	bl	800363c <HAL_GetTick>
 80047c6:	0002      	movs	r2, r0
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	4a52      	ldr	r2, [pc, #328]	@ (8004918 <HAL_RCC_OscConfig+0x69c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e11b      	b.n	8004a0e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047d6:	4b4b      	ldr	r3, [pc, #300]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 80047d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80047da:	2380      	movs	r3, #128	@ 0x80
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4013      	ands	r3, r2
 80047e0:	d0ef      	beq.n	80047c2 <HAL_RCC_OscConfig+0x546>
 80047e2:	e014      	b.n	800480e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e4:	f7fe ff2a 	bl	800363c <HAL_GetTick>
 80047e8:	0003      	movs	r3, r0
 80047ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047ec:	e009      	b.n	8004802 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047ee:	f7fe ff25 	bl	800363c <HAL_GetTick>
 80047f2:	0002      	movs	r2, r0
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	4a47      	ldr	r2, [pc, #284]	@ (8004918 <HAL_RCC_OscConfig+0x69c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e105      	b.n	8004a0e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004802:	4b40      	ldr	r3, [pc, #256]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 8004804:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004806:	2380      	movs	r3, #128	@ 0x80
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4013      	ands	r3, r2
 800480c:	d1ef      	bne.n	80047ee <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800480e:	2323      	movs	r3, #35	@ 0x23
 8004810:	18fb      	adds	r3, r7, r3
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d105      	bne.n	8004824 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004818:	4b3a      	ldr	r3, [pc, #232]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 800481a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800481c:	4b39      	ldr	r3, [pc, #228]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 800481e:	493f      	ldr	r1, [pc, #252]	@ (800491c <HAL_RCC_OscConfig+0x6a0>)
 8004820:	400a      	ands	r2, r1
 8004822:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2220      	movs	r2, #32
 800482a:	4013      	ands	r3, r2
 800482c:	d049      	beq.n	80048c2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d026      	beq.n	8004884 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004836:	4b33      	ldr	r3, [pc, #204]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	4b32      	ldr	r3, [pc, #200]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 800483c:	2101      	movs	r1, #1
 800483e:	430a      	orrs	r2, r1
 8004840:	609a      	str	r2, [r3, #8]
 8004842:	4b30      	ldr	r3, [pc, #192]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 8004844:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004846:	4b2f      	ldr	r3, [pc, #188]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 8004848:	2101      	movs	r1, #1
 800484a:	430a      	orrs	r2, r1
 800484c:	635a      	str	r2, [r3, #52]	@ 0x34
 800484e:	4b34      	ldr	r3, [pc, #208]	@ (8004920 <HAL_RCC_OscConfig+0x6a4>)
 8004850:	6a1a      	ldr	r2, [r3, #32]
 8004852:	4b33      	ldr	r3, [pc, #204]	@ (8004920 <HAL_RCC_OscConfig+0x6a4>)
 8004854:	2180      	movs	r1, #128	@ 0x80
 8004856:	0189      	lsls	r1, r1, #6
 8004858:	430a      	orrs	r2, r1
 800485a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485c:	f7fe feee 	bl	800363c <HAL_GetTick>
 8004860:	0003      	movs	r3, r0
 8004862:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004866:	f7fe fee9 	bl	800363c <HAL_GetTick>
 800486a:	0002      	movs	r2, r0
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e0ca      	b.n	8004a0e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004878:	4b22      	ldr	r3, [pc, #136]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2202      	movs	r2, #2
 800487e:	4013      	ands	r3, r2
 8004880:	d0f1      	beq.n	8004866 <HAL_RCC_OscConfig+0x5ea>
 8004882:	e01e      	b.n	80048c2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004884:	4b1f      	ldr	r3, [pc, #124]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	4b1e      	ldr	r3, [pc, #120]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 800488a:	2101      	movs	r1, #1
 800488c:	438a      	bics	r2, r1
 800488e:	609a      	str	r2, [r3, #8]
 8004890:	4b23      	ldr	r3, [pc, #140]	@ (8004920 <HAL_RCC_OscConfig+0x6a4>)
 8004892:	6a1a      	ldr	r2, [r3, #32]
 8004894:	4b22      	ldr	r3, [pc, #136]	@ (8004920 <HAL_RCC_OscConfig+0x6a4>)
 8004896:	4923      	ldr	r1, [pc, #140]	@ (8004924 <HAL_RCC_OscConfig+0x6a8>)
 8004898:	400a      	ands	r2, r1
 800489a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489c:	f7fe fece 	bl	800363c <HAL_GetTick>
 80048a0:	0003      	movs	r3, r0
 80048a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048a6:	f7fe fec9 	bl	800363c <HAL_GetTick>
 80048aa:	0002      	movs	r2, r0
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e0aa      	b.n	8004a0e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048b8:	4b12      	ldr	r3, [pc, #72]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2202      	movs	r2, #2
 80048be:	4013      	ands	r3, r2
 80048c0:	d1f1      	bne.n	80048a6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d100      	bne.n	80048cc <HAL_RCC_OscConfig+0x650>
 80048ca:	e09f      	b.n	8004a0c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	2b0c      	cmp	r3, #12
 80048d0:	d100      	bne.n	80048d4 <HAL_RCC_OscConfig+0x658>
 80048d2:	e078      	b.n	80049c6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d159      	bne.n	8004990 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048dc:	4b09      	ldr	r3, [pc, #36]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4b08      	ldr	r3, [pc, #32]	@ (8004904 <HAL_RCC_OscConfig+0x688>)
 80048e2:	4911      	ldr	r1, [pc, #68]	@ (8004928 <HAL_RCC_OscConfig+0x6ac>)
 80048e4:	400a      	ands	r2, r1
 80048e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e8:	f7fe fea8 	bl	800363c <HAL_GetTick>
 80048ec:	0003      	movs	r3, r0
 80048ee:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80048f0:	e01c      	b.n	800492c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f2:	f7fe fea3 	bl	800363c <HAL_GetTick>
 80048f6:	0002      	movs	r2, r0
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d915      	bls.n	800492c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e084      	b.n	8004a0e <HAL_RCC_OscConfig+0x792>
 8004904:	40021000 	.word	0x40021000
 8004908:	ffff1fff 	.word	0xffff1fff
 800490c:	fffffeff 	.word	0xfffffeff
 8004910:	40007000 	.word	0x40007000
 8004914:	fffffbff 	.word	0xfffffbff
 8004918:	00001388 	.word	0x00001388
 800491c:	efffffff 	.word	0xefffffff
 8004920:	40010000 	.word	0x40010000
 8004924:	ffffdfff 	.word	0xffffdfff
 8004928:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800492c:	4b3a      	ldr	r3, [pc, #232]	@ (8004a18 <HAL_RCC_OscConfig+0x79c>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	2380      	movs	r3, #128	@ 0x80
 8004932:	049b      	lsls	r3, r3, #18
 8004934:	4013      	ands	r3, r2
 8004936:	d1dc      	bne.n	80048f2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004938:	4b37      	ldr	r3, [pc, #220]	@ (8004a18 <HAL_RCC_OscConfig+0x79c>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	4a37      	ldr	r2, [pc, #220]	@ (8004a1c <HAL_RCC_OscConfig+0x7a0>)
 800493e:	4013      	ands	r3, r2
 8004940:	0019      	movs	r1, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004950:	431a      	orrs	r2, r3
 8004952:	4b31      	ldr	r3, [pc, #196]	@ (8004a18 <HAL_RCC_OscConfig+0x79c>)
 8004954:	430a      	orrs	r2, r1
 8004956:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004958:	4b2f      	ldr	r3, [pc, #188]	@ (8004a18 <HAL_RCC_OscConfig+0x79c>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	4b2e      	ldr	r3, [pc, #184]	@ (8004a18 <HAL_RCC_OscConfig+0x79c>)
 800495e:	2180      	movs	r1, #128	@ 0x80
 8004960:	0449      	lsls	r1, r1, #17
 8004962:	430a      	orrs	r2, r1
 8004964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004966:	f7fe fe69 	bl	800363c <HAL_GetTick>
 800496a:	0003      	movs	r3, r0
 800496c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004970:	f7fe fe64 	bl	800363c <HAL_GetTick>
 8004974:	0002      	movs	r2, r0
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e045      	b.n	8004a0e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004982:	4b25      	ldr	r3, [pc, #148]	@ (8004a18 <HAL_RCC_OscConfig+0x79c>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	2380      	movs	r3, #128	@ 0x80
 8004988:	049b      	lsls	r3, r3, #18
 800498a:	4013      	ands	r3, r2
 800498c:	d0f0      	beq.n	8004970 <HAL_RCC_OscConfig+0x6f4>
 800498e:	e03d      	b.n	8004a0c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004990:	4b21      	ldr	r3, [pc, #132]	@ (8004a18 <HAL_RCC_OscConfig+0x79c>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	4b20      	ldr	r3, [pc, #128]	@ (8004a18 <HAL_RCC_OscConfig+0x79c>)
 8004996:	4922      	ldr	r1, [pc, #136]	@ (8004a20 <HAL_RCC_OscConfig+0x7a4>)
 8004998:	400a      	ands	r2, r1
 800499a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499c:	f7fe fe4e 	bl	800363c <HAL_GetTick>
 80049a0:	0003      	movs	r3, r0
 80049a2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a6:	f7fe fe49 	bl	800363c <HAL_GetTick>
 80049aa:	0002      	movs	r2, r0
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e02a      	b.n	8004a0e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80049b8:	4b17      	ldr	r3, [pc, #92]	@ (8004a18 <HAL_RCC_OscConfig+0x79c>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	2380      	movs	r3, #128	@ 0x80
 80049be:	049b      	lsls	r3, r3, #18
 80049c0:	4013      	ands	r3, r2
 80049c2:	d1f0      	bne.n	80049a6 <HAL_RCC_OscConfig+0x72a>
 80049c4:	e022      	b.n	8004a0c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d101      	bne.n	80049d2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e01d      	b.n	8004a0e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049d2:	4b11      	ldr	r3, [pc, #68]	@ (8004a18 <HAL_RCC_OscConfig+0x79c>)
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	2380      	movs	r3, #128	@ 0x80
 80049dc:	025b      	lsls	r3, r3, #9
 80049de:	401a      	ands	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d10f      	bne.n	8004a08 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	23f0      	movs	r3, #240	@ 0xf0
 80049ec:	039b      	lsls	r3, r3, #14
 80049ee:	401a      	ands	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d107      	bne.n	8004a08 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	23c0      	movs	r3, #192	@ 0xc0
 80049fc:	041b      	lsls	r3, r3, #16
 80049fe:	401a      	ands	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	0018      	movs	r0, r3
 8004a10:	46bd      	mov	sp, r7
 8004a12:	b00a      	add	sp, #40	@ 0x28
 8004a14:	bdb0      	pop	{r4, r5, r7, pc}
 8004a16:	46c0      	nop			@ (mov r8, r8)
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	ff02ffff 	.word	0xff02ffff
 8004a20:	feffffff 	.word	0xfeffffff

08004a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a24:	b5b0      	push	{r4, r5, r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e128      	b.n	8004c8a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a38:	4b96      	ldr	r3, [pc, #600]	@ (8004c94 <HAL_RCC_ClockConfig+0x270>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	4013      	ands	r3, r2
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d91e      	bls.n	8004a84 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a46:	4b93      	ldr	r3, [pc, #588]	@ (8004c94 <HAL_RCC_ClockConfig+0x270>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	4393      	bics	r3, r2
 8004a4e:	0019      	movs	r1, r3
 8004a50:	4b90      	ldr	r3, [pc, #576]	@ (8004c94 <HAL_RCC_ClockConfig+0x270>)
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a58:	f7fe fdf0 	bl	800363c <HAL_GetTick>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a60:	e009      	b.n	8004a76 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a62:	f7fe fdeb 	bl	800363c <HAL_GetTick>
 8004a66:	0002      	movs	r2, r0
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	4a8a      	ldr	r2, [pc, #552]	@ (8004c98 <HAL_RCC_ClockConfig+0x274>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e109      	b.n	8004c8a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a76:	4b87      	ldr	r3, [pc, #540]	@ (8004c94 <HAL_RCC_ClockConfig+0x270>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d1ee      	bne.n	8004a62 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d009      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a8e:	4b83      	ldr	r3, [pc, #524]	@ (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	22f0      	movs	r2, #240	@ 0xf0
 8004a94:	4393      	bics	r3, r2
 8004a96:	0019      	movs	r1, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	4b7f      	ldr	r3, [pc, #508]	@ (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	d100      	bne.n	8004aae <HAL_RCC_ClockConfig+0x8a>
 8004aac:	e089      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d107      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ab6:	4b79      	ldr	r3, [pc, #484]	@ (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	2380      	movs	r3, #128	@ 0x80
 8004abc:	029b      	lsls	r3, r3, #10
 8004abe:	4013      	ands	r3, r2
 8004ac0:	d120      	bne.n	8004b04 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e0e1      	b.n	8004c8a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d107      	bne.n	8004ade <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ace:	4b73      	ldr	r3, [pc, #460]	@ (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	2380      	movs	r3, #128	@ 0x80
 8004ad4:	049b      	lsls	r3, r3, #18
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	d114      	bne.n	8004b04 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e0d5      	b.n	8004c8a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d106      	bne.n	8004af4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ae6:	4b6d      	ldr	r3, [pc, #436]	@ (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2204      	movs	r2, #4
 8004aec:	4013      	ands	r3, r2
 8004aee:	d109      	bne.n	8004b04 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0ca      	b.n	8004c8a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004af4:	4b69      	ldr	r3, [pc, #420]	@ (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	2380      	movs	r3, #128	@ 0x80
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4013      	ands	r3, r2
 8004afe:	d101      	bne.n	8004b04 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0c2      	b.n	8004c8a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b04:	4b65      	ldr	r3, [pc, #404]	@ (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	2203      	movs	r2, #3
 8004b0a:	4393      	bics	r3, r2
 8004b0c:	0019      	movs	r1, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	4b62      	ldr	r3, [pc, #392]	@ (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004b14:	430a      	orrs	r2, r1
 8004b16:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b18:	f7fe fd90 	bl	800363c <HAL_GetTick>
 8004b1c:	0003      	movs	r3, r0
 8004b1e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d111      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b28:	e009      	b.n	8004b3e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b2a:	f7fe fd87 	bl	800363c <HAL_GetTick>
 8004b2e:	0002      	movs	r2, r0
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	4a58      	ldr	r2, [pc, #352]	@ (8004c98 <HAL_RCC_ClockConfig+0x274>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e0a5      	b.n	8004c8a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b3e:	4b57      	ldr	r3, [pc, #348]	@ (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	220c      	movs	r2, #12
 8004b44:	4013      	ands	r3, r2
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d1ef      	bne.n	8004b2a <HAL_RCC_ClockConfig+0x106>
 8004b4a:	e03a      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d111      	bne.n	8004b78 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b54:	e009      	b.n	8004b6a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b56:	f7fe fd71 	bl	800363c <HAL_GetTick>
 8004b5a:	0002      	movs	r2, r0
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	4a4d      	ldr	r2, [pc, #308]	@ (8004c98 <HAL_RCC_ClockConfig+0x274>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e08f      	b.n	8004c8a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b6a:	4b4c      	ldr	r3, [pc, #304]	@ (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	220c      	movs	r2, #12
 8004b70:	4013      	ands	r3, r2
 8004b72:	2b0c      	cmp	r3, #12
 8004b74:	d1ef      	bne.n	8004b56 <HAL_RCC_ClockConfig+0x132>
 8004b76:	e024      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d11b      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b80:	e009      	b.n	8004b96 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b82:	f7fe fd5b 	bl	800363c <HAL_GetTick>
 8004b86:	0002      	movs	r2, r0
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	4a42      	ldr	r2, [pc, #264]	@ (8004c98 <HAL_RCC_ClockConfig+0x274>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e079      	b.n	8004c8a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b96:	4b41      	ldr	r3, [pc, #260]	@ (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	220c      	movs	r2, #12
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d1ef      	bne.n	8004b82 <HAL_RCC_ClockConfig+0x15e>
 8004ba2:	e00e      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba4:	f7fe fd4a 	bl	800363c <HAL_GetTick>
 8004ba8:	0002      	movs	r2, r0
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	4a3a      	ldr	r2, [pc, #232]	@ (8004c98 <HAL_RCC_ClockConfig+0x274>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e068      	b.n	8004c8a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004bb8:	4b38      	ldr	r3, [pc, #224]	@ (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	220c      	movs	r2, #12
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc2:	4b34      	ldr	r3, [pc, #208]	@ (8004c94 <HAL_RCC_ClockConfig+0x270>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	4013      	ands	r3, r2
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d21e      	bcs.n	8004c0e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd0:	4b30      	ldr	r3, [pc, #192]	@ (8004c94 <HAL_RCC_ClockConfig+0x270>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	4393      	bics	r3, r2
 8004bd8:	0019      	movs	r1, r3
 8004bda:	4b2e      	ldr	r3, [pc, #184]	@ (8004c94 <HAL_RCC_ClockConfig+0x270>)
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004be2:	f7fe fd2b 	bl	800363c <HAL_GetTick>
 8004be6:	0003      	movs	r3, r0
 8004be8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bea:	e009      	b.n	8004c00 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bec:	f7fe fd26 	bl	800363c <HAL_GetTick>
 8004bf0:	0002      	movs	r2, r0
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	4a28      	ldr	r2, [pc, #160]	@ (8004c98 <HAL_RCC_ClockConfig+0x274>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e044      	b.n	8004c8a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c00:	4b24      	ldr	r3, [pc, #144]	@ (8004c94 <HAL_RCC_ClockConfig+0x270>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2201      	movs	r2, #1
 8004c06:	4013      	ands	r3, r2
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d1ee      	bne.n	8004bec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2204      	movs	r2, #4
 8004c14:	4013      	ands	r3, r2
 8004c16:	d009      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c18:	4b20      	ldr	r3, [pc, #128]	@ (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	4a20      	ldr	r2, [pc, #128]	@ (8004ca0 <HAL_RCC_ClockConfig+0x27c>)
 8004c1e:	4013      	ands	r3, r2
 8004c20:	0019      	movs	r1, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	4b1d      	ldr	r3, [pc, #116]	@ (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2208      	movs	r2, #8
 8004c32:	4013      	ands	r3, r2
 8004c34:	d00a      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c36:	4b19      	ldr	r3, [pc, #100]	@ (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ca4 <HAL_RCC_ClockConfig+0x280>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	0019      	movs	r1, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	00da      	lsls	r2, r3, #3
 8004c46:	4b15      	ldr	r3, [pc, #84]	@ (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c4c:	f000 f832 	bl	8004cb4 <HAL_RCC_GetSysClockFreq>
 8004c50:	0001      	movs	r1, r0
 8004c52:	4b12      	ldr	r3, [pc, #72]	@ (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	091b      	lsrs	r3, r3, #4
 8004c58:	220f      	movs	r2, #15
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	4a12      	ldr	r2, [pc, #72]	@ (8004ca8 <HAL_RCC_ClockConfig+0x284>)
 8004c5e:	5cd3      	ldrb	r3, [r2, r3]
 8004c60:	000a      	movs	r2, r1
 8004c62:	40da      	lsrs	r2, r3
 8004c64:	4b11      	ldr	r3, [pc, #68]	@ (8004cac <HAL_RCC_ClockConfig+0x288>)
 8004c66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c68:	4b11      	ldr	r3, [pc, #68]	@ (8004cb0 <HAL_RCC_ClockConfig+0x28c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	250b      	movs	r5, #11
 8004c6e:	197c      	adds	r4, r7, r5
 8004c70:	0018      	movs	r0, r3
 8004c72:	f7fe fc9d 	bl	80035b0 <HAL_InitTick>
 8004c76:	0003      	movs	r3, r0
 8004c78:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004c7a:	197b      	adds	r3, r7, r5
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004c82:	197b      	adds	r3, r7, r5
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	e000      	b.n	8004c8a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	b004      	add	sp, #16
 8004c90:	bdb0      	pop	{r4, r5, r7, pc}
 8004c92:	46c0      	nop			@ (mov r8, r8)
 8004c94:	40022000 	.word	0x40022000
 8004c98:	00001388 	.word	0x00001388
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	fffff8ff 	.word	0xfffff8ff
 8004ca4:	ffffc7ff 	.word	0xffffc7ff
 8004ca8:	08009d3c 	.word	0x08009d3c
 8004cac:	20000004 	.word	0x20000004
 8004cb0:	20000008 	.word	0x20000008

08004cb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004cba:	4b3c      	ldr	r3, [pc, #240]	@ (8004dac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	220c      	movs	r2, #12
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b0c      	cmp	r3, #12
 8004cc8:	d013      	beq.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x3e>
 8004cca:	d85c      	bhi.n	8004d86 <HAL_RCC_GetSysClockFreq+0xd2>
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d002      	beq.n	8004cd6 <HAL_RCC_GetSysClockFreq+0x22>
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d00b      	beq.n	8004cec <HAL_RCC_GetSysClockFreq+0x38>
 8004cd4:	e057      	b.n	8004d86 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004cd6:	4b35      	ldr	r3, [pc, #212]	@ (8004dac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2210      	movs	r2, #16
 8004cdc:	4013      	ands	r3, r2
 8004cde:	d002      	beq.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004ce0:	4b33      	ldr	r3, [pc, #204]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ce2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004ce4:	e05d      	b.n	8004da2 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8004ce6:	4b33      	ldr	r3, [pc, #204]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004ce8:	613b      	str	r3, [r7, #16]
      break;
 8004cea:	e05a      	b.n	8004da2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cec:	4b32      	ldr	r3, [pc, #200]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004cee:	613b      	str	r3, [r7, #16]
      break;
 8004cf0:	e057      	b.n	8004da2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	0c9b      	lsrs	r3, r3, #18
 8004cf6:	220f      	movs	r2, #15
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	4a30      	ldr	r2, [pc, #192]	@ (8004dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004cfc:	5cd3      	ldrb	r3, [r2, r3]
 8004cfe:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	0d9b      	lsrs	r3, r3, #22
 8004d04:	2203      	movs	r2, #3
 8004d06:	4013      	ands	r3, r2
 8004d08:	3301      	adds	r3, #1
 8004d0a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d0c:	4b27      	ldr	r3, [pc, #156]	@ (8004dac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	2380      	movs	r3, #128	@ 0x80
 8004d12:	025b      	lsls	r3, r3, #9
 8004d14:	4013      	ands	r3, r2
 8004d16:	d00f      	beq.n	8004d38 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	000a      	movs	r2, r1
 8004d1c:	0152      	lsls	r2, r2, #5
 8004d1e:	1a52      	subs	r2, r2, r1
 8004d20:	0193      	lsls	r3, r2, #6
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	185b      	adds	r3, r3, r1
 8004d28:	025b      	lsls	r3, r3, #9
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	f7fb fa07 	bl	8000140 <__udivsi3>
 8004d32:	0003      	movs	r3, r0
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e023      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004d38:	4b1c      	ldr	r3, [pc, #112]	@ (8004dac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2210      	movs	r2, #16
 8004d3e:	4013      	ands	r3, r2
 8004d40:	d00f      	beq.n	8004d62 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	000a      	movs	r2, r1
 8004d46:	0152      	lsls	r2, r2, #5
 8004d48:	1a52      	subs	r2, r2, r1
 8004d4a:	0193      	lsls	r3, r2, #6
 8004d4c:	1a9b      	subs	r3, r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	185b      	adds	r3, r3, r1
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	0018      	movs	r0, r3
 8004d58:	f7fb f9f2 	bl	8000140 <__udivsi3>
 8004d5c:	0003      	movs	r3, r0
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	e00e      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8004d62:	68b9      	ldr	r1, [r7, #8]
 8004d64:	000a      	movs	r2, r1
 8004d66:	0152      	lsls	r2, r2, #5
 8004d68:	1a52      	subs	r2, r2, r1
 8004d6a:	0193      	lsls	r3, r2, #6
 8004d6c:	1a9b      	subs	r3, r3, r2
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	185b      	adds	r3, r3, r1
 8004d72:	029b      	lsls	r3, r3, #10
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	0018      	movs	r0, r3
 8004d78:	f7fb f9e2 	bl	8000140 <__udivsi3>
 8004d7c:	0003      	movs	r3, r0
 8004d7e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	613b      	str	r3, [r7, #16]
      break;
 8004d84:	e00d      	b.n	8004da2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004d86:	4b09      	ldr	r3, [pc, #36]	@ (8004dac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	0b5b      	lsrs	r3, r3, #13
 8004d8c:	2207      	movs	r2, #7
 8004d8e:	4013      	ands	r3, r2
 8004d90:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	3301      	adds	r3, #1
 8004d96:	2280      	movs	r2, #128	@ 0x80
 8004d98:	0212      	lsls	r2, r2, #8
 8004d9a:	409a      	lsls	r2, r3
 8004d9c:	0013      	movs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
      break;
 8004da0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004da2:	693b      	ldr	r3, [r7, #16]
}
 8004da4:	0018      	movs	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	b006      	add	sp, #24
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40021000 	.word	0x40021000
 8004db0:	003d0900 	.word	0x003d0900
 8004db4:	00f42400 	.word	0x00f42400
 8004db8:	007a1200 	.word	0x007a1200
 8004dbc:	08009d54 	.word	0x08009d54

08004dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dc4:	4b02      	ldr	r3, [pc, #8]	@ (8004dd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
}
 8004dc8:	0018      	movs	r0, r3
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	46c0      	nop			@ (mov r8, r8)
 8004dd0:	20000004 	.word	0x20000004

08004dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dd8:	f7ff fff2 	bl	8004dc0 <HAL_RCC_GetHCLKFreq>
 8004ddc:	0001      	movs	r1, r0
 8004dde:	4b06      	ldr	r3, [pc, #24]	@ (8004df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	0a1b      	lsrs	r3, r3, #8
 8004de4:	2207      	movs	r2, #7
 8004de6:	4013      	ands	r3, r2
 8004de8:	4a04      	ldr	r2, [pc, #16]	@ (8004dfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dea:	5cd3      	ldrb	r3, [r2, r3]
 8004dec:	40d9      	lsrs	r1, r3
 8004dee:	000b      	movs	r3, r1
}
 8004df0:	0018      	movs	r0, r3
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	46c0      	nop			@ (mov r8, r8)
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	08009d4c 	.word	0x08009d4c

08004e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e04:	f7ff ffdc 	bl	8004dc0 <HAL_RCC_GetHCLKFreq>
 8004e08:	0001      	movs	r1, r0
 8004e0a:	4b06      	ldr	r3, [pc, #24]	@ (8004e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	0adb      	lsrs	r3, r3, #11
 8004e10:	2207      	movs	r2, #7
 8004e12:	4013      	ands	r3, r2
 8004e14:	4a04      	ldr	r2, [pc, #16]	@ (8004e28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e16:	5cd3      	ldrb	r3, [r2, r3]
 8004e18:	40d9      	lsrs	r1, r3
 8004e1a:	000b      	movs	r3, r1
}
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	46c0      	nop			@ (mov r8, r8)
 8004e24:	40021000 	.word	0x40021000
 8004e28:	08009d4c 	.word	0x08009d4c

08004e2c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004e34:	2317      	movs	r3, #23
 8004e36:	18fb      	adds	r3, r7, r3
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2220      	movs	r2, #32
 8004e42:	4013      	ands	r3, r2
 8004e44:	d106      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	2380      	movs	r3, #128	@ 0x80
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	4013      	ands	r3, r2
 8004e50:	d100      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004e52:	e104      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e54:	4bb9      	ldr	r3, [pc, #740]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e58:	2380      	movs	r3, #128	@ 0x80
 8004e5a:	055b      	lsls	r3, r3, #21
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d10a      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e60:	4bb6      	ldr	r3, [pc, #728]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e64:	4bb5      	ldr	r3, [pc, #724]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e66:	2180      	movs	r1, #128	@ 0x80
 8004e68:	0549      	lsls	r1, r1, #21
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004e6e:	2317      	movs	r3, #23
 8004e70:	18fb      	adds	r3, r7, r3
 8004e72:	2201      	movs	r2, #1
 8004e74:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e76:	4bb2      	ldr	r3, [pc, #712]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	2380      	movs	r3, #128	@ 0x80
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	4013      	ands	r3, r2
 8004e80:	d11a      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e82:	4baf      	ldr	r3, [pc, #700]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	4bae      	ldr	r3, [pc, #696]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004e88:	2180      	movs	r1, #128	@ 0x80
 8004e8a:	0049      	lsls	r1, r1, #1
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e90:	f7fe fbd4 	bl	800363c <HAL_GetTick>
 8004e94:	0003      	movs	r3, r0
 8004e96:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e98:	e008      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e9a:	f7fe fbcf 	bl	800363c <HAL_GetTick>
 8004e9e:	0002      	movs	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b64      	cmp	r3, #100	@ 0x64
 8004ea6:	d901      	bls.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e143      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eac:	4ba4      	ldr	r3, [pc, #656]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	2380      	movs	r3, #128	@ 0x80
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	d0f0      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004eb8:	4ba0      	ldr	r3, [pc, #640]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	23c0      	movs	r3, #192	@ 0xc0
 8004ebe:	039b      	lsls	r3, r3, #14
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	23c0      	movs	r3, #192	@ 0xc0
 8004eca:	039b      	lsls	r3, r3, #14
 8004ecc:	4013      	ands	r3, r2
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d107      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	23c0      	movs	r3, #192	@ 0xc0
 8004eda:	039b      	lsls	r3, r3, #14
 8004edc:	4013      	ands	r3, r2
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d013      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	23c0      	movs	r3, #192	@ 0xc0
 8004eea:	029b      	lsls	r3, r3, #10
 8004eec:	401a      	ands	r2, r3
 8004eee:	23c0      	movs	r3, #192	@ 0xc0
 8004ef0:	029b      	lsls	r3, r3, #10
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d10a      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004ef6:	4b91      	ldr	r3, [pc, #580]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	2380      	movs	r3, #128	@ 0x80
 8004efc:	029b      	lsls	r3, r3, #10
 8004efe:	401a      	ands	r2, r3
 8004f00:	2380      	movs	r3, #128	@ 0x80
 8004f02:	029b      	lsls	r3, r3, #10
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d101      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e113      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004f0c:	4b8b      	ldr	r3, [pc, #556]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f10:	23c0      	movs	r3, #192	@ 0xc0
 8004f12:	029b      	lsls	r3, r3, #10
 8004f14:	4013      	ands	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d049      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	23c0      	movs	r3, #192	@ 0xc0
 8004f24:	029b      	lsls	r3, r3, #10
 8004f26:	4013      	ands	r3, r2
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d004      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2220      	movs	r2, #32
 8004f34:	4013      	ands	r3, r2
 8004f36:	d10d      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	23c0      	movs	r3, #192	@ 0xc0
 8004f3e:	029b      	lsls	r3, r3, #10
 8004f40:	4013      	ands	r3, r2
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d034      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	2380      	movs	r3, #128	@ 0x80
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	4013      	ands	r3, r2
 8004f52:	d02e      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004f54:	4b79      	ldr	r3, [pc, #484]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f58:	4a7a      	ldr	r2, [pc, #488]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f5e:	4b77      	ldr	r3, [pc, #476]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f62:	4b76      	ldr	r3, [pc, #472]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f64:	2180      	movs	r1, #128	@ 0x80
 8004f66:	0309      	lsls	r1, r1, #12
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f6c:	4b73      	ldr	r3, [pc, #460]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f70:	4b72      	ldr	r3, [pc, #456]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f72:	4975      	ldr	r1, [pc, #468]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004f74:	400a      	ands	r2, r1
 8004f76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004f78:	4b70      	ldr	r3, [pc, #448]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	2380      	movs	r3, #128	@ 0x80
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	4013      	ands	r3, r2
 8004f86:	d014      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f88:	f7fe fb58 	bl	800363c <HAL_GetTick>
 8004f8c:	0003      	movs	r3, r0
 8004f8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f90:	e009      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f92:	f7fe fb53 	bl	800363c <HAL_GetTick>
 8004f96:	0002      	movs	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	4a6b      	ldr	r2, [pc, #428]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e0c6      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fa6:	4b65      	ldr	r3, [pc, #404]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004faa:	2380      	movs	r3, #128	@ 0x80
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d0ef      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	2380      	movs	r3, #128	@ 0x80
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	4013      	ands	r3, r2
 8004fbc:	d01f      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	23c0      	movs	r3, #192	@ 0xc0
 8004fc4:	029b      	lsls	r3, r3, #10
 8004fc6:	401a      	ands	r2, r3
 8004fc8:	23c0      	movs	r3, #192	@ 0xc0
 8004fca:	029b      	lsls	r3, r3, #10
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d10c      	bne.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004fd0:	4b5a      	ldr	r3, [pc, #360]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a5e      	ldr	r2, [pc, #376]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	0019      	movs	r1, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	23c0      	movs	r3, #192	@ 0xc0
 8004fe0:	039b      	lsls	r3, r3, #14
 8004fe2:	401a      	ands	r2, r3
 8004fe4:	4b55      	ldr	r3, [pc, #340]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	4b54      	ldr	r3, [pc, #336]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	23c0      	movs	r3, #192	@ 0xc0
 8004ff4:	029b      	lsls	r3, r3, #10
 8004ff6:	401a      	ands	r2, r3
 8004ff8:	4b50      	ldr	r3, [pc, #320]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2220      	movs	r2, #32
 8005004:	4013      	ands	r3, r2
 8005006:	d01f      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	23c0      	movs	r3, #192	@ 0xc0
 800500e:	029b      	lsls	r3, r3, #10
 8005010:	401a      	ands	r2, r3
 8005012:	23c0      	movs	r3, #192	@ 0xc0
 8005014:	029b      	lsls	r3, r3, #10
 8005016:	429a      	cmp	r2, r3
 8005018:	d10c      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800501a:	4b48      	ldr	r3, [pc, #288]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a4c      	ldr	r2, [pc, #304]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005020:	4013      	ands	r3, r2
 8005022:	0019      	movs	r1, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	23c0      	movs	r3, #192	@ 0xc0
 800502a:	039b      	lsls	r3, r3, #14
 800502c:	401a      	ands	r2, r3
 800502e:	4b43      	ldr	r3, [pc, #268]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005030:	430a      	orrs	r2, r1
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	4b41      	ldr	r3, [pc, #260]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005036:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	23c0      	movs	r3, #192	@ 0xc0
 800503e:	029b      	lsls	r3, r3, #10
 8005040:	401a      	ands	r2, r3
 8005042:	4b3e      	ldr	r3, [pc, #248]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005044:	430a      	orrs	r2, r1
 8005046:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005048:	2317      	movs	r3, #23
 800504a:	18fb      	adds	r3, r7, r3
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d105      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005052:	4b3a      	ldr	r3, [pc, #232]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005054:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005056:	4b39      	ldr	r3, [pc, #228]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005058:	493e      	ldr	r1, [pc, #248]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800505a:	400a      	ands	r2, r1
 800505c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2201      	movs	r2, #1
 8005064:	4013      	ands	r3, r2
 8005066:	d009      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005068:	4b34      	ldr	r3, [pc, #208]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800506a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800506c:	2203      	movs	r2, #3
 800506e:	4393      	bics	r3, r2
 8005070:	0019      	movs	r1, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	4b31      	ldr	r3, [pc, #196]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005078:	430a      	orrs	r2, r1
 800507a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2202      	movs	r2, #2
 8005082:	4013      	ands	r3, r2
 8005084:	d009      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005086:	4b2d      	ldr	r3, [pc, #180]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800508a:	220c      	movs	r2, #12
 800508c:	4393      	bics	r3, r2
 800508e:	0019      	movs	r1, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	4b29      	ldr	r3, [pc, #164]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005096:	430a      	orrs	r2, r1
 8005098:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2204      	movs	r2, #4
 80050a0:	4013      	ands	r3, r2
 80050a2:	d009      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050a4:	4b25      	ldr	r3, [pc, #148]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	0019      	movs	r1, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	695a      	ldr	r2, [r3, #20]
 80050b2:	4b22      	ldr	r3, [pc, #136]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050b4:	430a      	orrs	r2, r1
 80050b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2208      	movs	r2, #8
 80050be:	4013      	ands	r3, r2
 80050c0:	d009      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050c2:	4b1e      	ldr	r3, [pc, #120]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050c6:	4a25      	ldr	r2, [pc, #148]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	0019      	movs	r1, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	699a      	ldr	r2, [r3, #24]
 80050d0:	4b1a      	ldr	r3, [pc, #104]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050d2:	430a      	orrs	r2, r1
 80050d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	2380      	movs	r3, #128	@ 0x80
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	4013      	ands	r3, r2
 80050e0:	d009      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050e2:	4b16      	ldr	r3, [pc, #88]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050e6:	4a17      	ldr	r2, [pc, #92]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	0019      	movs	r1, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69da      	ldr	r2, [r3, #28]
 80050f0:	4b12      	ldr	r3, [pc, #72]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050f2:	430a      	orrs	r2, r1
 80050f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2240      	movs	r2, #64	@ 0x40
 80050fc:	4013      	ands	r3, r2
 80050fe:	d009      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005100:	4b0e      	ldr	r3, [pc, #56]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005104:	4a16      	ldr	r2, [pc, #88]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005106:	4013      	ands	r3, r2
 8005108:	0019      	movs	r1, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800510e:	4b0b      	ldr	r3, [pc, #44]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005110:	430a      	orrs	r2, r1
 8005112:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2280      	movs	r2, #128	@ 0x80
 800511a:	4013      	ands	r3, r2
 800511c:	d009      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800511e:	4b07      	ldr	r3, [pc, #28]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005122:	4a10      	ldr	r2, [pc, #64]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005124:	4013      	ands	r3, r2
 8005126:	0019      	movs	r1, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1a      	ldr	r2, [r3, #32]
 800512c:	4b03      	ldr	r3, [pc, #12]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800512e:	430a      	orrs	r2, r1
 8005130:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	0018      	movs	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	b006      	add	sp, #24
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40021000 	.word	0x40021000
 8005140:	40007000 	.word	0x40007000
 8005144:	fffcffff 	.word	0xfffcffff
 8005148:	fff7ffff 	.word	0xfff7ffff
 800514c:	00001388 	.word	0x00001388
 8005150:	ffcfffff 	.word	0xffcfffff
 8005154:	efffffff 	.word	0xefffffff
 8005158:	fffff3ff 	.word	0xfffff3ff
 800515c:	ffffcfff 	.word	0xffffcfff
 8005160:	fbffffff 	.word	0xfbffffff
 8005164:	fff3ffff 	.word	0xfff3ffff

08005168 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e044      	b.n	8005204 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800517e:	2b00      	cmp	r3, #0
 8005180:	d107      	bne.n	8005192 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2278      	movs	r2, #120	@ 0x78
 8005186:	2100      	movs	r1, #0
 8005188:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	0018      	movs	r0, r3
 800518e:	f7fe f8a3 	bl	80032d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2224      	movs	r2, #36	@ 0x24
 8005196:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2101      	movs	r1, #1
 80051a4:	438a      	bics	r2, r1
 80051a6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	0018      	movs	r0, r3
 80051b4:	f000 fb6a 	bl	800588c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	0018      	movs	r0, r3
 80051bc:	f000 f8c8 	bl	8005350 <UART_SetConfig>
 80051c0:	0003      	movs	r3, r0
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e01c      	b.n	8005204 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	490d      	ldr	r1, [pc, #52]	@ (800520c <HAL_UART_Init+0xa4>)
 80051d6:	400a      	ands	r2, r1
 80051d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	212a      	movs	r1, #42	@ 0x2a
 80051e6:	438a      	bics	r2, r1
 80051e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2101      	movs	r1, #1
 80051f6:	430a      	orrs	r2, r1
 80051f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	0018      	movs	r0, r3
 80051fe:	f000 fbf9 	bl	80059f4 <UART_CheckIdleState>
 8005202:	0003      	movs	r3, r0
}
 8005204:	0018      	movs	r0, r3
 8005206:	46bd      	mov	sp, r7
 8005208:	b002      	add	sp, #8
 800520a:	bd80      	pop	{r7, pc}
 800520c:	ffffb7ff 	.word	0xffffb7ff

08005210 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08a      	sub	sp, #40	@ 0x28
 8005214:	af02      	add	r7, sp, #8
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	1dbb      	adds	r3, r7, #6
 800521e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005224:	2b20      	cmp	r3, #32
 8005226:	d000      	beq.n	800522a <HAL_UART_Transmit+0x1a>
 8005228:	e08c      	b.n	8005344 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_UART_Transmit+0x28>
 8005230:	1dbb      	adds	r3, r7, #6
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e084      	b.n	8005346 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	2380      	movs	r3, #128	@ 0x80
 8005242:	015b      	lsls	r3, r3, #5
 8005244:	429a      	cmp	r2, r3
 8005246:	d109      	bne.n	800525c <HAL_UART_Transmit+0x4c>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d105      	bne.n	800525c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2201      	movs	r2, #1
 8005254:	4013      	ands	r3, r2
 8005256:	d001      	beq.n	800525c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e074      	b.n	8005346 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2284      	movs	r2, #132	@ 0x84
 8005260:	2100      	movs	r1, #0
 8005262:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2221      	movs	r2, #33	@ 0x21
 8005268:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800526a:	f7fe f9e7 	bl	800363c <HAL_GetTick>
 800526e:	0003      	movs	r3, r0
 8005270:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	1dba      	adds	r2, r7, #6
 8005276:	2150      	movs	r1, #80	@ 0x50
 8005278:	8812      	ldrh	r2, [r2, #0]
 800527a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	1dba      	adds	r2, r7, #6
 8005280:	2152      	movs	r1, #82	@ 0x52
 8005282:	8812      	ldrh	r2, [r2, #0]
 8005284:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	2380      	movs	r3, #128	@ 0x80
 800528c:	015b      	lsls	r3, r3, #5
 800528e:	429a      	cmp	r2, r3
 8005290:	d108      	bne.n	80052a4 <HAL_UART_Transmit+0x94>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d104      	bne.n	80052a4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800529a:	2300      	movs	r3, #0
 800529c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	61bb      	str	r3, [r7, #24]
 80052a2:	e003      	b.n	80052ac <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052a8:	2300      	movs	r3, #0
 80052aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052ac:	e02f      	b.n	800530e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	0013      	movs	r3, r2
 80052b8:	2200      	movs	r2, #0
 80052ba:	2180      	movs	r1, #128	@ 0x80
 80052bc:	f000 fc42 	bl	8005b44 <UART_WaitOnFlagUntilTimeout>
 80052c0:	1e03      	subs	r3, r0, #0
 80052c2:	d004      	beq.n	80052ce <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2220      	movs	r2, #32
 80052c8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e03b      	b.n	8005346 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10b      	bne.n	80052ec <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	001a      	movs	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	05d2      	lsls	r2, r2, #23
 80052e0:	0dd2      	lsrs	r2, r2, #23
 80052e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	3302      	adds	r3, #2
 80052e8:	61bb      	str	r3, [r7, #24]
 80052ea:	e007      	b.n	80052fc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	781a      	ldrb	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	3301      	adds	r3, #1
 80052fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2252      	movs	r2, #82	@ 0x52
 8005300:	5a9b      	ldrh	r3, [r3, r2]
 8005302:	b29b      	uxth	r3, r3
 8005304:	3b01      	subs	r3, #1
 8005306:	b299      	uxth	r1, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2252      	movs	r2, #82	@ 0x52
 800530c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2252      	movs	r2, #82	@ 0x52
 8005312:	5a9b      	ldrh	r3, [r3, r2]
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1c9      	bne.n	80052ae <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	0013      	movs	r3, r2
 8005324:	2200      	movs	r2, #0
 8005326:	2140      	movs	r1, #64	@ 0x40
 8005328:	f000 fc0c 	bl	8005b44 <UART_WaitOnFlagUntilTimeout>
 800532c:	1e03      	subs	r3, r0, #0
 800532e:	d004      	beq.n	800533a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2220      	movs	r2, #32
 8005334:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e005      	b.n	8005346 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2220      	movs	r2, #32
 800533e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005340:	2300      	movs	r3, #0
 8005342:	e000      	b.n	8005346 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005344:	2302      	movs	r3, #2
  }
}
 8005346:	0018      	movs	r0, r3
 8005348:	46bd      	mov	sp, r7
 800534a:	b008      	add	sp, #32
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005350:	b5b0      	push	{r4, r5, r7, lr}
 8005352:	b08e      	sub	sp, #56	@ 0x38
 8005354:	af00      	add	r7, sp, #0
 8005356:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005358:	231a      	movs	r3, #26
 800535a:	2218      	movs	r2, #24
 800535c:	189b      	adds	r3, r3, r2
 800535e:	19db      	adds	r3, r3, r7
 8005360:	2200      	movs	r2, #0
 8005362:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	431a      	orrs	r2, r3
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	431a      	orrs	r2, r3
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	4313      	orrs	r3, r2
 800537a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4ac3      	ldr	r2, [pc, #780]	@ (8005690 <UART_SetConfig+0x340>)
 8005384:	4013      	ands	r3, r2
 8005386:	0019      	movs	r1, r3
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800538e:	430a      	orrs	r2, r1
 8005390:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	4abe      	ldr	r2, [pc, #760]	@ (8005694 <UART_SetConfig+0x344>)
 800539a:	4013      	ands	r3, r2
 800539c:	0019      	movs	r1, r3
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4ab8      	ldr	r2, [pc, #736]	@ (8005698 <UART_SetConfig+0x348>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d004      	beq.n	80053c4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053c0:	4313      	orrs	r3, r2
 80053c2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	4ab4      	ldr	r2, [pc, #720]	@ (800569c <UART_SetConfig+0x34c>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	0019      	movs	r1, r3
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053d6:	430a      	orrs	r2, r1
 80053d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4ab0      	ldr	r2, [pc, #704]	@ (80056a0 <UART_SetConfig+0x350>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d131      	bne.n	8005448 <UART_SetConfig+0xf8>
 80053e4:	4baf      	ldr	r3, [pc, #700]	@ (80056a4 <UART_SetConfig+0x354>)
 80053e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053e8:	2203      	movs	r2, #3
 80053ea:	4013      	ands	r3, r2
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	d01d      	beq.n	800542c <UART_SetConfig+0xdc>
 80053f0:	d823      	bhi.n	800543a <UART_SetConfig+0xea>
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d00c      	beq.n	8005410 <UART_SetConfig+0xc0>
 80053f6:	d820      	bhi.n	800543a <UART_SetConfig+0xea>
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <UART_SetConfig+0xb2>
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d00e      	beq.n	800541e <UART_SetConfig+0xce>
 8005400:	e01b      	b.n	800543a <UART_SetConfig+0xea>
 8005402:	231b      	movs	r3, #27
 8005404:	2218      	movs	r2, #24
 8005406:	189b      	adds	r3, r3, r2
 8005408:	19db      	adds	r3, r3, r7
 800540a:	2201      	movs	r2, #1
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	e0b4      	b.n	800557a <UART_SetConfig+0x22a>
 8005410:	231b      	movs	r3, #27
 8005412:	2218      	movs	r2, #24
 8005414:	189b      	adds	r3, r3, r2
 8005416:	19db      	adds	r3, r3, r7
 8005418:	2202      	movs	r2, #2
 800541a:	701a      	strb	r2, [r3, #0]
 800541c:	e0ad      	b.n	800557a <UART_SetConfig+0x22a>
 800541e:	231b      	movs	r3, #27
 8005420:	2218      	movs	r2, #24
 8005422:	189b      	adds	r3, r3, r2
 8005424:	19db      	adds	r3, r3, r7
 8005426:	2204      	movs	r2, #4
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	e0a6      	b.n	800557a <UART_SetConfig+0x22a>
 800542c:	231b      	movs	r3, #27
 800542e:	2218      	movs	r2, #24
 8005430:	189b      	adds	r3, r3, r2
 8005432:	19db      	adds	r3, r3, r7
 8005434:	2208      	movs	r2, #8
 8005436:	701a      	strb	r2, [r3, #0]
 8005438:	e09f      	b.n	800557a <UART_SetConfig+0x22a>
 800543a:	231b      	movs	r3, #27
 800543c:	2218      	movs	r2, #24
 800543e:	189b      	adds	r3, r3, r2
 8005440:	19db      	adds	r3, r3, r7
 8005442:	2210      	movs	r2, #16
 8005444:	701a      	strb	r2, [r3, #0]
 8005446:	e098      	b.n	800557a <UART_SetConfig+0x22a>
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a96      	ldr	r2, [pc, #600]	@ (80056a8 <UART_SetConfig+0x358>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d131      	bne.n	80054b6 <UART_SetConfig+0x166>
 8005452:	4b94      	ldr	r3, [pc, #592]	@ (80056a4 <UART_SetConfig+0x354>)
 8005454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005456:	220c      	movs	r2, #12
 8005458:	4013      	ands	r3, r2
 800545a:	2b0c      	cmp	r3, #12
 800545c:	d01d      	beq.n	800549a <UART_SetConfig+0x14a>
 800545e:	d823      	bhi.n	80054a8 <UART_SetConfig+0x158>
 8005460:	2b08      	cmp	r3, #8
 8005462:	d00c      	beq.n	800547e <UART_SetConfig+0x12e>
 8005464:	d820      	bhi.n	80054a8 <UART_SetConfig+0x158>
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <UART_SetConfig+0x120>
 800546a:	2b04      	cmp	r3, #4
 800546c:	d00e      	beq.n	800548c <UART_SetConfig+0x13c>
 800546e:	e01b      	b.n	80054a8 <UART_SetConfig+0x158>
 8005470:	231b      	movs	r3, #27
 8005472:	2218      	movs	r2, #24
 8005474:	189b      	adds	r3, r3, r2
 8005476:	19db      	adds	r3, r3, r7
 8005478:	2200      	movs	r2, #0
 800547a:	701a      	strb	r2, [r3, #0]
 800547c:	e07d      	b.n	800557a <UART_SetConfig+0x22a>
 800547e:	231b      	movs	r3, #27
 8005480:	2218      	movs	r2, #24
 8005482:	189b      	adds	r3, r3, r2
 8005484:	19db      	adds	r3, r3, r7
 8005486:	2202      	movs	r2, #2
 8005488:	701a      	strb	r2, [r3, #0]
 800548a:	e076      	b.n	800557a <UART_SetConfig+0x22a>
 800548c:	231b      	movs	r3, #27
 800548e:	2218      	movs	r2, #24
 8005490:	189b      	adds	r3, r3, r2
 8005492:	19db      	adds	r3, r3, r7
 8005494:	2204      	movs	r2, #4
 8005496:	701a      	strb	r2, [r3, #0]
 8005498:	e06f      	b.n	800557a <UART_SetConfig+0x22a>
 800549a:	231b      	movs	r3, #27
 800549c:	2218      	movs	r2, #24
 800549e:	189b      	adds	r3, r3, r2
 80054a0:	19db      	adds	r3, r3, r7
 80054a2:	2208      	movs	r2, #8
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	e068      	b.n	800557a <UART_SetConfig+0x22a>
 80054a8:	231b      	movs	r3, #27
 80054aa:	2218      	movs	r2, #24
 80054ac:	189b      	adds	r3, r3, r2
 80054ae:	19db      	adds	r3, r3, r7
 80054b0:	2210      	movs	r2, #16
 80054b2:	701a      	strb	r2, [r3, #0]
 80054b4:	e061      	b.n	800557a <UART_SetConfig+0x22a>
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a7c      	ldr	r2, [pc, #496]	@ (80056ac <UART_SetConfig+0x35c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d106      	bne.n	80054ce <UART_SetConfig+0x17e>
 80054c0:	231b      	movs	r3, #27
 80054c2:	2218      	movs	r2, #24
 80054c4:	189b      	adds	r3, r3, r2
 80054c6:	19db      	adds	r3, r3, r7
 80054c8:	2200      	movs	r2, #0
 80054ca:	701a      	strb	r2, [r3, #0]
 80054cc:	e055      	b.n	800557a <UART_SetConfig+0x22a>
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a77      	ldr	r2, [pc, #476]	@ (80056b0 <UART_SetConfig+0x360>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d106      	bne.n	80054e6 <UART_SetConfig+0x196>
 80054d8:	231b      	movs	r3, #27
 80054da:	2218      	movs	r2, #24
 80054dc:	189b      	adds	r3, r3, r2
 80054de:	19db      	adds	r3, r3, r7
 80054e0:	2200      	movs	r2, #0
 80054e2:	701a      	strb	r2, [r3, #0]
 80054e4:	e049      	b.n	800557a <UART_SetConfig+0x22a>
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a6b      	ldr	r2, [pc, #428]	@ (8005698 <UART_SetConfig+0x348>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d13e      	bne.n	800556e <UART_SetConfig+0x21e>
 80054f0:	4b6c      	ldr	r3, [pc, #432]	@ (80056a4 <UART_SetConfig+0x354>)
 80054f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054f4:	23c0      	movs	r3, #192	@ 0xc0
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	4013      	ands	r3, r2
 80054fa:	22c0      	movs	r2, #192	@ 0xc0
 80054fc:	0112      	lsls	r2, r2, #4
 80054fe:	4293      	cmp	r3, r2
 8005500:	d027      	beq.n	8005552 <UART_SetConfig+0x202>
 8005502:	22c0      	movs	r2, #192	@ 0xc0
 8005504:	0112      	lsls	r2, r2, #4
 8005506:	4293      	cmp	r3, r2
 8005508:	d82a      	bhi.n	8005560 <UART_SetConfig+0x210>
 800550a:	2280      	movs	r2, #128	@ 0x80
 800550c:	0112      	lsls	r2, r2, #4
 800550e:	4293      	cmp	r3, r2
 8005510:	d011      	beq.n	8005536 <UART_SetConfig+0x1e6>
 8005512:	2280      	movs	r2, #128	@ 0x80
 8005514:	0112      	lsls	r2, r2, #4
 8005516:	4293      	cmp	r3, r2
 8005518:	d822      	bhi.n	8005560 <UART_SetConfig+0x210>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d004      	beq.n	8005528 <UART_SetConfig+0x1d8>
 800551e:	2280      	movs	r2, #128	@ 0x80
 8005520:	00d2      	lsls	r2, r2, #3
 8005522:	4293      	cmp	r3, r2
 8005524:	d00e      	beq.n	8005544 <UART_SetConfig+0x1f4>
 8005526:	e01b      	b.n	8005560 <UART_SetConfig+0x210>
 8005528:	231b      	movs	r3, #27
 800552a:	2218      	movs	r2, #24
 800552c:	189b      	adds	r3, r3, r2
 800552e:	19db      	adds	r3, r3, r7
 8005530:	2200      	movs	r2, #0
 8005532:	701a      	strb	r2, [r3, #0]
 8005534:	e021      	b.n	800557a <UART_SetConfig+0x22a>
 8005536:	231b      	movs	r3, #27
 8005538:	2218      	movs	r2, #24
 800553a:	189b      	adds	r3, r3, r2
 800553c:	19db      	adds	r3, r3, r7
 800553e:	2202      	movs	r2, #2
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	e01a      	b.n	800557a <UART_SetConfig+0x22a>
 8005544:	231b      	movs	r3, #27
 8005546:	2218      	movs	r2, #24
 8005548:	189b      	adds	r3, r3, r2
 800554a:	19db      	adds	r3, r3, r7
 800554c:	2204      	movs	r2, #4
 800554e:	701a      	strb	r2, [r3, #0]
 8005550:	e013      	b.n	800557a <UART_SetConfig+0x22a>
 8005552:	231b      	movs	r3, #27
 8005554:	2218      	movs	r2, #24
 8005556:	189b      	adds	r3, r3, r2
 8005558:	19db      	adds	r3, r3, r7
 800555a:	2208      	movs	r2, #8
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	e00c      	b.n	800557a <UART_SetConfig+0x22a>
 8005560:	231b      	movs	r3, #27
 8005562:	2218      	movs	r2, #24
 8005564:	189b      	adds	r3, r3, r2
 8005566:	19db      	adds	r3, r3, r7
 8005568:	2210      	movs	r2, #16
 800556a:	701a      	strb	r2, [r3, #0]
 800556c:	e005      	b.n	800557a <UART_SetConfig+0x22a>
 800556e:	231b      	movs	r3, #27
 8005570:	2218      	movs	r2, #24
 8005572:	189b      	adds	r3, r3, r2
 8005574:	19db      	adds	r3, r3, r7
 8005576:	2210      	movs	r2, #16
 8005578:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a46      	ldr	r2, [pc, #280]	@ (8005698 <UART_SetConfig+0x348>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d000      	beq.n	8005586 <UART_SetConfig+0x236>
 8005584:	e09a      	b.n	80056bc <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005586:	231b      	movs	r3, #27
 8005588:	2218      	movs	r2, #24
 800558a:	189b      	adds	r3, r3, r2
 800558c:	19db      	adds	r3, r3, r7
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b08      	cmp	r3, #8
 8005592:	d01d      	beq.n	80055d0 <UART_SetConfig+0x280>
 8005594:	dc20      	bgt.n	80055d8 <UART_SetConfig+0x288>
 8005596:	2b04      	cmp	r3, #4
 8005598:	d015      	beq.n	80055c6 <UART_SetConfig+0x276>
 800559a:	dc1d      	bgt.n	80055d8 <UART_SetConfig+0x288>
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <UART_SetConfig+0x256>
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d005      	beq.n	80055b0 <UART_SetConfig+0x260>
 80055a4:	e018      	b.n	80055d8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055a6:	f7ff fc15 	bl	8004dd4 <HAL_RCC_GetPCLK1Freq>
 80055aa:	0003      	movs	r3, r0
 80055ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80055ae:	e01c      	b.n	80055ea <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055b0:	4b3c      	ldr	r3, [pc, #240]	@ (80056a4 <UART_SetConfig+0x354>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2210      	movs	r2, #16
 80055b6:	4013      	ands	r3, r2
 80055b8:	d002      	beq.n	80055c0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80055ba:	4b3e      	ldr	r3, [pc, #248]	@ (80056b4 <UART_SetConfig+0x364>)
 80055bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055be:	e014      	b.n	80055ea <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80055c0:	4b3d      	ldr	r3, [pc, #244]	@ (80056b8 <UART_SetConfig+0x368>)
 80055c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80055c4:	e011      	b.n	80055ea <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055c6:	f7ff fb75 	bl	8004cb4 <HAL_RCC_GetSysClockFreq>
 80055ca:	0003      	movs	r3, r0
 80055cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80055ce:	e00c      	b.n	80055ea <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055d0:	2380      	movs	r3, #128	@ 0x80
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80055d6:	e008      	b.n	80055ea <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80055dc:	231a      	movs	r3, #26
 80055de:	2218      	movs	r2, #24
 80055e0:	189b      	adds	r3, r3, r2
 80055e2:	19db      	adds	r3, r3, r7
 80055e4:	2201      	movs	r2, #1
 80055e6:	701a      	strb	r2, [r3, #0]
        break;
 80055e8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d100      	bne.n	80055f2 <UART_SetConfig+0x2a2>
 80055f0:	e133      	b.n	800585a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	0013      	movs	r3, r2
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	189b      	adds	r3, r3, r2
 80055fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055fe:	429a      	cmp	r2, r3
 8005600:	d305      	bcc.n	800560e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005608:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800560a:	429a      	cmp	r2, r3
 800560c:	d906      	bls.n	800561c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800560e:	231a      	movs	r3, #26
 8005610:	2218      	movs	r2, #24
 8005612:	189b      	adds	r3, r3, r2
 8005614:	19db      	adds	r3, r3, r7
 8005616:	2201      	movs	r2, #1
 8005618:	701a      	strb	r2, [r3, #0]
 800561a:	e11e      	b.n	800585a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800561c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800561e:	613b      	str	r3, [r7, #16]
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	6939      	ldr	r1, [r7, #16]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	000b      	movs	r3, r1
 800562a:	0e1b      	lsrs	r3, r3, #24
 800562c:	0010      	movs	r0, r2
 800562e:	0205      	lsls	r5, r0, #8
 8005630:	431d      	orrs	r5, r3
 8005632:	000b      	movs	r3, r1
 8005634:	021c      	lsls	r4, r3, #8
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	085b      	lsrs	r3, r3, #1
 800563c:	60bb      	str	r3, [r7, #8]
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	68b8      	ldr	r0, [r7, #8]
 8005644:	68f9      	ldr	r1, [r7, #12]
 8005646:	1900      	adds	r0, r0, r4
 8005648:	4169      	adcs	r1, r5
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	603b      	str	r3, [r7, #0]
 8005650:	2300      	movs	r3, #0
 8005652:	607b      	str	r3, [r7, #4]
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f7fa ff26 	bl	80004a8 <__aeabi_uldivmod>
 800565c:	0002      	movs	r2, r0
 800565e:	000b      	movs	r3, r1
 8005660:	0013      	movs	r3, r2
 8005662:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005664:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005666:	23c0      	movs	r3, #192	@ 0xc0
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	429a      	cmp	r2, r3
 800566c:	d309      	bcc.n	8005682 <UART_SetConfig+0x332>
 800566e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005670:	2380      	movs	r3, #128	@ 0x80
 8005672:	035b      	lsls	r3, r3, #13
 8005674:	429a      	cmp	r2, r3
 8005676:	d204      	bcs.n	8005682 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800567e:	60da      	str	r2, [r3, #12]
 8005680:	e0eb      	b.n	800585a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8005682:	231a      	movs	r3, #26
 8005684:	2218      	movs	r2, #24
 8005686:	189b      	adds	r3, r3, r2
 8005688:	19db      	adds	r3, r3, r7
 800568a:	2201      	movs	r2, #1
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	e0e4      	b.n	800585a <UART_SetConfig+0x50a>
 8005690:	efff69f3 	.word	0xefff69f3
 8005694:	ffffcfff 	.word	0xffffcfff
 8005698:	40004800 	.word	0x40004800
 800569c:	fffff4ff 	.word	0xfffff4ff
 80056a0:	40013800 	.word	0x40013800
 80056a4:	40021000 	.word	0x40021000
 80056a8:	40004400 	.word	0x40004400
 80056ac:	40004c00 	.word	0x40004c00
 80056b0:	40005000 	.word	0x40005000
 80056b4:	003d0900 	.word	0x003d0900
 80056b8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	69da      	ldr	r2, [r3, #28]
 80056c0:	2380      	movs	r3, #128	@ 0x80
 80056c2:	021b      	lsls	r3, r3, #8
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d000      	beq.n	80056ca <UART_SetConfig+0x37a>
 80056c8:	e070      	b.n	80057ac <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80056ca:	231b      	movs	r3, #27
 80056cc:	2218      	movs	r2, #24
 80056ce:	189b      	adds	r3, r3, r2
 80056d0:	19db      	adds	r3, r3, r7
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d822      	bhi.n	800571e <UART_SetConfig+0x3ce>
 80056d8:	009a      	lsls	r2, r3, #2
 80056da:	4b67      	ldr	r3, [pc, #412]	@ (8005878 <UART_SetConfig+0x528>)
 80056dc:	18d3      	adds	r3, r2, r3
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056e2:	f7ff fb77 	bl	8004dd4 <HAL_RCC_GetPCLK1Freq>
 80056e6:	0003      	movs	r3, r0
 80056e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80056ea:	e021      	b.n	8005730 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056ec:	f7ff fb88 	bl	8004e00 <HAL_RCC_GetPCLK2Freq>
 80056f0:	0003      	movs	r3, r0
 80056f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80056f4:	e01c      	b.n	8005730 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056f6:	4b61      	ldr	r3, [pc, #388]	@ (800587c <UART_SetConfig+0x52c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2210      	movs	r2, #16
 80056fc:	4013      	ands	r3, r2
 80056fe:	d002      	beq.n	8005706 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005700:	4b5f      	ldr	r3, [pc, #380]	@ (8005880 <UART_SetConfig+0x530>)
 8005702:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005704:	e014      	b.n	8005730 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005706:	4b5f      	ldr	r3, [pc, #380]	@ (8005884 <UART_SetConfig+0x534>)
 8005708:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800570a:	e011      	b.n	8005730 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800570c:	f7ff fad2 	bl	8004cb4 <HAL_RCC_GetSysClockFreq>
 8005710:	0003      	movs	r3, r0
 8005712:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005714:	e00c      	b.n	8005730 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005716:	2380      	movs	r3, #128	@ 0x80
 8005718:	021b      	lsls	r3, r3, #8
 800571a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800571c:	e008      	b.n	8005730 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005722:	231a      	movs	r3, #26
 8005724:	2218      	movs	r2, #24
 8005726:	189b      	adds	r3, r3, r2
 8005728:	19db      	adds	r3, r3, r7
 800572a:	2201      	movs	r2, #1
 800572c:	701a      	strb	r2, [r3, #0]
        break;
 800572e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005732:	2b00      	cmp	r3, #0
 8005734:	d100      	bne.n	8005738 <UART_SetConfig+0x3e8>
 8005736:	e090      	b.n	800585a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573a:	005a      	lsls	r2, r3, #1
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	18d2      	adds	r2, r2, r3
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	0019      	movs	r1, r3
 800574a:	0010      	movs	r0, r2
 800574c:	f7fa fcf8 	bl	8000140 <__udivsi3>
 8005750:	0003      	movs	r3, r0
 8005752:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005756:	2b0f      	cmp	r3, #15
 8005758:	d921      	bls.n	800579e <UART_SetConfig+0x44e>
 800575a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800575c:	2380      	movs	r3, #128	@ 0x80
 800575e:	025b      	lsls	r3, r3, #9
 8005760:	429a      	cmp	r2, r3
 8005762:	d21c      	bcs.n	800579e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005766:	b29a      	uxth	r2, r3
 8005768:	200e      	movs	r0, #14
 800576a:	2418      	movs	r4, #24
 800576c:	1903      	adds	r3, r0, r4
 800576e:	19db      	adds	r3, r3, r7
 8005770:	210f      	movs	r1, #15
 8005772:	438a      	bics	r2, r1
 8005774:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005778:	085b      	lsrs	r3, r3, #1
 800577a:	b29b      	uxth	r3, r3
 800577c:	2207      	movs	r2, #7
 800577e:	4013      	ands	r3, r2
 8005780:	b299      	uxth	r1, r3
 8005782:	1903      	adds	r3, r0, r4
 8005784:	19db      	adds	r3, r3, r7
 8005786:	1902      	adds	r2, r0, r4
 8005788:	19d2      	adds	r2, r2, r7
 800578a:	8812      	ldrh	r2, [r2, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	1902      	adds	r2, r0, r4
 8005796:	19d2      	adds	r2, r2, r7
 8005798:	8812      	ldrh	r2, [r2, #0]
 800579a:	60da      	str	r2, [r3, #12]
 800579c:	e05d      	b.n	800585a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800579e:	231a      	movs	r3, #26
 80057a0:	2218      	movs	r2, #24
 80057a2:	189b      	adds	r3, r3, r2
 80057a4:	19db      	adds	r3, r3, r7
 80057a6:	2201      	movs	r2, #1
 80057a8:	701a      	strb	r2, [r3, #0]
 80057aa:	e056      	b.n	800585a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057ac:	231b      	movs	r3, #27
 80057ae:	2218      	movs	r2, #24
 80057b0:	189b      	adds	r3, r3, r2
 80057b2:	19db      	adds	r3, r3, r7
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d822      	bhi.n	8005800 <UART_SetConfig+0x4b0>
 80057ba:	009a      	lsls	r2, r3, #2
 80057bc:	4b32      	ldr	r3, [pc, #200]	@ (8005888 <UART_SetConfig+0x538>)
 80057be:	18d3      	adds	r3, r2, r3
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057c4:	f7ff fb06 	bl	8004dd4 <HAL_RCC_GetPCLK1Freq>
 80057c8:	0003      	movs	r3, r0
 80057ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80057cc:	e021      	b.n	8005812 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057ce:	f7ff fb17 	bl	8004e00 <HAL_RCC_GetPCLK2Freq>
 80057d2:	0003      	movs	r3, r0
 80057d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80057d6:	e01c      	b.n	8005812 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057d8:	4b28      	ldr	r3, [pc, #160]	@ (800587c <UART_SetConfig+0x52c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2210      	movs	r2, #16
 80057de:	4013      	ands	r3, r2
 80057e0:	d002      	beq.n	80057e8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80057e2:	4b27      	ldr	r3, [pc, #156]	@ (8005880 <UART_SetConfig+0x530>)
 80057e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057e6:	e014      	b.n	8005812 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80057e8:	4b26      	ldr	r3, [pc, #152]	@ (8005884 <UART_SetConfig+0x534>)
 80057ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80057ec:	e011      	b.n	8005812 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ee:	f7ff fa61 	bl	8004cb4 <HAL_RCC_GetSysClockFreq>
 80057f2:	0003      	movs	r3, r0
 80057f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80057f6:	e00c      	b.n	8005812 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057f8:	2380      	movs	r3, #128	@ 0x80
 80057fa:	021b      	lsls	r3, r3, #8
 80057fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80057fe:	e008      	b.n	8005812 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005804:	231a      	movs	r3, #26
 8005806:	2218      	movs	r2, #24
 8005808:	189b      	adds	r3, r3, r2
 800580a:	19db      	adds	r3, r3, r7
 800580c:	2201      	movs	r2, #1
 800580e:	701a      	strb	r2, [r3, #0]
        break;
 8005810:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005814:	2b00      	cmp	r3, #0
 8005816:	d020      	beq.n	800585a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	085a      	lsrs	r2, r3, #1
 800581e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005820:	18d2      	adds	r2, r2, r3
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	0019      	movs	r1, r3
 8005828:	0010      	movs	r0, r2
 800582a:	f7fa fc89 	bl	8000140 <__udivsi3>
 800582e:	0003      	movs	r3, r0
 8005830:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005834:	2b0f      	cmp	r3, #15
 8005836:	d90a      	bls.n	800584e <UART_SetConfig+0x4fe>
 8005838:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800583a:	2380      	movs	r3, #128	@ 0x80
 800583c:	025b      	lsls	r3, r3, #9
 800583e:	429a      	cmp	r2, r3
 8005840:	d205      	bcs.n	800584e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005844:	b29a      	uxth	r2, r3
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	60da      	str	r2, [r3, #12]
 800584c:	e005      	b.n	800585a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800584e:	231a      	movs	r3, #26
 8005850:	2218      	movs	r2, #24
 8005852:	189b      	adds	r3, r3, r2
 8005854:	19db      	adds	r3, r3, r7
 8005856:	2201      	movs	r2, #1
 8005858:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	2200      	movs	r2, #0
 800585e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	2200      	movs	r2, #0
 8005864:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005866:	231a      	movs	r3, #26
 8005868:	2218      	movs	r2, #24
 800586a:	189b      	adds	r3, r3, r2
 800586c:	19db      	adds	r3, r3, r7
 800586e:	781b      	ldrb	r3, [r3, #0]
}
 8005870:	0018      	movs	r0, r3
 8005872:	46bd      	mov	sp, r7
 8005874:	b00e      	add	sp, #56	@ 0x38
 8005876:	bdb0      	pop	{r4, r5, r7, pc}
 8005878:	08009d60 	.word	0x08009d60
 800587c:	40021000 	.word	0x40021000
 8005880:	003d0900 	.word	0x003d0900
 8005884:	00f42400 	.word	0x00f42400
 8005888:	08009d84 	.word	0x08009d84

0800588c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005898:	2208      	movs	r2, #8
 800589a:	4013      	ands	r3, r2
 800589c:	d00b      	beq.n	80058b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	4a4a      	ldr	r2, [pc, #296]	@ (80059d0 <UART_AdvFeatureConfig+0x144>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	0019      	movs	r1, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ba:	2201      	movs	r2, #1
 80058bc:	4013      	ands	r3, r2
 80058be:	d00b      	beq.n	80058d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	4a43      	ldr	r2, [pc, #268]	@ (80059d4 <UART_AdvFeatureConfig+0x148>)
 80058c8:	4013      	ands	r3, r2
 80058ca:	0019      	movs	r1, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058dc:	2202      	movs	r2, #2
 80058de:	4013      	ands	r3, r2
 80058e0:	d00b      	beq.n	80058fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	4a3b      	ldr	r2, [pc, #236]	@ (80059d8 <UART_AdvFeatureConfig+0x14c>)
 80058ea:	4013      	ands	r3, r2
 80058ec:	0019      	movs	r1, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fe:	2204      	movs	r2, #4
 8005900:	4013      	ands	r3, r2
 8005902:	d00b      	beq.n	800591c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	4a34      	ldr	r2, [pc, #208]	@ (80059dc <UART_AdvFeatureConfig+0x150>)
 800590c:	4013      	ands	r3, r2
 800590e:	0019      	movs	r1, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005920:	2210      	movs	r2, #16
 8005922:	4013      	ands	r3, r2
 8005924:	d00b      	beq.n	800593e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	4a2c      	ldr	r2, [pc, #176]	@ (80059e0 <UART_AdvFeatureConfig+0x154>)
 800592e:	4013      	ands	r3, r2
 8005930:	0019      	movs	r1, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005942:	2220      	movs	r2, #32
 8005944:	4013      	ands	r3, r2
 8005946:	d00b      	beq.n	8005960 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	4a25      	ldr	r2, [pc, #148]	@ (80059e4 <UART_AdvFeatureConfig+0x158>)
 8005950:	4013      	ands	r3, r2
 8005952:	0019      	movs	r1, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005964:	2240      	movs	r2, #64	@ 0x40
 8005966:	4013      	ands	r3, r2
 8005968:	d01d      	beq.n	80059a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	4a1d      	ldr	r2, [pc, #116]	@ (80059e8 <UART_AdvFeatureConfig+0x15c>)
 8005972:	4013      	ands	r3, r2
 8005974:	0019      	movs	r1, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005986:	2380      	movs	r3, #128	@ 0x80
 8005988:	035b      	lsls	r3, r3, #13
 800598a:	429a      	cmp	r2, r3
 800598c:	d10b      	bne.n	80059a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	4a15      	ldr	r2, [pc, #84]	@ (80059ec <UART_AdvFeatureConfig+0x160>)
 8005996:	4013      	ands	r3, r2
 8005998:	0019      	movs	r1, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059aa:	2280      	movs	r2, #128	@ 0x80
 80059ac:	4013      	ands	r3, r2
 80059ae:	d00b      	beq.n	80059c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	4a0e      	ldr	r2, [pc, #56]	@ (80059f0 <UART_AdvFeatureConfig+0x164>)
 80059b8:	4013      	ands	r3, r2
 80059ba:	0019      	movs	r1, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	605a      	str	r2, [r3, #4]
  }
}
 80059c8:	46c0      	nop			@ (mov r8, r8)
 80059ca:	46bd      	mov	sp, r7
 80059cc:	b002      	add	sp, #8
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	ffff7fff 	.word	0xffff7fff
 80059d4:	fffdffff 	.word	0xfffdffff
 80059d8:	fffeffff 	.word	0xfffeffff
 80059dc:	fffbffff 	.word	0xfffbffff
 80059e0:	ffffefff 	.word	0xffffefff
 80059e4:	ffffdfff 	.word	0xffffdfff
 80059e8:	ffefffff 	.word	0xffefffff
 80059ec:	ff9fffff 	.word	0xff9fffff
 80059f0:	fff7ffff 	.word	0xfff7ffff

080059f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b092      	sub	sp, #72	@ 0x48
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2284      	movs	r2, #132	@ 0x84
 8005a00:	2100      	movs	r1, #0
 8005a02:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a04:	f7fd fe1a 	bl	800363c <HAL_GetTick>
 8005a08:	0003      	movs	r3, r0
 8005a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2208      	movs	r2, #8
 8005a14:	4013      	ands	r3, r2
 8005a16:	2b08      	cmp	r3, #8
 8005a18:	d12c      	bne.n	8005a74 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a1c:	2280      	movs	r2, #128	@ 0x80
 8005a1e:	0391      	lsls	r1, r2, #14
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	4a46      	ldr	r2, [pc, #280]	@ (8005b3c <UART_CheckIdleState+0x148>)
 8005a24:	9200      	str	r2, [sp, #0]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f000 f88c 	bl	8005b44 <UART_WaitOnFlagUntilTimeout>
 8005a2c:	1e03      	subs	r3, r0, #0
 8005a2e:	d021      	beq.n	8005a74 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a30:	f3ef 8310 	mrs	r3, PRIMASK
 8005a34:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a40:	f383 8810 	msr	PRIMASK, r3
}
 8005a44:	46c0      	nop			@ (mov r8, r8)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2180      	movs	r1, #128	@ 0x80
 8005a52:	438a      	bics	r2, r1
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a5c:	f383 8810 	msr	PRIMASK, r3
}
 8005a60:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2220      	movs	r2, #32
 8005a66:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2278      	movs	r2, #120	@ 0x78
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e05f      	b.n	8005b34 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2204      	movs	r2, #4
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d146      	bne.n	8005b10 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a84:	2280      	movs	r2, #128	@ 0x80
 8005a86:	03d1      	lsls	r1, r2, #15
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	4a2c      	ldr	r2, [pc, #176]	@ (8005b3c <UART_CheckIdleState+0x148>)
 8005a8c:	9200      	str	r2, [sp, #0]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f000 f858 	bl	8005b44 <UART_WaitOnFlagUntilTimeout>
 8005a94:	1e03      	subs	r3, r0, #0
 8005a96:	d03b      	beq.n	8005b10 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a98:	f3ef 8310 	mrs	r3, PRIMASK
 8005a9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f383 8810 	msr	PRIMASK, r3
}
 8005aac:	46c0      	nop			@ (mov r8, r8)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4921      	ldr	r1, [pc, #132]	@ (8005b40 <UART_CheckIdleState+0x14c>)
 8005aba:	400a      	ands	r2, r1
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ac0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f383 8810 	msr	PRIMASK, r3
}
 8005ac8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aca:	f3ef 8310 	mrs	r3, PRIMASK
 8005ace:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ad0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	f383 8810 	msr	PRIMASK, r3
}
 8005ade:	46c0      	nop			@ (mov r8, r8)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2101      	movs	r1, #1
 8005aec:	438a      	bics	r2, r1
 8005aee:	609a      	str	r2, [r3, #8]
 8005af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	f383 8810 	msr	PRIMASK, r3
}
 8005afa:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2280      	movs	r2, #128	@ 0x80
 8005b00:	2120      	movs	r1, #32
 8005b02:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2278      	movs	r2, #120	@ 0x78
 8005b08:	2100      	movs	r1, #0
 8005b0a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e011      	b.n	8005b34 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2220      	movs	r2, #32
 8005b14:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2280      	movs	r2, #128	@ 0x80
 8005b1a:	2120      	movs	r1, #32
 8005b1c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2278      	movs	r2, #120	@ 0x78
 8005b2e:	2100      	movs	r1, #0
 8005b30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	0018      	movs	r0, r3
 8005b36:	46bd      	mov	sp, r7
 8005b38:	b010      	add	sp, #64	@ 0x40
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	01ffffff 	.word	0x01ffffff
 8005b40:	fffffedf 	.word	0xfffffedf

08005b44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	1dfb      	adds	r3, r7, #7
 8005b52:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b54:	e051      	b.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	d04e      	beq.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b5c:	f7fd fd6e 	bl	800363c <HAL_GetTick>
 8005b60:	0002      	movs	r2, r0
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d302      	bcc.n	8005b72 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e051      	b.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2204      	movs	r2, #4
 8005b7e:	4013      	ands	r3, r2
 8005b80:	d03b      	beq.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xb6>
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b80      	cmp	r3, #128	@ 0x80
 8005b86:	d038      	beq.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xb6>
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b40      	cmp	r3, #64	@ 0x40
 8005b8c:	d035      	beq.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	2208      	movs	r2, #8
 8005b96:	4013      	ands	r3, r2
 8005b98:	2b08      	cmp	r3, #8
 8005b9a:	d111      	bne.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2208      	movs	r2, #8
 8005ba2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	f000 f83c 	bl	8005c24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2284      	movs	r2, #132	@ 0x84
 8005bb0:	2108      	movs	r1, #8
 8005bb2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2278      	movs	r2, #120	@ 0x78
 8005bb8:	2100      	movs	r1, #0
 8005bba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e02c      	b.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69da      	ldr	r2, [r3, #28]
 8005bc6:	2380      	movs	r3, #128	@ 0x80
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	401a      	ands	r2, r3
 8005bcc:	2380      	movs	r3, #128	@ 0x80
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d112      	bne.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2280      	movs	r2, #128	@ 0x80
 8005bda:	0112      	lsls	r2, r2, #4
 8005bdc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	0018      	movs	r0, r3
 8005be2:	f000 f81f 	bl	8005c24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2284      	movs	r2, #132	@ 0x84
 8005bea:	2120      	movs	r1, #32
 8005bec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2278      	movs	r2, #120	@ 0x78
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e00f      	b.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	4013      	ands	r3, r2
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	425a      	negs	r2, r3
 8005c0a:	4153      	adcs	r3, r2
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	001a      	movs	r2, r3
 8005c10:	1dfb      	adds	r3, r7, #7
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d09e      	beq.n	8005b56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	b004      	add	sp, #16
 8005c20:	bd80      	pop	{r7, pc}
	...

08005c24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b08e      	sub	sp, #56	@ 0x38
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c30:	617b      	str	r3, [r7, #20]
  return(result);
 8005c32:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c36:	2301      	movs	r3, #1
 8005c38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	f383 8810 	msr	PRIMASK, r3
}
 8005c40:	46c0      	nop			@ (mov r8, r8)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4926      	ldr	r1, [pc, #152]	@ (8005ce8 <UART_EndRxTransfer+0xc4>)
 8005c4e:	400a      	ands	r2, r1
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	f383 8810 	msr	PRIMASK, r3
}
 8005c5c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c62:	623b      	str	r3, [r7, #32]
  return(result);
 8005c64:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c66:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c68:	2301      	movs	r3, #1
 8005c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6e:	f383 8810 	msr	PRIMASK, r3
}
 8005c72:	46c0      	nop			@ (mov r8, r8)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2101      	movs	r1, #1
 8005c80:	438a      	bics	r2, r1
 8005c82:	609a      	str	r2, [r3, #8]
 8005c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8a:	f383 8810 	msr	PRIMASK, r3
}
 8005c8e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d118      	bne.n	8005cca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c98:	f3ef 8310 	mrs	r3, PRIMASK
 8005c9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f383 8810 	msr	PRIMASK, r3
}
 8005cac:	46c0      	nop			@ (mov r8, r8)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2110      	movs	r1, #16
 8005cba:	438a      	bics	r2, r1
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f383 8810 	msr	PRIMASK, r3
}
 8005cc8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2280      	movs	r2, #128	@ 0x80
 8005cce:	2120      	movs	r1, #32
 8005cd0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005cde:	46c0      	nop			@ (mov r8, r8)
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	b00e      	add	sp, #56	@ 0x38
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	46c0      	nop			@ (mov r8, r8)
 8005ce8:	fffffedf 	.word	0xfffffedf

08005cec <__cvt>:
 8005cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cee:	001f      	movs	r7, r3
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	0016      	movs	r6, r2
 8005cf4:	b08b      	sub	sp, #44	@ 0x2c
 8005cf6:	429f      	cmp	r7, r3
 8005cf8:	da04      	bge.n	8005d04 <__cvt+0x18>
 8005cfa:	2180      	movs	r1, #128	@ 0x80
 8005cfc:	0609      	lsls	r1, r1, #24
 8005cfe:	187b      	adds	r3, r7, r1
 8005d00:	001f      	movs	r7, r3
 8005d02:	232d      	movs	r3, #45	@ 0x2d
 8005d04:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005d06:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8005d08:	7013      	strb	r3, [r2, #0]
 8005d0a:	2320      	movs	r3, #32
 8005d0c:	2203      	movs	r2, #3
 8005d0e:	439d      	bics	r5, r3
 8005d10:	2d46      	cmp	r5, #70	@ 0x46
 8005d12:	d007      	beq.n	8005d24 <__cvt+0x38>
 8005d14:	002b      	movs	r3, r5
 8005d16:	3b45      	subs	r3, #69	@ 0x45
 8005d18:	4259      	negs	r1, r3
 8005d1a:	414b      	adcs	r3, r1
 8005d1c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005d1e:	3a01      	subs	r2, #1
 8005d20:	18cb      	adds	r3, r1, r3
 8005d22:	9310      	str	r3, [sp, #64]	@ 0x40
 8005d24:	ab09      	add	r3, sp, #36	@ 0x24
 8005d26:	9304      	str	r3, [sp, #16]
 8005d28:	ab08      	add	r3, sp, #32
 8005d2a:	9303      	str	r3, [sp, #12]
 8005d2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005d2e:	9200      	str	r2, [sp, #0]
 8005d30:	9302      	str	r3, [sp, #8]
 8005d32:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005d34:	0032      	movs	r2, r6
 8005d36:	9301      	str	r3, [sp, #4]
 8005d38:	003b      	movs	r3, r7
 8005d3a:	f000 fe81 	bl	8006a40 <_dtoa_r>
 8005d3e:	0004      	movs	r4, r0
 8005d40:	2d47      	cmp	r5, #71	@ 0x47
 8005d42:	d11b      	bne.n	8005d7c <__cvt+0x90>
 8005d44:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005d46:	07db      	lsls	r3, r3, #31
 8005d48:	d511      	bpl.n	8005d6e <__cvt+0x82>
 8005d4a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005d4c:	18c3      	adds	r3, r0, r3
 8005d4e:	9307      	str	r3, [sp, #28]
 8005d50:	2200      	movs	r2, #0
 8005d52:	2300      	movs	r3, #0
 8005d54:	0030      	movs	r0, r6
 8005d56:	0039      	movs	r1, r7
 8005d58:	f7fa fb78 	bl	800044c <__aeabi_dcmpeq>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d001      	beq.n	8005d64 <__cvt+0x78>
 8005d60:	9b07      	ldr	r3, [sp, #28]
 8005d62:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d64:	2230      	movs	r2, #48	@ 0x30
 8005d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d68:	9907      	ldr	r1, [sp, #28]
 8005d6a:	428b      	cmp	r3, r1
 8005d6c:	d320      	bcc.n	8005db0 <__cvt+0xc4>
 8005d6e:	0020      	movs	r0, r4
 8005d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d72:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005d74:	1b1b      	subs	r3, r3, r4
 8005d76:	6013      	str	r3, [r2, #0]
 8005d78:	b00b      	add	sp, #44	@ 0x2c
 8005d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005d7e:	18c3      	adds	r3, r0, r3
 8005d80:	9307      	str	r3, [sp, #28]
 8005d82:	2d46      	cmp	r5, #70	@ 0x46
 8005d84:	d1e4      	bne.n	8005d50 <__cvt+0x64>
 8005d86:	7803      	ldrb	r3, [r0, #0]
 8005d88:	2b30      	cmp	r3, #48	@ 0x30
 8005d8a:	d10c      	bne.n	8005da6 <__cvt+0xba>
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	2300      	movs	r3, #0
 8005d90:	0030      	movs	r0, r6
 8005d92:	0039      	movs	r1, r7
 8005d94:	f7fa fb5a 	bl	800044c <__aeabi_dcmpeq>
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	d104      	bne.n	8005da6 <__cvt+0xba>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005da0:	1a9b      	subs	r3, r3, r2
 8005da2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005da8:	9a07      	ldr	r2, [sp, #28]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	18d3      	adds	r3, r2, r3
 8005dae:	e7ce      	b.n	8005d4e <__cvt+0x62>
 8005db0:	1c59      	adds	r1, r3, #1
 8005db2:	9109      	str	r1, [sp, #36]	@ 0x24
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	e7d6      	b.n	8005d66 <__cvt+0x7a>

08005db8 <__exponent>:
 8005db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dba:	232b      	movs	r3, #43	@ 0x2b
 8005dbc:	b085      	sub	sp, #20
 8005dbe:	0005      	movs	r5, r0
 8005dc0:	1e0c      	subs	r4, r1, #0
 8005dc2:	7002      	strb	r2, [r0, #0]
 8005dc4:	da01      	bge.n	8005dca <__exponent+0x12>
 8005dc6:	424c      	negs	r4, r1
 8005dc8:	3302      	adds	r3, #2
 8005dca:	706b      	strb	r3, [r5, #1]
 8005dcc:	2c09      	cmp	r4, #9
 8005dce:	dd2c      	ble.n	8005e2a <__exponent+0x72>
 8005dd0:	ab02      	add	r3, sp, #8
 8005dd2:	1dde      	adds	r6, r3, #7
 8005dd4:	0020      	movs	r0, r4
 8005dd6:	210a      	movs	r1, #10
 8005dd8:	f7fa fb22 	bl	8000420 <__aeabi_idivmod>
 8005ddc:	0037      	movs	r7, r6
 8005dde:	3130      	adds	r1, #48	@ 0x30
 8005de0:	3e01      	subs	r6, #1
 8005de2:	0020      	movs	r0, r4
 8005de4:	7031      	strb	r1, [r6, #0]
 8005de6:	210a      	movs	r1, #10
 8005de8:	9401      	str	r4, [sp, #4]
 8005dea:	f7fa fa33 	bl	8000254 <__divsi3>
 8005dee:	9b01      	ldr	r3, [sp, #4]
 8005df0:	0004      	movs	r4, r0
 8005df2:	2b63      	cmp	r3, #99	@ 0x63
 8005df4:	dcee      	bgt.n	8005dd4 <__exponent+0x1c>
 8005df6:	1eba      	subs	r2, r7, #2
 8005df8:	1ca8      	adds	r0, r5, #2
 8005dfa:	0001      	movs	r1, r0
 8005dfc:	0013      	movs	r3, r2
 8005dfe:	3430      	adds	r4, #48	@ 0x30
 8005e00:	7014      	strb	r4, [r2, #0]
 8005e02:	ac02      	add	r4, sp, #8
 8005e04:	3407      	adds	r4, #7
 8005e06:	429c      	cmp	r4, r3
 8005e08:	d80a      	bhi.n	8005e20 <__exponent+0x68>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	4294      	cmp	r4, r2
 8005e0e:	d303      	bcc.n	8005e18 <__exponent+0x60>
 8005e10:	3309      	adds	r3, #9
 8005e12:	aa02      	add	r2, sp, #8
 8005e14:	189b      	adds	r3, r3, r2
 8005e16:	1bdb      	subs	r3, r3, r7
 8005e18:	18c0      	adds	r0, r0, r3
 8005e1a:	1b40      	subs	r0, r0, r5
 8005e1c:	b005      	add	sp, #20
 8005e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e20:	781c      	ldrb	r4, [r3, #0]
 8005e22:	3301      	adds	r3, #1
 8005e24:	700c      	strb	r4, [r1, #0]
 8005e26:	3101      	adds	r1, #1
 8005e28:	e7eb      	b.n	8005e02 <__exponent+0x4a>
 8005e2a:	2330      	movs	r3, #48	@ 0x30
 8005e2c:	18e4      	adds	r4, r4, r3
 8005e2e:	70ab      	strb	r3, [r5, #2]
 8005e30:	1d28      	adds	r0, r5, #4
 8005e32:	70ec      	strb	r4, [r5, #3]
 8005e34:	e7f1      	b.n	8005e1a <__exponent+0x62>
	...

08005e38 <_printf_float>:
 8005e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e3a:	b097      	sub	sp, #92	@ 0x5c
 8005e3c:	000d      	movs	r5, r1
 8005e3e:	920a      	str	r2, [sp, #40]	@ 0x28
 8005e40:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8005e42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e44:	9009      	str	r0, [sp, #36]	@ 0x24
 8005e46:	f000 fceb 	bl	8006820 <_localeconv_r>
 8005e4a:	6803      	ldr	r3, [r0, #0]
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005e50:	f7fa f95a 	bl	8000108 <strlen>
 8005e54:	2300      	movs	r3, #0
 8005e56:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005e58:	9314      	str	r3, [sp, #80]	@ 0x50
 8005e5a:	7e2b      	ldrb	r3, [r5, #24]
 8005e5c:	2207      	movs	r2, #7
 8005e5e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005e60:	682b      	ldr	r3, [r5, #0]
 8005e62:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e64:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	05c9      	lsls	r1, r1, #23
 8005e6a:	d545      	bpl.n	8005ef8 <_printf_float+0xc0>
 8005e6c:	189b      	adds	r3, r3, r2
 8005e6e:	4393      	bics	r3, r2
 8005e70:	001a      	movs	r2, r3
 8005e72:	3208      	adds	r2, #8
 8005e74:	6022      	str	r2, [r4, #0]
 8005e76:	2201      	movs	r2, #1
 8005e78:	681e      	ldr	r6, [r3, #0]
 8005e7a:	685f      	ldr	r7, [r3, #4]
 8005e7c:	007b      	lsls	r3, r7, #1
 8005e7e:	085b      	lsrs	r3, r3, #1
 8005e80:	9311      	str	r3, [sp, #68]	@ 0x44
 8005e82:	9610      	str	r6, [sp, #64]	@ 0x40
 8005e84:	64ae      	str	r6, [r5, #72]	@ 0x48
 8005e86:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8005e88:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005e8a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005e8c:	4ba7      	ldr	r3, [pc, #668]	@ (800612c <_printf_float+0x2f4>)
 8005e8e:	4252      	negs	r2, r2
 8005e90:	f7fc fd4a 	bl	8002928 <__aeabi_dcmpun>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	d131      	bne.n	8005efc <_printf_float+0xc4>
 8005e98:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005e9a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	4ba3      	ldr	r3, [pc, #652]	@ (800612c <_printf_float+0x2f4>)
 8005ea0:	4252      	negs	r2, r2
 8005ea2:	f7fa fae3 	bl	800046c <__aeabi_dcmple>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d128      	bne.n	8005efc <_printf_float+0xc4>
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2300      	movs	r3, #0
 8005eae:	0030      	movs	r0, r6
 8005eb0:	0039      	movs	r1, r7
 8005eb2:	f7fa fad1 	bl	8000458 <__aeabi_dcmplt>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d003      	beq.n	8005ec2 <_printf_float+0x8a>
 8005eba:	002b      	movs	r3, r5
 8005ebc:	222d      	movs	r2, #45	@ 0x2d
 8005ebe:	3343      	adds	r3, #67	@ 0x43
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005ec4:	4f9a      	ldr	r7, [pc, #616]	@ (8006130 <_printf_float+0x2f8>)
 8005ec6:	2b47      	cmp	r3, #71	@ 0x47
 8005ec8:	d800      	bhi.n	8005ecc <_printf_float+0x94>
 8005eca:	4f9a      	ldr	r7, [pc, #616]	@ (8006134 <_printf_float+0x2fc>)
 8005ecc:	2303      	movs	r3, #3
 8005ece:	2400      	movs	r4, #0
 8005ed0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ed2:	612b      	str	r3, [r5, #16]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	439a      	bics	r2, r3
 8005ed8:	602a      	str	r2, [r5, #0]
 8005eda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005edc:	0029      	movs	r1, r5
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ee2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ee4:	aa15      	add	r2, sp, #84	@ 0x54
 8005ee6:	f000 f9e5 	bl	80062b4 <_printf_common>
 8005eea:	3001      	adds	r0, #1
 8005eec:	d000      	beq.n	8005ef0 <_printf_float+0xb8>
 8005eee:	e09e      	b.n	800602e <_printf_float+0x1f6>
 8005ef0:	2001      	movs	r0, #1
 8005ef2:	4240      	negs	r0, r0
 8005ef4:	b017      	add	sp, #92	@ 0x5c
 8005ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ef8:	3307      	adds	r3, #7
 8005efa:	e7b8      	b.n	8005e6e <_printf_float+0x36>
 8005efc:	0032      	movs	r2, r6
 8005efe:	003b      	movs	r3, r7
 8005f00:	0030      	movs	r0, r6
 8005f02:	0039      	movs	r1, r7
 8005f04:	f7fc fd10 	bl	8002928 <__aeabi_dcmpun>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d00b      	beq.n	8005f24 <_printf_float+0xec>
 8005f0c:	2f00      	cmp	r7, #0
 8005f0e:	da03      	bge.n	8005f18 <_printf_float+0xe0>
 8005f10:	002b      	movs	r3, r5
 8005f12:	222d      	movs	r2, #45	@ 0x2d
 8005f14:	3343      	adds	r3, #67	@ 0x43
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f1a:	4f87      	ldr	r7, [pc, #540]	@ (8006138 <_printf_float+0x300>)
 8005f1c:	2b47      	cmp	r3, #71	@ 0x47
 8005f1e:	d8d5      	bhi.n	8005ecc <_printf_float+0x94>
 8005f20:	4f86      	ldr	r7, [pc, #536]	@ (800613c <_printf_float+0x304>)
 8005f22:	e7d3      	b.n	8005ecc <_printf_float+0x94>
 8005f24:	2220      	movs	r2, #32
 8005f26:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005f28:	686b      	ldr	r3, [r5, #4]
 8005f2a:	4394      	bics	r4, r2
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	d146      	bne.n	8005fbe <_printf_float+0x186>
 8005f30:	3307      	adds	r3, #7
 8005f32:	606b      	str	r3, [r5, #4]
 8005f34:	2380      	movs	r3, #128	@ 0x80
 8005f36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	602b      	str	r3, [r5, #0]
 8005f40:	9206      	str	r2, [sp, #24]
 8005f42:	aa14      	add	r2, sp, #80	@ 0x50
 8005f44:	9205      	str	r2, [sp, #20]
 8005f46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005f48:	a90a      	add	r1, sp, #40	@ 0x28
 8005f4a:	9204      	str	r2, [sp, #16]
 8005f4c:	aa13      	add	r2, sp, #76	@ 0x4c
 8005f4e:	9203      	str	r2, [sp, #12]
 8005f50:	2223      	movs	r2, #35	@ 0x23
 8005f52:	1852      	adds	r2, r2, r1
 8005f54:	9202      	str	r2, [sp, #8]
 8005f56:	9301      	str	r3, [sp, #4]
 8005f58:	686b      	ldr	r3, [r5, #4]
 8005f5a:	0032      	movs	r2, r6
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f60:	003b      	movs	r3, r7
 8005f62:	f7ff fec3 	bl	8005cec <__cvt>
 8005f66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f68:	0007      	movs	r7, r0
 8005f6a:	2c47      	cmp	r4, #71	@ 0x47
 8005f6c:	d12d      	bne.n	8005fca <_printf_float+0x192>
 8005f6e:	1cd3      	adds	r3, r2, #3
 8005f70:	db02      	blt.n	8005f78 <_printf_float+0x140>
 8005f72:	686b      	ldr	r3, [r5, #4]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	dd47      	ble.n	8006008 <_printf_float+0x1d0>
 8005f78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f7a:	3b02      	subs	r3, #2
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f80:	0028      	movs	r0, r5
 8005f82:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005f84:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005f86:	3901      	subs	r1, #1
 8005f88:	3050      	adds	r0, #80	@ 0x50
 8005f8a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005f8c:	f7ff ff14 	bl	8005db8 <__exponent>
 8005f90:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005f92:	0004      	movs	r4, r0
 8005f94:	1813      	adds	r3, r2, r0
 8005f96:	612b      	str	r3, [r5, #16]
 8005f98:	2a01      	cmp	r2, #1
 8005f9a:	dc02      	bgt.n	8005fa2 <_printf_float+0x16a>
 8005f9c:	682a      	ldr	r2, [r5, #0]
 8005f9e:	07d2      	lsls	r2, r2, #31
 8005fa0:	d501      	bpl.n	8005fa6 <_printf_float+0x16e>
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	612b      	str	r3, [r5, #16]
 8005fa6:	2323      	movs	r3, #35	@ 0x23
 8005fa8:	aa0a      	add	r2, sp, #40	@ 0x28
 8005faa:	189b      	adds	r3, r3, r2
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d100      	bne.n	8005fb4 <_printf_float+0x17c>
 8005fb2:	e792      	b.n	8005eda <_printf_float+0xa2>
 8005fb4:	002b      	movs	r3, r5
 8005fb6:	222d      	movs	r2, #45	@ 0x2d
 8005fb8:	3343      	adds	r3, #67	@ 0x43
 8005fba:	701a      	strb	r2, [r3, #0]
 8005fbc:	e78d      	b.n	8005eda <_printf_float+0xa2>
 8005fbe:	2c47      	cmp	r4, #71	@ 0x47
 8005fc0:	d1b8      	bne.n	8005f34 <_printf_float+0xfc>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1b6      	bne.n	8005f34 <_printf_float+0xfc>
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	e7b3      	b.n	8005f32 <_printf_float+0xfa>
 8005fca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005fcc:	2b65      	cmp	r3, #101	@ 0x65
 8005fce:	d9d7      	bls.n	8005f80 <_printf_float+0x148>
 8005fd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005fd2:	2b66      	cmp	r3, #102	@ 0x66
 8005fd4:	d11a      	bne.n	800600c <_printf_float+0x1d4>
 8005fd6:	686b      	ldr	r3, [r5, #4]
 8005fd8:	2a00      	cmp	r2, #0
 8005fda:	dd09      	ble.n	8005ff0 <_printf_float+0x1b8>
 8005fdc:	612a      	str	r2, [r5, #16]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d102      	bne.n	8005fe8 <_printf_float+0x1b0>
 8005fe2:	6829      	ldr	r1, [r5, #0]
 8005fe4:	07c9      	lsls	r1, r1, #31
 8005fe6:	d50b      	bpl.n	8006000 <_printf_float+0x1c8>
 8005fe8:	3301      	adds	r3, #1
 8005fea:	189b      	adds	r3, r3, r2
 8005fec:	612b      	str	r3, [r5, #16]
 8005fee:	e007      	b.n	8006000 <_printf_float+0x1c8>
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d103      	bne.n	8005ffc <_printf_float+0x1c4>
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	6829      	ldr	r1, [r5, #0]
 8005ff8:	4211      	tst	r1, r2
 8005ffa:	d000      	beq.n	8005ffe <_printf_float+0x1c6>
 8005ffc:	1c9a      	adds	r2, r3, #2
 8005ffe:	612a      	str	r2, [r5, #16]
 8006000:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006002:	2400      	movs	r4, #0
 8006004:	65ab      	str	r3, [r5, #88]	@ 0x58
 8006006:	e7ce      	b.n	8005fa6 <_printf_float+0x16e>
 8006008:	2367      	movs	r3, #103	@ 0x67
 800600a:	930c      	str	r3, [sp, #48]	@ 0x30
 800600c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800600e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006010:	4299      	cmp	r1, r3
 8006012:	db06      	blt.n	8006022 <_printf_float+0x1ea>
 8006014:	682b      	ldr	r3, [r5, #0]
 8006016:	6129      	str	r1, [r5, #16]
 8006018:	07db      	lsls	r3, r3, #31
 800601a:	d5f1      	bpl.n	8006000 <_printf_float+0x1c8>
 800601c:	3101      	adds	r1, #1
 800601e:	6129      	str	r1, [r5, #16]
 8006020:	e7ee      	b.n	8006000 <_printf_float+0x1c8>
 8006022:	2201      	movs	r2, #1
 8006024:	2900      	cmp	r1, #0
 8006026:	dce0      	bgt.n	8005fea <_printf_float+0x1b2>
 8006028:	1892      	adds	r2, r2, r2
 800602a:	1a52      	subs	r2, r2, r1
 800602c:	e7dd      	b.n	8005fea <_printf_float+0x1b2>
 800602e:	682a      	ldr	r2, [r5, #0]
 8006030:	0553      	lsls	r3, r2, #21
 8006032:	d408      	bmi.n	8006046 <_printf_float+0x20e>
 8006034:	692b      	ldr	r3, [r5, #16]
 8006036:	003a      	movs	r2, r7
 8006038:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800603a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800603c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800603e:	47a0      	blx	r4
 8006040:	3001      	adds	r0, #1
 8006042:	d129      	bne.n	8006098 <_printf_float+0x260>
 8006044:	e754      	b.n	8005ef0 <_printf_float+0xb8>
 8006046:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006048:	2b65      	cmp	r3, #101	@ 0x65
 800604a:	d800      	bhi.n	800604e <_printf_float+0x216>
 800604c:	e0db      	b.n	8006206 <_printf_float+0x3ce>
 800604e:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8006050:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8006052:	2200      	movs	r2, #0
 8006054:	2300      	movs	r3, #0
 8006056:	f7fa f9f9 	bl	800044c <__aeabi_dcmpeq>
 800605a:	2800      	cmp	r0, #0
 800605c:	d033      	beq.n	80060c6 <_printf_float+0x28e>
 800605e:	2301      	movs	r3, #1
 8006060:	4a37      	ldr	r2, [pc, #220]	@ (8006140 <_printf_float+0x308>)
 8006062:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006064:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006066:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006068:	47a0      	blx	r4
 800606a:	3001      	adds	r0, #1
 800606c:	d100      	bne.n	8006070 <_printf_float+0x238>
 800606e:	e73f      	b.n	8005ef0 <_printf_float+0xb8>
 8006070:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006072:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006074:	42b3      	cmp	r3, r6
 8006076:	db02      	blt.n	800607e <_printf_float+0x246>
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	07db      	lsls	r3, r3, #31
 800607c:	d50c      	bpl.n	8006098 <_printf_float+0x260>
 800607e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006082:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006084:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006086:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006088:	47a0      	blx	r4
 800608a:	2400      	movs	r4, #0
 800608c:	3001      	adds	r0, #1
 800608e:	d100      	bne.n	8006092 <_printf_float+0x25a>
 8006090:	e72e      	b.n	8005ef0 <_printf_float+0xb8>
 8006092:	1e73      	subs	r3, r6, #1
 8006094:	42a3      	cmp	r3, r4
 8006096:	dc0a      	bgt.n	80060ae <_printf_float+0x276>
 8006098:	682b      	ldr	r3, [r5, #0]
 800609a:	079b      	lsls	r3, r3, #30
 800609c:	d500      	bpl.n	80060a0 <_printf_float+0x268>
 800609e:	e106      	b.n	80062ae <_printf_float+0x476>
 80060a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80060a2:	68e8      	ldr	r0, [r5, #12]
 80060a4:	4298      	cmp	r0, r3
 80060a6:	db00      	blt.n	80060aa <_printf_float+0x272>
 80060a8:	e724      	b.n	8005ef4 <_printf_float+0xbc>
 80060aa:	0018      	movs	r0, r3
 80060ac:	e722      	b.n	8005ef4 <_printf_float+0xbc>
 80060ae:	002a      	movs	r2, r5
 80060b0:	2301      	movs	r3, #1
 80060b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060b6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80060b8:	321a      	adds	r2, #26
 80060ba:	47b8      	blx	r7
 80060bc:	3001      	adds	r0, #1
 80060be:	d100      	bne.n	80060c2 <_printf_float+0x28a>
 80060c0:	e716      	b.n	8005ef0 <_printf_float+0xb8>
 80060c2:	3401      	adds	r4, #1
 80060c4:	e7e5      	b.n	8006092 <_printf_float+0x25a>
 80060c6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	dc3b      	bgt.n	8006144 <_printf_float+0x30c>
 80060cc:	2301      	movs	r3, #1
 80060ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006140 <_printf_float+0x308>)
 80060d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060d4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80060d6:	47a0      	blx	r4
 80060d8:	3001      	adds	r0, #1
 80060da:	d100      	bne.n	80060de <_printf_float+0x2a6>
 80060dc:	e708      	b.n	8005ef0 <_printf_float+0xb8>
 80060de:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80060e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80060e2:	4333      	orrs	r3, r6
 80060e4:	d102      	bne.n	80060ec <_printf_float+0x2b4>
 80060e6:	682b      	ldr	r3, [r5, #0]
 80060e8:	07db      	lsls	r3, r3, #31
 80060ea:	d5d5      	bpl.n	8006098 <_printf_float+0x260>
 80060ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80060f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060f4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80060f6:	47a0      	blx	r4
 80060f8:	2300      	movs	r3, #0
 80060fa:	3001      	adds	r0, #1
 80060fc:	d100      	bne.n	8006100 <_printf_float+0x2c8>
 80060fe:	e6f7      	b.n	8005ef0 <_printf_float+0xb8>
 8006100:	930c      	str	r3, [sp, #48]	@ 0x30
 8006102:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006104:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006106:	425b      	negs	r3, r3
 8006108:	4293      	cmp	r3, r2
 800610a:	dc01      	bgt.n	8006110 <_printf_float+0x2d8>
 800610c:	0033      	movs	r3, r6
 800610e:	e792      	b.n	8006036 <_printf_float+0x1fe>
 8006110:	002a      	movs	r2, r5
 8006112:	2301      	movs	r3, #1
 8006114:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006116:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006118:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800611a:	321a      	adds	r2, #26
 800611c:	47a0      	blx	r4
 800611e:	3001      	adds	r0, #1
 8006120:	d100      	bne.n	8006124 <_printf_float+0x2ec>
 8006122:	e6e5      	b.n	8005ef0 <_printf_float+0xb8>
 8006124:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006126:	3301      	adds	r3, #1
 8006128:	e7ea      	b.n	8006100 <_printf_float+0x2c8>
 800612a:	46c0      	nop			@ (mov r8, r8)
 800612c:	7fefffff 	.word	0x7fefffff
 8006130:	08009dac 	.word	0x08009dac
 8006134:	08009da8 	.word	0x08009da8
 8006138:	08009db4 	.word	0x08009db4
 800613c:	08009db0 	.word	0x08009db0
 8006140:	08009db8 	.word	0x08009db8
 8006144:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006146:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006148:	930c      	str	r3, [sp, #48]	@ 0x30
 800614a:	429e      	cmp	r6, r3
 800614c:	dd00      	ble.n	8006150 <_printf_float+0x318>
 800614e:	001e      	movs	r6, r3
 8006150:	2e00      	cmp	r6, #0
 8006152:	dc31      	bgt.n	80061b8 <_printf_float+0x380>
 8006154:	43f3      	mvns	r3, r6
 8006156:	2400      	movs	r4, #0
 8006158:	17db      	asrs	r3, r3, #31
 800615a:	4033      	ands	r3, r6
 800615c:	930e      	str	r3, [sp, #56]	@ 0x38
 800615e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006160:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006162:	1af3      	subs	r3, r6, r3
 8006164:	42a3      	cmp	r3, r4
 8006166:	dc30      	bgt.n	80061ca <_printf_float+0x392>
 8006168:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800616a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800616c:	429a      	cmp	r2, r3
 800616e:	dc38      	bgt.n	80061e2 <_printf_float+0x3aa>
 8006170:	682b      	ldr	r3, [r5, #0]
 8006172:	07db      	lsls	r3, r3, #31
 8006174:	d435      	bmi.n	80061e2 <_printf_float+0x3aa>
 8006176:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006178:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800617a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800617c:	1b9b      	subs	r3, r3, r6
 800617e:	1b14      	subs	r4, r2, r4
 8006180:	429c      	cmp	r4, r3
 8006182:	dd00      	ble.n	8006186 <_printf_float+0x34e>
 8006184:	001c      	movs	r4, r3
 8006186:	2c00      	cmp	r4, #0
 8006188:	dc34      	bgt.n	80061f4 <_printf_float+0x3bc>
 800618a:	43e3      	mvns	r3, r4
 800618c:	2600      	movs	r6, #0
 800618e:	17db      	asrs	r3, r3, #31
 8006190:	401c      	ands	r4, r3
 8006192:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006194:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	1b1b      	subs	r3, r3, r4
 800619a:	42b3      	cmp	r3, r6
 800619c:	dc00      	bgt.n	80061a0 <_printf_float+0x368>
 800619e:	e77b      	b.n	8006098 <_printf_float+0x260>
 80061a0:	002a      	movs	r2, r5
 80061a2:	2301      	movs	r3, #1
 80061a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061a8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80061aa:	321a      	adds	r2, #26
 80061ac:	47b8      	blx	r7
 80061ae:	3001      	adds	r0, #1
 80061b0:	d100      	bne.n	80061b4 <_printf_float+0x37c>
 80061b2:	e69d      	b.n	8005ef0 <_printf_float+0xb8>
 80061b4:	3601      	adds	r6, #1
 80061b6:	e7ec      	b.n	8006192 <_printf_float+0x35a>
 80061b8:	0033      	movs	r3, r6
 80061ba:	003a      	movs	r2, r7
 80061bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061c0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80061c2:	47a0      	blx	r4
 80061c4:	3001      	adds	r0, #1
 80061c6:	d1c5      	bne.n	8006154 <_printf_float+0x31c>
 80061c8:	e692      	b.n	8005ef0 <_printf_float+0xb8>
 80061ca:	002a      	movs	r2, r5
 80061cc:	2301      	movs	r3, #1
 80061ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061d2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80061d4:	321a      	adds	r2, #26
 80061d6:	47b0      	blx	r6
 80061d8:	3001      	adds	r0, #1
 80061da:	d100      	bne.n	80061de <_printf_float+0x3a6>
 80061dc:	e688      	b.n	8005ef0 <_printf_float+0xb8>
 80061de:	3401      	adds	r4, #1
 80061e0:	e7bd      	b.n	800615e <_printf_float+0x326>
 80061e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80061e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061ea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80061ec:	47a0      	blx	r4
 80061ee:	3001      	adds	r0, #1
 80061f0:	d1c1      	bne.n	8006176 <_printf_float+0x33e>
 80061f2:	e67d      	b.n	8005ef0 <_printf_float+0xb8>
 80061f4:	19ba      	adds	r2, r7, r6
 80061f6:	0023      	movs	r3, r4
 80061f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061fc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80061fe:	47b0      	blx	r6
 8006200:	3001      	adds	r0, #1
 8006202:	d1c2      	bne.n	800618a <_printf_float+0x352>
 8006204:	e674      	b.n	8005ef0 <_printf_float+0xb8>
 8006206:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006208:	930c      	str	r3, [sp, #48]	@ 0x30
 800620a:	2b01      	cmp	r3, #1
 800620c:	dc02      	bgt.n	8006214 <_printf_float+0x3dc>
 800620e:	2301      	movs	r3, #1
 8006210:	421a      	tst	r2, r3
 8006212:	d039      	beq.n	8006288 <_printf_float+0x450>
 8006214:	2301      	movs	r3, #1
 8006216:	003a      	movs	r2, r7
 8006218:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800621a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800621c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800621e:	47b0      	blx	r6
 8006220:	3001      	adds	r0, #1
 8006222:	d100      	bne.n	8006226 <_printf_float+0x3ee>
 8006224:	e664      	b.n	8005ef0 <_printf_float+0xb8>
 8006226:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006228:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800622a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800622c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800622e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006230:	47b0      	blx	r6
 8006232:	3001      	adds	r0, #1
 8006234:	d100      	bne.n	8006238 <_printf_float+0x400>
 8006236:	e65b      	b.n	8005ef0 <_printf_float+0xb8>
 8006238:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800623a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800623c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800623e:	2200      	movs	r2, #0
 8006240:	3b01      	subs	r3, #1
 8006242:	930c      	str	r3, [sp, #48]	@ 0x30
 8006244:	2300      	movs	r3, #0
 8006246:	f7fa f901 	bl	800044c <__aeabi_dcmpeq>
 800624a:	2800      	cmp	r0, #0
 800624c:	d11a      	bne.n	8006284 <_printf_float+0x44c>
 800624e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006250:	1c7a      	adds	r2, r7, #1
 8006252:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006254:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006256:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006258:	47b0      	blx	r6
 800625a:	3001      	adds	r0, #1
 800625c:	d10e      	bne.n	800627c <_printf_float+0x444>
 800625e:	e647      	b.n	8005ef0 <_printf_float+0xb8>
 8006260:	002a      	movs	r2, r5
 8006262:	2301      	movs	r3, #1
 8006264:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006266:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006268:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800626a:	321a      	adds	r2, #26
 800626c:	47b8      	blx	r7
 800626e:	3001      	adds	r0, #1
 8006270:	d100      	bne.n	8006274 <_printf_float+0x43c>
 8006272:	e63d      	b.n	8005ef0 <_printf_float+0xb8>
 8006274:	3601      	adds	r6, #1
 8006276:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006278:	429e      	cmp	r6, r3
 800627a:	dbf1      	blt.n	8006260 <_printf_float+0x428>
 800627c:	002a      	movs	r2, r5
 800627e:	0023      	movs	r3, r4
 8006280:	3250      	adds	r2, #80	@ 0x50
 8006282:	e6d9      	b.n	8006038 <_printf_float+0x200>
 8006284:	2600      	movs	r6, #0
 8006286:	e7f6      	b.n	8006276 <_printf_float+0x43e>
 8006288:	003a      	movs	r2, r7
 800628a:	e7e2      	b.n	8006252 <_printf_float+0x41a>
 800628c:	002a      	movs	r2, r5
 800628e:	2301      	movs	r3, #1
 8006290:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006292:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006294:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006296:	3219      	adds	r2, #25
 8006298:	47b0      	blx	r6
 800629a:	3001      	adds	r0, #1
 800629c:	d100      	bne.n	80062a0 <_printf_float+0x468>
 800629e:	e627      	b.n	8005ef0 <_printf_float+0xb8>
 80062a0:	3401      	adds	r4, #1
 80062a2:	68eb      	ldr	r3, [r5, #12]
 80062a4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80062a6:	1a9b      	subs	r3, r3, r2
 80062a8:	42a3      	cmp	r3, r4
 80062aa:	dcef      	bgt.n	800628c <_printf_float+0x454>
 80062ac:	e6f8      	b.n	80060a0 <_printf_float+0x268>
 80062ae:	2400      	movs	r4, #0
 80062b0:	e7f7      	b.n	80062a2 <_printf_float+0x46a>
 80062b2:	46c0      	nop			@ (mov r8, r8)

080062b4 <_printf_common>:
 80062b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062b6:	0016      	movs	r6, r2
 80062b8:	9301      	str	r3, [sp, #4]
 80062ba:	688a      	ldr	r2, [r1, #8]
 80062bc:	690b      	ldr	r3, [r1, #16]
 80062be:	000c      	movs	r4, r1
 80062c0:	9000      	str	r0, [sp, #0]
 80062c2:	4293      	cmp	r3, r2
 80062c4:	da00      	bge.n	80062c8 <_printf_common+0x14>
 80062c6:	0013      	movs	r3, r2
 80062c8:	0022      	movs	r2, r4
 80062ca:	6033      	str	r3, [r6, #0]
 80062cc:	3243      	adds	r2, #67	@ 0x43
 80062ce:	7812      	ldrb	r2, [r2, #0]
 80062d0:	2a00      	cmp	r2, #0
 80062d2:	d001      	beq.n	80062d8 <_printf_common+0x24>
 80062d4:	3301      	adds	r3, #1
 80062d6:	6033      	str	r3, [r6, #0]
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	069b      	lsls	r3, r3, #26
 80062dc:	d502      	bpl.n	80062e4 <_printf_common+0x30>
 80062de:	6833      	ldr	r3, [r6, #0]
 80062e0:	3302      	adds	r3, #2
 80062e2:	6033      	str	r3, [r6, #0]
 80062e4:	6822      	ldr	r2, [r4, #0]
 80062e6:	2306      	movs	r3, #6
 80062e8:	0015      	movs	r5, r2
 80062ea:	401d      	ands	r5, r3
 80062ec:	421a      	tst	r2, r3
 80062ee:	d027      	beq.n	8006340 <_printf_common+0x8c>
 80062f0:	0023      	movs	r3, r4
 80062f2:	3343      	adds	r3, #67	@ 0x43
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	1e5a      	subs	r2, r3, #1
 80062f8:	4193      	sbcs	r3, r2
 80062fa:	6822      	ldr	r2, [r4, #0]
 80062fc:	0692      	lsls	r2, r2, #26
 80062fe:	d430      	bmi.n	8006362 <_printf_common+0xae>
 8006300:	0022      	movs	r2, r4
 8006302:	9901      	ldr	r1, [sp, #4]
 8006304:	9800      	ldr	r0, [sp, #0]
 8006306:	9d08      	ldr	r5, [sp, #32]
 8006308:	3243      	adds	r2, #67	@ 0x43
 800630a:	47a8      	blx	r5
 800630c:	3001      	adds	r0, #1
 800630e:	d025      	beq.n	800635c <_printf_common+0xa8>
 8006310:	2206      	movs	r2, #6
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	2500      	movs	r5, #0
 8006316:	4013      	ands	r3, r2
 8006318:	2b04      	cmp	r3, #4
 800631a:	d105      	bne.n	8006328 <_printf_common+0x74>
 800631c:	6833      	ldr	r3, [r6, #0]
 800631e:	68e5      	ldr	r5, [r4, #12]
 8006320:	1aed      	subs	r5, r5, r3
 8006322:	43eb      	mvns	r3, r5
 8006324:	17db      	asrs	r3, r3, #31
 8006326:	401d      	ands	r5, r3
 8006328:	68a3      	ldr	r3, [r4, #8]
 800632a:	6922      	ldr	r2, [r4, #16]
 800632c:	4293      	cmp	r3, r2
 800632e:	dd01      	ble.n	8006334 <_printf_common+0x80>
 8006330:	1a9b      	subs	r3, r3, r2
 8006332:	18ed      	adds	r5, r5, r3
 8006334:	2600      	movs	r6, #0
 8006336:	42b5      	cmp	r5, r6
 8006338:	d120      	bne.n	800637c <_printf_common+0xc8>
 800633a:	2000      	movs	r0, #0
 800633c:	e010      	b.n	8006360 <_printf_common+0xac>
 800633e:	3501      	adds	r5, #1
 8006340:	68e3      	ldr	r3, [r4, #12]
 8006342:	6832      	ldr	r2, [r6, #0]
 8006344:	1a9b      	subs	r3, r3, r2
 8006346:	42ab      	cmp	r3, r5
 8006348:	ddd2      	ble.n	80062f0 <_printf_common+0x3c>
 800634a:	0022      	movs	r2, r4
 800634c:	2301      	movs	r3, #1
 800634e:	9901      	ldr	r1, [sp, #4]
 8006350:	9800      	ldr	r0, [sp, #0]
 8006352:	9f08      	ldr	r7, [sp, #32]
 8006354:	3219      	adds	r2, #25
 8006356:	47b8      	blx	r7
 8006358:	3001      	adds	r0, #1
 800635a:	d1f0      	bne.n	800633e <_printf_common+0x8a>
 800635c:	2001      	movs	r0, #1
 800635e:	4240      	negs	r0, r0
 8006360:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006362:	2030      	movs	r0, #48	@ 0x30
 8006364:	18e1      	adds	r1, r4, r3
 8006366:	3143      	adds	r1, #67	@ 0x43
 8006368:	7008      	strb	r0, [r1, #0]
 800636a:	0021      	movs	r1, r4
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	3145      	adds	r1, #69	@ 0x45
 8006370:	7809      	ldrb	r1, [r1, #0]
 8006372:	18a2      	adds	r2, r4, r2
 8006374:	3243      	adds	r2, #67	@ 0x43
 8006376:	3302      	adds	r3, #2
 8006378:	7011      	strb	r1, [r2, #0]
 800637a:	e7c1      	b.n	8006300 <_printf_common+0x4c>
 800637c:	0022      	movs	r2, r4
 800637e:	2301      	movs	r3, #1
 8006380:	9901      	ldr	r1, [sp, #4]
 8006382:	9800      	ldr	r0, [sp, #0]
 8006384:	9f08      	ldr	r7, [sp, #32]
 8006386:	321a      	adds	r2, #26
 8006388:	47b8      	blx	r7
 800638a:	3001      	adds	r0, #1
 800638c:	d0e6      	beq.n	800635c <_printf_common+0xa8>
 800638e:	3601      	adds	r6, #1
 8006390:	e7d1      	b.n	8006336 <_printf_common+0x82>
	...

08006394 <_printf_i>:
 8006394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006396:	b08b      	sub	sp, #44	@ 0x2c
 8006398:	9206      	str	r2, [sp, #24]
 800639a:	000a      	movs	r2, r1
 800639c:	3243      	adds	r2, #67	@ 0x43
 800639e:	9307      	str	r3, [sp, #28]
 80063a0:	9005      	str	r0, [sp, #20]
 80063a2:	9203      	str	r2, [sp, #12]
 80063a4:	7e0a      	ldrb	r2, [r1, #24]
 80063a6:	000c      	movs	r4, r1
 80063a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80063aa:	2a78      	cmp	r2, #120	@ 0x78
 80063ac:	d809      	bhi.n	80063c2 <_printf_i+0x2e>
 80063ae:	2a62      	cmp	r2, #98	@ 0x62
 80063b0:	d80b      	bhi.n	80063ca <_printf_i+0x36>
 80063b2:	2a00      	cmp	r2, #0
 80063b4:	d100      	bne.n	80063b8 <_printf_i+0x24>
 80063b6:	e0ba      	b.n	800652e <_printf_i+0x19a>
 80063b8:	497a      	ldr	r1, [pc, #488]	@ (80065a4 <_printf_i+0x210>)
 80063ba:	9104      	str	r1, [sp, #16]
 80063bc:	2a58      	cmp	r2, #88	@ 0x58
 80063be:	d100      	bne.n	80063c2 <_printf_i+0x2e>
 80063c0:	e08e      	b.n	80064e0 <_printf_i+0x14c>
 80063c2:	0025      	movs	r5, r4
 80063c4:	3542      	adds	r5, #66	@ 0x42
 80063c6:	702a      	strb	r2, [r5, #0]
 80063c8:	e022      	b.n	8006410 <_printf_i+0x7c>
 80063ca:	0010      	movs	r0, r2
 80063cc:	3863      	subs	r0, #99	@ 0x63
 80063ce:	2815      	cmp	r0, #21
 80063d0:	d8f7      	bhi.n	80063c2 <_printf_i+0x2e>
 80063d2:	f7f9 feab 	bl	800012c <__gnu_thumb1_case_shi>
 80063d6:	0016      	.short	0x0016
 80063d8:	fff6001f 	.word	0xfff6001f
 80063dc:	fff6fff6 	.word	0xfff6fff6
 80063e0:	001ffff6 	.word	0x001ffff6
 80063e4:	fff6fff6 	.word	0xfff6fff6
 80063e8:	fff6fff6 	.word	0xfff6fff6
 80063ec:	0036009f 	.word	0x0036009f
 80063f0:	fff6007e 	.word	0xfff6007e
 80063f4:	00b0fff6 	.word	0x00b0fff6
 80063f8:	0036fff6 	.word	0x0036fff6
 80063fc:	fff6fff6 	.word	0xfff6fff6
 8006400:	0082      	.short	0x0082
 8006402:	0025      	movs	r5, r4
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	3542      	adds	r5, #66	@ 0x42
 8006408:	1d11      	adds	r1, r2, #4
 800640a:	6019      	str	r1, [r3, #0]
 800640c:	6813      	ldr	r3, [r2, #0]
 800640e:	702b      	strb	r3, [r5, #0]
 8006410:	2301      	movs	r3, #1
 8006412:	e09e      	b.n	8006552 <_printf_i+0x1be>
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	6809      	ldr	r1, [r1, #0]
 8006418:	1d02      	adds	r2, r0, #4
 800641a:	060d      	lsls	r5, r1, #24
 800641c:	d50b      	bpl.n	8006436 <_printf_i+0xa2>
 800641e:	6806      	ldr	r6, [r0, #0]
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	2e00      	cmp	r6, #0
 8006424:	da03      	bge.n	800642e <_printf_i+0x9a>
 8006426:	232d      	movs	r3, #45	@ 0x2d
 8006428:	9a03      	ldr	r2, [sp, #12]
 800642a:	4276      	negs	r6, r6
 800642c:	7013      	strb	r3, [r2, #0]
 800642e:	4b5d      	ldr	r3, [pc, #372]	@ (80065a4 <_printf_i+0x210>)
 8006430:	270a      	movs	r7, #10
 8006432:	9304      	str	r3, [sp, #16]
 8006434:	e018      	b.n	8006468 <_printf_i+0xd4>
 8006436:	6806      	ldr	r6, [r0, #0]
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	0649      	lsls	r1, r1, #25
 800643c:	d5f1      	bpl.n	8006422 <_printf_i+0x8e>
 800643e:	b236      	sxth	r6, r6
 8006440:	e7ef      	b.n	8006422 <_printf_i+0x8e>
 8006442:	6808      	ldr	r0, [r1, #0]
 8006444:	6819      	ldr	r1, [r3, #0]
 8006446:	c940      	ldmia	r1!, {r6}
 8006448:	0605      	lsls	r5, r0, #24
 800644a:	d402      	bmi.n	8006452 <_printf_i+0xbe>
 800644c:	0640      	lsls	r0, r0, #25
 800644e:	d500      	bpl.n	8006452 <_printf_i+0xbe>
 8006450:	b2b6      	uxth	r6, r6
 8006452:	6019      	str	r1, [r3, #0]
 8006454:	4b53      	ldr	r3, [pc, #332]	@ (80065a4 <_printf_i+0x210>)
 8006456:	270a      	movs	r7, #10
 8006458:	9304      	str	r3, [sp, #16]
 800645a:	2a6f      	cmp	r2, #111	@ 0x6f
 800645c:	d100      	bne.n	8006460 <_printf_i+0xcc>
 800645e:	3f02      	subs	r7, #2
 8006460:	0023      	movs	r3, r4
 8006462:	2200      	movs	r2, #0
 8006464:	3343      	adds	r3, #67	@ 0x43
 8006466:	701a      	strb	r2, [r3, #0]
 8006468:	6863      	ldr	r3, [r4, #4]
 800646a:	60a3      	str	r3, [r4, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	db06      	blt.n	800647e <_printf_i+0xea>
 8006470:	2104      	movs	r1, #4
 8006472:	6822      	ldr	r2, [r4, #0]
 8006474:	9d03      	ldr	r5, [sp, #12]
 8006476:	438a      	bics	r2, r1
 8006478:	6022      	str	r2, [r4, #0]
 800647a:	4333      	orrs	r3, r6
 800647c:	d00c      	beq.n	8006498 <_printf_i+0x104>
 800647e:	9d03      	ldr	r5, [sp, #12]
 8006480:	0030      	movs	r0, r6
 8006482:	0039      	movs	r1, r7
 8006484:	f7f9 fee2 	bl	800024c <__aeabi_uidivmod>
 8006488:	9b04      	ldr	r3, [sp, #16]
 800648a:	3d01      	subs	r5, #1
 800648c:	5c5b      	ldrb	r3, [r3, r1]
 800648e:	702b      	strb	r3, [r5, #0]
 8006490:	0033      	movs	r3, r6
 8006492:	0006      	movs	r6, r0
 8006494:	429f      	cmp	r7, r3
 8006496:	d9f3      	bls.n	8006480 <_printf_i+0xec>
 8006498:	2f08      	cmp	r7, #8
 800649a:	d109      	bne.n	80064b0 <_printf_i+0x11c>
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	07db      	lsls	r3, r3, #31
 80064a0:	d506      	bpl.n	80064b0 <_printf_i+0x11c>
 80064a2:	6862      	ldr	r2, [r4, #4]
 80064a4:	6923      	ldr	r3, [r4, #16]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	dc02      	bgt.n	80064b0 <_printf_i+0x11c>
 80064aa:	2330      	movs	r3, #48	@ 0x30
 80064ac:	3d01      	subs	r5, #1
 80064ae:	702b      	strb	r3, [r5, #0]
 80064b0:	9b03      	ldr	r3, [sp, #12]
 80064b2:	1b5b      	subs	r3, r3, r5
 80064b4:	6123      	str	r3, [r4, #16]
 80064b6:	9b07      	ldr	r3, [sp, #28]
 80064b8:	0021      	movs	r1, r4
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	9805      	ldr	r0, [sp, #20]
 80064be:	9b06      	ldr	r3, [sp, #24]
 80064c0:	aa09      	add	r2, sp, #36	@ 0x24
 80064c2:	f7ff fef7 	bl	80062b4 <_printf_common>
 80064c6:	3001      	adds	r0, #1
 80064c8:	d148      	bne.n	800655c <_printf_i+0x1c8>
 80064ca:	2001      	movs	r0, #1
 80064cc:	4240      	negs	r0, r0
 80064ce:	b00b      	add	sp, #44	@ 0x2c
 80064d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064d2:	2220      	movs	r2, #32
 80064d4:	6809      	ldr	r1, [r1, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	6022      	str	r2, [r4, #0]
 80064da:	2278      	movs	r2, #120	@ 0x78
 80064dc:	4932      	ldr	r1, [pc, #200]	@ (80065a8 <_printf_i+0x214>)
 80064de:	9104      	str	r1, [sp, #16]
 80064e0:	0021      	movs	r1, r4
 80064e2:	3145      	adds	r1, #69	@ 0x45
 80064e4:	700a      	strb	r2, [r1, #0]
 80064e6:	6819      	ldr	r1, [r3, #0]
 80064e8:	6822      	ldr	r2, [r4, #0]
 80064ea:	c940      	ldmia	r1!, {r6}
 80064ec:	0610      	lsls	r0, r2, #24
 80064ee:	d402      	bmi.n	80064f6 <_printf_i+0x162>
 80064f0:	0650      	lsls	r0, r2, #25
 80064f2:	d500      	bpl.n	80064f6 <_printf_i+0x162>
 80064f4:	b2b6      	uxth	r6, r6
 80064f6:	6019      	str	r1, [r3, #0]
 80064f8:	07d3      	lsls	r3, r2, #31
 80064fa:	d502      	bpl.n	8006502 <_printf_i+0x16e>
 80064fc:	2320      	movs	r3, #32
 80064fe:	4313      	orrs	r3, r2
 8006500:	6023      	str	r3, [r4, #0]
 8006502:	2e00      	cmp	r6, #0
 8006504:	d001      	beq.n	800650a <_printf_i+0x176>
 8006506:	2710      	movs	r7, #16
 8006508:	e7aa      	b.n	8006460 <_printf_i+0xcc>
 800650a:	2220      	movs	r2, #32
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	4393      	bics	r3, r2
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	e7f8      	b.n	8006506 <_printf_i+0x172>
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	680d      	ldr	r5, [r1, #0]
 8006518:	1d10      	adds	r0, r2, #4
 800651a:	6949      	ldr	r1, [r1, #20]
 800651c:	6018      	str	r0, [r3, #0]
 800651e:	6813      	ldr	r3, [r2, #0]
 8006520:	062e      	lsls	r6, r5, #24
 8006522:	d501      	bpl.n	8006528 <_printf_i+0x194>
 8006524:	6019      	str	r1, [r3, #0]
 8006526:	e002      	b.n	800652e <_printf_i+0x19a>
 8006528:	066d      	lsls	r5, r5, #25
 800652a:	d5fb      	bpl.n	8006524 <_printf_i+0x190>
 800652c:	8019      	strh	r1, [r3, #0]
 800652e:	2300      	movs	r3, #0
 8006530:	9d03      	ldr	r5, [sp, #12]
 8006532:	6123      	str	r3, [r4, #16]
 8006534:	e7bf      	b.n	80064b6 <_printf_i+0x122>
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	1d11      	adds	r1, r2, #4
 800653a:	6019      	str	r1, [r3, #0]
 800653c:	6815      	ldr	r5, [r2, #0]
 800653e:	2100      	movs	r1, #0
 8006540:	0028      	movs	r0, r5
 8006542:	6862      	ldr	r2, [r4, #4]
 8006544:	f000 f9eb 	bl	800691e <memchr>
 8006548:	2800      	cmp	r0, #0
 800654a:	d001      	beq.n	8006550 <_printf_i+0x1bc>
 800654c:	1b40      	subs	r0, r0, r5
 800654e:	6060      	str	r0, [r4, #4]
 8006550:	6863      	ldr	r3, [r4, #4]
 8006552:	6123      	str	r3, [r4, #16]
 8006554:	2300      	movs	r3, #0
 8006556:	9a03      	ldr	r2, [sp, #12]
 8006558:	7013      	strb	r3, [r2, #0]
 800655a:	e7ac      	b.n	80064b6 <_printf_i+0x122>
 800655c:	002a      	movs	r2, r5
 800655e:	6923      	ldr	r3, [r4, #16]
 8006560:	9906      	ldr	r1, [sp, #24]
 8006562:	9805      	ldr	r0, [sp, #20]
 8006564:	9d07      	ldr	r5, [sp, #28]
 8006566:	47a8      	blx	r5
 8006568:	3001      	adds	r0, #1
 800656a:	d0ae      	beq.n	80064ca <_printf_i+0x136>
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	079b      	lsls	r3, r3, #30
 8006570:	d415      	bmi.n	800659e <_printf_i+0x20a>
 8006572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006574:	68e0      	ldr	r0, [r4, #12]
 8006576:	4298      	cmp	r0, r3
 8006578:	daa9      	bge.n	80064ce <_printf_i+0x13a>
 800657a:	0018      	movs	r0, r3
 800657c:	e7a7      	b.n	80064ce <_printf_i+0x13a>
 800657e:	0022      	movs	r2, r4
 8006580:	2301      	movs	r3, #1
 8006582:	9906      	ldr	r1, [sp, #24]
 8006584:	9805      	ldr	r0, [sp, #20]
 8006586:	9e07      	ldr	r6, [sp, #28]
 8006588:	3219      	adds	r2, #25
 800658a:	47b0      	blx	r6
 800658c:	3001      	adds	r0, #1
 800658e:	d09c      	beq.n	80064ca <_printf_i+0x136>
 8006590:	3501      	adds	r5, #1
 8006592:	68e3      	ldr	r3, [r4, #12]
 8006594:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006596:	1a9b      	subs	r3, r3, r2
 8006598:	42ab      	cmp	r3, r5
 800659a:	dcf0      	bgt.n	800657e <_printf_i+0x1ea>
 800659c:	e7e9      	b.n	8006572 <_printf_i+0x1de>
 800659e:	2500      	movs	r5, #0
 80065a0:	e7f7      	b.n	8006592 <_printf_i+0x1fe>
 80065a2:	46c0      	nop			@ (mov r8, r8)
 80065a4:	08009dba 	.word	0x08009dba
 80065a8:	08009dcb 	.word	0x08009dcb

080065ac <std>:
 80065ac:	2300      	movs	r3, #0
 80065ae:	b510      	push	{r4, lr}
 80065b0:	0004      	movs	r4, r0
 80065b2:	6003      	str	r3, [r0, #0]
 80065b4:	6043      	str	r3, [r0, #4]
 80065b6:	6083      	str	r3, [r0, #8]
 80065b8:	8181      	strh	r1, [r0, #12]
 80065ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80065bc:	81c2      	strh	r2, [r0, #14]
 80065be:	6103      	str	r3, [r0, #16]
 80065c0:	6143      	str	r3, [r0, #20]
 80065c2:	6183      	str	r3, [r0, #24]
 80065c4:	0019      	movs	r1, r3
 80065c6:	2208      	movs	r2, #8
 80065c8:	305c      	adds	r0, #92	@ 0x5c
 80065ca:	f000 f921 	bl	8006810 <memset>
 80065ce:	4b0b      	ldr	r3, [pc, #44]	@ (80065fc <std+0x50>)
 80065d0:	6224      	str	r4, [r4, #32]
 80065d2:	6263      	str	r3, [r4, #36]	@ 0x24
 80065d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006600 <std+0x54>)
 80065d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80065d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006604 <std+0x58>)
 80065da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80065dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006608 <std+0x5c>)
 80065de:	6323      	str	r3, [r4, #48]	@ 0x30
 80065e0:	4b0a      	ldr	r3, [pc, #40]	@ (800660c <std+0x60>)
 80065e2:	429c      	cmp	r4, r3
 80065e4:	d005      	beq.n	80065f2 <std+0x46>
 80065e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006610 <std+0x64>)
 80065e8:	429c      	cmp	r4, r3
 80065ea:	d002      	beq.n	80065f2 <std+0x46>
 80065ec:	4b09      	ldr	r3, [pc, #36]	@ (8006614 <std+0x68>)
 80065ee:	429c      	cmp	r4, r3
 80065f0:	d103      	bne.n	80065fa <std+0x4e>
 80065f2:	0020      	movs	r0, r4
 80065f4:	3058      	adds	r0, #88	@ 0x58
 80065f6:	f000 f98f 	bl	8006918 <__retarget_lock_init_recursive>
 80065fa:	bd10      	pop	{r4, pc}
 80065fc:	08006779 	.word	0x08006779
 8006600:	080067a1 	.word	0x080067a1
 8006604:	080067d9 	.word	0x080067d9
 8006608:	08006805 	.word	0x08006805
 800660c:	200003a8 	.word	0x200003a8
 8006610:	20000410 	.word	0x20000410
 8006614:	20000478 	.word	0x20000478

08006618 <stdio_exit_handler>:
 8006618:	b510      	push	{r4, lr}
 800661a:	4a03      	ldr	r2, [pc, #12]	@ (8006628 <stdio_exit_handler+0x10>)
 800661c:	4903      	ldr	r1, [pc, #12]	@ (800662c <stdio_exit_handler+0x14>)
 800661e:	4804      	ldr	r0, [pc, #16]	@ (8006630 <stdio_exit_handler+0x18>)
 8006620:	f000 f86c 	bl	80066fc <_fwalk_sglue>
 8006624:	bd10      	pop	{r4, pc}
 8006626:	46c0      	nop			@ (mov r8, r8)
 8006628:	20000010 	.word	0x20000010
 800662c:	0800832d 	.word	0x0800832d
 8006630:	20000020 	.word	0x20000020

08006634 <cleanup_stdio>:
 8006634:	6841      	ldr	r1, [r0, #4]
 8006636:	4b0b      	ldr	r3, [pc, #44]	@ (8006664 <cleanup_stdio+0x30>)
 8006638:	b510      	push	{r4, lr}
 800663a:	0004      	movs	r4, r0
 800663c:	4299      	cmp	r1, r3
 800663e:	d001      	beq.n	8006644 <cleanup_stdio+0x10>
 8006640:	f001 fe74 	bl	800832c <_fflush_r>
 8006644:	68a1      	ldr	r1, [r4, #8]
 8006646:	4b08      	ldr	r3, [pc, #32]	@ (8006668 <cleanup_stdio+0x34>)
 8006648:	4299      	cmp	r1, r3
 800664a:	d002      	beq.n	8006652 <cleanup_stdio+0x1e>
 800664c:	0020      	movs	r0, r4
 800664e:	f001 fe6d 	bl	800832c <_fflush_r>
 8006652:	68e1      	ldr	r1, [r4, #12]
 8006654:	4b05      	ldr	r3, [pc, #20]	@ (800666c <cleanup_stdio+0x38>)
 8006656:	4299      	cmp	r1, r3
 8006658:	d002      	beq.n	8006660 <cleanup_stdio+0x2c>
 800665a:	0020      	movs	r0, r4
 800665c:	f001 fe66 	bl	800832c <_fflush_r>
 8006660:	bd10      	pop	{r4, pc}
 8006662:	46c0      	nop			@ (mov r8, r8)
 8006664:	200003a8 	.word	0x200003a8
 8006668:	20000410 	.word	0x20000410
 800666c:	20000478 	.word	0x20000478

08006670 <global_stdio_init.part.0>:
 8006670:	b510      	push	{r4, lr}
 8006672:	4b09      	ldr	r3, [pc, #36]	@ (8006698 <global_stdio_init.part.0+0x28>)
 8006674:	4a09      	ldr	r2, [pc, #36]	@ (800669c <global_stdio_init.part.0+0x2c>)
 8006676:	2104      	movs	r1, #4
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	4809      	ldr	r0, [pc, #36]	@ (80066a0 <global_stdio_init.part.0+0x30>)
 800667c:	2200      	movs	r2, #0
 800667e:	f7ff ff95 	bl	80065ac <std>
 8006682:	2201      	movs	r2, #1
 8006684:	2109      	movs	r1, #9
 8006686:	4807      	ldr	r0, [pc, #28]	@ (80066a4 <global_stdio_init.part.0+0x34>)
 8006688:	f7ff ff90 	bl	80065ac <std>
 800668c:	2202      	movs	r2, #2
 800668e:	2112      	movs	r1, #18
 8006690:	4805      	ldr	r0, [pc, #20]	@ (80066a8 <global_stdio_init.part.0+0x38>)
 8006692:	f7ff ff8b 	bl	80065ac <std>
 8006696:	bd10      	pop	{r4, pc}
 8006698:	200004e0 	.word	0x200004e0
 800669c:	08006619 	.word	0x08006619
 80066a0:	200003a8 	.word	0x200003a8
 80066a4:	20000410 	.word	0x20000410
 80066a8:	20000478 	.word	0x20000478

080066ac <__sfp_lock_acquire>:
 80066ac:	b510      	push	{r4, lr}
 80066ae:	4802      	ldr	r0, [pc, #8]	@ (80066b8 <__sfp_lock_acquire+0xc>)
 80066b0:	f000 f933 	bl	800691a <__retarget_lock_acquire_recursive>
 80066b4:	bd10      	pop	{r4, pc}
 80066b6:	46c0      	nop			@ (mov r8, r8)
 80066b8:	200004e9 	.word	0x200004e9

080066bc <__sfp_lock_release>:
 80066bc:	b510      	push	{r4, lr}
 80066be:	4802      	ldr	r0, [pc, #8]	@ (80066c8 <__sfp_lock_release+0xc>)
 80066c0:	f000 f92c 	bl	800691c <__retarget_lock_release_recursive>
 80066c4:	bd10      	pop	{r4, pc}
 80066c6:	46c0      	nop			@ (mov r8, r8)
 80066c8:	200004e9 	.word	0x200004e9

080066cc <__sinit>:
 80066cc:	b510      	push	{r4, lr}
 80066ce:	0004      	movs	r4, r0
 80066d0:	f7ff ffec 	bl	80066ac <__sfp_lock_acquire>
 80066d4:	6a23      	ldr	r3, [r4, #32]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <__sinit+0x14>
 80066da:	f7ff ffef 	bl	80066bc <__sfp_lock_release>
 80066de:	bd10      	pop	{r4, pc}
 80066e0:	4b04      	ldr	r3, [pc, #16]	@ (80066f4 <__sinit+0x28>)
 80066e2:	6223      	str	r3, [r4, #32]
 80066e4:	4b04      	ldr	r3, [pc, #16]	@ (80066f8 <__sinit+0x2c>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1f6      	bne.n	80066da <__sinit+0xe>
 80066ec:	f7ff ffc0 	bl	8006670 <global_stdio_init.part.0>
 80066f0:	e7f3      	b.n	80066da <__sinit+0xe>
 80066f2:	46c0      	nop			@ (mov r8, r8)
 80066f4:	08006635 	.word	0x08006635
 80066f8:	200004e0 	.word	0x200004e0

080066fc <_fwalk_sglue>:
 80066fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066fe:	0014      	movs	r4, r2
 8006700:	2600      	movs	r6, #0
 8006702:	9000      	str	r0, [sp, #0]
 8006704:	9101      	str	r1, [sp, #4]
 8006706:	68a5      	ldr	r5, [r4, #8]
 8006708:	6867      	ldr	r7, [r4, #4]
 800670a:	3f01      	subs	r7, #1
 800670c:	d504      	bpl.n	8006718 <_fwalk_sglue+0x1c>
 800670e:	6824      	ldr	r4, [r4, #0]
 8006710:	2c00      	cmp	r4, #0
 8006712:	d1f8      	bne.n	8006706 <_fwalk_sglue+0xa>
 8006714:	0030      	movs	r0, r6
 8006716:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006718:	89ab      	ldrh	r3, [r5, #12]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d908      	bls.n	8006730 <_fwalk_sglue+0x34>
 800671e:	220e      	movs	r2, #14
 8006720:	5eab      	ldrsh	r3, [r5, r2]
 8006722:	3301      	adds	r3, #1
 8006724:	d004      	beq.n	8006730 <_fwalk_sglue+0x34>
 8006726:	0029      	movs	r1, r5
 8006728:	9800      	ldr	r0, [sp, #0]
 800672a:	9b01      	ldr	r3, [sp, #4]
 800672c:	4798      	blx	r3
 800672e:	4306      	orrs	r6, r0
 8006730:	3568      	adds	r5, #104	@ 0x68
 8006732:	e7ea      	b.n	800670a <_fwalk_sglue+0xe>

08006734 <siprintf>:
 8006734:	b40e      	push	{r1, r2, r3}
 8006736:	b510      	push	{r4, lr}
 8006738:	2400      	movs	r4, #0
 800673a:	490c      	ldr	r1, [pc, #48]	@ (800676c <siprintf+0x38>)
 800673c:	b09d      	sub	sp, #116	@ 0x74
 800673e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006740:	9002      	str	r0, [sp, #8]
 8006742:	9006      	str	r0, [sp, #24]
 8006744:	9107      	str	r1, [sp, #28]
 8006746:	9104      	str	r1, [sp, #16]
 8006748:	4809      	ldr	r0, [pc, #36]	@ (8006770 <siprintf+0x3c>)
 800674a:	490a      	ldr	r1, [pc, #40]	@ (8006774 <siprintf+0x40>)
 800674c:	cb04      	ldmia	r3!, {r2}
 800674e:	9105      	str	r1, [sp, #20]
 8006750:	6800      	ldr	r0, [r0, #0]
 8006752:	a902      	add	r1, sp, #8
 8006754:	9301      	str	r3, [sp, #4]
 8006756:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006758:	f001 fc64 	bl	8008024 <_svfiprintf_r>
 800675c:	9b02      	ldr	r3, [sp, #8]
 800675e:	701c      	strb	r4, [r3, #0]
 8006760:	b01d      	add	sp, #116	@ 0x74
 8006762:	bc10      	pop	{r4}
 8006764:	bc08      	pop	{r3}
 8006766:	b003      	add	sp, #12
 8006768:	4718      	bx	r3
 800676a:	46c0      	nop			@ (mov r8, r8)
 800676c:	7fffffff 	.word	0x7fffffff
 8006770:	2000001c 	.word	0x2000001c
 8006774:	ffff0208 	.word	0xffff0208

08006778 <__sread>:
 8006778:	b570      	push	{r4, r5, r6, lr}
 800677a:	000c      	movs	r4, r1
 800677c:	250e      	movs	r5, #14
 800677e:	5f49      	ldrsh	r1, [r1, r5]
 8006780:	f000 f878 	bl	8006874 <_read_r>
 8006784:	2800      	cmp	r0, #0
 8006786:	db03      	blt.n	8006790 <__sread+0x18>
 8006788:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800678a:	181b      	adds	r3, r3, r0
 800678c:	6563      	str	r3, [r4, #84]	@ 0x54
 800678e:	bd70      	pop	{r4, r5, r6, pc}
 8006790:	89a3      	ldrh	r3, [r4, #12]
 8006792:	4a02      	ldr	r2, [pc, #8]	@ (800679c <__sread+0x24>)
 8006794:	4013      	ands	r3, r2
 8006796:	81a3      	strh	r3, [r4, #12]
 8006798:	e7f9      	b.n	800678e <__sread+0x16>
 800679a:	46c0      	nop			@ (mov r8, r8)
 800679c:	ffffefff 	.word	0xffffefff

080067a0 <__swrite>:
 80067a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a2:	001f      	movs	r7, r3
 80067a4:	898b      	ldrh	r3, [r1, #12]
 80067a6:	0005      	movs	r5, r0
 80067a8:	000c      	movs	r4, r1
 80067aa:	0016      	movs	r6, r2
 80067ac:	05db      	lsls	r3, r3, #23
 80067ae:	d505      	bpl.n	80067bc <__swrite+0x1c>
 80067b0:	230e      	movs	r3, #14
 80067b2:	5ec9      	ldrsh	r1, [r1, r3]
 80067b4:	2200      	movs	r2, #0
 80067b6:	2302      	movs	r3, #2
 80067b8:	f000 f848 	bl	800684c <_lseek_r>
 80067bc:	89a3      	ldrh	r3, [r4, #12]
 80067be:	4a05      	ldr	r2, [pc, #20]	@ (80067d4 <__swrite+0x34>)
 80067c0:	0028      	movs	r0, r5
 80067c2:	4013      	ands	r3, r2
 80067c4:	81a3      	strh	r3, [r4, #12]
 80067c6:	0032      	movs	r2, r6
 80067c8:	230e      	movs	r3, #14
 80067ca:	5ee1      	ldrsh	r1, [r4, r3]
 80067cc:	003b      	movs	r3, r7
 80067ce:	f000 f865 	bl	800689c <_write_r>
 80067d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067d4:	ffffefff 	.word	0xffffefff

080067d8 <__sseek>:
 80067d8:	b570      	push	{r4, r5, r6, lr}
 80067da:	000c      	movs	r4, r1
 80067dc:	250e      	movs	r5, #14
 80067de:	5f49      	ldrsh	r1, [r1, r5]
 80067e0:	f000 f834 	bl	800684c <_lseek_r>
 80067e4:	89a3      	ldrh	r3, [r4, #12]
 80067e6:	1c42      	adds	r2, r0, #1
 80067e8:	d103      	bne.n	80067f2 <__sseek+0x1a>
 80067ea:	4a05      	ldr	r2, [pc, #20]	@ (8006800 <__sseek+0x28>)
 80067ec:	4013      	ands	r3, r2
 80067ee:	81a3      	strh	r3, [r4, #12]
 80067f0:	bd70      	pop	{r4, r5, r6, pc}
 80067f2:	2280      	movs	r2, #128	@ 0x80
 80067f4:	0152      	lsls	r2, r2, #5
 80067f6:	4313      	orrs	r3, r2
 80067f8:	81a3      	strh	r3, [r4, #12]
 80067fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80067fc:	e7f8      	b.n	80067f0 <__sseek+0x18>
 80067fe:	46c0      	nop			@ (mov r8, r8)
 8006800:	ffffefff 	.word	0xffffefff

08006804 <__sclose>:
 8006804:	b510      	push	{r4, lr}
 8006806:	230e      	movs	r3, #14
 8006808:	5ec9      	ldrsh	r1, [r1, r3]
 800680a:	f000 f80d 	bl	8006828 <_close_r>
 800680e:	bd10      	pop	{r4, pc}

08006810 <memset>:
 8006810:	0003      	movs	r3, r0
 8006812:	1882      	adds	r2, r0, r2
 8006814:	4293      	cmp	r3, r2
 8006816:	d100      	bne.n	800681a <memset+0xa>
 8006818:	4770      	bx	lr
 800681a:	7019      	strb	r1, [r3, #0]
 800681c:	3301      	adds	r3, #1
 800681e:	e7f9      	b.n	8006814 <memset+0x4>

08006820 <_localeconv_r>:
 8006820:	4800      	ldr	r0, [pc, #0]	@ (8006824 <_localeconv_r+0x4>)
 8006822:	4770      	bx	lr
 8006824:	2000015c 	.word	0x2000015c

08006828 <_close_r>:
 8006828:	2300      	movs	r3, #0
 800682a:	b570      	push	{r4, r5, r6, lr}
 800682c:	4d06      	ldr	r5, [pc, #24]	@ (8006848 <_close_r+0x20>)
 800682e:	0004      	movs	r4, r0
 8006830:	0008      	movs	r0, r1
 8006832:	602b      	str	r3, [r5, #0]
 8006834:	f7fc fe09 	bl	800344a <_close>
 8006838:	1c43      	adds	r3, r0, #1
 800683a:	d103      	bne.n	8006844 <_close_r+0x1c>
 800683c:	682b      	ldr	r3, [r5, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d000      	beq.n	8006844 <_close_r+0x1c>
 8006842:	6023      	str	r3, [r4, #0]
 8006844:	bd70      	pop	{r4, r5, r6, pc}
 8006846:	46c0      	nop			@ (mov r8, r8)
 8006848:	200004e4 	.word	0x200004e4

0800684c <_lseek_r>:
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	0004      	movs	r4, r0
 8006850:	0008      	movs	r0, r1
 8006852:	0011      	movs	r1, r2
 8006854:	001a      	movs	r2, r3
 8006856:	2300      	movs	r3, #0
 8006858:	4d05      	ldr	r5, [pc, #20]	@ (8006870 <_lseek_r+0x24>)
 800685a:	602b      	str	r3, [r5, #0]
 800685c:	f7fc fe16 	bl	800348c <_lseek>
 8006860:	1c43      	adds	r3, r0, #1
 8006862:	d103      	bne.n	800686c <_lseek_r+0x20>
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d000      	beq.n	800686c <_lseek_r+0x20>
 800686a:	6023      	str	r3, [r4, #0]
 800686c:	bd70      	pop	{r4, r5, r6, pc}
 800686e:	46c0      	nop			@ (mov r8, r8)
 8006870:	200004e4 	.word	0x200004e4

08006874 <_read_r>:
 8006874:	b570      	push	{r4, r5, r6, lr}
 8006876:	0004      	movs	r4, r0
 8006878:	0008      	movs	r0, r1
 800687a:	0011      	movs	r1, r2
 800687c:	001a      	movs	r2, r3
 800687e:	2300      	movs	r3, #0
 8006880:	4d05      	ldr	r5, [pc, #20]	@ (8006898 <_read_r+0x24>)
 8006882:	602b      	str	r3, [r5, #0]
 8006884:	f7fc fda8 	bl	80033d8 <_read>
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	d103      	bne.n	8006894 <_read_r+0x20>
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d000      	beq.n	8006894 <_read_r+0x20>
 8006892:	6023      	str	r3, [r4, #0]
 8006894:	bd70      	pop	{r4, r5, r6, pc}
 8006896:	46c0      	nop			@ (mov r8, r8)
 8006898:	200004e4 	.word	0x200004e4

0800689c <_write_r>:
 800689c:	b570      	push	{r4, r5, r6, lr}
 800689e:	0004      	movs	r4, r0
 80068a0:	0008      	movs	r0, r1
 80068a2:	0011      	movs	r1, r2
 80068a4:	001a      	movs	r2, r3
 80068a6:	2300      	movs	r3, #0
 80068a8:	4d05      	ldr	r5, [pc, #20]	@ (80068c0 <_write_r+0x24>)
 80068aa:	602b      	str	r3, [r5, #0]
 80068ac:	f7fc fdb1 	bl	8003412 <_write>
 80068b0:	1c43      	adds	r3, r0, #1
 80068b2:	d103      	bne.n	80068bc <_write_r+0x20>
 80068b4:	682b      	ldr	r3, [r5, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d000      	beq.n	80068bc <_write_r+0x20>
 80068ba:	6023      	str	r3, [r4, #0]
 80068bc:	bd70      	pop	{r4, r5, r6, pc}
 80068be:	46c0      	nop			@ (mov r8, r8)
 80068c0:	200004e4 	.word	0x200004e4

080068c4 <__errno>:
 80068c4:	4b01      	ldr	r3, [pc, #4]	@ (80068cc <__errno+0x8>)
 80068c6:	6818      	ldr	r0, [r3, #0]
 80068c8:	4770      	bx	lr
 80068ca:	46c0      	nop			@ (mov r8, r8)
 80068cc:	2000001c 	.word	0x2000001c

080068d0 <__libc_init_array>:
 80068d0:	b570      	push	{r4, r5, r6, lr}
 80068d2:	2600      	movs	r6, #0
 80068d4:	4c0c      	ldr	r4, [pc, #48]	@ (8006908 <__libc_init_array+0x38>)
 80068d6:	4d0d      	ldr	r5, [pc, #52]	@ (800690c <__libc_init_array+0x3c>)
 80068d8:	1b64      	subs	r4, r4, r5
 80068da:	10a4      	asrs	r4, r4, #2
 80068dc:	42a6      	cmp	r6, r4
 80068de:	d109      	bne.n	80068f4 <__libc_init_array+0x24>
 80068e0:	2600      	movs	r6, #0
 80068e2:	f003 f9f1 	bl	8009cc8 <_init>
 80068e6:	4c0a      	ldr	r4, [pc, #40]	@ (8006910 <__libc_init_array+0x40>)
 80068e8:	4d0a      	ldr	r5, [pc, #40]	@ (8006914 <__libc_init_array+0x44>)
 80068ea:	1b64      	subs	r4, r4, r5
 80068ec:	10a4      	asrs	r4, r4, #2
 80068ee:	42a6      	cmp	r6, r4
 80068f0:	d105      	bne.n	80068fe <__libc_init_array+0x2e>
 80068f2:	bd70      	pop	{r4, r5, r6, pc}
 80068f4:	00b3      	lsls	r3, r6, #2
 80068f6:	58eb      	ldr	r3, [r5, r3]
 80068f8:	4798      	blx	r3
 80068fa:	3601      	adds	r6, #1
 80068fc:	e7ee      	b.n	80068dc <__libc_init_array+0xc>
 80068fe:	00b3      	lsls	r3, r6, #2
 8006900:	58eb      	ldr	r3, [r5, r3]
 8006902:	4798      	blx	r3
 8006904:	3601      	adds	r6, #1
 8006906:	e7f2      	b.n	80068ee <__libc_init_array+0x1e>
 8006908:	0800a168 	.word	0x0800a168
 800690c:	0800a168 	.word	0x0800a168
 8006910:	0800a16c 	.word	0x0800a16c
 8006914:	0800a168 	.word	0x0800a168

08006918 <__retarget_lock_init_recursive>:
 8006918:	4770      	bx	lr

0800691a <__retarget_lock_acquire_recursive>:
 800691a:	4770      	bx	lr

0800691c <__retarget_lock_release_recursive>:
 800691c:	4770      	bx	lr

0800691e <memchr>:
 800691e:	b2c9      	uxtb	r1, r1
 8006920:	1882      	adds	r2, r0, r2
 8006922:	4290      	cmp	r0, r2
 8006924:	d101      	bne.n	800692a <memchr+0xc>
 8006926:	2000      	movs	r0, #0
 8006928:	4770      	bx	lr
 800692a:	7803      	ldrb	r3, [r0, #0]
 800692c:	428b      	cmp	r3, r1
 800692e:	d0fb      	beq.n	8006928 <memchr+0xa>
 8006930:	3001      	adds	r0, #1
 8006932:	e7f6      	b.n	8006922 <memchr+0x4>

08006934 <quorem>:
 8006934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006936:	6903      	ldr	r3, [r0, #16]
 8006938:	690c      	ldr	r4, [r1, #16]
 800693a:	b089      	sub	sp, #36	@ 0x24
 800693c:	9003      	str	r0, [sp, #12]
 800693e:	9106      	str	r1, [sp, #24]
 8006940:	2000      	movs	r0, #0
 8006942:	42a3      	cmp	r3, r4
 8006944:	db63      	blt.n	8006a0e <quorem+0xda>
 8006946:	000b      	movs	r3, r1
 8006948:	3c01      	subs	r4, #1
 800694a:	3314      	adds	r3, #20
 800694c:	00a5      	lsls	r5, r4, #2
 800694e:	9304      	str	r3, [sp, #16]
 8006950:	195b      	adds	r3, r3, r5
 8006952:	9305      	str	r3, [sp, #20]
 8006954:	9b03      	ldr	r3, [sp, #12]
 8006956:	3314      	adds	r3, #20
 8006958:	9301      	str	r3, [sp, #4]
 800695a:	195d      	adds	r5, r3, r5
 800695c:	9b05      	ldr	r3, [sp, #20]
 800695e:	682f      	ldr	r7, [r5, #0]
 8006960:	681e      	ldr	r6, [r3, #0]
 8006962:	0038      	movs	r0, r7
 8006964:	3601      	adds	r6, #1
 8006966:	0031      	movs	r1, r6
 8006968:	f7f9 fbea 	bl	8000140 <__udivsi3>
 800696c:	9002      	str	r0, [sp, #8]
 800696e:	42b7      	cmp	r7, r6
 8006970:	d327      	bcc.n	80069c2 <quorem+0x8e>
 8006972:	9b04      	ldr	r3, [sp, #16]
 8006974:	2700      	movs	r7, #0
 8006976:	469c      	mov	ip, r3
 8006978:	9e01      	ldr	r6, [sp, #4]
 800697a:	9707      	str	r7, [sp, #28]
 800697c:	4662      	mov	r2, ip
 800697e:	ca08      	ldmia	r2!, {r3}
 8006980:	6830      	ldr	r0, [r6, #0]
 8006982:	4694      	mov	ip, r2
 8006984:	9a02      	ldr	r2, [sp, #8]
 8006986:	b299      	uxth	r1, r3
 8006988:	4351      	muls	r1, r2
 800698a:	0c1b      	lsrs	r3, r3, #16
 800698c:	4353      	muls	r3, r2
 800698e:	19c9      	adds	r1, r1, r7
 8006990:	0c0a      	lsrs	r2, r1, #16
 8006992:	189b      	adds	r3, r3, r2
 8006994:	b289      	uxth	r1, r1
 8006996:	b282      	uxth	r2, r0
 8006998:	1a52      	subs	r2, r2, r1
 800699a:	9907      	ldr	r1, [sp, #28]
 800699c:	0c1f      	lsrs	r7, r3, #16
 800699e:	1852      	adds	r2, r2, r1
 80069a0:	0c00      	lsrs	r0, r0, #16
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	1411      	asrs	r1, r2, #16
 80069a6:	1ac3      	subs	r3, r0, r3
 80069a8:	185b      	adds	r3, r3, r1
 80069aa:	1419      	asrs	r1, r3, #16
 80069ac:	b292      	uxth	r2, r2
 80069ae:	041b      	lsls	r3, r3, #16
 80069b0:	431a      	orrs	r2, r3
 80069b2:	9b05      	ldr	r3, [sp, #20]
 80069b4:	9107      	str	r1, [sp, #28]
 80069b6:	c604      	stmia	r6!, {r2}
 80069b8:	4563      	cmp	r3, ip
 80069ba:	d2df      	bcs.n	800697c <quorem+0x48>
 80069bc:	682b      	ldr	r3, [r5, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d02b      	beq.n	8006a1a <quorem+0xe6>
 80069c2:	9906      	ldr	r1, [sp, #24]
 80069c4:	9803      	ldr	r0, [sp, #12]
 80069c6:	f001 f9b7 	bl	8007d38 <__mcmp>
 80069ca:	2800      	cmp	r0, #0
 80069cc:	db1e      	blt.n	8006a0c <quorem+0xd8>
 80069ce:	2600      	movs	r6, #0
 80069d0:	9d01      	ldr	r5, [sp, #4]
 80069d2:	9904      	ldr	r1, [sp, #16]
 80069d4:	c901      	ldmia	r1!, {r0}
 80069d6:	682b      	ldr	r3, [r5, #0]
 80069d8:	b287      	uxth	r7, r0
 80069da:	b29a      	uxth	r2, r3
 80069dc:	1bd2      	subs	r2, r2, r7
 80069de:	1992      	adds	r2, r2, r6
 80069e0:	0c00      	lsrs	r0, r0, #16
 80069e2:	0c1b      	lsrs	r3, r3, #16
 80069e4:	1a1b      	subs	r3, r3, r0
 80069e6:	1410      	asrs	r0, r2, #16
 80069e8:	181b      	adds	r3, r3, r0
 80069ea:	141e      	asrs	r6, r3, #16
 80069ec:	b292      	uxth	r2, r2
 80069ee:	041b      	lsls	r3, r3, #16
 80069f0:	431a      	orrs	r2, r3
 80069f2:	9b05      	ldr	r3, [sp, #20]
 80069f4:	c504      	stmia	r5!, {r2}
 80069f6:	428b      	cmp	r3, r1
 80069f8:	d2ec      	bcs.n	80069d4 <quorem+0xa0>
 80069fa:	9a01      	ldr	r2, [sp, #4]
 80069fc:	00a3      	lsls	r3, r4, #2
 80069fe:	18d3      	adds	r3, r2, r3
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	2a00      	cmp	r2, #0
 8006a04:	d014      	beq.n	8006a30 <quorem+0xfc>
 8006a06:	9b02      	ldr	r3, [sp, #8]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	9302      	str	r3, [sp, #8]
 8006a0c:	9802      	ldr	r0, [sp, #8]
 8006a0e:	b009      	add	sp, #36	@ 0x24
 8006a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a12:	682b      	ldr	r3, [r5, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d104      	bne.n	8006a22 <quorem+0xee>
 8006a18:	3c01      	subs	r4, #1
 8006a1a:	9b01      	ldr	r3, [sp, #4]
 8006a1c:	3d04      	subs	r5, #4
 8006a1e:	42ab      	cmp	r3, r5
 8006a20:	d3f7      	bcc.n	8006a12 <quorem+0xde>
 8006a22:	9b03      	ldr	r3, [sp, #12]
 8006a24:	611c      	str	r4, [r3, #16]
 8006a26:	e7cc      	b.n	80069c2 <quorem+0x8e>
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	2a00      	cmp	r2, #0
 8006a2c:	d104      	bne.n	8006a38 <quorem+0x104>
 8006a2e:	3c01      	subs	r4, #1
 8006a30:	9a01      	ldr	r2, [sp, #4]
 8006a32:	3b04      	subs	r3, #4
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d3f7      	bcc.n	8006a28 <quorem+0xf4>
 8006a38:	9b03      	ldr	r3, [sp, #12]
 8006a3a:	611c      	str	r4, [r3, #16]
 8006a3c:	e7e3      	b.n	8006a06 <quorem+0xd2>
	...

08006a40 <_dtoa_r>:
 8006a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a42:	0014      	movs	r4, r2
 8006a44:	001d      	movs	r5, r3
 8006a46:	69c6      	ldr	r6, [r0, #28]
 8006a48:	b09d      	sub	sp, #116	@ 0x74
 8006a4a:	940a      	str	r4, [sp, #40]	@ 0x28
 8006a4c:	950b      	str	r5, [sp, #44]	@ 0x2c
 8006a4e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8006a50:	9003      	str	r0, [sp, #12]
 8006a52:	2e00      	cmp	r6, #0
 8006a54:	d10f      	bne.n	8006a76 <_dtoa_r+0x36>
 8006a56:	2010      	movs	r0, #16
 8006a58:	f000 fe2c 	bl	80076b4 <malloc>
 8006a5c:	9b03      	ldr	r3, [sp, #12]
 8006a5e:	1e02      	subs	r2, r0, #0
 8006a60:	61d8      	str	r0, [r3, #28]
 8006a62:	d104      	bne.n	8006a6e <_dtoa_r+0x2e>
 8006a64:	21ef      	movs	r1, #239	@ 0xef
 8006a66:	4bc7      	ldr	r3, [pc, #796]	@ (8006d84 <_dtoa_r+0x344>)
 8006a68:	48c7      	ldr	r0, [pc, #796]	@ (8006d88 <_dtoa_r+0x348>)
 8006a6a:	f001 fcb9 	bl	80083e0 <__assert_func>
 8006a6e:	6046      	str	r6, [r0, #4]
 8006a70:	6086      	str	r6, [r0, #8]
 8006a72:	6006      	str	r6, [r0, #0]
 8006a74:	60c6      	str	r6, [r0, #12]
 8006a76:	9b03      	ldr	r3, [sp, #12]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	6819      	ldr	r1, [r3, #0]
 8006a7c:	2900      	cmp	r1, #0
 8006a7e:	d00b      	beq.n	8006a98 <_dtoa_r+0x58>
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	2301      	movs	r3, #1
 8006a84:	4093      	lsls	r3, r2
 8006a86:	604a      	str	r2, [r1, #4]
 8006a88:	608b      	str	r3, [r1, #8]
 8006a8a:	9803      	ldr	r0, [sp, #12]
 8006a8c:	f000 ff12 	bl	80078b4 <_Bfree>
 8006a90:	2200      	movs	r2, #0
 8006a92:	9b03      	ldr	r3, [sp, #12]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	2d00      	cmp	r5, #0
 8006a9a:	da1e      	bge.n	8006ada <_dtoa_r+0x9a>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	603b      	str	r3, [r7, #0]
 8006aa0:	006b      	lsls	r3, r5, #1
 8006aa2:	085b      	lsrs	r3, r3, #1
 8006aa4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006aa6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006aa8:	4bb8      	ldr	r3, [pc, #736]	@ (8006d8c <_dtoa_r+0x34c>)
 8006aaa:	4ab8      	ldr	r2, [pc, #736]	@ (8006d8c <_dtoa_r+0x34c>)
 8006aac:	403b      	ands	r3, r7
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d116      	bne.n	8006ae0 <_dtoa_r+0xa0>
 8006ab2:	4bb7      	ldr	r3, [pc, #732]	@ (8006d90 <_dtoa_r+0x350>)
 8006ab4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	033b      	lsls	r3, r7, #12
 8006aba:	0b1b      	lsrs	r3, r3, #12
 8006abc:	4323      	orrs	r3, r4
 8006abe:	d101      	bne.n	8006ac4 <_dtoa_r+0x84>
 8006ac0:	f000 fd80 	bl	80075c4 <_dtoa_r+0xb84>
 8006ac4:	4bb3      	ldr	r3, [pc, #716]	@ (8006d94 <_dtoa_r+0x354>)
 8006ac6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006ac8:	9308      	str	r3, [sp, #32]
 8006aca:	2a00      	cmp	r2, #0
 8006acc:	d002      	beq.n	8006ad4 <_dtoa_r+0x94>
 8006ace:	4bb2      	ldr	r3, [pc, #712]	@ (8006d98 <_dtoa_r+0x358>)
 8006ad0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	9808      	ldr	r0, [sp, #32]
 8006ad6:	b01d      	add	sp, #116	@ 0x74
 8006ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ada:	2300      	movs	r3, #0
 8006adc:	603b      	str	r3, [r7, #0]
 8006ade:	e7e2      	b.n	8006aa6 <_dtoa_r+0x66>
 8006ae0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ae2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ae4:	9212      	str	r2, [sp, #72]	@ 0x48
 8006ae6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ae8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006aea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006aec:	2200      	movs	r2, #0
 8006aee:	2300      	movs	r3, #0
 8006af0:	f7f9 fcac 	bl	800044c <__aeabi_dcmpeq>
 8006af4:	1e06      	subs	r6, r0, #0
 8006af6:	d00b      	beq.n	8006b10 <_dtoa_r+0xd0>
 8006af8:	2301      	movs	r3, #1
 8006afa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <_dtoa_r+0xca>
 8006b04:	4ba5      	ldr	r3, [pc, #660]	@ (8006d9c <_dtoa_r+0x35c>)
 8006b06:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	4ba5      	ldr	r3, [pc, #660]	@ (8006da0 <_dtoa_r+0x360>)
 8006b0c:	9308      	str	r3, [sp, #32]
 8006b0e:	e7e1      	b.n	8006ad4 <_dtoa_r+0x94>
 8006b10:	ab1a      	add	r3, sp, #104	@ 0x68
 8006b12:	9301      	str	r3, [sp, #4]
 8006b14:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	9803      	ldr	r0, [sp, #12]
 8006b1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006b1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006b1e:	f001 f9c1 	bl	8007ea4 <__d2b>
 8006b22:	007a      	lsls	r2, r7, #1
 8006b24:	9005      	str	r0, [sp, #20]
 8006b26:	0d52      	lsrs	r2, r2, #21
 8006b28:	d100      	bne.n	8006b2c <_dtoa_r+0xec>
 8006b2a:	e07b      	b.n	8006c24 <_dtoa_r+0x1e4>
 8006b2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006b2e:	9618      	str	r6, [sp, #96]	@ 0x60
 8006b30:	0319      	lsls	r1, r3, #12
 8006b32:	4b9c      	ldr	r3, [pc, #624]	@ (8006da4 <_dtoa_r+0x364>)
 8006b34:	0b09      	lsrs	r1, r1, #12
 8006b36:	430b      	orrs	r3, r1
 8006b38:	499b      	ldr	r1, [pc, #620]	@ (8006da8 <_dtoa_r+0x368>)
 8006b3a:	1857      	adds	r7, r2, r1
 8006b3c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006b3e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006b40:	0019      	movs	r1, r3
 8006b42:	2200      	movs	r2, #0
 8006b44:	4b99      	ldr	r3, [pc, #612]	@ (8006dac <_dtoa_r+0x36c>)
 8006b46:	f7fb fae5 	bl	8002114 <__aeabi_dsub>
 8006b4a:	4a99      	ldr	r2, [pc, #612]	@ (8006db0 <_dtoa_r+0x370>)
 8006b4c:	4b99      	ldr	r3, [pc, #612]	@ (8006db4 <_dtoa_r+0x374>)
 8006b4e:	f7fa fffb 	bl	8001b48 <__aeabi_dmul>
 8006b52:	4a99      	ldr	r2, [pc, #612]	@ (8006db8 <_dtoa_r+0x378>)
 8006b54:	4b99      	ldr	r3, [pc, #612]	@ (8006dbc <_dtoa_r+0x37c>)
 8006b56:	f7f9 fff7 	bl	8000b48 <__aeabi_dadd>
 8006b5a:	0004      	movs	r4, r0
 8006b5c:	0038      	movs	r0, r7
 8006b5e:	000d      	movs	r5, r1
 8006b60:	f7fb ff40 	bl	80029e4 <__aeabi_i2d>
 8006b64:	4a96      	ldr	r2, [pc, #600]	@ (8006dc0 <_dtoa_r+0x380>)
 8006b66:	4b97      	ldr	r3, [pc, #604]	@ (8006dc4 <_dtoa_r+0x384>)
 8006b68:	f7fa ffee 	bl	8001b48 <__aeabi_dmul>
 8006b6c:	0002      	movs	r2, r0
 8006b6e:	000b      	movs	r3, r1
 8006b70:	0020      	movs	r0, r4
 8006b72:	0029      	movs	r1, r5
 8006b74:	f7f9 ffe8 	bl	8000b48 <__aeabi_dadd>
 8006b78:	0004      	movs	r4, r0
 8006b7a:	000d      	movs	r5, r1
 8006b7c:	f7fb fef6 	bl	800296c <__aeabi_d2iz>
 8006b80:	2200      	movs	r2, #0
 8006b82:	9004      	str	r0, [sp, #16]
 8006b84:	2300      	movs	r3, #0
 8006b86:	0020      	movs	r0, r4
 8006b88:	0029      	movs	r1, r5
 8006b8a:	f7f9 fc65 	bl	8000458 <__aeabi_dcmplt>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d00b      	beq.n	8006baa <_dtoa_r+0x16a>
 8006b92:	9804      	ldr	r0, [sp, #16]
 8006b94:	f7fb ff26 	bl	80029e4 <__aeabi_i2d>
 8006b98:	002b      	movs	r3, r5
 8006b9a:	0022      	movs	r2, r4
 8006b9c:	f7f9 fc56 	bl	800044c <__aeabi_dcmpeq>
 8006ba0:	4243      	negs	r3, r0
 8006ba2:	4158      	adcs	r0, r3
 8006ba4:	9b04      	ldr	r3, [sp, #16]
 8006ba6:	1a1b      	subs	r3, r3, r0
 8006ba8:	9304      	str	r3, [sp, #16]
 8006baa:	2301      	movs	r3, #1
 8006bac:	9315      	str	r3, [sp, #84]	@ 0x54
 8006bae:	9b04      	ldr	r3, [sp, #16]
 8006bb0:	2b16      	cmp	r3, #22
 8006bb2:	d810      	bhi.n	8006bd6 <_dtoa_r+0x196>
 8006bb4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006bb6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006bb8:	9a04      	ldr	r2, [sp, #16]
 8006bba:	4b83      	ldr	r3, [pc, #524]	@ (8006dc8 <_dtoa_r+0x388>)
 8006bbc:	00d2      	lsls	r2, r2, #3
 8006bbe:	189b      	adds	r3, r3, r2
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f7f9 fc48 	bl	8000458 <__aeabi_dcmplt>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	d047      	beq.n	8006c5c <_dtoa_r+0x21c>
 8006bcc:	9b04      	ldr	r3, [sp, #16]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	9304      	str	r3, [sp, #16]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	9315      	str	r3, [sp, #84]	@ 0x54
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8006bda:	9206      	str	r2, [sp, #24]
 8006bdc:	1bdb      	subs	r3, r3, r7
 8006bde:	1e5a      	subs	r2, r3, #1
 8006be0:	d53e      	bpl.n	8006c60 <_dtoa_r+0x220>
 8006be2:	2201      	movs	r2, #1
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	9306      	str	r3, [sp, #24]
 8006be8:	2300      	movs	r3, #0
 8006bea:	930d      	str	r3, [sp, #52]	@ 0x34
 8006bec:	9b04      	ldr	r3, [sp, #16]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	db38      	blt.n	8006c64 <_dtoa_r+0x224>
 8006bf2:	9a04      	ldr	r2, [sp, #16]
 8006bf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006bf6:	4694      	mov	ip, r2
 8006bf8:	4463      	add	r3, ip
 8006bfa:	930d      	str	r3, [sp, #52]	@ 0x34
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	9214      	str	r2, [sp, #80]	@ 0x50
 8006c00:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c02:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006c04:	2401      	movs	r4, #1
 8006c06:	2b09      	cmp	r3, #9
 8006c08:	d862      	bhi.n	8006cd0 <_dtoa_r+0x290>
 8006c0a:	2b05      	cmp	r3, #5
 8006c0c:	dd02      	ble.n	8006c14 <_dtoa_r+0x1d4>
 8006c0e:	2400      	movs	r4, #0
 8006c10:	3b04      	subs	r3, #4
 8006c12:	9322      	str	r3, [sp, #136]	@ 0x88
 8006c14:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006c16:	1e98      	subs	r0, r3, #2
 8006c18:	2803      	cmp	r0, #3
 8006c1a:	d863      	bhi.n	8006ce4 <_dtoa_r+0x2a4>
 8006c1c:	f7f9 fa7c 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006c20:	2b385654 	.word	0x2b385654
 8006c24:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006c26:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8006c28:	18f6      	adds	r6, r6, r3
 8006c2a:	4b68      	ldr	r3, [pc, #416]	@ (8006dcc <_dtoa_r+0x38c>)
 8006c2c:	18f2      	adds	r2, r6, r3
 8006c2e:	2a20      	cmp	r2, #32
 8006c30:	dd0f      	ble.n	8006c52 <_dtoa_r+0x212>
 8006c32:	2340      	movs	r3, #64	@ 0x40
 8006c34:	1a9b      	subs	r3, r3, r2
 8006c36:	409f      	lsls	r7, r3
 8006c38:	4b65      	ldr	r3, [pc, #404]	@ (8006dd0 <_dtoa_r+0x390>)
 8006c3a:	0038      	movs	r0, r7
 8006c3c:	18f3      	adds	r3, r6, r3
 8006c3e:	40dc      	lsrs	r4, r3
 8006c40:	4320      	orrs	r0, r4
 8006c42:	f7fb fefd 	bl	8002a40 <__aeabi_ui2d>
 8006c46:	2201      	movs	r2, #1
 8006c48:	4b62      	ldr	r3, [pc, #392]	@ (8006dd4 <_dtoa_r+0x394>)
 8006c4a:	1e77      	subs	r7, r6, #1
 8006c4c:	18cb      	adds	r3, r1, r3
 8006c4e:	9218      	str	r2, [sp, #96]	@ 0x60
 8006c50:	e776      	b.n	8006b40 <_dtoa_r+0x100>
 8006c52:	2320      	movs	r3, #32
 8006c54:	0020      	movs	r0, r4
 8006c56:	1a9b      	subs	r3, r3, r2
 8006c58:	4098      	lsls	r0, r3
 8006c5a:	e7f2      	b.n	8006c42 <_dtoa_r+0x202>
 8006c5c:	9015      	str	r0, [sp, #84]	@ 0x54
 8006c5e:	e7ba      	b.n	8006bd6 <_dtoa_r+0x196>
 8006c60:	920d      	str	r2, [sp, #52]	@ 0x34
 8006c62:	e7c3      	b.n	8006bec <_dtoa_r+0x1ac>
 8006c64:	9b06      	ldr	r3, [sp, #24]
 8006c66:	9a04      	ldr	r2, [sp, #16]
 8006c68:	1a9b      	subs	r3, r3, r2
 8006c6a:	9306      	str	r3, [sp, #24]
 8006c6c:	4253      	negs	r3, r2
 8006c6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c70:	2300      	movs	r3, #0
 8006c72:	9314      	str	r3, [sp, #80]	@ 0x50
 8006c74:	e7c5      	b.n	8006c02 <_dtoa_r+0x1c2>
 8006c76:	2301      	movs	r3, #1
 8006c78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006c7a:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c7c:	4694      	mov	ip, r2
 8006c7e:	9b04      	ldr	r3, [sp, #16]
 8006c80:	4463      	add	r3, ip
 8006c82:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c84:	3301      	adds	r3, #1
 8006c86:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	dc08      	bgt.n	8006c9e <_dtoa_r+0x25e>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e006      	b.n	8006c9e <_dtoa_r+0x25e>
 8006c90:	2301      	movs	r3, #1
 8006c92:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	dd28      	ble.n	8006cec <_dtoa_r+0x2ac>
 8006c9a:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c9e:	9a03      	ldr	r2, [sp, #12]
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	69d0      	ldr	r0, [r2, #28]
 8006ca4:	2204      	movs	r2, #4
 8006ca6:	0015      	movs	r5, r2
 8006ca8:	3514      	adds	r5, #20
 8006caa:	429d      	cmp	r5, r3
 8006cac:	d923      	bls.n	8006cf6 <_dtoa_r+0x2b6>
 8006cae:	6041      	str	r1, [r0, #4]
 8006cb0:	9803      	ldr	r0, [sp, #12]
 8006cb2:	f000 fdbb 	bl	800782c <_Balloc>
 8006cb6:	9008      	str	r0, [sp, #32]
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d11f      	bne.n	8006cfc <_dtoa_r+0x2bc>
 8006cbc:	21b0      	movs	r1, #176	@ 0xb0
 8006cbe:	4b46      	ldr	r3, [pc, #280]	@ (8006dd8 <_dtoa_r+0x398>)
 8006cc0:	4831      	ldr	r0, [pc, #196]	@ (8006d88 <_dtoa_r+0x348>)
 8006cc2:	9a08      	ldr	r2, [sp, #32]
 8006cc4:	31ff      	adds	r1, #255	@ 0xff
 8006cc6:	e6d0      	b.n	8006a6a <_dtoa_r+0x2a>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	e7e2      	b.n	8006c92 <_dtoa_r+0x252>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	e7d3      	b.n	8006c78 <_dtoa_r+0x238>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	9410      	str	r4, [sp, #64]	@ 0x40
 8006cd4:	9322      	str	r3, [sp, #136]	@ 0x88
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	2200      	movs	r2, #0
 8006cda:	930e      	str	r3, [sp, #56]	@ 0x38
 8006cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cde:	3313      	adds	r3, #19
 8006ce0:	9223      	str	r2, [sp, #140]	@ 0x8c
 8006ce2:	e7dc      	b.n	8006c9e <_dtoa_r+0x25e>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ce8:	3b02      	subs	r3, #2
 8006cea:	e7f5      	b.n	8006cd8 <_dtoa_r+0x298>
 8006cec:	2301      	movs	r3, #1
 8006cee:	001a      	movs	r2, r3
 8006cf0:	930e      	str	r3, [sp, #56]	@ 0x38
 8006cf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cf4:	e7f4      	b.n	8006ce0 <_dtoa_r+0x2a0>
 8006cf6:	3101      	adds	r1, #1
 8006cf8:	0052      	lsls	r2, r2, #1
 8006cfa:	e7d4      	b.n	8006ca6 <_dtoa_r+0x266>
 8006cfc:	9b03      	ldr	r3, [sp, #12]
 8006cfe:	9a08      	ldr	r2, [sp, #32]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d06:	2b0e      	cmp	r3, #14
 8006d08:	d900      	bls.n	8006d0c <_dtoa_r+0x2cc>
 8006d0a:	e0d6      	b.n	8006eba <_dtoa_r+0x47a>
 8006d0c:	2c00      	cmp	r4, #0
 8006d0e:	d100      	bne.n	8006d12 <_dtoa_r+0x2d2>
 8006d10:	e0d3      	b.n	8006eba <_dtoa_r+0x47a>
 8006d12:	9b04      	ldr	r3, [sp, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	dd63      	ble.n	8006de0 <_dtoa_r+0x3a0>
 8006d18:	210f      	movs	r1, #15
 8006d1a:	9a04      	ldr	r2, [sp, #16]
 8006d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8006dc8 <_dtoa_r+0x388>)
 8006d1e:	400a      	ands	r2, r1
 8006d20:	00d2      	lsls	r2, r2, #3
 8006d22:	189b      	adds	r3, r3, r2
 8006d24:	681e      	ldr	r6, [r3, #0]
 8006d26:	685f      	ldr	r7, [r3, #4]
 8006d28:	9b04      	ldr	r3, [sp, #16]
 8006d2a:	2402      	movs	r4, #2
 8006d2c:	111d      	asrs	r5, r3, #4
 8006d2e:	05db      	lsls	r3, r3, #23
 8006d30:	d50a      	bpl.n	8006d48 <_dtoa_r+0x308>
 8006d32:	4b2a      	ldr	r3, [pc, #168]	@ (8006ddc <_dtoa_r+0x39c>)
 8006d34:	400d      	ands	r5, r1
 8006d36:	6a1a      	ldr	r2, [r3, #32]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006d3c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006d3e:	f7fa fac9 	bl	80012d4 <__aeabi_ddiv>
 8006d42:	900a      	str	r0, [sp, #40]	@ 0x28
 8006d44:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006d46:	3401      	adds	r4, #1
 8006d48:	4b24      	ldr	r3, [pc, #144]	@ (8006ddc <_dtoa_r+0x39c>)
 8006d4a:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d4c:	2d00      	cmp	r5, #0
 8006d4e:	d108      	bne.n	8006d62 <_dtoa_r+0x322>
 8006d50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006d52:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d54:	0032      	movs	r2, r6
 8006d56:	003b      	movs	r3, r7
 8006d58:	f7fa fabc 	bl	80012d4 <__aeabi_ddiv>
 8006d5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006d5e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006d60:	e059      	b.n	8006e16 <_dtoa_r+0x3d6>
 8006d62:	2301      	movs	r3, #1
 8006d64:	421d      	tst	r5, r3
 8006d66:	d009      	beq.n	8006d7c <_dtoa_r+0x33c>
 8006d68:	18e4      	adds	r4, r4, r3
 8006d6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d6c:	0030      	movs	r0, r6
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	0039      	movs	r1, r7
 8006d74:	f7fa fee8 	bl	8001b48 <__aeabi_dmul>
 8006d78:	0006      	movs	r6, r0
 8006d7a:	000f      	movs	r7, r1
 8006d7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d7e:	106d      	asrs	r5, r5, #1
 8006d80:	3308      	adds	r3, #8
 8006d82:	e7e2      	b.n	8006d4a <_dtoa_r+0x30a>
 8006d84:	08009de9 	.word	0x08009de9
 8006d88:	08009e00 	.word	0x08009e00
 8006d8c:	7ff00000 	.word	0x7ff00000
 8006d90:	0000270f 	.word	0x0000270f
 8006d94:	08009de5 	.word	0x08009de5
 8006d98:	08009de8 	.word	0x08009de8
 8006d9c:	08009db9 	.word	0x08009db9
 8006da0:	08009db8 	.word	0x08009db8
 8006da4:	3ff00000 	.word	0x3ff00000
 8006da8:	fffffc01 	.word	0xfffffc01
 8006dac:	3ff80000 	.word	0x3ff80000
 8006db0:	636f4361 	.word	0x636f4361
 8006db4:	3fd287a7 	.word	0x3fd287a7
 8006db8:	8b60c8b3 	.word	0x8b60c8b3
 8006dbc:	3fc68a28 	.word	0x3fc68a28
 8006dc0:	509f79fb 	.word	0x509f79fb
 8006dc4:	3fd34413 	.word	0x3fd34413
 8006dc8:	08009f50 	.word	0x08009f50
 8006dcc:	00000432 	.word	0x00000432
 8006dd0:	00000412 	.word	0x00000412
 8006dd4:	fe100000 	.word	0xfe100000
 8006dd8:	08009e58 	.word	0x08009e58
 8006ddc:	08009f28 	.word	0x08009f28
 8006de0:	9b04      	ldr	r3, [sp, #16]
 8006de2:	2402      	movs	r4, #2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d016      	beq.n	8006e16 <_dtoa_r+0x3d6>
 8006de8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006dea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006dec:	220f      	movs	r2, #15
 8006dee:	425d      	negs	r5, r3
 8006df0:	402a      	ands	r2, r5
 8006df2:	4bd5      	ldr	r3, [pc, #852]	@ (8007148 <_dtoa_r+0x708>)
 8006df4:	00d2      	lsls	r2, r2, #3
 8006df6:	189b      	adds	r3, r3, r2
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	f7fa fea4 	bl	8001b48 <__aeabi_dmul>
 8006e00:	2701      	movs	r7, #1
 8006e02:	2300      	movs	r3, #0
 8006e04:	900a      	str	r0, [sp, #40]	@ 0x28
 8006e06:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006e08:	4ed0      	ldr	r6, [pc, #832]	@ (800714c <_dtoa_r+0x70c>)
 8006e0a:	112d      	asrs	r5, r5, #4
 8006e0c:	2d00      	cmp	r5, #0
 8006e0e:	d000      	beq.n	8006e12 <_dtoa_r+0x3d2>
 8006e10:	e095      	b.n	8006f3e <_dtoa_r+0x4fe>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1a2      	bne.n	8006d5c <_dtoa_r+0x31c>
 8006e16:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006e18:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006e1a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d100      	bne.n	8006e22 <_dtoa_r+0x3e2>
 8006e20:	e098      	b.n	8006f54 <_dtoa_r+0x514>
 8006e22:	2200      	movs	r2, #0
 8006e24:	0030      	movs	r0, r6
 8006e26:	0039      	movs	r1, r7
 8006e28:	4bc9      	ldr	r3, [pc, #804]	@ (8007150 <_dtoa_r+0x710>)
 8006e2a:	f7f9 fb15 	bl	8000458 <__aeabi_dcmplt>
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	d100      	bne.n	8006e34 <_dtoa_r+0x3f4>
 8006e32:	e08f      	b.n	8006f54 <_dtoa_r+0x514>
 8006e34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d100      	bne.n	8006e3c <_dtoa_r+0x3fc>
 8006e3a:	e08b      	b.n	8006f54 <_dtoa_r+0x514>
 8006e3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	dd37      	ble.n	8006eb2 <_dtoa_r+0x472>
 8006e42:	9b04      	ldr	r3, [sp, #16]
 8006e44:	2200      	movs	r2, #0
 8006e46:	3b01      	subs	r3, #1
 8006e48:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e4a:	0030      	movs	r0, r6
 8006e4c:	4bc1      	ldr	r3, [pc, #772]	@ (8007154 <_dtoa_r+0x714>)
 8006e4e:	0039      	movs	r1, r7
 8006e50:	f7fa fe7a 	bl	8001b48 <__aeabi_dmul>
 8006e54:	900a      	str	r0, [sp, #40]	@ 0x28
 8006e56:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006e58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e5a:	3401      	adds	r4, #1
 8006e5c:	0020      	movs	r0, r4
 8006e5e:	9311      	str	r3, [sp, #68]	@ 0x44
 8006e60:	f7fb fdc0 	bl	80029e4 <__aeabi_i2d>
 8006e64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e68:	f7fa fe6e 	bl	8001b48 <__aeabi_dmul>
 8006e6c:	4bba      	ldr	r3, [pc, #744]	@ (8007158 <_dtoa_r+0x718>)
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f7f9 fe6a 	bl	8000b48 <__aeabi_dadd>
 8006e74:	4bb9      	ldr	r3, [pc, #740]	@ (800715c <_dtoa_r+0x71c>)
 8006e76:	0006      	movs	r6, r0
 8006e78:	18cf      	adds	r7, r1, r3
 8006e7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d16d      	bne.n	8006f5c <_dtoa_r+0x51c>
 8006e80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006e82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e84:	2200      	movs	r2, #0
 8006e86:	4bb6      	ldr	r3, [pc, #728]	@ (8007160 <_dtoa_r+0x720>)
 8006e88:	f7fb f944 	bl	8002114 <__aeabi_dsub>
 8006e8c:	0032      	movs	r2, r6
 8006e8e:	003b      	movs	r3, r7
 8006e90:	0004      	movs	r4, r0
 8006e92:	000d      	movs	r5, r1
 8006e94:	f7f9 faf4 	bl	8000480 <__aeabi_dcmpgt>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d000      	beq.n	8006e9e <_dtoa_r+0x45e>
 8006e9c:	e2b6      	b.n	800740c <_dtoa_r+0x9cc>
 8006e9e:	2180      	movs	r1, #128	@ 0x80
 8006ea0:	0609      	lsls	r1, r1, #24
 8006ea2:	187b      	adds	r3, r7, r1
 8006ea4:	0032      	movs	r2, r6
 8006ea6:	0020      	movs	r0, r4
 8006ea8:	0029      	movs	r1, r5
 8006eaa:	f7f9 fad5 	bl	8000458 <__aeabi_dcmplt>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	d128      	bne.n	8006f04 <_dtoa_r+0x4c4>
 8006eb2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006eb4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006eb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eb8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006eba:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	da00      	bge.n	8006ec2 <_dtoa_r+0x482>
 8006ec0:	e174      	b.n	80071ac <_dtoa_r+0x76c>
 8006ec2:	9a04      	ldr	r2, [sp, #16]
 8006ec4:	2a0e      	cmp	r2, #14
 8006ec6:	dd00      	ble.n	8006eca <_dtoa_r+0x48a>
 8006ec8:	e170      	b.n	80071ac <_dtoa_r+0x76c>
 8006eca:	4b9f      	ldr	r3, [pc, #636]	@ (8007148 <_dtoa_r+0x708>)
 8006ecc:	00d2      	lsls	r2, r2, #3
 8006ece:	189b      	adds	r3, r3, r2
 8006ed0:	685c      	ldr	r4, [r3, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	9306      	str	r3, [sp, #24]
 8006ed6:	9407      	str	r4, [sp, #28]
 8006ed8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	db00      	blt.n	8006ee0 <_dtoa_r+0x4a0>
 8006ede:	e0e7      	b.n	80070b0 <_dtoa_r+0x670>
 8006ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	dd00      	ble.n	8006ee8 <_dtoa_r+0x4a8>
 8006ee6:	e0e3      	b.n	80070b0 <_dtoa_r+0x670>
 8006ee8:	d10c      	bne.n	8006f04 <_dtoa_r+0x4c4>
 8006eea:	9806      	ldr	r0, [sp, #24]
 8006eec:	9907      	ldr	r1, [sp, #28]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	4b9b      	ldr	r3, [pc, #620]	@ (8007160 <_dtoa_r+0x720>)
 8006ef2:	f7fa fe29 	bl	8001b48 <__aeabi_dmul>
 8006ef6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ef8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006efa:	f7f9 facb 	bl	8000494 <__aeabi_dcmpge>
 8006efe:	2800      	cmp	r0, #0
 8006f00:	d100      	bne.n	8006f04 <_dtoa_r+0x4c4>
 8006f02:	e286      	b.n	8007412 <_dtoa_r+0x9d2>
 8006f04:	2600      	movs	r6, #0
 8006f06:	0037      	movs	r7, r6
 8006f08:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f0a:	9c08      	ldr	r4, [sp, #32]
 8006f0c:	43db      	mvns	r3, r3
 8006f0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f10:	9704      	str	r7, [sp, #16]
 8006f12:	2700      	movs	r7, #0
 8006f14:	0031      	movs	r1, r6
 8006f16:	9803      	ldr	r0, [sp, #12]
 8006f18:	f000 fccc 	bl	80078b4 <_Bfree>
 8006f1c:	9b04      	ldr	r3, [sp, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d100      	bne.n	8006f24 <_dtoa_r+0x4e4>
 8006f22:	e0bb      	b.n	800709c <_dtoa_r+0x65c>
 8006f24:	2f00      	cmp	r7, #0
 8006f26:	d005      	beq.n	8006f34 <_dtoa_r+0x4f4>
 8006f28:	429f      	cmp	r7, r3
 8006f2a:	d003      	beq.n	8006f34 <_dtoa_r+0x4f4>
 8006f2c:	0039      	movs	r1, r7
 8006f2e:	9803      	ldr	r0, [sp, #12]
 8006f30:	f000 fcc0 	bl	80078b4 <_Bfree>
 8006f34:	9904      	ldr	r1, [sp, #16]
 8006f36:	9803      	ldr	r0, [sp, #12]
 8006f38:	f000 fcbc 	bl	80078b4 <_Bfree>
 8006f3c:	e0ae      	b.n	800709c <_dtoa_r+0x65c>
 8006f3e:	423d      	tst	r5, r7
 8006f40:	d005      	beq.n	8006f4e <_dtoa_r+0x50e>
 8006f42:	6832      	ldr	r2, [r6, #0]
 8006f44:	6873      	ldr	r3, [r6, #4]
 8006f46:	f7fa fdff 	bl	8001b48 <__aeabi_dmul>
 8006f4a:	003b      	movs	r3, r7
 8006f4c:	3401      	adds	r4, #1
 8006f4e:	106d      	asrs	r5, r5, #1
 8006f50:	3608      	adds	r6, #8
 8006f52:	e75b      	b.n	8006e0c <_dtoa_r+0x3cc>
 8006f54:	9b04      	ldr	r3, [sp, #16]
 8006f56:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f5a:	e77f      	b.n	8006e5c <_dtoa_r+0x41c>
 8006f5c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006f5e:	4b7a      	ldr	r3, [pc, #488]	@ (8007148 <_dtoa_r+0x708>)
 8006f60:	3a01      	subs	r2, #1
 8006f62:	00d2      	lsls	r2, r2, #3
 8006f64:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006f66:	189b      	adds	r3, r3, r2
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	2900      	cmp	r1, #0
 8006f6e:	d04c      	beq.n	800700a <_dtoa_r+0x5ca>
 8006f70:	2000      	movs	r0, #0
 8006f72:	497c      	ldr	r1, [pc, #496]	@ (8007164 <_dtoa_r+0x724>)
 8006f74:	f7fa f9ae 	bl	80012d4 <__aeabi_ddiv>
 8006f78:	0032      	movs	r2, r6
 8006f7a:	003b      	movs	r3, r7
 8006f7c:	f7fb f8ca 	bl	8002114 <__aeabi_dsub>
 8006f80:	9a08      	ldr	r2, [sp, #32]
 8006f82:	0006      	movs	r6, r0
 8006f84:	4694      	mov	ip, r2
 8006f86:	000f      	movs	r7, r1
 8006f88:	9b08      	ldr	r3, [sp, #32]
 8006f8a:	9316      	str	r3, [sp, #88]	@ 0x58
 8006f8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006f8e:	4463      	add	r3, ip
 8006f90:	9311      	str	r3, [sp, #68]	@ 0x44
 8006f92:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f96:	f7fb fce9 	bl	800296c <__aeabi_d2iz>
 8006f9a:	0005      	movs	r5, r0
 8006f9c:	f7fb fd22 	bl	80029e4 <__aeabi_i2d>
 8006fa0:	0002      	movs	r2, r0
 8006fa2:	000b      	movs	r3, r1
 8006fa4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006fa6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006fa8:	f7fb f8b4 	bl	8002114 <__aeabi_dsub>
 8006fac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006fae:	3530      	adds	r5, #48	@ 0x30
 8006fb0:	1c5c      	adds	r4, r3, #1
 8006fb2:	701d      	strb	r5, [r3, #0]
 8006fb4:	0032      	movs	r2, r6
 8006fb6:	003b      	movs	r3, r7
 8006fb8:	900a      	str	r0, [sp, #40]	@ 0x28
 8006fba:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006fbc:	f7f9 fa4c 	bl	8000458 <__aeabi_dcmplt>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d16b      	bne.n	800709c <_dtoa_r+0x65c>
 8006fc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fc8:	2000      	movs	r0, #0
 8006fca:	4961      	ldr	r1, [pc, #388]	@ (8007150 <_dtoa_r+0x710>)
 8006fcc:	f7fb f8a2 	bl	8002114 <__aeabi_dsub>
 8006fd0:	0032      	movs	r2, r6
 8006fd2:	003b      	movs	r3, r7
 8006fd4:	f7f9 fa40 	bl	8000458 <__aeabi_dcmplt>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d000      	beq.n	8006fde <_dtoa_r+0x59e>
 8006fdc:	e0c6      	b.n	800716c <_dtoa_r+0x72c>
 8006fde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006fe0:	42a3      	cmp	r3, r4
 8006fe2:	d100      	bne.n	8006fe6 <_dtoa_r+0x5a6>
 8006fe4:	e765      	b.n	8006eb2 <_dtoa_r+0x472>
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	0030      	movs	r0, r6
 8006fea:	0039      	movs	r1, r7
 8006fec:	4b59      	ldr	r3, [pc, #356]	@ (8007154 <_dtoa_r+0x714>)
 8006fee:	f7fa fdab 	bl	8001b48 <__aeabi_dmul>
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	0006      	movs	r6, r0
 8006ff6:	000f      	movs	r7, r1
 8006ff8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006ffa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ffc:	4b55      	ldr	r3, [pc, #340]	@ (8007154 <_dtoa_r+0x714>)
 8006ffe:	f7fa fda3 	bl	8001b48 <__aeabi_dmul>
 8007002:	9416      	str	r4, [sp, #88]	@ 0x58
 8007004:	900a      	str	r0, [sp, #40]	@ 0x28
 8007006:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007008:	e7c3      	b.n	8006f92 <_dtoa_r+0x552>
 800700a:	0030      	movs	r0, r6
 800700c:	0039      	movs	r1, r7
 800700e:	f7fa fd9b 	bl	8001b48 <__aeabi_dmul>
 8007012:	9d08      	ldr	r5, [sp, #32]
 8007014:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007016:	002b      	movs	r3, r5
 8007018:	4694      	mov	ip, r2
 800701a:	9016      	str	r0, [sp, #88]	@ 0x58
 800701c:	9117      	str	r1, [sp, #92]	@ 0x5c
 800701e:	4463      	add	r3, ip
 8007020:	9319      	str	r3, [sp, #100]	@ 0x64
 8007022:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007024:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007026:	f7fb fca1 	bl	800296c <__aeabi_d2iz>
 800702a:	0004      	movs	r4, r0
 800702c:	f7fb fcda 	bl	80029e4 <__aeabi_i2d>
 8007030:	000b      	movs	r3, r1
 8007032:	0002      	movs	r2, r0
 8007034:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007036:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007038:	f7fb f86c 	bl	8002114 <__aeabi_dsub>
 800703c:	3430      	adds	r4, #48	@ 0x30
 800703e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007040:	702c      	strb	r4, [r5, #0]
 8007042:	3501      	adds	r5, #1
 8007044:	0006      	movs	r6, r0
 8007046:	000f      	movs	r7, r1
 8007048:	42ab      	cmp	r3, r5
 800704a:	d12a      	bne.n	80070a2 <_dtoa_r+0x662>
 800704c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800704e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8007050:	9b08      	ldr	r3, [sp, #32]
 8007052:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8007054:	469c      	mov	ip, r3
 8007056:	2200      	movs	r2, #0
 8007058:	4b42      	ldr	r3, [pc, #264]	@ (8007164 <_dtoa_r+0x724>)
 800705a:	4464      	add	r4, ip
 800705c:	f7f9 fd74 	bl	8000b48 <__aeabi_dadd>
 8007060:	0002      	movs	r2, r0
 8007062:	000b      	movs	r3, r1
 8007064:	0030      	movs	r0, r6
 8007066:	0039      	movs	r1, r7
 8007068:	f7f9 fa0a 	bl	8000480 <__aeabi_dcmpgt>
 800706c:	2800      	cmp	r0, #0
 800706e:	d000      	beq.n	8007072 <_dtoa_r+0x632>
 8007070:	e07c      	b.n	800716c <_dtoa_r+0x72c>
 8007072:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007074:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007076:	2000      	movs	r0, #0
 8007078:	493a      	ldr	r1, [pc, #232]	@ (8007164 <_dtoa_r+0x724>)
 800707a:	f7fb f84b 	bl	8002114 <__aeabi_dsub>
 800707e:	0002      	movs	r2, r0
 8007080:	000b      	movs	r3, r1
 8007082:	0030      	movs	r0, r6
 8007084:	0039      	movs	r1, r7
 8007086:	f7f9 f9e7 	bl	8000458 <__aeabi_dcmplt>
 800708a:	2800      	cmp	r0, #0
 800708c:	d100      	bne.n	8007090 <_dtoa_r+0x650>
 800708e:	e710      	b.n	8006eb2 <_dtoa_r+0x472>
 8007090:	0023      	movs	r3, r4
 8007092:	3c01      	subs	r4, #1
 8007094:	7822      	ldrb	r2, [r4, #0]
 8007096:	2a30      	cmp	r2, #48	@ 0x30
 8007098:	d0fa      	beq.n	8007090 <_dtoa_r+0x650>
 800709a:	001c      	movs	r4, r3
 800709c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800709e:	9304      	str	r3, [sp, #16]
 80070a0:	e042      	b.n	8007128 <_dtoa_r+0x6e8>
 80070a2:	2200      	movs	r2, #0
 80070a4:	4b2b      	ldr	r3, [pc, #172]	@ (8007154 <_dtoa_r+0x714>)
 80070a6:	f7fa fd4f 	bl	8001b48 <__aeabi_dmul>
 80070aa:	900a      	str	r0, [sp, #40]	@ 0x28
 80070ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80070ae:	e7b8      	b.n	8007022 <_dtoa_r+0x5e2>
 80070b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070b2:	9d08      	ldr	r5, [sp, #32]
 80070b4:	3b01      	subs	r3, #1
 80070b6:	195b      	adds	r3, r3, r5
 80070b8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80070ba:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80070bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80070be:	9a06      	ldr	r2, [sp, #24]
 80070c0:	9b07      	ldr	r3, [sp, #28]
 80070c2:	0030      	movs	r0, r6
 80070c4:	0039      	movs	r1, r7
 80070c6:	f7fa f905 	bl	80012d4 <__aeabi_ddiv>
 80070ca:	f7fb fc4f 	bl	800296c <__aeabi_d2iz>
 80070ce:	9009      	str	r0, [sp, #36]	@ 0x24
 80070d0:	f7fb fc88 	bl	80029e4 <__aeabi_i2d>
 80070d4:	9a06      	ldr	r2, [sp, #24]
 80070d6:	9b07      	ldr	r3, [sp, #28]
 80070d8:	f7fa fd36 	bl	8001b48 <__aeabi_dmul>
 80070dc:	0002      	movs	r2, r0
 80070de:	000b      	movs	r3, r1
 80070e0:	0030      	movs	r0, r6
 80070e2:	0039      	movs	r1, r7
 80070e4:	f7fb f816 	bl	8002114 <__aeabi_dsub>
 80070e8:	002b      	movs	r3, r5
 80070ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070ec:	3501      	adds	r5, #1
 80070ee:	3230      	adds	r2, #48	@ 0x30
 80070f0:	701a      	strb	r2, [r3, #0]
 80070f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070f4:	002c      	movs	r4, r5
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d14b      	bne.n	8007192 <_dtoa_r+0x752>
 80070fa:	0002      	movs	r2, r0
 80070fc:	000b      	movs	r3, r1
 80070fe:	f7f9 fd23 	bl	8000b48 <__aeabi_dadd>
 8007102:	9a06      	ldr	r2, [sp, #24]
 8007104:	9b07      	ldr	r3, [sp, #28]
 8007106:	0006      	movs	r6, r0
 8007108:	000f      	movs	r7, r1
 800710a:	f7f9 f9b9 	bl	8000480 <__aeabi_dcmpgt>
 800710e:	2800      	cmp	r0, #0
 8007110:	d12a      	bne.n	8007168 <_dtoa_r+0x728>
 8007112:	9a06      	ldr	r2, [sp, #24]
 8007114:	9b07      	ldr	r3, [sp, #28]
 8007116:	0030      	movs	r0, r6
 8007118:	0039      	movs	r1, r7
 800711a:	f7f9 f997 	bl	800044c <__aeabi_dcmpeq>
 800711e:	2800      	cmp	r0, #0
 8007120:	d002      	beq.n	8007128 <_dtoa_r+0x6e8>
 8007122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007124:	07dd      	lsls	r5, r3, #31
 8007126:	d41f      	bmi.n	8007168 <_dtoa_r+0x728>
 8007128:	9905      	ldr	r1, [sp, #20]
 800712a:	9803      	ldr	r0, [sp, #12]
 800712c:	f000 fbc2 	bl	80078b4 <_Bfree>
 8007130:	2300      	movs	r3, #0
 8007132:	7023      	strb	r3, [r4, #0]
 8007134:	9b04      	ldr	r3, [sp, #16]
 8007136:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007138:	3301      	adds	r3, #1
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800713e:	2b00      	cmp	r3, #0
 8007140:	d100      	bne.n	8007144 <_dtoa_r+0x704>
 8007142:	e4c7      	b.n	8006ad4 <_dtoa_r+0x94>
 8007144:	601c      	str	r4, [r3, #0]
 8007146:	e4c5      	b.n	8006ad4 <_dtoa_r+0x94>
 8007148:	08009f50 	.word	0x08009f50
 800714c:	08009f28 	.word	0x08009f28
 8007150:	3ff00000 	.word	0x3ff00000
 8007154:	40240000 	.word	0x40240000
 8007158:	401c0000 	.word	0x401c0000
 800715c:	fcc00000 	.word	0xfcc00000
 8007160:	40140000 	.word	0x40140000
 8007164:	3fe00000 	.word	0x3fe00000
 8007168:	9b04      	ldr	r3, [sp, #16]
 800716a:	930c      	str	r3, [sp, #48]	@ 0x30
 800716c:	0023      	movs	r3, r4
 800716e:	001c      	movs	r4, r3
 8007170:	3b01      	subs	r3, #1
 8007172:	781a      	ldrb	r2, [r3, #0]
 8007174:	2a39      	cmp	r2, #57	@ 0x39
 8007176:	d108      	bne.n	800718a <_dtoa_r+0x74a>
 8007178:	9a08      	ldr	r2, [sp, #32]
 800717a:	429a      	cmp	r2, r3
 800717c:	d1f7      	bne.n	800716e <_dtoa_r+0x72e>
 800717e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007180:	9908      	ldr	r1, [sp, #32]
 8007182:	3201      	adds	r2, #1
 8007184:	920c      	str	r2, [sp, #48]	@ 0x30
 8007186:	2230      	movs	r2, #48	@ 0x30
 8007188:	700a      	strb	r2, [r1, #0]
 800718a:	781a      	ldrb	r2, [r3, #0]
 800718c:	3201      	adds	r2, #1
 800718e:	701a      	strb	r2, [r3, #0]
 8007190:	e784      	b.n	800709c <_dtoa_r+0x65c>
 8007192:	2200      	movs	r2, #0
 8007194:	4bc6      	ldr	r3, [pc, #792]	@ (80074b0 <_dtoa_r+0xa70>)
 8007196:	f7fa fcd7 	bl	8001b48 <__aeabi_dmul>
 800719a:	2200      	movs	r2, #0
 800719c:	2300      	movs	r3, #0
 800719e:	0006      	movs	r6, r0
 80071a0:	000f      	movs	r7, r1
 80071a2:	f7f9 f953 	bl	800044c <__aeabi_dcmpeq>
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d089      	beq.n	80070be <_dtoa_r+0x67e>
 80071aa:	e7bd      	b.n	8007128 <_dtoa_r+0x6e8>
 80071ac:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80071ae:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80071b0:	9c06      	ldr	r4, [sp, #24]
 80071b2:	2f00      	cmp	r7, #0
 80071b4:	d014      	beq.n	80071e0 <_dtoa_r+0x7a0>
 80071b6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80071b8:	2a01      	cmp	r2, #1
 80071ba:	dd00      	ble.n	80071be <_dtoa_r+0x77e>
 80071bc:	e0e4      	b.n	8007388 <_dtoa_r+0x948>
 80071be:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80071c0:	2a00      	cmp	r2, #0
 80071c2:	d100      	bne.n	80071c6 <_dtoa_r+0x786>
 80071c4:	e0da      	b.n	800737c <_dtoa_r+0x93c>
 80071c6:	4abb      	ldr	r2, [pc, #748]	@ (80074b4 <_dtoa_r+0xa74>)
 80071c8:	189b      	adds	r3, r3, r2
 80071ca:	9a06      	ldr	r2, [sp, #24]
 80071cc:	2101      	movs	r1, #1
 80071ce:	18d2      	adds	r2, r2, r3
 80071d0:	9206      	str	r2, [sp, #24]
 80071d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80071d4:	9803      	ldr	r0, [sp, #12]
 80071d6:	18d3      	adds	r3, r2, r3
 80071d8:	930d      	str	r3, [sp, #52]	@ 0x34
 80071da:	f000 fc23 	bl	8007a24 <__i2b>
 80071de:	0007      	movs	r7, r0
 80071e0:	2c00      	cmp	r4, #0
 80071e2:	d00e      	beq.n	8007202 <_dtoa_r+0x7c2>
 80071e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	dd0b      	ble.n	8007202 <_dtoa_r+0x7c2>
 80071ea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80071ec:	0023      	movs	r3, r4
 80071ee:	4294      	cmp	r4, r2
 80071f0:	dd00      	ble.n	80071f4 <_dtoa_r+0x7b4>
 80071f2:	0013      	movs	r3, r2
 80071f4:	9a06      	ldr	r2, [sp, #24]
 80071f6:	1ae4      	subs	r4, r4, r3
 80071f8:	1ad2      	subs	r2, r2, r3
 80071fa:	9206      	str	r2, [sp, #24]
 80071fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	930d      	str	r3, [sp, #52]	@ 0x34
 8007202:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007204:	2b00      	cmp	r3, #0
 8007206:	d021      	beq.n	800724c <_dtoa_r+0x80c>
 8007208:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800720a:	2b00      	cmp	r3, #0
 800720c:	d100      	bne.n	8007210 <_dtoa_r+0x7d0>
 800720e:	e0d3      	b.n	80073b8 <_dtoa_r+0x978>
 8007210:	9e05      	ldr	r6, [sp, #20]
 8007212:	2d00      	cmp	r5, #0
 8007214:	d014      	beq.n	8007240 <_dtoa_r+0x800>
 8007216:	0039      	movs	r1, r7
 8007218:	002a      	movs	r2, r5
 800721a:	9803      	ldr	r0, [sp, #12]
 800721c:	f000 fcc4 	bl	8007ba8 <__pow5mult>
 8007220:	9a05      	ldr	r2, [sp, #20]
 8007222:	0001      	movs	r1, r0
 8007224:	0007      	movs	r7, r0
 8007226:	9803      	ldr	r0, [sp, #12]
 8007228:	f000 fc14 	bl	8007a54 <__multiply>
 800722c:	0006      	movs	r6, r0
 800722e:	9905      	ldr	r1, [sp, #20]
 8007230:	9803      	ldr	r0, [sp, #12]
 8007232:	f000 fb3f 	bl	80078b4 <_Bfree>
 8007236:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007238:	9605      	str	r6, [sp, #20]
 800723a:	1b5b      	subs	r3, r3, r5
 800723c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800723e:	d005      	beq.n	800724c <_dtoa_r+0x80c>
 8007240:	0031      	movs	r1, r6
 8007242:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007244:	9803      	ldr	r0, [sp, #12]
 8007246:	f000 fcaf 	bl	8007ba8 <__pow5mult>
 800724a:	9005      	str	r0, [sp, #20]
 800724c:	2101      	movs	r1, #1
 800724e:	9803      	ldr	r0, [sp, #12]
 8007250:	f000 fbe8 	bl	8007a24 <__i2b>
 8007254:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007256:	0006      	movs	r6, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d100      	bne.n	800725e <_dtoa_r+0x81e>
 800725c:	e1bc      	b.n	80075d8 <_dtoa_r+0xb98>
 800725e:	001a      	movs	r2, r3
 8007260:	0001      	movs	r1, r0
 8007262:	9803      	ldr	r0, [sp, #12]
 8007264:	f000 fca0 	bl	8007ba8 <__pow5mult>
 8007268:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800726a:	0006      	movs	r6, r0
 800726c:	2500      	movs	r5, #0
 800726e:	2b01      	cmp	r3, #1
 8007270:	dc16      	bgt.n	80072a0 <_dtoa_r+0x860>
 8007272:	2500      	movs	r5, #0
 8007274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007276:	42ab      	cmp	r3, r5
 8007278:	d10e      	bne.n	8007298 <_dtoa_r+0x858>
 800727a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800727c:	031b      	lsls	r3, r3, #12
 800727e:	42ab      	cmp	r3, r5
 8007280:	d10a      	bne.n	8007298 <_dtoa_r+0x858>
 8007282:	4b8d      	ldr	r3, [pc, #564]	@ (80074b8 <_dtoa_r+0xa78>)
 8007284:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007286:	4213      	tst	r3, r2
 8007288:	d006      	beq.n	8007298 <_dtoa_r+0x858>
 800728a:	9b06      	ldr	r3, [sp, #24]
 800728c:	3501      	adds	r5, #1
 800728e:	3301      	adds	r3, #1
 8007290:	9306      	str	r3, [sp, #24]
 8007292:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007294:	3301      	adds	r3, #1
 8007296:	930d      	str	r3, [sp, #52]	@ 0x34
 8007298:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800729a:	2001      	movs	r0, #1
 800729c:	2b00      	cmp	r3, #0
 800729e:	d008      	beq.n	80072b2 <_dtoa_r+0x872>
 80072a0:	6933      	ldr	r3, [r6, #16]
 80072a2:	3303      	adds	r3, #3
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	18f3      	adds	r3, r6, r3
 80072a8:	6858      	ldr	r0, [r3, #4]
 80072aa:	f000 fb6b 	bl	8007984 <__hi0bits>
 80072ae:	2320      	movs	r3, #32
 80072b0:	1a18      	subs	r0, r3, r0
 80072b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072b4:	1818      	adds	r0, r3, r0
 80072b6:	0002      	movs	r2, r0
 80072b8:	231f      	movs	r3, #31
 80072ba:	401a      	ands	r2, r3
 80072bc:	4218      	tst	r0, r3
 80072be:	d100      	bne.n	80072c2 <_dtoa_r+0x882>
 80072c0:	e081      	b.n	80073c6 <_dtoa_r+0x986>
 80072c2:	3301      	adds	r3, #1
 80072c4:	1a9b      	subs	r3, r3, r2
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	dd79      	ble.n	80073be <_dtoa_r+0x97e>
 80072ca:	231c      	movs	r3, #28
 80072cc:	1a9b      	subs	r3, r3, r2
 80072ce:	9a06      	ldr	r2, [sp, #24]
 80072d0:	18e4      	adds	r4, r4, r3
 80072d2:	18d2      	adds	r2, r2, r3
 80072d4:	9206      	str	r2, [sp, #24]
 80072d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80072d8:	18d3      	adds	r3, r2, r3
 80072da:	930d      	str	r3, [sp, #52]	@ 0x34
 80072dc:	9b06      	ldr	r3, [sp, #24]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	dd05      	ble.n	80072ee <_dtoa_r+0x8ae>
 80072e2:	001a      	movs	r2, r3
 80072e4:	9905      	ldr	r1, [sp, #20]
 80072e6:	9803      	ldr	r0, [sp, #12]
 80072e8:	f000 fcba 	bl	8007c60 <__lshift>
 80072ec:	9005      	str	r0, [sp, #20]
 80072ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	dd05      	ble.n	8007300 <_dtoa_r+0x8c0>
 80072f4:	0031      	movs	r1, r6
 80072f6:	001a      	movs	r2, r3
 80072f8:	9803      	ldr	r0, [sp, #12]
 80072fa:	f000 fcb1 	bl	8007c60 <__lshift>
 80072fe:	0006      	movs	r6, r0
 8007300:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007302:	2b00      	cmp	r3, #0
 8007304:	d061      	beq.n	80073ca <_dtoa_r+0x98a>
 8007306:	0031      	movs	r1, r6
 8007308:	9805      	ldr	r0, [sp, #20]
 800730a:	f000 fd15 	bl	8007d38 <__mcmp>
 800730e:	2800      	cmp	r0, #0
 8007310:	da5b      	bge.n	80073ca <_dtoa_r+0x98a>
 8007312:	9b04      	ldr	r3, [sp, #16]
 8007314:	220a      	movs	r2, #10
 8007316:	3b01      	subs	r3, #1
 8007318:	930c      	str	r3, [sp, #48]	@ 0x30
 800731a:	9905      	ldr	r1, [sp, #20]
 800731c:	2300      	movs	r3, #0
 800731e:	9803      	ldr	r0, [sp, #12]
 8007320:	f000 faec 	bl	80078fc <__multadd>
 8007324:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007326:	9005      	str	r0, [sp, #20]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d100      	bne.n	800732e <_dtoa_r+0x8ee>
 800732c:	e15b      	b.n	80075e6 <_dtoa_r+0xba6>
 800732e:	2300      	movs	r3, #0
 8007330:	0039      	movs	r1, r7
 8007332:	220a      	movs	r2, #10
 8007334:	9803      	ldr	r0, [sp, #12]
 8007336:	f000 fae1 	bl	80078fc <__multadd>
 800733a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800733c:	0007      	movs	r7, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	dc4d      	bgt.n	80073de <_dtoa_r+0x99e>
 8007342:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007344:	2b02      	cmp	r3, #2
 8007346:	dd46      	ble.n	80073d6 <_dtoa_r+0x996>
 8007348:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800734a:	2b00      	cmp	r3, #0
 800734c:	d000      	beq.n	8007350 <_dtoa_r+0x910>
 800734e:	e5db      	b.n	8006f08 <_dtoa_r+0x4c8>
 8007350:	0031      	movs	r1, r6
 8007352:	2205      	movs	r2, #5
 8007354:	9803      	ldr	r0, [sp, #12]
 8007356:	f000 fad1 	bl	80078fc <__multadd>
 800735a:	0006      	movs	r6, r0
 800735c:	0001      	movs	r1, r0
 800735e:	9805      	ldr	r0, [sp, #20]
 8007360:	f000 fcea 	bl	8007d38 <__mcmp>
 8007364:	2800      	cmp	r0, #0
 8007366:	dc00      	bgt.n	800736a <_dtoa_r+0x92a>
 8007368:	e5ce      	b.n	8006f08 <_dtoa_r+0x4c8>
 800736a:	9b08      	ldr	r3, [sp, #32]
 800736c:	9a08      	ldr	r2, [sp, #32]
 800736e:	1c5c      	adds	r4, r3, #1
 8007370:	2331      	movs	r3, #49	@ 0x31
 8007372:	7013      	strb	r3, [r2, #0]
 8007374:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007376:	3301      	adds	r3, #1
 8007378:	930c      	str	r3, [sp, #48]	@ 0x30
 800737a:	e5c9      	b.n	8006f10 <_dtoa_r+0x4d0>
 800737c:	2336      	movs	r3, #54	@ 0x36
 800737e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007380:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007382:	1a9b      	subs	r3, r3, r2
 8007384:	9c06      	ldr	r4, [sp, #24]
 8007386:	e720      	b.n	80071ca <_dtoa_r+0x78a>
 8007388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800738a:	1e5d      	subs	r5, r3, #1
 800738c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800738e:	42ab      	cmp	r3, r5
 8007390:	db08      	blt.n	80073a4 <_dtoa_r+0x964>
 8007392:	1b5d      	subs	r5, r3, r5
 8007394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007396:	2b00      	cmp	r3, #0
 8007398:	daf4      	bge.n	8007384 <_dtoa_r+0x944>
 800739a:	9b06      	ldr	r3, [sp, #24]
 800739c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800739e:	1a9c      	subs	r4, r3, r2
 80073a0:	2300      	movs	r3, #0
 80073a2:	e712      	b.n	80071ca <_dtoa_r+0x78a>
 80073a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80073a8:	1aeb      	subs	r3, r5, r3
 80073aa:	18d3      	adds	r3, r2, r3
 80073ac:	9314      	str	r3, [sp, #80]	@ 0x50
 80073ae:	950f      	str	r5, [sp, #60]	@ 0x3c
 80073b0:	9c06      	ldr	r4, [sp, #24]
 80073b2:	2500      	movs	r5, #0
 80073b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073b6:	e708      	b.n	80071ca <_dtoa_r+0x78a>
 80073b8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80073ba:	9905      	ldr	r1, [sp, #20]
 80073bc:	e742      	b.n	8007244 <_dtoa_r+0x804>
 80073be:	2b04      	cmp	r3, #4
 80073c0:	d08c      	beq.n	80072dc <_dtoa_r+0x89c>
 80073c2:	331c      	adds	r3, #28
 80073c4:	e783      	b.n	80072ce <_dtoa_r+0x88e>
 80073c6:	0013      	movs	r3, r2
 80073c8:	e7fb      	b.n	80073c2 <_dtoa_r+0x982>
 80073ca:	9b04      	ldr	r3, [sp, #16]
 80073cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80073ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	ddb5      	ble.n	8007342 <_dtoa_r+0x902>
 80073d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d100      	bne.n	80073de <_dtoa_r+0x99e>
 80073dc:	e107      	b.n	80075ee <_dtoa_r+0xbae>
 80073de:	2c00      	cmp	r4, #0
 80073e0:	dd05      	ble.n	80073ee <_dtoa_r+0x9ae>
 80073e2:	0039      	movs	r1, r7
 80073e4:	0022      	movs	r2, r4
 80073e6:	9803      	ldr	r0, [sp, #12]
 80073e8:	f000 fc3a 	bl	8007c60 <__lshift>
 80073ec:	0007      	movs	r7, r0
 80073ee:	9704      	str	r7, [sp, #16]
 80073f0:	2d00      	cmp	r5, #0
 80073f2:	d020      	beq.n	8007436 <_dtoa_r+0x9f6>
 80073f4:	6879      	ldr	r1, [r7, #4]
 80073f6:	9803      	ldr	r0, [sp, #12]
 80073f8:	f000 fa18 	bl	800782c <_Balloc>
 80073fc:	1e04      	subs	r4, r0, #0
 80073fe:	d10c      	bne.n	800741a <_dtoa_r+0x9da>
 8007400:	0022      	movs	r2, r4
 8007402:	4b2e      	ldr	r3, [pc, #184]	@ (80074bc <_dtoa_r+0xa7c>)
 8007404:	482e      	ldr	r0, [pc, #184]	@ (80074c0 <_dtoa_r+0xa80>)
 8007406:	492f      	ldr	r1, [pc, #188]	@ (80074c4 <_dtoa_r+0xa84>)
 8007408:	f7ff fb2f 	bl	8006a6a <_dtoa_r+0x2a>
 800740c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800740e:	0037      	movs	r7, r6
 8007410:	e7ab      	b.n	800736a <_dtoa_r+0x92a>
 8007412:	9b04      	ldr	r3, [sp, #16]
 8007414:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8007416:	930c      	str	r3, [sp, #48]	@ 0x30
 8007418:	e7f9      	b.n	800740e <_dtoa_r+0x9ce>
 800741a:	0039      	movs	r1, r7
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	310c      	adds	r1, #12
 8007420:	3202      	adds	r2, #2
 8007422:	0092      	lsls	r2, r2, #2
 8007424:	300c      	adds	r0, #12
 8007426:	f000 ffd1 	bl	80083cc <memcpy>
 800742a:	2201      	movs	r2, #1
 800742c:	0021      	movs	r1, r4
 800742e:	9803      	ldr	r0, [sp, #12]
 8007430:	f000 fc16 	bl	8007c60 <__lshift>
 8007434:	9004      	str	r0, [sp, #16]
 8007436:	9b08      	ldr	r3, [sp, #32]
 8007438:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800743a:	9306      	str	r3, [sp, #24]
 800743c:	3b01      	subs	r3, #1
 800743e:	189b      	adds	r3, r3, r2
 8007440:	2201      	movs	r2, #1
 8007442:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007446:	4013      	ands	r3, r2
 8007448:	930e      	str	r3, [sp, #56]	@ 0x38
 800744a:	0031      	movs	r1, r6
 800744c:	9805      	ldr	r0, [sp, #20]
 800744e:	f7ff fa71 	bl	8006934 <quorem>
 8007452:	0039      	movs	r1, r7
 8007454:	0005      	movs	r5, r0
 8007456:	900a      	str	r0, [sp, #40]	@ 0x28
 8007458:	9805      	ldr	r0, [sp, #20]
 800745a:	f000 fc6d 	bl	8007d38 <__mcmp>
 800745e:	9a04      	ldr	r2, [sp, #16]
 8007460:	900d      	str	r0, [sp, #52]	@ 0x34
 8007462:	0031      	movs	r1, r6
 8007464:	9803      	ldr	r0, [sp, #12]
 8007466:	f000 fc83 	bl	8007d70 <__mdiff>
 800746a:	2201      	movs	r2, #1
 800746c:	68c3      	ldr	r3, [r0, #12]
 800746e:	0004      	movs	r4, r0
 8007470:	3530      	adds	r5, #48	@ 0x30
 8007472:	9209      	str	r2, [sp, #36]	@ 0x24
 8007474:	2b00      	cmp	r3, #0
 8007476:	d104      	bne.n	8007482 <_dtoa_r+0xa42>
 8007478:	0001      	movs	r1, r0
 800747a:	9805      	ldr	r0, [sp, #20]
 800747c:	f000 fc5c 	bl	8007d38 <__mcmp>
 8007480:	9009      	str	r0, [sp, #36]	@ 0x24
 8007482:	0021      	movs	r1, r4
 8007484:	9803      	ldr	r0, [sp, #12]
 8007486:	f000 fa15 	bl	80078b4 <_Bfree>
 800748a:	9b06      	ldr	r3, [sp, #24]
 800748c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800748e:	1c5c      	adds	r4, r3, #1
 8007490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007492:	4313      	orrs	r3, r2
 8007494:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007496:	4313      	orrs	r3, r2
 8007498:	d116      	bne.n	80074c8 <_dtoa_r+0xa88>
 800749a:	2d39      	cmp	r5, #57	@ 0x39
 800749c:	d02f      	beq.n	80074fe <_dtoa_r+0xabe>
 800749e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	dd01      	ble.n	80074a8 <_dtoa_r+0xa68>
 80074a4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80074a6:	3531      	adds	r5, #49	@ 0x31
 80074a8:	9b06      	ldr	r3, [sp, #24]
 80074aa:	701d      	strb	r5, [r3, #0]
 80074ac:	e532      	b.n	8006f14 <_dtoa_r+0x4d4>
 80074ae:	46c0      	nop			@ (mov r8, r8)
 80074b0:	40240000 	.word	0x40240000
 80074b4:	00000433 	.word	0x00000433
 80074b8:	7ff00000 	.word	0x7ff00000
 80074bc:	08009e58 	.word	0x08009e58
 80074c0:	08009e00 	.word	0x08009e00
 80074c4:	000002ef 	.word	0x000002ef
 80074c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	db04      	blt.n	80074d8 <_dtoa_r+0xa98>
 80074ce:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80074d0:	4313      	orrs	r3, r2
 80074d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074d4:	4313      	orrs	r3, r2
 80074d6:	d11e      	bne.n	8007516 <_dtoa_r+0xad6>
 80074d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074da:	2b00      	cmp	r3, #0
 80074dc:	dde4      	ble.n	80074a8 <_dtoa_r+0xa68>
 80074de:	9905      	ldr	r1, [sp, #20]
 80074e0:	2201      	movs	r2, #1
 80074e2:	9803      	ldr	r0, [sp, #12]
 80074e4:	f000 fbbc 	bl	8007c60 <__lshift>
 80074e8:	0031      	movs	r1, r6
 80074ea:	9005      	str	r0, [sp, #20]
 80074ec:	f000 fc24 	bl	8007d38 <__mcmp>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	dc02      	bgt.n	80074fa <_dtoa_r+0xaba>
 80074f4:	d1d8      	bne.n	80074a8 <_dtoa_r+0xa68>
 80074f6:	07eb      	lsls	r3, r5, #31
 80074f8:	d5d6      	bpl.n	80074a8 <_dtoa_r+0xa68>
 80074fa:	2d39      	cmp	r5, #57	@ 0x39
 80074fc:	d1d2      	bne.n	80074a4 <_dtoa_r+0xa64>
 80074fe:	2339      	movs	r3, #57	@ 0x39
 8007500:	9a06      	ldr	r2, [sp, #24]
 8007502:	7013      	strb	r3, [r2, #0]
 8007504:	0023      	movs	r3, r4
 8007506:	001c      	movs	r4, r3
 8007508:	3b01      	subs	r3, #1
 800750a:	781a      	ldrb	r2, [r3, #0]
 800750c:	2a39      	cmp	r2, #57	@ 0x39
 800750e:	d050      	beq.n	80075b2 <_dtoa_r+0xb72>
 8007510:	3201      	adds	r2, #1
 8007512:	701a      	strb	r2, [r3, #0]
 8007514:	e4fe      	b.n	8006f14 <_dtoa_r+0x4d4>
 8007516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007518:	2b00      	cmp	r3, #0
 800751a:	dd03      	ble.n	8007524 <_dtoa_r+0xae4>
 800751c:	2d39      	cmp	r5, #57	@ 0x39
 800751e:	d0ee      	beq.n	80074fe <_dtoa_r+0xabe>
 8007520:	3501      	adds	r5, #1
 8007522:	e7c1      	b.n	80074a8 <_dtoa_r+0xa68>
 8007524:	9b06      	ldr	r3, [sp, #24]
 8007526:	9a06      	ldr	r2, [sp, #24]
 8007528:	701d      	strb	r5, [r3, #0]
 800752a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800752c:	4293      	cmp	r3, r2
 800752e:	d02b      	beq.n	8007588 <_dtoa_r+0xb48>
 8007530:	2300      	movs	r3, #0
 8007532:	220a      	movs	r2, #10
 8007534:	9905      	ldr	r1, [sp, #20]
 8007536:	9803      	ldr	r0, [sp, #12]
 8007538:	f000 f9e0 	bl	80078fc <__multadd>
 800753c:	9b04      	ldr	r3, [sp, #16]
 800753e:	9005      	str	r0, [sp, #20]
 8007540:	429f      	cmp	r7, r3
 8007542:	d109      	bne.n	8007558 <_dtoa_r+0xb18>
 8007544:	0039      	movs	r1, r7
 8007546:	2300      	movs	r3, #0
 8007548:	220a      	movs	r2, #10
 800754a:	9803      	ldr	r0, [sp, #12]
 800754c:	f000 f9d6 	bl	80078fc <__multadd>
 8007550:	0007      	movs	r7, r0
 8007552:	9004      	str	r0, [sp, #16]
 8007554:	9406      	str	r4, [sp, #24]
 8007556:	e778      	b.n	800744a <_dtoa_r+0xa0a>
 8007558:	0039      	movs	r1, r7
 800755a:	2300      	movs	r3, #0
 800755c:	220a      	movs	r2, #10
 800755e:	9803      	ldr	r0, [sp, #12]
 8007560:	f000 f9cc 	bl	80078fc <__multadd>
 8007564:	2300      	movs	r3, #0
 8007566:	0007      	movs	r7, r0
 8007568:	220a      	movs	r2, #10
 800756a:	9904      	ldr	r1, [sp, #16]
 800756c:	9803      	ldr	r0, [sp, #12]
 800756e:	f000 f9c5 	bl	80078fc <__multadd>
 8007572:	9004      	str	r0, [sp, #16]
 8007574:	e7ee      	b.n	8007554 <_dtoa_r+0xb14>
 8007576:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007578:	2401      	movs	r4, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	dd00      	ble.n	8007580 <_dtoa_r+0xb40>
 800757e:	001c      	movs	r4, r3
 8007580:	9704      	str	r7, [sp, #16]
 8007582:	2700      	movs	r7, #0
 8007584:	9b08      	ldr	r3, [sp, #32]
 8007586:	191c      	adds	r4, r3, r4
 8007588:	9905      	ldr	r1, [sp, #20]
 800758a:	2201      	movs	r2, #1
 800758c:	9803      	ldr	r0, [sp, #12]
 800758e:	f000 fb67 	bl	8007c60 <__lshift>
 8007592:	0031      	movs	r1, r6
 8007594:	9005      	str	r0, [sp, #20]
 8007596:	f000 fbcf 	bl	8007d38 <__mcmp>
 800759a:	2800      	cmp	r0, #0
 800759c:	dcb2      	bgt.n	8007504 <_dtoa_r+0xac4>
 800759e:	d101      	bne.n	80075a4 <_dtoa_r+0xb64>
 80075a0:	07ed      	lsls	r5, r5, #31
 80075a2:	d4af      	bmi.n	8007504 <_dtoa_r+0xac4>
 80075a4:	0023      	movs	r3, r4
 80075a6:	001c      	movs	r4, r3
 80075a8:	3b01      	subs	r3, #1
 80075aa:	781a      	ldrb	r2, [r3, #0]
 80075ac:	2a30      	cmp	r2, #48	@ 0x30
 80075ae:	d0fa      	beq.n	80075a6 <_dtoa_r+0xb66>
 80075b0:	e4b0      	b.n	8006f14 <_dtoa_r+0x4d4>
 80075b2:	9a08      	ldr	r2, [sp, #32]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d1a6      	bne.n	8007506 <_dtoa_r+0xac6>
 80075b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075ba:	3301      	adds	r3, #1
 80075bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80075be:	2331      	movs	r3, #49	@ 0x31
 80075c0:	7013      	strb	r3, [r2, #0]
 80075c2:	e4a7      	b.n	8006f14 <_dtoa_r+0x4d4>
 80075c4:	4b14      	ldr	r3, [pc, #80]	@ (8007618 <_dtoa_r+0xbd8>)
 80075c6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80075c8:	9308      	str	r3, [sp, #32]
 80075ca:	4b14      	ldr	r3, [pc, #80]	@ (800761c <_dtoa_r+0xbdc>)
 80075cc:	2a00      	cmp	r2, #0
 80075ce:	d001      	beq.n	80075d4 <_dtoa_r+0xb94>
 80075d0:	f7ff fa7e 	bl	8006ad0 <_dtoa_r+0x90>
 80075d4:	f7ff fa7e 	bl	8006ad4 <_dtoa_r+0x94>
 80075d8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80075da:	2b01      	cmp	r3, #1
 80075dc:	dc00      	bgt.n	80075e0 <_dtoa_r+0xba0>
 80075de:	e648      	b.n	8007272 <_dtoa_r+0x832>
 80075e0:	2001      	movs	r0, #1
 80075e2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80075e4:	e665      	b.n	80072b2 <_dtoa_r+0x872>
 80075e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	dc00      	bgt.n	80075ee <_dtoa_r+0xbae>
 80075ec:	e6a9      	b.n	8007342 <_dtoa_r+0x902>
 80075ee:	2400      	movs	r4, #0
 80075f0:	0031      	movs	r1, r6
 80075f2:	9805      	ldr	r0, [sp, #20]
 80075f4:	f7ff f99e 	bl	8006934 <quorem>
 80075f8:	9b08      	ldr	r3, [sp, #32]
 80075fa:	3030      	adds	r0, #48	@ 0x30
 80075fc:	5518      	strb	r0, [r3, r4]
 80075fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007600:	3401      	adds	r4, #1
 8007602:	0005      	movs	r5, r0
 8007604:	42a3      	cmp	r3, r4
 8007606:	ddb6      	ble.n	8007576 <_dtoa_r+0xb36>
 8007608:	2300      	movs	r3, #0
 800760a:	220a      	movs	r2, #10
 800760c:	9905      	ldr	r1, [sp, #20]
 800760e:	9803      	ldr	r0, [sp, #12]
 8007610:	f000 f974 	bl	80078fc <__multadd>
 8007614:	9005      	str	r0, [sp, #20]
 8007616:	e7eb      	b.n	80075f0 <_dtoa_r+0xbb0>
 8007618:	08009ddc 	.word	0x08009ddc
 800761c:	08009de4 	.word	0x08009de4

08007620 <_free_r>:
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	0005      	movs	r5, r0
 8007624:	1e0c      	subs	r4, r1, #0
 8007626:	d010      	beq.n	800764a <_free_r+0x2a>
 8007628:	3c04      	subs	r4, #4
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	da00      	bge.n	8007632 <_free_r+0x12>
 8007630:	18e4      	adds	r4, r4, r3
 8007632:	0028      	movs	r0, r5
 8007634:	f000 f8ea 	bl	800780c <__malloc_lock>
 8007638:	4a1d      	ldr	r2, [pc, #116]	@ (80076b0 <_free_r+0x90>)
 800763a:	6813      	ldr	r3, [r2, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d105      	bne.n	800764c <_free_r+0x2c>
 8007640:	6063      	str	r3, [r4, #4]
 8007642:	6014      	str	r4, [r2, #0]
 8007644:	0028      	movs	r0, r5
 8007646:	f000 f8e9 	bl	800781c <__malloc_unlock>
 800764a:	bd70      	pop	{r4, r5, r6, pc}
 800764c:	42a3      	cmp	r3, r4
 800764e:	d908      	bls.n	8007662 <_free_r+0x42>
 8007650:	6820      	ldr	r0, [r4, #0]
 8007652:	1821      	adds	r1, r4, r0
 8007654:	428b      	cmp	r3, r1
 8007656:	d1f3      	bne.n	8007640 <_free_r+0x20>
 8007658:	6819      	ldr	r1, [r3, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	1809      	adds	r1, r1, r0
 800765e:	6021      	str	r1, [r4, #0]
 8007660:	e7ee      	b.n	8007640 <_free_r+0x20>
 8007662:	001a      	movs	r2, r3
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <_free_r+0x4e>
 800766a:	42a3      	cmp	r3, r4
 800766c:	d9f9      	bls.n	8007662 <_free_r+0x42>
 800766e:	6811      	ldr	r1, [r2, #0]
 8007670:	1850      	adds	r0, r2, r1
 8007672:	42a0      	cmp	r0, r4
 8007674:	d10b      	bne.n	800768e <_free_r+0x6e>
 8007676:	6820      	ldr	r0, [r4, #0]
 8007678:	1809      	adds	r1, r1, r0
 800767a:	1850      	adds	r0, r2, r1
 800767c:	6011      	str	r1, [r2, #0]
 800767e:	4283      	cmp	r3, r0
 8007680:	d1e0      	bne.n	8007644 <_free_r+0x24>
 8007682:	6818      	ldr	r0, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	1841      	adds	r1, r0, r1
 8007688:	6011      	str	r1, [r2, #0]
 800768a:	6053      	str	r3, [r2, #4]
 800768c:	e7da      	b.n	8007644 <_free_r+0x24>
 800768e:	42a0      	cmp	r0, r4
 8007690:	d902      	bls.n	8007698 <_free_r+0x78>
 8007692:	230c      	movs	r3, #12
 8007694:	602b      	str	r3, [r5, #0]
 8007696:	e7d5      	b.n	8007644 <_free_r+0x24>
 8007698:	6820      	ldr	r0, [r4, #0]
 800769a:	1821      	adds	r1, r4, r0
 800769c:	428b      	cmp	r3, r1
 800769e:	d103      	bne.n	80076a8 <_free_r+0x88>
 80076a0:	6819      	ldr	r1, [r3, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	1809      	adds	r1, r1, r0
 80076a6:	6021      	str	r1, [r4, #0]
 80076a8:	6063      	str	r3, [r4, #4]
 80076aa:	6054      	str	r4, [r2, #4]
 80076ac:	e7ca      	b.n	8007644 <_free_r+0x24>
 80076ae:	46c0      	nop			@ (mov r8, r8)
 80076b0:	200004f0 	.word	0x200004f0

080076b4 <malloc>:
 80076b4:	b510      	push	{r4, lr}
 80076b6:	4b03      	ldr	r3, [pc, #12]	@ (80076c4 <malloc+0x10>)
 80076b8:	0001      	movs	r1, r0
 80076ba:	6818      	ldr	r0, [r3, #0]
 80076bc:	f000 f826 	bl	800770c <_malloc_r>
 80076c0:	bd10      	pop	{r4, pc}
 80076c2:	46c0      	nop			@ (mov r8, r8)
 80076c4:	2000001c 	.word	0x2000001c

080076c8 <sbrk_aligned>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	4e0f      	ldr	r6, [pc, #60]	@ (8007708 <sbrk_aligned+0x40>)
 80076cc:	000d      	movs	r5, r1
 80076ce:	6831      	ldr	r1, [r6, #0]
 80076d0:	0004      	movs	r4, r0
 80076d2:	2900      	cmp	r1, #0
 80076d4:	d102      	bne.n	80076dc <sbrk_aligned+0x14>
 80076d6:	f000 fe67 	bl	80083a8 <_sbrk_r>
 80076da:	6030      	str	r0, [r6, #0]
 80076dc:	0029      	movs	r1, r5
 80076de:	0020      	movs	r0, r4
 80076e0:	f000 fe62 	bl	80083a8 <_sbrk_r>
 80076e4:	1c43      	adds	r3, r0, #1
 80076e6:	d103      	bne.n	80076f0 <sbrk_aligned+0x28>
 80076e8:	2501      	movs	r5, #1
 80076ea:	426d      	negs	r5, r5
 80076ec:	0028      	movs	r0, r5
 80076ee:	bd70      	pop	{r4, r5, r6, pc}
 80076f0:	2303      	movs	r3, #3
 80076f2:	1cc5      	adds	r5, r0, #3
 80076f4:	439d      	bics	r5, r3
 80076f6:	42a8      	cmp	r0, r5
 80076f8:	d0f8      	beq.n	80076ec <sbrk_aligned+0x24>
 80076fa:	1a29      	subs	r1, r5, r0
 80076fc:	0020      	movs	r0, r4
 80076fe:	f000 fe53 	bl	80083a8 <_sbrk_r>
 8007702:	3001      	adds	r0, #1
 8007704:	d1f2      	bne.n	80076ec <sbrk_aligned+0x24>
 8007706:	e7ef      	b.n	80076e8 <sbrk_aligned+0x20>
 8007708:	200004ec 	.word	0x200004ec

0800770c <_malloc_r>:
 800770c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800770e:	2203      	movs	r2, #3
 8007710:	1ccb      	adds	r3, r1, #3
 8007712:	4393      	bics	r3, r2
 8007714:	3308      	adds	r3, #8
 8007716:	0005      	movs	r5, r0
 8007718:	001f      	movs	r7, r3
 800771a:	2b0c      	cmp	r3, #12
 800771c:	d234      	bcs.n	8007788 <_malloc_r+0x7c>
 800771e:	270c      	movs	r7, #12
 8007720:	42b9      	cmp	r1, r7
 8007722:	d833      	bhi.n	800778c <_malloc_r+0x80>
 8007724:	0028      	movs	r0, r5
 8007726:	f000 f871 	bl	800780c <__malloc_lock>
 800772a:	4e37      	ldr	r6, [pc, #220]	@ (8007808 <_malloc_r+0xfc>)
 800772c:	6833      	ldr	r3, [r6, #0]
 800772e:	001c      	movs	r4, r3
 8007730:	2c00      	cmp	r4, #0
 8007732:	d12f      	bne.n	8007794 <_malloc_r+0x88>
 8007734:	0039      	movs	r1, r7
 8007736:	0028      	movs	r0, r5
 8007738:	f7ff ffc6 	bl	80076c8 <sbrk_aligned>
 800773c:	0004      	movs	r4, r0
 800773e:	1c43      	adds	r3, r0, #1
 8007740:	d15f      	bne.n	8007802 <_malloc_r+0xf6>
 8007742:	6834      	ldr	r4, [r6, #0]
 8007744:	9400      	str	r4, [sp, #0]
 8007746:	9b00      	ldr	r3, [sp, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d14a      	bne.n	80077e2 <_malloc_r+0xd6>
 800774c:	2c00      	cmp	r4, #0
 800774e:	d052      	beq.n	80077f6 <_malloc_r+0xea>
 8007750:	6823      	ldr	r3, [r4, #0]
 8007752:	0028      	movs	r0, r5
 8007754:	18e3      	adds	r3, r4, r3
 8007756:	9900      	ldr	r1, [sp, #0]
 8007758:	9301      	str	r3, [sp, #4]
 800775a:	f000 fe25 	bl	80083a8 <_sbrk_r>
 800775e:	9b01      	ldr	r3, [sp, #4]
 8007760:	4283      	cmp	r3, r0
 8007762:	d148      	bne.n	80077f6 <_malloc_r+0xea>
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	0028      	movs	r0, r5
 8007768:	1aff      	subs	r7, r7, r3
 800776a:	0039      	movs	r1, r7
 800776c:	f7ff ffac 	bl	80076c8 <sbrk_aligned>
 8007770:	3001      	adds	r0, #1
 8007772:	d040      	beq.n	80077f6 <_malloc_r+0xea>
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	19db      	adds	r3, r3, r7
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	6833      	ldr	r3, [r6, #0]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	2a00      	cmp	r2, #0
 8007780:	d133      	bne.n	80077ea <_malloc_r+0xde>
 8007782:	9b00      	ldr	r3, [sp, #0]
 8007784:	6033      	str	r3, [r6, #0]
 8007786:	e019      	b.n	80077bc <_malloc_r+0xb0>
 8007788:	2b00      	cmp	r3, #0
 800778a:	dac9      	bge.n	8007720 <_malloc_r+0x14>
 800778c:	230c      	movs	r3, #12
 800778e:	602b      	str	r3, [r5, #0]
 8007790:	2000      	movs	r0, #0
 8007792:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007794:	6821      	ldr	r1, [r4, #0]
 8007796:	1bc9      	subs	r1, r1, r7
 8007798:	d420      	bmi.n	80077dc <_malloc_r+0xd0>
 800779a:	290b      	cmp	r1, #11
 800779c:	d90a      	bls.n	80077b4 <_malloc_r+0xa8>
 800779e:	19e2      	adds	r2, r4, r7
 80077a0:	6027      	str	r7, [r4, #0]
 80077a2:	42a3      	cmp	r3, r4
 80077a4:	d104      	bne.n	80077b0 <_malloc_r+0xa4>
 80077a6:	6032      	str	r2, [r6, #0]
 80077a8:	6863      	ldr	r3, [r4, #4]
 80077aa:	6011      	str	r1, [r2, #0]
 80077ac:	6053      	str	r3, [r2, #4]
 80077ae:	e005      	b.n	80077bc <_malloc_r+0xb0>
 80077b0:	605a      	str	r2, [r3, #4]
 80077b2:	e7f9      	b.n	80077a8 <_malloc_r+0x9c>
 80077b4:	6862      	ldr	r2, [r4, #4]
 80077b6:	42a3      	cmp	r3, r4
 80077b8:	d10e      	bne.n	80077d8 <_malloc_r+0xcc>
 80077ba:	6032      	str	r2, [r6, #0]
 80077bc:	0028      	movs	r0, r5
 80077be:	f000 f82d 	bl	800781c <__malloc_unlock>
 80077c2:	0020      	movs	r0, r4
 80077c4:	2207      	movs	r2, #7
 80077c6:	300b      	adds	r0, #11
 80077c8:	1d23      	adds	r3, r4, #4
 80077ca:	4390      	bics	r0, r2
 80077cc:	1ac2      	subs	r2, r0, r3
 80077ce:	4298      	cmp	r0, r3
 80077d0:	d0df      	beq.n	8007792 <_malloc_r+0x86>
 80077d2:	1a1b      	subs	r3, r3, r0
 80077d4:	50a3      	str	r3, [r4, r2]
 80077d6:	e7dc      	b.n	8007792 <_malloc_r+0x86>
 80077d8:	605a      	str	r2, [r3, #4]
 80077da:	e7ef      	b.n	80077bc <_malloc_r+0xb0>
 80077dc:	0023      	movs	r3, r4
 80077de:	6864      	ldr	r4, [r4, #4]
 80077e0:	e7a6      	b.n	8007730 <_malloc_r+0x24>
 80077e2:	9c00      	ldr	r4, [sp, #0]
 80077e4:	6863      	ldr	r3, [r4, #4]
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	e7ad      	b.n	8007746 <_malloc_r+0x3a>
 80077ea:	001a      	movs	r2, r3
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	42a3      	cmp	r3, r4
 80077f0:	d1fb      	bne.n	80077ea <_malloc_r+0xde>
 80077f2:	2300      	movs	r3, #0
 80077f4:	e7da      	b.n	80077ac <_malloc_r+0xa0>
 80077f6:	230c      	movs	r3, #12
 80077f8:	0028      	movs	r0, r5
 80077fa:	602b      	str	r3, [r5, #0]
 80077fc:	f000 f80e 	bl	800781c <__malloc_unlock>
 8007800:	e7c6      	b.n	8007790 <_malloc_r+0x84>
 8007802:	6007      	str	r7, [r0, #0]
 8007804:	e7da      	b.n	80077bc <_malloc_r+0xb0>
 8007806:	46c0      	nop			@ (mov r8, r8)
 8007808:	200004f0 	.word	0x200004f0

0800780c <__malloc_lock>:
 800780c:	b510      	push	{r4, lr}
 800780e:	4802      	ldr	r0, [pc, #8]	@ (8007818 <__malloc_lock+0xc>)
 8007810:	f7ff f883 	bl	800691a <__retarget_lock_acquire_recursive>
 8007814:	bd10      	pop	{r4, pc}
 8007816:	46c0      	nop			@ (mov r8, r8)
 8007818:	200004e8 	.word	0x200004e8

0800781c <__malloc_unlock>:
 800781c:	b510      	push	{r4, lr}
 800781e:	4802      	ldr	r0, [pc, #8]	@ (8007828 <__malloc_unlock+0xc>)
 8007820:	f7ff f87c 	bl	800691c <__retarget_lock_release_recursive>
 8007824:	bd10      	pop	{r4, pc}
 8007826:	46c0      	nop			@ (mov r8, r8)
 8007828:	200004e8 	.word	0x200004e8

0800782c <_Balloc>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	69c5      	ldr	r5, [r0, #28]
 8007830:	0006      	movs	r6, r0
 8007832:	000c      	movs	r4, r1
 8007834:	2d00      	cmp	r5, #0
 8007836:	d10e      	bne.n	8007856 <_Balloc+0x2a>
 8007838:	2010      	movs	r0, #16
 800783a:	f7ff ff3b 	bl	80076b4 <malloc>
 800783e:	1e02      	subs	r2, r0, #0
 8007840:	61f0      	str	r0, [r6, #28]
 8007842:	d104      	bne.n	800784e <_Balloc+0x22>
 8007844:	216b      	movs	r1, #107	@ 0x6b
 8007846:	4b19      	ldr	r3, [pc, #100]	@ (80078ac <_Balloc+0x80>)
 8007848:	4819      	ldr	r0, [pc, #100]	@ (80078b0 <_Balloc+0x84>)
 800784a:	f000 fdc9 	bl	80083e0 <__assert_func>
 800784e:	6045      	str	r5, [r0, #4]
 8007850:	6085      	str	r5, [r0, #8]
 8007852:	6005      	str	r5, [r0, #0]
 8007854:	60c5      	str	r5, [r0, #12]
 8007856:	69f5      	ldr	r5, [r6, #28]
 8007858:	68eb      	ldr	r3, [r5, #12]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d013      	beq.n	8007886 <_Balloc+0x5a>
 800785e:	69f3      	ldr	r3, [r6, #28]
 8007860:	00a2      	lsls	r2, r4, #2
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	189b      	adds	r3, r3, r2
 8007866:	6818      	ldr	r0, [r3, #0]
 8007868:	2800      	cmp	r0, #0
 800786a:	d118      	bne.n	800789e <_Balloc+0x72>
 800786c:	2101      	movs	r1, #1
 800786e:	000d      	movs	r5, r1
 8007870:	40a5      	lsls	r5, r4
 8007872:	1d6a      	adds	r2, r5, #5
 8007874:	0030      	movs	r0, r6
 8007876:	0092      	lsls	r2, r2, #2
 8007878:	f000 fdd0 	bl	800841c <_calloc_r>
 800787c:	2800      	cmp	r0, #0
 800787e:	d00c      	beq.n	800789a <_Balloc+0x6e>
 8007880:	6044      	str	r4, [r0, #4]
 8007882:	6085      	str	r5, [r0, #8]
 8007884:	e00d      	b.n	80078a2 <_Balloc+0x76>
 8007886:	2221      	movs	r2, #33	@ 0x21
 8007888:	2104      	movs	r1, #4
 800788a:	0030      	movs	r0, r6
 800788c:	f000 fdc6 	bl	800841c <_calloc_r>
 8007890:	69f3      	ldr	r3, [r6, #28]
 8007892:	60e8      	str	r0, [r5, #12]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e1      	bne.n	800785e <_Balloc+0x32>
 800789a:	2000      	movs	r0, #0
 800789c:	bd70      	pop	{r4, r5, r6, pc}
 800789e:	6802      	ldr	r2, [r0, #0]
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	2300      	movs	r3, #0
 80078a4:	6103      	str	r3, [r0, #16]
 80078a6:	60c3      	str	r3, [r0, #12]
 80078a8:	e7f8      	b.n	800789c <_Balloc+0x70>
 80078aa:	46c0      	nop			@ (mov r8, r8)
 80078ac:	08009de9 	.word	0x08009de9
 80078b0:	08009e69 	.word	0x08009e69

080078b4 <_Bfree>:
 80078b4:	b570      	push	{r4, r5, r6, lr}
 80078b6:	69c6      	ldr	r6, [r0, #28]
 80078b8:	0005      	movs	r5, r0
 80078ba:	000c      	movs	r4, r1
 80078bc:	2e00      	cmp	r6, #0
 80078be:	d10e      	bne.n	80078de <_Bfree+0x2a>
 80078c0:	2010      	movs	r0, #16
 80078c2:	f7ff fef7 	bl	80076b4 <malloc>
 80078c6:	1e02      	subs	r2, r0, #0
 80078c8:	61e8      	str	r0, [r5, #28]
 80078ca:	d104      	bne.n	80078d6 <_Bfree+0x22>
 80078cc:	218f      	movs	r1, #143	@ 0x8f
 80078ce:	4b09      	ldr	r3, [pc, #36]	@ (80078f4 <_Bfree+0x40>)
 80078d0:	4809      	ldr	r0, [pc, #36]	@ (80078f8 <_Bfree+0x44>)
 80078d2:	f000 fd85 	bl	80083e0 <__assert_func>
 80078d6:	6046      	str	r6, [r0, #4]
 80078d8:	6086      	str	r6, [r0, #8]
 80078da:	6006      	str	r6, [r0, #0]
 80078dc:	60c6      	str	r6, [r0, #12]
 80078de:	2c00      	cmp	r4, #0
 80078e0:	d007      	beq.n	80078f2 <_Bfree+0x3e>
 80078e2:	69eb      	ldr	r3, [r5, #28]
 80078e4:	6862      	ldr	r2, [r4, #4]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	0092      	lsls	r2, r2, #2
 80078ea:	189b      	adds	r3, r3, r2
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	6022      	str	r2, [r4, #0]
 80078f0:	601c      	str	r4, [r3, #0]
 80078f2:	bd70      	pop	{r4, r5, r6, pc}
 80078f4:	08009de9 	.word	0x08009de9
 80078f8:	08009e69 	.word	0x08009e69

080078fc <__multadd>:
 80078fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078fe:	000f      	movs	r7, r1
 8007900:	9001      	str	r0, [sp, #4]
 8007902:	000c      	movs	r4, r1
 8007904:	001e      	movs	r6, r3
 8007906:	2000      	movs	r0, #0
 8007908:	690d      	ldr	r5, [r1, #16]
 800790a:	3714      	adds	r7, #20
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	3001      	adds	r0, #1
 8007910:	b299      	uxth	r1, r3
 8007912:	4351      	muls	r1, r2
 8007914:	0c1b      	lsrs	r3, r3, #16
 8007916:	4353      	muls	r3, r2
 8007918:	1989      	adds	r1, r1, r6
 800791a:	0c0e      	lsrs	r6, r1, #16
 800791c:	199b      	adds	r3, r3, r6
 800791e:	0c1e      	lsrs	r6, r3, #16
 8007920:	b289      	uxth	r1, r1
 8007922:	041b      	lsls	r3, r3, #16
 8007924:	185b      	adds	r3, r3, r1
 8007926:	c708      	stmia	r7!, {r3}
 8007928:	4285      	cmp	r5, r0
 800792a:	dcef      	bgt.n	800790c <__multadd+0x10>
 800792c:	2e00      	cmp	r6, #0
 800792e:	d022      	beq.n	8007976 <__multadd+0x7a>
 8007930:	68a3      	ldr	r3, [r4, #8]
 8007932:	42ab      	cmp	r3, r5
 8007934:	dc19      	bgt.n	800796a <__multadd+0x6e>
 8007936:	6861      	ldr	r1, [r4, #4]
 8007938:	9801      	ldr	r0, [sp, #4]
 800793a:	3101      	adds	r1, #1
 800793c:	f7ff ff76 	bl	800782c <_Balloc>
 8007940:	1e07      	subs	r7, r0, #0
 8007942:	d105      	bne.n	8007950 <__multadd+0x54>
 8007944:	003a      	movs	r2, r7
 8007946:	21ba      	movs	r1, #186	@ 0xba
 8007948:	4b0c      	ldr	r3, [pc, #48]	@ (800797c <__multadd+0x80>)
 800794a:	480d      	ldr	r0, [pc, #52]	@ (8007980 <__multadd+0x84>)
 800794c:	f000 fd48 	bl	80083e0 <__assert_func>
 8007950:	0021      	movs	r1, r4
 8007952:	6922      	ldr	r2, [r4, #16]
 8007954:	310c      	adds	r1, #12
 8007956:	3202      	adds	r2, #2
 8007958:	0092      	lsls	r2, r2, #2
 800795a:	300c      	adds	r0, #12
 800795c:	f000 fd36 	bl	80083cc <memcpy>
 8007960:	0021      	movs	r1, r4
 8007962:	9801      	ldr	r0, [sp, #4]
 8007964:	f7ff ffa6 	bl	80078b4 <_Bfree>
 8007968:	003c      	movs	r4, r7
 800796a:	1d2b      	adds	r3, r5, #4
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	18e3      	adds	r3, r4, r3
 8007970:	3501      	adds	r5, #1
 8007972:	605e      	str	r6, [r3, #4]
 8007974:	6125      	str	r5, [r4, #16]
 8007976:	0020      	movs	r0, r4
 8007978:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800797a:	46c0      	nop			@ (mov r8, r8)
 800797c:	08009e58 	.word	0x08009e58
 8007980:	08009e69 	.word	0x08009e69

08007984 <__hi0bits>:
 8007984:	2280      	movs	r2, #128	@ 0x80
 8007986:	0003      	movs	r3, r0
 8007988:	0252      	lsls	r2, r2, #9
 800798a:	2000      	movs	r0, #0
 800798c:	4293      	cmp	r3, r2
 800798e:	d201      	bcs.n	8007994 <__hi0bits+0x10>
 8007990:	041b      	lsls	r3, r3, #16
 8007992:	3010      	adds	r0, #16
 8007994:	2280      	movs	r2, #128	@ 0x80
 8007996:	0452      	lsls	r2, r2, #17
 8007998:	4293      	cmp	r3, r2
 800799a:	d201      	bcs.n	80079a0 <__hi0bits+0x1c>
 800799c:	3008      	adds	r0, #8
 800799e:	021b      	lsls	r3, r3, #8
 80079a0:	2280      	movs	r2, #128	@ 0x80
 80079a2:	0552      	lsls	r2, r2, #21
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d201      	bcs.n	80079ac <__hi0bits+0x28>
 80079a8:	3004      	adds	r0, #4
 80079aa:	011b      	lsls	r3, r3, #4
 80079ac:	2280      	movs	r2, #128	@ 0x80
 80079ae:	05d2      	lsls	r2, r2, #23
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d201      	bcs.n	80079b8 <__hi0bits+0x34>
 80079b4:	3002      	adds	r0, #2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	db03      	blt.n	80079c4 <__hi0bits+0x40>
 80079bc:	3001      	adds	r0, #1
 80079be:	4213      	tst	r3, r2
 80079c0:	d100      	bne.n	80079c4 <__hi0bits+0x40>
 80079c2:	2020      	movs	r0, #32
 80079c4:	4770      	bx	lr

080079c6 <__lo0bits>:
 80079c6:	6803      	ldr	r3, [r0, #0]
 80079c8:	0001      	movs	r1, r0
 80079ca:	2207      	movs	r2, #7
 80079cc:	0018      	movs	r0, r3
 80079ce:	4010      	ands	r0, r2
 80079d0:	4213      	tst	r3, r2
 80079d2:	d00d      	beq.n	80079f0 <__lo0bits+0x2a>
 80079d4:	3a06      	subs	r2, #6
 80079d6:	2000      	movs	r0, #0
 80079d8:	4213      	tst	r3, r2
 80079da:	d105      	bne.n	80079e8 <__lo0bits+0x22>
 80079dc:	3002      	adds	r0, #2
 80079de:	4203      	tst	r3, r0
 80079e0:	d003      	beq.n	80079ea <__lo0bits+0x24>
 80079e2:	40d3      	lsrs	r3, r2
 80079e4:	0010      	movs	r0, r2
 80079e6:	600b      	str	r3, [r1, #0]
 80079e8:	4770      	bx	lr
 80079ea:	089b      	lsrs	r3, r3, #2
 80079ec:	600b      	str	r3, [r1, #0]
 80079ee:	e7fb      	b.n	80079e8 <__lo0bits+0x22>
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	2a00      	cmp	r2, #0
 80079f4:	d101      	bne.n	80079fa <__lo0bits+0x34>
 80079f6:	2010      	movs	r0, #16
 80079f8:	0c1b      	lsrs	r3, r3, #16
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	2a00      	cmp	r2, #0
 80079fe:	d101      	bne.n	8007a04 <__lo0bits+0x3e>
 8007a00:	3008      	adds	r0, #8
 8007a02:	0a1b      	lsrs	r3, r3, #8
 8007a04:	071a      	lsls	r2, r3, #28
 8007a06:	d101      	bne.n	8007a0c <__lo0bits+0x46>
 8007a08:	3004      	adds	r0, #4
 8007a0a:	091b      	lsrs	r3, r3, #4
 8007a0c:	079a      	lsls	r2, r3, #30
 8007a0e:	d101      	bne.n	8007a14 <__lo0bits+0x4e>
 8007a10:	3002      	adds	r0, #2
 8007a12:	089b      	lsrs	r3, r3, #2
 8007a14:	07da      	lsls	r2, r3, #31
 8007a16:	d4e9      	bmi.n	80079ec <__lo0bits+0x26>
 8007a18:	3001      	adds	r0, #1
 8007a1a:	085b      	lsrs	r3, r3, #1
 8007a1c:	d1e6      	bne.n	80079ec <__lo0bits+0x26>
 8007a1e:	2020      	movs	r0, #32
 8007a20:	e7e2      	b.n	80079e8 <__lo0bits+0x22>
	...

08007a24 <__i2b>:
 8007a24:	b510      	push	{r4, lr}
 8007a26:	000c      	movs	r4, r1
 8007a28:	2101      	movs	r1, #1
 8007a2a:	f7ff feff 	bl	800782c <_Balloc>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d107      	bne.n	8007a42 <__i2b+0x1e>
 8007a32:	2146      	movs	r1, #70	@ 0x46
 8007a34:	4c05      	ldr	r4, [pc, #20]	@ (8007a4c <__i2b+0x28>)
 8007a36:	0002      	movs	r2, r0
 8007a38:	4b05      	ldr	r3, [pc, #20]	@ (8007a50 <__i2b+0x2c>)
 8007a3a:	0020      	movs	r0, r4
 8007a3c:	31ff      	adds	r1, #255	@ 0xff
 8007a3e:	f000 fccf 	bl	80083e0 <__assert_func>
 8007a42:	2301      	movs	r3, #1
 8007a44:	6144      	str	r4, [r0, #20]
 8007a46:	6103      	str	r3, [r0, #16]
 8007a48:	bd10      	pop	{r4, pc}
 8007a4a:	46c0      	nop			@ (mov r8, r8)
 8007a4c:	08009e69 	.word	0x08009e69
 8007a50:	08009e58 	.word	0x08009e58

08007a54 <__multiply>:
 8007a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a56:	0014      	movs	r4, r2
 8007a58:	690a      	ldr	r2, [r1, #16]
 8007a5a:	6923      	ldr	r3, [r4, #16]
 8007a5c:	000d      	movs	r5, r1
 8007a5e:	b089      	sub	sp, #36	@ 0x24
 8007a60:	429a      	cmp	r2, r3
 8007a62:	db02      	blt.n	8007a6a <__multiply+0x16>
 8007a64:	0023      	movs	r3, r4
 8007a66:	000c      	movs	r4, r1
 8007a68:	001d      	movs	r5, r3
 8007a6a:	6927      	ldr	r7, [r4, #16]
 8007a6c:	692e      	ldr	r6, [r5, #16]
 8007a6e:	6861      	ldr	r1, [r4, #4]
 8007a70:	19bb      	adds	r3, r7, r6
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	68a3      	ldr	r3, [r4, #8]
 8007a76:	19ba      	adds	r2, r7, r6
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	da00      	bge.n	8007a7e <__multiply+0x2a>
 8007a7c:	3101      	adds	r1, #1
 8007a7e:	f7ff fed5 	bl	800782c <_Balloc>
 8007a82:	4684      	mov	ip, r0
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d106      	bne.n	8007a96 <__multiply+0x42>
 8007a88:	21b1      	movs	r1, #177	@ 0xb1
 8007a8a:	4662      	mov	r2, ip
 8007a8c:	4b44      	ldr	r3, [pc, #272]	@ (8007ba0 <__multiply+0x14c>)
 8007a8e:	4845      	ldr	r0, [pc, #276]	@ (8007ba4 <__multiply+0x150>)
 8007a90:	0049      	lsls	r1, r1, #1
 8007a92:	f000 fca5 	bl	80083e0 <__assert_func>
 8007a96:	0002      	movs	r2, r0
 8007a98:	19bb      	adds	r3, r7, r6
 8007a9a:	3214      	adds	r2, #20
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	18d3      	adds	r3, r2, r3
 8007aa0:	9301      	str	r3, [sp, #4]
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	0013      	movs	r3, r2
 8007aa6:	9801      	ldr	r0, [sp, #4]
 8007aa8:	4283      	cmp	r3, r0
 8007aaa:	d328      	bcc.n	8007afe <__multiply+0xaa>
 8007aac:	0023      	movs	r3, r4
 8007aae:	00bf      	lsls	r7, r7, #2
 8007ab0:	3314      	adds	r3, #20
 8007ab2:	9304      	str	r3, [sp, #16]
 8007ab4:	3514      	adds	r5, #20
 8007ab6:	19db      	adds	r3, r3, r7
 8007ab8:	00b6      	lsls	r6, r6, #2
 8007aba:	9302      	str	r3, [sp, #8]
 8007abc:	19ab      	adds	r3, r5, r6
 8007abe:	9307      	str	r3, [sp, #28]
 8007ac0:	2304      	movs	r3, #4
 8007ac2:	9305      	str	r3, [sp, #20]
 8007ac4:	0023      	movs	r3, r4
 8007ac6:	9902      	ldr	r1, [sp, #8]
 8007ac8:	3315      	adds	r3, #21
 8007aca:	4299      	cmp	r1, r3
 8007acc:	d305      	bcc.n	8007ada <__multiply+0x86>
 8007ace:	1b0c      	subs	r4, r1, r4
 8007ad0:	3c15      	subs	r4, #21
 8007ad2:	08a4      	lsrs	r4, r4, #2
 8007ad4:	3401      	adds	r4, #1
 8007ad6:	00a3      	lsls	r3, r4, #2
 8007ad8:	9305      	str	r3, [sp, #20]
 8007ada:	9b07      	ldr	r3, [sp, #28]
 8007adc:	429d      	cmp	r5, r3
 8007ade:	d310      	bcc.n	8007b02 <__multiply+0xae>
 8007ae0:	9b00      	ldr	r3, [sp, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	dd05      	ble.n	8007af2 <__multiply+0x9e>
 8007ae6:	9b01      	ldr	r3, [sp, #4]
 8007ae8:	3b04      	subs	r3, #4
 8007aea:	9301      	str	r3, [sp, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d052      	beq.n	8007b98 <__multiply+0x144>
 8007af2:	4663      	mov	r3, ip
 8007af4:	4660      	mov	r0, ip
 8007af6:	9a00      	ldr	r2, [sp, #0]
 8007af8:	611a      	str	r2, [r3, #16]
 8007afa:	b009      	add	sp, #36	@ 0x24
 8007afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007afe:	c302      	stmia	r3!, {r1}
 8007b00:	e7d1      	b.n	8007aa6 <__multiply+0x52>
 8007b02:	682c      	ldr	r4, [r5, #0]
 8007b04:	b2a4      	uxth	r4, r4
 8007b06:	2c00      	cmp	r4, #0
 8007b08:	d01f      	beq.n	8007b4a <__multiply+0xf6>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	0017      	movs	r7, r2
 8007b0e:	9e04      	ldr	r6, [sp, #16]
 8007b10:	9303      	str	r3, [sp, #12]
 8007b12:	ce08      	ldmia	r6!, {r3}
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	9306      	str	r3, [sp, #24]
 8007b18:	466b      	mov	r3, sp
 8007b1a:	8b1b      	ldrh	r3, [r3, #24]
 8007b1c:	b288      	uxth	r0, r1
 8007b1e:	4363      	muls	r3, r4
 8007b20:	181b      	adds	r3, r3, r0
 8007b22:	9803      	ldr	r0, [sp, #12]
 8007b24:	0c09      	lsrs	r1, r1, #16
 8007b26:	181b      	adds	r3, r3, r0
 8007b28:	9806      	ldr	r0, [sp, #24]
 8007b2a:	0c00      	lsrs	r0, r0, #16
 8007b2c:	4360      	muls	r0, r4
 8007b2e:	1840      	adds	r0, r0, r1
 8007b30:	0c19      	lsrs	r1, r3, #16
 8007b32:	1841      	adds	r1, r0, r1
 8007b34:	0c08      	lsrs	r0, r1, #16
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	0409      	lsls	r1, r1, #16
 8007b3a:	4319      	orrs	r1, r3
 8007b3c:	9b02      	ldr	r3, [sp, #8]
 8007b3e:	9003      	str	r0, [sp, #12]
 8007b40:	c702      	stmia	r7!, {r1}
 8007b42:	42b3      	cmp	r3, r6
 8007b44:	d8e5      	bhi.n	8007b12 <__multiply+0xbe>
 8007b46:	9b05      	ldr	r3, [sp, #20]
 8007b48:	50d0      	str	r0, [r2, r3]
 8007b4a:	682c      	ldr	r4, [r5, #0]
 8007b4c:	0c24      	lsrs	r4, r4, #16
 8007b4e:	d020      	beq.n	8007b92 <__multiply+0x13e>
 8007b50:	2100      	movs	r1, #0
 8007b52:	0010      	movs	r0, r2
 8007b54:	6813      	ldr	r3, [r2, #0]
 8007b56:	9e04      	ldr	r6, [sp, #16]
 8007b58:	9103      	str	r1, [sp, #12]
 8007b5a:	6831      	ldr	r1, [r6, #0]
 8007b5c:	6807      	ldr	r7, [r0, #0]
 8007b5e:	b289      	uxth	r1, r1
 8007b60:	4361      	muls	r1, r4
 8007b62:	0c3f      	lsrs	r7, r7, #16
 8007b64:	19c9      	adds	r1, r1, r7
 8007b66:	9f03      	ldr	r7, [sp, #12]
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	19c9      	adds	r1, r1, r7
 8007b6c:	040f      	lsls	r7, r1, #16
 8007b6e:	431f      	orrs	r7, r3
 8007b70:	6007      	str	r7, [r0, #0]
 8007b72:	ce80      	ldmia	r6!, {r7}
 8007b74:	6843      	ldr	r3, [r0, #4]
 8007b76:	0c3f      	lsrs	r7, r7, #16
 8007b78:	4367      	muls	r7, r4
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	0c09      	lsrs	r1, r1, #16
 8007b7e:	18fb      	adds	r3, r7, r3
 8007b80:	185b      	adds	r3, r3, r1
 8007b82:	0c19      	lsrs	r1, r3, #16
 8007b84:	9103      	str	r1, [sp, #12]
 8007b86:	9902      	ldr	r1, [sp, #8]
 8007b88:	3004      	adds	r0, #4
 8007b8a:	42b1      	cmp	r1, r6
 8007b8c:	d8e5      	bhi.n	8007b5a <__multiply+0x106>
 8007b8e:	9905      	ldr	r1, [sp, #20]
 8007b90:	5053      	str	r3, [r2, r1]
 8007b92:	3504      	adds	r5, #4
 8007b94:	3204      	adds	r2, #4
 8007b96:	e7a0      	b.n	8007ada <__multiply+0x86>
 8007b98:	9b00      	ldr	r3, [sp, #0]
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	e79f      	b.n	8007ae0 <__multiply+0x8c>
 8007ba0:	08009e58 	.word	0x08009e58
 8007ba4:	08009e69 	.word	0x08009e69

08007ba8 <__pow5mult>:
 8007ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007baa:	2303      	movs	r3, #3
 8007bac:	0015      	movs	r5, r2
 8007bae:	0007      	movs	r7, r0
 8007bb0:	000e      	movs	r6, r1
 8007bb2:	401a      	ands	r2, r3
 8007bb4:	421d      	tst	r5, r3
 8007bb6:	d008      	beq.n	8007bca <__pow5mult+0x22>
 8007bb8:	4925      	ldr	r1, [pc, #148]	@ (8007c50 <__pow5mult+0xa8>)
 8007bba:	3a01      	subs	r2, #1
 8007bbc:	0092      	lsls	r2, r2, #2
 8007bbe:	5852      	ldr	r2, [r2, r1]
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	0031      	movs	r1, r6
 8007bc4:	f7ff fe9a 	bl	80078fc <__multadd>
 8007bc8:	0006      	movs	r6, r0
 8007bca:	10ad      	asrs	r5, r5, #2
 8007bcc:	d03d      	beq.n	8007c4a <__pow5mult+0xa2>
 8007bce:	69fc      	ldr	r4, [r7, #28]
 8007bd0:	2c00      	cmp	r4, #0
 8007bd2:	d10f      	bne.n	8007bf4 <__pow5mult+0x4c>
 8007bd4:	2010      	movs	r0, #16
 8007bd6:	f7ff fd6d 	bl	80076b4 <malloc>
 8007bda:	1e02      	subs	r2, r0, #0
 8007bdc:	61f8      	str	r0, [r7, #28]
 8007bde:	d105      	bne.n	8007bec <__pow5mult+0x44>
 8007be0:	21b4      	movs	r1, #180	@ 0xb4
 8007be2:	4b1c      	ldr	r3, [pc, #112]	@ (8007c54 <__pow5mult+0xac>)
 8007be4:	481c      	ldr	r0, [pc, #112]	@ (8007c58 <__pow5mult+0xb0>)
 8007be6:	31ff      	adds	r1, #255	@ 0xff
 8007be8:	f000 fbfa 	bl	80083e0 <__assert_func>
 8007bec:	6044      	str	r4, [r0, #4]
 8007bee:	6084      	str	r4, [r0, #8]
 8007bf0:	6004      	str	r4, [r0, #0]
 8007bf2:	60c4      	str	r4, [r0, #12]
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	689c      	ldr	r4, [r3, #8]
 8007bf8:	9301      	str	r3, [sp, #4]
 8007bfa:	2c00      	cmp	r4, #0
 8007bfc:	d108      	bne.n	8007c10 <__pow5mult+0x68>
 8007bfe:	0038      	movs	r0, r7
 8007c00:	4916      	ldr	r1, [pc, #88]	@ (8007c5c <__pow5mult+0xb4>)
 8007c02:	f7ff ff0f 	bl	8007a24 <__i2b>
 8007c06:	9b01      	ldr	r3, [sp, #4]
 8007c08:	0004      	movs	r4, r0
 8007c0a:	6098      	str	r0, [r3, #8]
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	6003      	str	r3, [r0, #0]
 8007c10:	2301      	movs	r3, #1
 8007c12:	421d      	tst	r5, r3
 8007c14:	d00a      	beq.n	8007c2c <__pow5mult+0x84>
 8007c16:	0031      	movs	r1, r6
 8007c18:	0022      	movs	r2, r4
 8007c1a:	0038      	movs	r0, r7
 8007c1c:	f7ff ff1a 	bl	8007a54 <__multiply>
 8007c20:	0031      	movs	r1, r6
 8007c22:	9001      	str	r0, [sp, #4]
 8007c24:	0038      	movs	r0, r7
 8007c26:	f7ff fe45 	bl	80078b4 <_Bfree>
 8007c2a:	9e01      	ldr	r6, [sp, #4]
 8007c2c:	106d      	asrs	r5, r5, #1
 8007c2e:	d00c      	beq.n	8007c4a <__pow5mult+0xa2>
 8007c30:	6820      	ldr	r0, [r4, #0]
 8007c32:	2800      	cmp	r0, #0
 8007c34:	d107      	bne.n	8007c46 <__pow5mult+0x9e>
 8007c36:	0022      	movs	r2, r4
 8007c38:	0021      	movs	r1, r4
 8007c3a:	0038      	movs	r0, r7
 8007c3c:	f7ff ff0a 	bl	8007a54 <__multiply>
 8007c40:	2300      	movs	r3, #0
 8007c42:	6020      	str	r0, [r4, #0]
 8007c44:	6003      	str	r3, [r0, #0]
 8007c46:	0004      	movs	r4, r0
 8007c48:	e7e2      	b.n	8007c10 <__pow5mult+0x68>
 8007c4a:	0030      	movs	r0, r6
 8007c4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c4e:	46c0      	nop			@ (mov r8, r8)
 8007c50:	08009f1c 	.word	0x08009f1c
 8007c54:	08009de9 	.word	0x08009de9
 8007c58:	08009e69 	.word	0x08009e69
 8007c5c:	00000271 	.word	0x00000271

08007c60 <__lshift>:
 8007c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c62:	000c      	movs	r4, r1
 8007c64:	0016      	movs	r6, r2
 8007c66:	6923      	ldr	r3, [r4, #16]
 8007c68:	1157      	asrs	r7, r2, #5
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	18fb      	adds	r3, r7, r3
 8007c6e:	9301      	str	r3, [sp, #4]
 8007c70:	3301      	adds	r3, #1
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	6849      	ldr	r1, [r1, #4]
 8007c76:	68a3      	ldr	r3, [r4, #8]
 8007c78:	9002      	str	r0, [sp, #8]
 8007c7a:	9a00      	ldr	r2, [sp, #0]
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	db10      	blt.n	8007ca2 <__lshift+0x42>
 8007c80:	9802      	ldr	r0, [sp, #8]
 8007c82:	f7ff fdd3 	bl	800782c <_Balloc>
 8007c86:	2300      	movs	r3, #0
 8007c88:	0001      	movs	r1, r0
 8007c8a:	0005      	movs	r5, r0
 8007c8c:	001a      	movs	r2, r3
 8007c8e:	3114      	adds	r1, #20
 8007c90:	4298      	cmp	r0, r3
 8007c92:	d10c      	bne.n	8007cae <__lshift+0x4e>
 8007c94:	21ef      	movs	r1, #239	@ 0xef
 8007c96:	002a      	movs	r2, r5
 8007c98:	4b25      	ldr	r3, [pc, #148]	@ (8007d30 <__lshift+0xd0>)
 8007c9a:	4826      	ldr	r0, [pc, #152]	@ (8007d34 <__lshift+0xd4>)
 8007c9c:	0049      	lsls	r1, r1, #1
 8007c9e:	f000 fb9f 	bl	80083e0 <__assert_func>
 8007ca2:	3101      	adds	r1, #1
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	e7e8      	b.n	8007c7a <__lshift+0x1a>
 8007ca8:	0098      	lsls	r0, r3, #2
 8007caa:	500a      	str	r2, [r1, r0]
 8007cac:	3301      	adds	r3, #1
 8007cae:	42bb      	cmp	r3, r7
 8007cb0:	dbfa      	blt.n	8007ca8 <__lshift+0x48>
 8007cb2:	43fb      	mvns	r3, r7
 8007cb4:	17db      	asrs	r3, r3, #31
 8007cb6:	401f      	ands	r7, r3
 8007cb8:	00bf      	lsls	r7, r7, #2
 8007cba:	0023      	movs	r3, r4
 8007cbc:	201f      	movs	r0, #31
 8007cbe:	19c9      	adds	r1, r1, r7
 8007cc0:	0037      	movs	r7, r6
 8007cc2:	6922      	ldr	r2, [r4, #16]
 8007cc4:	3314      	adds	r3, #20
 8007cc6:	0092      	lsls	r2, r2, #2
 8007cc8:	189a      	adds	r2, r3, r2
 8007cca:	4007      	ands	r7, r0
 8007ccc:	4206      	tst	r6, r0
 8007cce:	d029      	beq.n	8007d24 <__lshift+0xc4>
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	1bc0      	subs	r0, r0, r7
 8007cd4:	9003      	str	r0, [sp, #12]
 8007cd6:	468c      	mov	ip, r1
 8007cd8:	2000      	movs	r0, #0
 8007cda:	681e      	ldr	r6, [r3, #0]
 8007cdc:	40be      	lsls	r6, r7
 8007cde:	4306      	orrs	r6, r0
 8007ce0:	4660      	mov	r0, ip
 8007ce2:	c040      	stmia	r0!, {r6}
 8007ce4:	4684      	mov	ip, r0
 8007ce6:	9e03      	ldr	r6, [sp, #12]
 8007ce8:	cb01      	ldmia	r3!, {r0}
 8007cea:	40f0      	lsrs	r0, r6
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d8f4      	bhi.n	8007cda <__lshift+0x7a>
 8007cf0:	0026      	movs	r6, r4
 8007cf2:	3615      	adds	r6, #21
 8007cf4:	2304      	movs	r3, #4
 8007cf6:	42b2      	cmp	r2, r6
 8007cf8:	d304      	bcc.n	8007d04 <__lshift+0xa4>
 8007cfa:	1b13      	subs	r3, r2, r4
 8007cfc:	3b15      	subs	r3, #21
 8007cfe:	089b      	lsrs	r3, r3, #2
 8007d00:	3301      	adds	r3, #1
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	50c8      	str	r0, [r1, r3]
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d002      	beq.n	8007d10 <__lshift+0xb0>
 8007d0a:	9b01      	ldr	r3, [sp, #4]
 8007d0c:	3302      	adds	r3, #2
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	9b00      	ldr	r3, [sp, #0]
 8007d12:	9802      	ldr	r0, [sp, #8]
 8007d14:	3b01      	subs	r3, #1
 8007d16:	0021      	movs	r1, r4
 8007d18:	612b      	str	r3, [r5, #16]
 8007d1a:	f7ff fdcb 	bl	80078b4 <_Bfree>
 8007d1e:	0028      	movs	r0, r5
 8007d20:	b005      	add	sp, #20
 8007d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d24:	cb01      	ldmia	r3!, {r0}
 8007d26:	c101      	stmia	r1!, {r0}
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d8fb      	bhi.n	8007d24 <__lshift+0xc4>
 8007d2c:	e7f0      	b.n	8007d10 <__lshift+0xb0>
 8007d2e:	46c0      	nop			@ (mov r8, r8)
 8007d30:	08009e58 	.word	0x08009e58
 8007d34:	08009e69 	.word	0x08009e69

08007d38 <__mcmp>:
 8007d38:	b530      	push	{r4, r5, lr}
 8007d3a:	690b      	ldr	r3, [r1, #16]
 8007d3c:	6904      	ldr	r4, [r0, #16]
 8007d3e:	0002      	movs	r2, r0
 8007d40:	1ae0      	subs	r0, r4, r3
 8007d42:	429c      	cmp	r4, r3
 8007d44:	d10f      	bne.n	8007d66 <__mcmp+0x2e>
 8007d46:	3214      	adds	r2, #20
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	3114      	adds	r1, #20
 8007d4c:	0014      	movs	r4, r2
 8007d4e:	18c9      	adds	r1, r1, r3
 8007d50:	18d2      	adds	r2, r2, r3
 8007d52:	3a04      	subs	r2, #4
 8007d54:	3904      	subs	r1, #4
 8007d56:	6815      	ldr	r5, [r2, #0]
 8007d58:	680b      	ldr	r3, [r1, #0]
 8007d5a:	429d      	cmp	r5, r3
 8007d5c:	d004      	beq.n	8007d68 <__mcmp+0x30>
 8007d5e:	2001      	movs	r0, #1
 8007d60:	429d      	cmp	r5, r3
 8007d62:	d200      	bcs.n	8007d66 <__mcmp+0x2e>
 8007d64:	3802      	subs	r0, #2
 8007d66:	bd30      	pop	{r4, r5, pc}
 8007d68:	4294      	cmp	r4, r2
 8007d6a:	d3f2      	bcc.n	8007d52 <__mcmp+0x1a>
 8007d6c:	e7fb      	b.n	8007d66 <__mcmp+0x2e>
	...

08007d70 <__mdiff>:
 8007d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d72:	000c      	movs	r4, r1
 8007d74:	b087      	sub	sp, #28
 8007d76:	9000      	str	r0, [sp, #0]
 8007d78:	0011      	movs	r1, r2
 8007d7a:	0020      	movs	r0, r4
 8007d7c:	0017      	movs	r7, r2
 8007d7e:	f7ff ffdb 	bl	8007d38 <__mcmp>
 8007d82:	1e05      	subs	r5, r0, #0
 8007d84:	d110      	bne.n	8007da8 <__mdiff+0x38>
 8007d86:	0001      	movs	r1, r0
 8007d88:	9800      	ldr	r0, [sp, #0]
 8007d8a:	f7ff fd4f 	bl	800782c <_Balloc>
 8007d8e:	1e02      	subs	r2, r0, #0
 8007d90:	d104      	bne.n	8007d9c <__mdiff+0x2c>
 8007d92:	4b40      	ldr	r3, [pc, #256]	@ (8007e94 <__mdiff+0x124>)
 8007d94:	4840      	ldr	r0, [pc, #256]	@ (8007e98 <__mdiff+0x128>)
 8007d96:	4941      	ldr	r1, [pc, #260]	@ (8007e9c <__mdiff+0x12c>)
 8007d98:	f000 fb22 	bl	80083e0 <__assert_func>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	6145      	str	r5, [r0, #20]
 8007da0:	6103      	str	r3, [r0, #16]
 8007da2:	0010      	movs	r0, r2
 8007da4:	b007      	add	sp, #28
 8007da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007da8:	2600      	movs	r6, #0
 8007daa:	42b0      	cmp	r0, r6
 8007dac:	da03      	bge.n	8007db6 <__mdiff+0x46>
 8007dae:	0023      	movs	r3, r4
 8007db0:	003c      	movs	r4, r7
 8007db2:	001f      	movs	r7, r3
 8007db4:	3601      	adds	r6, #1
 8007db6:	6861      	ldr	r1, [r4, #4]
 8007db8:	9800      	ldr	r0, [sp, #0]
 8007dba:	f7ff fd37 	bl	800782c <_Balloc>
 8007dbe:	1e02      	subs	r2, r0, #0
 8007dc0:	d103      	bne.n	8007dca <__mdiff+0x5a>
 8007dc2:	4b34      	ldr	r3, [pc, #208]	@ (8007e94 <__mdiff+0x124>)
 8007dc4:	4834      	ldr	r0, [pc, #208]	@ (8007e98 <__mdiff+0x128>)
 8007dc6:	4936      	ldr	r1, [pc, #216]	@ (8007ea0 <__mdiff+0x130>)
 8007dc8:	e7e6      	b.n	8007d98 <__mdiff+0x28>
 8007dca:	6923      	ldr	r3, [r4, #16]
 8007dcc:	3414      	adds	r4, #20
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	18e3      	adds	r3, r4, r3
 8007dd4:	0021      	movs	r1, r4
 8007dd6:	9401      	str	r4, [sp, #4]
 8007dd8:	003c      	movs	r4, r7
 8007dda:	9302      	str	r3, [sp, #8]
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	3414      	adds	r4, #20
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	18e3      	adds	r3, r4, r3
 8007de4:	9303      	str	r3, [sp, #12]
 8007de6:	0003      	movs	r3, r0
 8007de8:	60c6      	str	r6, [r0, #12]
 8007dea:	468c      	mov	ip, r1
 8007dec:	2000      	movs	r0, #0
 8007dee:	3314      	adds	r3, #20
 8007df0:	9304      	str	r3, [sp, #16]
 8007df2:	9305      	str	r3, [sp, #20]
 8007df4:	4663      	mov	r3, ip
 8007df6:	cb20      	ldmia	r3!, {r5}
 8007df8:	b2a9      	uxth	r1, r5
 8007dfa:	000e      	movs	r6, r1
 8007dfc:	469c      	mov	ip, r3
 8007dfe:	cc08      	ldmia	r4!, {r3}
 8007e00:	0c2d      	lsrs	r5, r5, #16
 8007e02:	b299      	uxth	r1, r3
 8007e04:	1a71      	subs	r1, r6, r1
 8007e06:	1809      	adds	r1, r1, r0
 8007e08:	0c1b      	lsrs	r3, r3, #16
 8007e0a:	1408      	asrs	r0, r1, #16
 8007e0c:	1aeb      	subs	r3, r5, r3
 8007e0e:	181b      	adds	r3, r3, r0
 8007e10:	1418      	asrs	r0, r3, #16
 8007e12:	b289      	uxth	r1, r1
 8007e14:	041b      	lsls	r3, r3, #16
 8007e16:	4319      	orrs	r1, r3
 8007e18:	9b05      	ldr	r3, [sp, #20]
 8007e1a:	c302      	stmia	r3!, {r1}
 8007e1c:	9305      	str	r3, [sp, #20]
 8007e1e:	9b03      	ldr	r3, [sp, #12]
 8007e20:	42a3      	cmp	r3, r4
 8007e22:	d8e7      	bhi.n	8007df4 <__mdiff+0x84>
 8007e24:	0039      	movs	r1, r7
 8007e26:	9c03      	ldr	r4, [sp, #12]
 8007e28:	3115      	adds	r1, #21
 8007e2a:	2304      	movs	r3, #4
 8007e2c:	428c      	cmp	r4, r1
 8007e2e:	d304      	bcc.n	8007e3a <__mdiff+0xca>
 8007e30:	1be3      	subs	r3, r4, r7
 8007e32:	3b15      	subs	r3, #21
 8007e34:	089b      	lsrs	r3, r3, #2
 8007e36:	3301      	adds	r3, #1
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	9901      	ldr	r1, [sp, #4]
 8007e3c:	18cd      	adds	r5, r1, r3
 8007e3e:	9904      	ldr	r1, [sp, #16]
 8007e40:	002e      	movs	r6, r5
 8007e42:	18cb      	adds	r3, r1, r3
 8007e44:	001f      	movs	r7, r3
 8007e46:	9902      	ldr	r1, [sp, #8]
 8007e48:	428e      	cmp	r6, r1
 8007e4a:	d311      	bcc.n	8007e70 <__mdiff+0x100>
 8007e4c:	9c02      	ldr	r4, [sp, #8]
 8007e4e:	1ee9      	subs	r1, r5, #3
 8007e50:	2000      	movs	r0, #0
 8007e52:	428c      	cmp	r4, r1
 8007e54:	d304      	bcc.n	8007e60 <__mdiff+0xf0>
 8007e56:	0021      	movs	r1, r4
 8007e58:	3103      	adds	r1, #3
 8007e5a:	1b49      	subs	r1, r1, r5
 8007e5c:	0889      	lsrs	r1, r1, #2
 8007e5e:	0088      	lsls	r0, r1, #2
 8007e60:	181b      	adds	r3, r3, r0
 8007e62:	3b04      	subs	r3, #4
 8007e64:	6819      	ldr	r1, [r3, #0]
 8007e66:	2900      	cmp	r1, #0
 8007e68:	d010      	beq.n	8007e8c <__mdiff+0x11c>
 8007e6a:	9b00      	ldr	r3, [sp, #0]
 8007e6c:	6113      	str	r3, [r2, #16]
 8007e6e:	e798      	b.n	8007da2 <__mdiff+0x32>
 8007e70:	4684      	mov	ip, r0
 8007e72:	ce02      	ldmia	r6!, {r1}
 8007e74:	b288      	uxth	r0, r1
 8007e76:	4460      	add	r0, ip
 8007e78:	1400      	asrs	r0, r0, #16
 8007e7a:	0c0c      	lsrs	r4, r1, #16
 8007e7c:	1904      	adds	r4, r0, r4
 8007e7e:	4461      	add	r1, ip
 8007e80:	1420      	asrs	r0, r4, #16
 8007e82:	b289      	uxth	r1, r1
 8007e84:	0424      	lsls	r4, r4, #16
 8007e86:	4321      	orrs	r1, r4
 8007e88:	c702      	stmia	r7!, {r1}
 8007e8a:	e7dc      	b.n	8007e46 <__mdiff+0xd6>
 8007e8c:	9900      	ldr	r1, [sp, #0]
 8007e8e:	3901      	subs	r1, #1
 8007e90:	9100      	str	r1, [sp, #0]
 8007e92:	e7e6      	b.n	8007e62 <__mdiff+0xf2>
 8007e94:	08009e58 	.word	0x08009e58
 8007e98:	08009e69 	.word	0x08009e69
 8007e9c:	00000237 	.word	0x00000237
 8007ea0:	00000245 	.word	0x00000245

08007ea4 <__d2b>:
 8007ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	0016      	movs	r6, r2
 8007eaa:	001f      	movs	r7, r3
 8007eac:	f7ff fcbe 	bl	800782c <_Balloc>
 8007eb0:	1e04      	subs	r4, r0, #0
 8007eb2:	d105      	bne.n	8007ec0 <__d2b+0x1c>
 8007eb4:	0022      	movs	r2, r4
 8007eb6:	4b25      	ldr	r3, [pc, #148]	@ (8007f4c <__d2b+0xa8>)
 8007eb8:	4825      	ldr	r0, [pc, #148]	@ (8007f50 <__d2b+0xac>)
 8007eba:	4926      	ldr	r1, [pc, #152]	@ (8007f54 <__d2b+0xb0>)
 8007ebc:	f000 fa90 	bl	80083e0 <__assert_func>
 8007ec0:	033b      	lsls	r3, r7, #12
 8007ec2:	007d      	lsls	r5, r7, #1
 8007ec4:	0b1b      	lsrs	r3, r3, #12
 8007ec6:	0d6d      	lsrs	r5, r5, #21
 8007ec8:	d002      	beq.n	8007ed0 <__d2b+0x2c>
 8007eca:	2280      	movs	r2, #128	@ 0x80
 8007ecc:	0352      	lsls	r2, r2, #13
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	9301      	str	r3, [sp, #4]
 8007ed2:	2e00      	cmp	r6, #0
 8007ed4:	d025      	beq.n	8007f22 <__d2b+0x7e>
 8007ed6:	4668      	mov	r0, sp
 8007ed8:	9600      	str	r6, [sp, #0]
 8007eda:	f7ff fd74 	bl	80079c6 <__lo0bits>
 8007ede:	9b01      	ldr	r3, [sp, #4]
 8007ee0:	9900      	ldr	r1, [sp, #0]
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	d01b      	beq.n	8007f1e <__d2b+0x7a>
 8007ee6:	2220      	movs	r2, #32
 8007ee8:	001e      	movs	r6, r3
 8007eea:	1a12      	subs	r2, r2, r0
 8007eec:	4096      	lsls	r6, r2
 8007eee:	0032      	movs	r2, r6
 8007ef0:	40c3      	lsrs	r3, r0
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	6162      	str	r2, [r4, #20]
 8007ef6:	9301      	str	r3, [sp, #4]
 8007ef8:	9e01      	ldr	r6, [sp, #4]
 8007efa:	61a6      	str	r6, [r4, #24]
 8007efc:	1e73      	subs	r3, r6, #1
 8007efe:	419e      	sbcs	r6, r3
 8007f00:	3601      	adds	r6, #1
 8007f02:	6126      	str	r6, [r4, #16]
 8007f04:	2d00      	cmp	r5, #0
 8007f06:	d014      	beq.n	8007f32 <__d2b+0x8e>
 8007f08:	2635      	movs	r6, #53	@ 0x35
 8007f0a:	4b13      	ldr	r3, [pc, #76]	@ (8007f58 <__d2b+0xb4>)
 8007f0c:	18ed      	adds	r5, r5, r3
 8007f0e:	9b08      	ldr	r3, [sp, #32]
 8007f10:	182d      	adds	r5, r5, r0
 8007f12:	601d      	str	r5, [r3, #0]
 8007f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f16:	1a36      	subs	r6, r6, r0
 8007f18:	601e      	str	r6, [r3, #0]
 8007f1a:	0020      	movs	r0, r4
 8007f1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f1e:	6161      	str	r1, [r4, #20]
 8007f20:	e7ea      	b.n	8007ef8 <__d2b+0x54>
 8007f22:	a801      	add	r0, sp, #4
 8007f24:	f7ff fd4f 	bl	80079c6 <__lo0bits>
 8007f28:	9b01      	ldr	r3, [sp, #4]
 8007f2a:	2601      	movs	r6, #1
 8007f2c:	6163      	str	r3, [r4, #20]
 8007f2e:	3020      	adds	r0, #32
 8007f30:	e7e7      	b.n	8007f02 <__d2b+0x5e>
 8007f32:	4b0a      	ldr	r3, [pc, #40]	@ (8007f5c <__d2b+0xb8>)
 8007f34:	18c0      	adds	r0, r0, r3
 8007f36:	9b08      	ldr	r3, [sp, #32]
 8007f38:	6018      	str	r0, [r3, #0]
 8007f3a:	4b09      	ldr	r3, [pc, #36]	@ (8007f60 <__d2b+0xbc>)
 8007f3c:	18f3      	adds	r3, r6, r3
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	18e3      	adds	r3, r4, r3
 8007f42:	6958      	ldr	r0, [r3, #20]
 8007f44:	f7ff fd1e 	bl	8007984 <__hi0bits>
 8007f48:	0176      	lsls	r6, r6, #5
 8007f4a:	e7e3      	b.n	8007f14 <__d2b+0x70>
 8007f4c:	08009e58 	.word	0x08009e58
 8007f50:	08009e69 	.word	0x08009e69
 8007f54:	0000030f 	.word	0x0000030f
 8007f58:	fffffbcd 	.word	0xfffffbcd
 8007f5c:	fffffbce 	.word	0xfffffbce
 8007f60:	3fffffff 	.word	0x3fffffff

08007f64 <__ssputs_r>:
 8007f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f66:	688e      	ldr	r6, [r1, #8]
 8007f68:	b085      	sub	sp, #20
 8007f6a:	001f      	movs	r7, r3
 8007f6c:	000c      	movs	r4, r1
 8007f6e:	680b      	ldr	r3, [r1, #0]
 8007f70:	9002      	str	r0, [sp, #8]
 8007f72:	9203      	str	r2, [sp, #12]
 8007f74:	42be      	cmp	r6, r7
 8007f76:	d830      	bhi.n	8007fda <__ssputs_r+0x76>
 8007f78:	210c      	movs	r1, #12
 8007f7a:	5e62      	ldrsh	r2, [r4, r1]
 8007f7c:	2190      	movs	r1, #144	@ 0x90
 8007f7e:	00c9      	lsls	r1, r1, #3
 8007f80:	420a      	tst	r2, r1
 8007f82:	d028      	beq.n	8007fd6 <__ssputs_r+0x72>
 8007f84:	2003      	movs	r0, #3
 8007f86:	6921      	ldr	r1, [r4, #16]
 8007f88:	1a5b      	subs	r3, r3, r1
 8007f8a:	9301      	str	r3, [sp, #4]
 8007f8c:	6963      	ldr	r3, [r4, #20]
 8007f8e:	4343      	muls	r3, r0
 8007f90:	9801      	ldr	r0, [sp, #4]
 8007f92:	0fdd      	lsrs	r5, r3, #31
 8007f94:	18ed      	adds	r5, r5, r3
 8007f96:	1c7b      	adds	r3, r7, #1
 8007f98:	181b      	adds	r3, r3, r0
 8007f9a:	106d      	asrs	r5, r5, #1
 8007f9c:	42ab      	cmp	r3, r5
 8007f9e:	d900      	bls.n	8007fa2 <__ssputs_r+0x3e>
 8007fa0:	001d      	movs	r5, r3
 8007fa2:	0552      	lsls	r2, r2, #21
 8007fa4:	d528      	bpl.n	8007ff8 <__ssputs_r+0x94>
 8007fa6:	0029      	movs	r1, r5
 8007fa8:	9802      	ldr	r0, [sp, #8]
 8007faa:	f7ff fbaf 	bl	800770c <_malloc_r>
 8007fae:	1e06      	subs	r6, r0, #0
 8007fb0:	d02c      	beq.n	800800c <__ssputs_r+0xa8>
 8007fb2:	9a01      	ldr	r2, [sp, #4]
 8007fb4:	6921      	ldr	r1, [r4, #16]
 8007fb6:	f000 fa09 	bl	80083cc <memcpy>
 8007fba:	89a2      	ldrh	r2, [r4, #12]
 8007fbc:	4b18      	ldr	r3, [pc, #96]	@ (8008020 <__ssputs_r+0xbc>)
 8007fbe:	401a      	ands	r2, r3
 8007fc0:	2380      	movs	r3, #128	@ 0x80
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	81a3      	strh	r3, [r4, #12]
 8007fc6:	9b01      	ldr	r3, [sp, #4]
 8007fc8:	6126      	str	r6, [r4, #16]
 8007fca:	18f6      	adds	r6, r6, r3
 8007fcc:	6026      	str	r6, [r4, #0]
 8007fce:	003e      	movs	r6, r7
 8007fd0:	6165      	str	r5, [r4, #20]
 8007fd2:	1aed      	subs	r5, r5, r3
 8007fd4:	60a5      	str	r5, [r4, #8]
 8007fd6:	42be      	cmp	r6, r7
 8007fd8:	d900      	bls.n	8007fdc <__ssputs_r+0x78>
 8007fda:	003e      	movs	r6, r7
 8007fdc:	0032      	movs	r2, r6
 8007fde:	9903      	ldr	r1, [sp, #12]
 8007fe0:	6820      	ldr	r0, [r4, #0]
 8007fe2:	f000 f9ce 	bl	8008382 <memmove>
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	68a3      	ldr	r3, [r4, #8]
 8007fea:	1b9b      	subs	r3, r3, r6
 8007fec:	60a3      	str	r3, [r4, #8]
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	199b      	adds	r3, r3, r6
 8007ff2:	6023      	str	r3, [r4, #0]
 8007ff4:	b005      	add	sp, #20
 8007ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ff8:	002a      	movs	r2, r5
 8007ffa:	9802      	ldr	r0, [sp, #8]
 8007ffc:	f000 fa4d 	bl	800849a <_realloc_r>
 8008000:	1e06      	subs	r6, r0, #0
 8008002:	d1e0      	bne.n	8007fc6 <__ssputs_r+0x62>
 8008004:	6921      	ldr	r1, [r4, #16]
 8008006:	9802      	ldr	r0, [sp, #8]
 8008008:	f7ff fb0a 	bl	8007620 <_free_r>
 800800c:	230c      	movs	r3, #12
 800800e:	2001      	movs	r0, #1
 8008010:	9a02      	ldr	r2, [sp, #8]
 8008012:	4240      	negs	r0, r0
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	89a2      	ldrh	r2, [r4, #12]
 8008018:	3334      	adds	r3, #52	@ 0x34
 800801a:	4313      	orrs	r3, r2
 800801c:	81a3      	strh	r3, [r4, #12]
 800801e:	e7e9      	b.n	8007ff4 <__ssputs_r+0x90>
 8008020:	fffffb7f 	.word	0xfffffb7f

08008024 <_svfiprintf_r>:
 8008024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008026:	b0a1      	sub	sp, #132	@ 0x84
 8008028:	9003      	str	r0, [sp, #12]
 800802a:	001d      	movs	r5, r3
 800802c:	898b      	ldrh	r3, [r1, #12]
 800802e:	000f      	movs	r7, r1
 8008030:	0016      	movs	r6, r2
 8008032:	061b      	lsls	r3, r3, #24
 8008034:	d511      	bpl.n	800805a <_svfiprintf_r+0x36>
 8008036:	690b      	ldr	r3, [r1, #16]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10e      	bne.n	800805a <_svfiprintf_r+0x36>
 800803c:	2140      	movs	r1, #64	@ 0x40
 800803e:	f7ff fb65 	bl	800770c <_malloc_r>
 8008042:	6038      	str	r0, [r7, #0]
 8008044:	6138      	str	r0, [r7, #16]
 8008046:	2800      	cmp	r0, #0
 8008048:	d105      	bne.n	8008056 <_svfiprintf_r+0x32>
 800804a:	230c      	movs	r3, #12
 800804c:	9a03      	ldr	r2, [sp, #12]
 800804e:	6013      	str	r3, [r2, #0]
 8008050:	2001      	movs	r0, #1
 8008052:	4240      	negs	r0, r0
 8008054:	e0cf      	b.n	80081f6 <_svfiprintf_r+0x1d2>
 8008056:	2340      	movs	r3, #64	@ 0x40
 8008058:	617b      	str	r3, [r7, #20]
 800805a:	2300      	movs	r3, #0
 800805c:	ac08      	add	r4, sp, #32
 800805e:	6163      	str	r3, [r4, #20]
 8008060:	3320      	adds	r3, #32
 8008062:	7663      	strb	r3, [r4, #25]
 8008064:	3310      	adds	r3, #16
 8008066:	76a3      	strb	r3, [r4, #26]
 8008068:	9507      	str	r5, [sp, #28]
 800806a:	0035      	movs	r5, r6
 800806c:	782b      	ldrb	r3, [r5, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <_svfiprintf_r+0x52>
 8008072:	2b25      	cmp	r3, #37	@ 0x25
 8008074:	d148      	bne.n	8008108 <_svfiprintf_r+0xe4>
 8008076:	1bab      	subs	r3, r5, r6
 8008078:	9305      	str	r3, [sp, #20]
 800807a:	42b5      	cmp	r5, r6
 800807c:	d00b      	beq.n	8008096 <_svfiprintf_r+0x72>
 800807e:	0032      	movs	r2, r6
 8008080:	0039      	movs	r1, r7
 8008082:	9803      	ldr	r0, [sp, #12]
 8008084:	f7ff ff6e 	bl	8007f64 <__ssputs_r>
 8008088:	3001      	adds	r0, #1
 800808a:	d100      	bne.n	800808e <_svfiprintf_r+0x6a>
 800808c:	e0ae      	b.n	80081ec <_svfiprintf_r+0x1c8>
 800808e:	6963      	ldr	r3, [r4, #20]
 8008090:	9a05      	ldr	r2, [sp, #20]
 8008092:	189b      	adds	r3, r3, r2
 8008094:	6163      	str	r3, [r4, #20]
 8008096:	782b      	ldrb	r3, [r5, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d100      	bne.n	800809e <_svfiprintf_r+0x7a>
 800809c:	e0a6      	b.n	80081ec <_svfiprintf_r+0x1c8>
 800809e:	2201      	movs	r2, #1
 80080a0:	2300      	movs	r3, #0
 80080a2:	4252      	negs	r2, r2
 80080a4:	6062      	str	r2, [r4, #4]
 80080a6:	a904      	add	r1, sp, #16
 80080a8:	3254      	adds	r2, #84	@ 0x54
 80080aa:	1852      	adds	r2, r2, r1
 80080ac:	1c6e      	adds	r6, r5, #1
 80080ae:	6023      	str	r3, [r4, #0]
 80080b0:	60e3      	str	r3, [r4, #12]
 80080b2:	60a3      	str	r3, [r4, #8]
 80080b4:	7013      	strb	r3, [r2, #0]
 80080b6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80080b8:	4b54      	ldr	r3, [pc, #336]	@ (800820c <_svfiprintf_r+0x1e8>)
 80080ba:	2205      	movs	r2, #5
 80080bc:	0018      	movs	r0, r3
 80080be:	7831      	ldrb	r1, [r6, #0]
 80080c0:	9305      	str	r3, [sp, #20]
 80080c2:	f7fe fc2c 	bl	800691e <memchr>
 80080c6:	1c75      	adds	r5, r6, #1
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d11f      	bne.n	800810c <_svfiprintf_r+0xe8>
 80080cc:	6822      	ldr	r2, [r4, #0]
 80080ce:	06d3      	lsls	r3, r2, #27
 80080d0:	d504      	bpl.n	80080dc <_svfiprintf_r+0xb8>
 80080d2:	2353      	movs	r3, #83	@ 0x53
 80080d4:	a904      	add	r1, sp, #16
 80080d6:	185b      	adds	r3, r3, r1
 80080d8:	2120      	movs	r1, #32
 80080da:	7019      	strb	r1, [r3, #0]
 80080dc:	0713      	lsls	r3, r2, #28
 80080de:	d504      	bpl.n	80080ea <_svfiprintf_r+0xc6>
 80080e0:	2353      	movs	r3, #83	@ 0x53
 80080e2:	a904      	add	r1, sp, #16
 80080e4:	185b      	adds	r3, r3, r1
 80080e6:	212b      	movs	r1, #43	@ 0x2b
 80080e8:	7019      	strb	r1, [r3, #0]
 80080ea:	7833      	ldrb	r3, [r6, #0]
 80080ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80080ee:	d016      	beq.n	800811e <_svfiprintf_r+0xfa>
 80080f0:	0035      	movs	r5, r6
 80080f2:	2100      	movs	r1, #0
 80080f4:	200a      	movs	r0, #10
 80080f6:	68e3      	ldr	r3, [r4, #12]
 80080f8:	782a      	ldrb	r2, [r5, #0]
 80080fa:	1c6e      	adds	r6, r5, #1
 80080fc:	3a30      	subs	r2, #48	@ 0x30
 80080fe:	2a09      	cmp	r2, #9
 8008100:	d950      	bls.n	80081a4 <_svfiprintf_r+0x180>
 8008102:	2900      	cmp	r1, #0
 8008104:	d111      	bne.n	800812a <_svfiprintf_r+0x106>
 8008106:	e017      	b.n	8008138 <_svfiprintf_r+0x114>
 8008108:	3501      	adds	r5, #1
 800810a:	e7af      	b.n	800806c <_svfiprintf_r+0x48>
 800810c:	9b05      	ldr	r3, [sp, #20]
 800810e:	6822      	ldr	r2, [r4, #0]
 8008110:	1ac0      	subs	r0, r0, r3
 8008112:	2301      	movs	r3, #1
 8008114:	4083      	lsls	r3, r0
 8008116:	4313      	orrs	r3, r2
 8008118:	002e      	movs	r6, r5
 800811a:	6023      	str	r3, [r4, #0]
 800811c:	e7cc      	b.n	80080b8 <_svfiprintf_r+0x94>
 800811e:	9b07      	ldr	r3, [sp, #28]
 8008120:	1d19      	adds	r1, r3, #4
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	9107      	str	r1, [sp, #28]
 8008126:	2b00      	cmp	r3, #0
 8008128:	db01      	blt.n	800812e <_svfiprintf_r+0x10a>
 800812a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800812c:	e004      	b.n	8008138 <_svfiprintf_r+0x114>
 800812e:	425b      	negs	r3, r3
 8008130:	60e3      	str	r3, [r4, #12]
 8008132:	2302      	movs	r3, #2
 8008134:	4313      	orrs	r3, r2
 8008136:	6023      	str	r3, [r4, #0]
 8008138:	782b      	ldrb	r3, [r5, #0]
 800813a:	2b2e      	cmp	r3, #46	@ 0x2e
 800813c:	d10c      	bne.n	8008158 <_svfiprintf_r+0x134>
 800813e:	786b      	ldrb	r3, [r5, #1]
 8008140:	2b2a      	cmp	r3, #42	@ 0x2a
 8008142:	d134      	bne.n	80081ae <_svfiprintf_r+0x18a>
 8008144:	9b07      	ldr	r3, [sp, #28]
 8008146:	3502      	adds	r5, #2
 8008148:	1d1a      	adds	r2, r3, #4
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	9207      	str	r2, [sp, #28]
 800814e:	2b00      	cmp	r3, #0
 8008150:	da01      	bge.n	8008156 <_svfiprintf_r+0x132>
 8008152:	2301      	movs	r3, #1
 8008154:	425b      	negs	r3, r3
 8008156:	9309      	str	r3, [sp, #36]	@ 0x24
 8008158:	4e2d      	ldr	r6, [pc, #180]	@ (8008210 <_svfiprintf_r+0x1ec>)
 800815a:	2203      	movs	r2, #3
 800815c:	0030      	movs	r0, r6
 800815e:	7829      	ldrb	r1, [r5, #0]
 8008160:	f7fe fbdd 	bl	800691e <memchr>
 8008164:	2800      	cmp	r0, #0
 8008166:	d006      	beq.n	8008176 <_svfiprintf_r+0x152>
 8008168:	2340      	movs	r3, #64	@ 0x40
 800816a:	1b80      	subs	r0, r0, r6
 800816c:	4083      	lsls	r3, r0
 800816e:	6822      	ldr	r2, [r4, #0]
 8008170:	3501      	adds	r5, #1
 8008172:	4313      	orrs	r3, r2
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	7829      	ldrb	r1, [r5, #0]
 8008178:	2206      	movs	r2, #6
 800817a:	4826      	ldr	r0, [pc, #152]	@ (8008214 <_svfiprintf_r+0x1f0>)
 800817c:	1c6e      	adds	r6, r5, #1
 800817e:	7621      	strb	r1, [r4, #24]
 8008180:	f7fe fbcd 	bl	800691e <memchr>
 8008184:	2800      	cmp	r0, #0
 8008186:	d038      	beq.n	80081fa <_svfiprintf_r+0x1d6>
 8008188:	4b23      	ldr	r3, [pc, #140]	@ (8008218 <_svfiprintf_r+0x1f4>)
 800818a:	2b00      	cmp	r3, #0
 800818c:	d122      	bne.n	80081d4 <_svfiprintf_r+0x1b0>
 800818e:	2207      	movs	r2, #7
 8008190:	9b07      	ldr	r3, [sp, #28]
 8008192:	3307      	adds	r3, #7
 8008194:	4393      	bics	r3, r2
 8008196:	3308      	adds	r3, #8
 8008198:	9307      	str	r3, [sp, #28]
 800819a:	6963      	ldr	r3, [r4, #20]
 800819c:	9a04      	ldr	r2, [sp, #16]
 800819e:	189b      	adds	r3, r3, r2
 80081a0:	6163      	str	r3, [r4, #20]
 80081a2:	e762      	b.n	800806a <_svfiprintf_r+0x46>
 80081a4:	4343      	muls	r3, r0
 80081a6:	0035      	movs	r5, r6
 80081a8:	2101      	movs	r1, #1
 80081aa:	189b      	adds	r3, r3, r2
 80081ac:	e7a4      	b.n	80080f8 <_svfiprintf_r+0xd4>
 80081ae:	2300      	movs	r3, #0
 80081b0:	200a      	movs	r0, #10
 80081b2:	0019      	movs	r1, r3
 80081b4:	3501      	adds	r5, #1
 80081b6:	6063      	str	r3, [r4, #4]
 80081b8:	782a      	ldrb	r2, [r5, #0]
 80081ba:	1c6e      	adds	r6, r5, #1
 80081bc:	3a30      	subs	r2, #48	@ 0x30
 80081be:	2a09      	cmp	r2, #9
 80081c0:	d903      	bls.n	80081ca <_svfiprintf_r+0x1a6>
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d0c8      	beq.n	8008158 <_svfiprintf_r+0x134>
 80081c6:	9109      	str	r1, [sp, #36]	@ 0x24
 80081c8:	e7c6      	b.n	8008158 <_svfiprintf_r+0x134>
 80081ca:	4341      	muls	r1, r0
 80081cc:	0035      	movs	r5, r6
 80081ce:	2301      	movs	r3, #1
 80081d0:	1889      	adds	r1, r1, r2
 80081d2:	e7f1      	b.n	80081b8 <_svfiprintf_r+0x194>
 80081d4:	aa07      	add	r2, sp, #28
 80081d6:	9200      	str	r2, [sp, #0]
 80081d8:	0021      	movs	r1, r4
 80081da:	003a      	movs	r2, r7
 80081dc:	4b0f      	ldr	r3, [pc, #60]	@ (800821c <_svfiprintf_r+0x1f8>)
 80081de:	9803      	ldr	r0, [sp, #12]
 80081e0:	f7fd fe2a 	bl	8005e38 <_printf_float>
 80081e4:	9004      	str	r0, [sp, #16]
 80081e6:	9b04      	ldr	r3, [sp, #16]
 80081e8:	3301      	adds	r3, #1
 80081ea:	d1d6      	bne.n	800819a <_svfiprintf_r+0x176>
 80081ec:	89bb      	ldrh	r3, [r7, #12]
 80081ee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80081f0:	065b      	lsls	r3, r3, #25
 80081f2:	d500      	bpl.n	80081f6 <_svfiprintf_r+0x1d2>
 80081f4:	e72c      	b.n	8008050 <_svfiprintf_r+0x2c>
 80081f6:	b021      	add	sp, #132	@ 0x84
 80081f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081fa:	aa07      	add	r2, sp, #28
 80081fc:	9200      	str	r2, [sp, #0]
 80081fe:	0021      	movs	r1, r4
 8008200:	003a      	movs	r2, r7
 8008202:	4b06      	ldr	r3, [pc, #24]	@ (800821c <_svfiprintf_r+0x1f8>)
 8008204:	9803      	ldr	r0, [sp, #12]
 8008206:	f7fe f8c5 	bl	8006394 <_printf_i>
 800820a:	e7eb      	b.n	80081e4 <_svfiprintf_r+0x1c0>
 800820c:	08009ec2 	.word	0x08009ec2
 8008210:	08009ec8 	.word	0x08009ec8
 8008214:	08009ecc 	.word	0x08009ecc
 8008218:	08005e39 	.word	0x08005e39
 800821c:	08007f65 	.word	0x08007f65

08008220 <__sflush_r>:
 8008220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008222:	220c      	movs	r2, #12
 8008224:	5e8b      	ldrsh	r3, [r1, r2]
 8008226:	0005      	movs	r5, r0
 8008228:	000c      	movs	r4, r1
 800822a:	071a      	lsls	r2, r3, #28
 800822c:	d456      	bmi.n	80082dc <__sflush_r+0xbc>
 800822e:	684a      	ldr	r2, [r1, #4]
 8008230:	2a00      	cmp	r2, #0
 8008232:	dc02      	bgt.n	800823a <__sflush_r+0x1a>
 8008234:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8008236:	2a00      	cmp	r2, #0
 8008238:	dd4e      	ble.n	80082d8 <__sflush_r+0xb8>
 800823a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800823c:	2f00      	cmp	r7, #0
 800823e:	d04b      	beq.n	80082d8 <__sflush_r+0xb8>
 8008240:	2200      	movs	r2, #0
 8008242:	2080      	movs	r0, #128	@ 0x80
 8008244:	682e      	ldr	r6, [r5, #0]
 8008246:	602a      	str	r2, [r5, #0]
 8008248:	001a      	movs	r2, r3
 800824a:	0140      	lsls	r0, r0, #5
 800824c:	6a21      	ldr	r1, [r4, #32]
 800824e:	4002      	ands	r2, r0
 8008250:	4203      	tst	r3, r0
 8008252:	d033      	beq.n	80082bc <__sflush_r+0x9c>
 8008254:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008256:	89a3      	ldrh	r3, [r4, #12]
 8008258:	075b      	lsls	r3, r3, #29
 800825a:	d506      	bpl.n	800826a <__sflush_r+0x4a>
 800825c:	6863      	ldr	r3, [r4, #4]
 800825e:	1ad2      	subs	r2, r2, r3
 8008260:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <__sflush_r+0x4a>
 8008266:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008268:	1ad2      	subs	r2, r2, r3
 800826a:	2300      	movs	r3, #0
 800826c:	0028      	movs	r0, r5
 800826e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008270:	6a21      	ldr	r1, [r4, #32]
 8008272:	47b8      	blx	r7
 8008274:	89a2      	ldrh	r2, [r4, #12]
 8008276:	1c43      	adds	r3, r0, #1
 8008278:	d106      	bne.n	8008288 <__sflush_r+0x68>
 800827a:	6829      	ldr	r1, [r5, #0]
 800827c:	291d      	cmp	r1, #29
 800827e:	d846      	bhi.n	800830e <__sflush_r+0xee>
 8008280:	4b29      	ldr	r3, [pc, #164]	@ (8008328 <__sflush_r+0x108>)
 8008282:	40cb      	lsrs	r3, r1
 8008284:	07db      	lsls	r3, r3, #31
 8008286:	d542      	bpl.n	800830e <__sflush_r+0xee>
 8008288:	2300      	movs	r3, #0
 800828a:	6063      	str	r3, [r4, #4]
 800828c:	6923      	ldr	r3, [r4, #16]
 800828e:	6023      	str	r3, [r4, #0]
 8008290:	04d2      	lsls	r2, r2, #19
 8008292:	d505      	bpl.n	80082a0 <__sflush_r+0x80>
 8008294:	1c43      	adds	r3, r0, #1
 8008296:	d102      	bne.n	800829e <__sflush_r+0x7e>
 8008298:	682b      	ldr	r3, [r5, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d100      	bne.n	80082a0 <__sflush_r+0x80>
 800829e:	6560      	str	r0, [r4, #84]	@ 0x54
 80082a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082a2:	602e      	str	r6, [r5, #0]
 80082a4:	2900      	cmp	r1, #0
 80082a6:	d017      	beq.n	80082d8 <__sflush_r+0xb8>
 80082a8:	0023      	movs	r3, r4
 80082aa:	3344      	adds	r3, #68	@ 0x44
 80082ac:	4299      	cmp	r1, r3
 80082ae:	d002      	beq.n	80082b6 <__sflush_r+0x96>
 80082b0:	0028      	movs	r0, r5
 80082b2:	f7ff f9b5 	bl	8007620 <_free_r>
 80082b6:	2300      	movs	r3, #0
 80082b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80082ba:	e00d      	b.n	80082d8 <__sflush_r+0xb8>
 80082bc:	2301      	movs	r3, #1
 80082be:	0028      	movs	r0, r5
 80082c0:	47b8      	blx	r7
 80082c2:	0002      	movs	r2, r0
 80082c4:	1c43      	adds	r3, r0, #1
 80082c6:	d1c6      	bne.n	8008256 <__sflush_r+0x36>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0c3      	beq.n	8008256 <__sflush_r+0x36>
 80082ce:	2b1d      	cmp	r3, #29
 80082d0:	d001      	beq.n	80082d6 <__sflush_r+0xb6>
 80082d2:	2b16      	cmp	r3, #22
 80082d4:	d11a      	bne.n	800830c <__sflush_r+0xec>
 80082d6:	602e      	str	r6, [r5, #0]
 80082d8:	2000      	movs	r0, #0
 80082da:	e01e      	b.n	800831a <__sflush_r+0xfa>
 80082dc:	690e      	ldr	r6, [r1, #16]
 80082de:	2e00      	cmp	r6, #0
 80082e0:	d0fa      	beq.n	80082d8 <__sflush_r+0xb8>
 80082e2:	680f      	ldr	r7, [r1, #0]
 80082e4:	600e      	str	r6, [r1, #0]
 80082e6:	1bba      	subs	r2, r7, r6
 80082e8:	9201      	str	r2, [sp, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	079b      	lsls	r3, r3, #30
 80082ee:	d100      	bne.n	80082f2 <__sflush_r+0xd2>
 80082f0:	694a      	ldr	r2, [r1, #20]
 80082f2:	60a2      	str	r2, [r4, #8]
 80082f4:	9b01      	ldr	r3, [sp, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	ddee      	ble.n	80082d8 <__sflush_r+0xb8>
 80082fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80082fc:	0032      	movs	r2, r6
 80082fe:	001f      	movs	r7, r3
 8008300:	0028      	movs	r0, r5
 8008302:	9b01      	ldr	r3, [sp, #4]
 8008304:	6a21      	ldr	r1, [r4, #32]
 8008306:	47b8      	blx	r7
 8008308:	2800      	cmp	r0, #0
 800830a:	dc07      	bgt.n	800831c <__sflush_r+0xfc>
 800830c:	89a2      	ldrh	r2, [r4, #12]
 800830e:	2340      	movs	r3, #64	@ 0x40
 8008310:	2001      	movs	r0, #1
 8008312:	4313      	orrs	r3, r2
 8008314:	b21b      	sxth	r3, r3
 8008316:	81a3      	strh	r3, [r4, #12]
 8008318:	4240      	negs	r0, r0
 800831a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800831c:	9b01      	ldr	r3, [sp, #4]
 800831e:	1836      	adds	r6, r6, r0
 8008320:	1a1b      	subs	r3, r3, r0
 8008322:	9301      	str	r3, [sp, #4]
 8008324:	e7e6      	b.n	80082f4 <__sflush_r+0xd4>
 8008326:	46c0      	nop			@ (mov r8, r8)
 8008328:	20400001 	.word	0x20400001

0800832c <_fflush_r>:
 800832c:	690b      	ldr	r3, [r1, #16]
 800832e:	b570      	push	{r4, r5, r6, lr}
 8008330:	0005      	movs	r5, r0
 8008332:	000c      	movs	r4, r1
 8008334:	2b00      	cmp	r3, #0
 8008336:	d102      	bne.n	800833e <_fflush_r+0x12>
 8008338:	2500      	movs	r5, #0
 800833a:	0028      	movs	r0, r5
 800833c:	bd70      	pop	{r4, r5, r6, pc}
 800833e:	2800      	cmp	r0, #0
 8008340:	d004      	beq.n	800834c <_fflush_r+0x20>
 8008342:	6a03      	ldr	r3, [r0, #32]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <_fflush_r+0x20>
 8008348:	f7fe f9c0 	bl	80066cc <__sinit>
 800834c:	220c      	movs	r2, #12
 800834e:	5ea3      	ldrsh	r3, [r4, r2]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d0f1      	beq.n	8008338 <_fflush_r+0xc>
 8008354:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008356:	07d2      	lsls	r2, r2, #31
 8008358:	d404      	bmi.n	8008364 <_fflush_r+0x38>
 800835a:	059b      	lsls	r3, r3, #22
 800835c:	d402      	bmi.n	8008364 <_fflush_r+0x38>
 800835e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008360:	f7fe fadb 	bl	800691a <__retarget_lock_acquire_recursive>
 8008364:	0028      	movs	r0, r5
 8008366:	0021      	movs	r1, r4
 8008368:	f7ff ff5a 	bl	8008220 <__sflush_r>
 800836c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800836e:	0005      	movs	r5, r0
 8008370:	07db      	lsls	r3, r3, #31
 8008372:	d4e2      	bmi.n	800833a <_fflush_r+0xe>
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	059b      	lsls	r3, r3, #22
 8008378:	d4df      	bmi.n	800833a <_fflush_r+0xe>
 800837a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800837c:	f7fe face 	bl	800691c <__retarget_lock_release_recursive>
 8008380:	e7db      	b.n	800833a <_fflush_r+0xe>

08008382 <memmove>:
 8008382:	b510      	push	{r4, lr}
 8008384:	4288      	cmp	r0, r1
 8008386:	d902      	bls.n	800838e <memmove+0xc>
 8008388:	188b      	adds	r3, r1, r2
 800838a:	4298      	cmp	r0, r3
 800838c:	d308      	bcc.n	80083a0 <memmove+0x1e>
 800838e:	2300      	movs	r3, #0
 8008390:	429a      	cmp	r2, r3
 8008392:	d007      	beq.n	80083a4 <memmove+0x22>
 8008394:	5ccc      	ldrb	r4, [r1, r3]
 8008396:	54c4      	strb	r4, [r0, r3]
 8008398:	3301      	adds	r3, #1
 800839a:	e7f9      	b.n	8008390 <memmove+0xe>
 800839c:	5c8b      	ldrb	r3, [r1, r2]
 800839e:	5483      	strb	r3, [r0, r2]
 80083a0:	3a01      	subs	r2, #1
 80083a2:	d2fb      	bcs.n	800839c <memmove+0x1a>
 80083a4:	bd10      	pop	{r4, pc}
	...

080083a8 <_sbrk_r>:
 80083a8:	2300      	movs	r3, #0
 80083aa:	b570      	push	{r4, r5, r6, lr}
 80083ac:	4d06      	ldr	r5, [pc, #24]	@ (80083c8 <_sbrk_r+0x20>)
 80083ae:	0004      	movs	r4, r0
 80083b0:	0008      	movs	r0, r1
 80083b2:	602b      	str	r3, [r5, #0]
 80083b4:	f7fb f876 	bl	80034a4 <_sbrk>
 80083b8:	1c43      	adds	r3, r0, #1
 80083ba:	d103      	bne.n	80083c4 <_sbrk_r+0x1c>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d000      	beq.n	80083c4 <_sbrk_r+0x1c>
 80083c2:	6023      	str	r3, [r4, #0]
 80083c4:	bd70      	pop	{r4, r5, r6, pc}
 80083c6:	46c0      	nop			@ (mov r8, r8)
 80083c8:	200004e4 	.word	0x200004e4

080083cc <memcpy>:
 80083cc:	2300      	movs	r3, #0
 80083ce:	b510      	push	{r4, lr}
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d100      	bne.n	80083d6 <memcpy+0xa>
 80083d4:	bd10      	pop	{r4, pc}
 80083d6:	5ccc      	ldrb	r4, [r1, r3]
 80083d8:	54c4      	strb	r4, [r0, r3]
 80083da:	3301      	adds	r3, #1
 80083dc:	e7f8      	b.n	80083d0 <memcpy+0x4>
	...

080083e0 <__assert_func>:
 80083e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80083e2:	0014      	movs	r4, r2
 80083e4:	001a      	movs	r2, r3
 80083e6:	4b09      	ldr	r3, [pc, #36]	@ (800840c <__assert_func+0x2c>)
 80083e8:	0005      	movs	r5, r0
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	000e      	movs	r6, r1
 80083ee:	68d8      	ldr	r0, [r3, #12]
 80083f0:	4b07      	ldr	r3, [pc, #28]	@ (8008410 <__assert_func+0x30>)
 80083f2:	2c00      	cmp	r4, #0
 80083f4:	d101      	bne.n	80083fa <__assert_func+0x1a>
 80083f6:	4b07      	ldr	r3, [pc, #28]	@ (8008414 <__assert_func+0x34>)
 80083f8:	001c      	movs	r4, r3
 80083fa:	4907      	ldr	r1, [pc, #28]	@ (8008418 <__assert_func+0x38>)
 80083fc:	9301      	str	r3, [sp, #4]
 80083fe:	9402      	str	r4, [sp, #8]
 8008400:	002b      	movs	r3, r5
 8008402:	9600      	str	r6, [sp, #0]
 8008404:	f000 f886 	bl	8008514 <fiprintf>
 8008408:	f000 f894 	bl	8008534 <abort>
 800840c:	2000001c 	.word	0x2000001c
 8008410:	08009edd 	.word	0x08009edd
 8008414:	08009f18 	.word	0x08009f18
 8008418:	08009eea 	.word	0x08009eea

0800841c <_calloc_r>:
 800841c:	b570      	push	{r4, r5, r6, lr}
 800841e:	0c0b      	lsrs	r3, r1, #16
 8008420:	0c15      	lsrs	r5, r2, #16
 8008422:	2b00      	cmp	r3, #0
 8008424:	d11e      	bne.n	8008464 <_calloc_r+0x48>
 8008426:	2d00      	cmp	r5, #0
 8008428:	d10c      	bne.n	8008444 <_calloc_r+0x28>
 800842a:	b289      	uxth	r1, r1
 800842c:	b294      	uxth	r4, r2
 800842e:	434c      	muls	r4, r1
 8008430:	0021      	movs	r1, r4
 8008432:	f7ff f96b 	bl	800770c <_malloc_r>
 8008436:	1e05      	subs	r5, r0, #0
 8008438:	d01b      	beq.n	8008472 <_calloc_r+0x56>
 800843a:	0022      	movs	r2, r4
 800843c:	2100      	movs	r1, #0
 800843e:	f7fe f9e7 	bl	8006810 <memset>
 8008442:	e016      	b.n	8008472 <_calloc_r+0x56>
 8008444:	1c2b      	adds	r3, r5, #0
 8008446:	1c0c      	adds	r4, r1, #0
 8008448:	b289      	uxth	r1, r1
 800844a:	b292      	uxth	r2, r2
 800844c:	434a      	muls	r2, r1
 800844e:	b29b      	uxth	r3, r3
 8008450:	b2a1      	uxth	r1, r4
 8008452:	4359      	muls	r1, r3
 8008454:	0c14      	lsrs	r4, r2, #16
 8008456:	190c      	adds	r4, r1, r4
 8008458:	0c23      	lsrs	r3, r4, #16
 800845a:	d107      	bne.n	800846c <_calloc_r+0x50>
 800845c:	0424      	lsls	r4, r4, #16
 800845e:	b292      	uxth	r2, r2
 8008460:	4314      	orrs	r4, r2
 8008462:	e7e5      	b.n	8008430 <_calloc_r+0x14>
 8008464:	2d00      	cmp	r5, #0
 8008466:	d101      	bne.n	800846c <_calloc_r+0x50>
 8008468:	1c14      	adds	r4, r2, #0
 800846a:	e7ed      	b.n	8008448 <_calloc_r+0x2c>
 800846c:	230c      	movs	r3, #12
 800846e:	2500      	movs	r5, #0
 8008470:	6003      	str	r3, [r0, #0]
 8008472:	0028      	movs	r0, r5
 8008474:	bd70      	pop	{r4, r5, r6, pc}

08008476 <__ascii_mbtowc>:
 8008476:	b082      	sub	sp, #8
 8008478:	2900      	cmp	r1, #0
 800847a:	d100      	bne.n	800847e <__ascii_mbtowc+0x8>
 800847c:	a901      	add	r1, sp, #4
 800847e:	1e10      	subs	r0, r2, #0
 8008480:	d006      	beq.n	8008490 <__ascii_mbtowc+0x1a>
 8008482:	2b00      	cmp	r3, #0
 8008484:	d006      	beq.n	8008494 <__ascii_mbtowc+0x1e>
 8008486:	7813      	ldrb	r3, [r2, #0]
 8008488:	600b      	str	r3, [r1, #0]
 800848a:	7810      	ldrb	r0, [r2, #0]
 800848c:	1e43      	subs	r3, r0, #1
 800848e:	4198      	sbcs	r0, r3
 8008490:	b002      	add	sp, #8
 8008492:	4770      	bx	lr
 8008494:	2002      	movs	r0, #2
 8008496:	4240      	negs	r0, r0
 8008498:	e7fa      	b.n	8008490 <__ascii_mbtowc+0x1a>

0800849a <_realloc_r>:
 800849a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800849c:	0006      	movs	r6, r0
 800849e:	000c      	movs	r4, r1
 80084a0:	0015      	movs	r5, r2
 80084a2:	2900      	cmp	r1, #0
 80084a4:	d105      	bne.n	80084b2 <_realloc_r+0x18>
 80084a6:	0011      	movs	r1, r2
 80084a8:	f7ff f930 	bl	800770c <_malloc_r>
 80084ac:	0004      	movs	r4, r0
 80084ae:	0020      	movs	r0, r4
 80084b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80084b2:	2a00      	cmp	r2, #0
 80084b4:	d103      	bne.n	80084be <_realloc_r+0x24>
 80084b6:	f7ff f8b3 	bl	8007620 <_free_r>
 80084ba:	002c      	movs	r4, r5
 80084bc:	e7f7      	b.n	80084ae <_realloc_r+0x14>
 80084be:	f000 f840 	bl	8008542 <_malloc_usable_size_r>
 80084c2:	0007      	movs	r7, r0
 80084c4:	4285      	cmp	r5, r0
 80084c6:	d802      	bhi.n	80084ce <_realloc_r+0x34>
 80084c8:	0843      	lsrs	r3, r0, #1
 80084ca:	42ab      	cmp	r3, r5
 80084cc:	d3ef      	bcc.n	80084ae <_realloc_r+0x14>
 80084ce:	0029      	movs	r1, r5
 80084d0:	0030      	movs	r0, r6
 80084d2:	f7ff f91b 	bl	800770c <_malloc_r>
 80084d6:	9001      	str	r0, [sp, #4]
 80084d8:	2800      	cmp	r0, #0
 80084da:	d101      	bne.n	80084e0 <_realloc_r+0x46>
 80084dc:	9c01      	ldr	r4, [sp, #4]
 80084de:	e7e6      	b.n	80084ae <_realloc_r+0x14>
 80084e0:	002a      	movs	r2, r5
 80084e2:	42bd      	cmp	r5, r7
 80084e4:	d900      	bls.n	80084e8 <_realloc_r+0x4e>
 80084e6:	003a      	movs	r2, r7
 80084e8:	0021      	movs	r1, r4
 80084ea:	9801      	ldr	r0, [sp, #4]
 80084ec:	f7ff ff6e 	bl	80083cc <memcpy>
 80084f0:	0021      	movs	r1, r4
 80084f2:	0030      	movs	r0, r6
 80084f4:	f7ff f894 	bl	8007620 <_free_r>
 80084f8:	e7f0      	b.n	80084dc <_realloc_r+0x42>

080084fa <__ascii_wctomb>:
 80084fa:	0003      	movs	r3, r0
 80084fc:	1e08      	subs	r0, r1, #0
 80084fe:	d005      	beq.n	800850c <__ascii_wctomb+0x12>
 8008500:	2aff      	cmp	r2, #255	@ 0xff
 8008502:	d904      	bls.n	800850e <__ascii_wctomb+0x14>
 8008504:	228a      	movs	r2, #138	@ 0x8a
 8008506:	2001      	movs	r0, #1
 8008508:	601a      	str	r2, [r3, #0]
 800850a:	4240      	negs	r0, r0
 800850c:	4770      	bx	lr
 800850e:	2001      	movs	r0, #1
 8008510:	700a      	strb	r2, [r1, #0]
 8008512:	e7fb      	b.n	800850c <__ascii_wctomb+0x12>

08008514 <fiprintf>:
 8008514:	b40e      	push	{r1, r2, r3}
 8008516:	b517      	push	{r0, r1, r2, r4, lr}
 8008518:	4c05      	ldr	r4, [pc, #20]	@ (8008530 <fiprintf+0x1c>)
 800851a:	ab05      	add	r3, sp, #20
 800851c:	cb04      	ldmia	r3!, {r2}
 800851e:	0001      	movs	r1, r0
 8008520:	6820      	ldr	r0, [r4, #0]
 8008522:	9301      	str	r3, [sp, #4]
 8008524:	f000 f83c 	bl	80085a0 <_vfiprintf_r>
 8008528:	bc1e      	pop	{r1, r2, r3, r4}
 800852a:	bc08      	pop	{r3}
 800852c:	b003      	add	sp, #12
 800852e:	4718      	bx	r3
 8008530:	2000001c 	.word	0x2000001c

08008534 <abort>:
 8008534:	2006      	movs	r0, #6
 8008536:	b510      	push	{r4, lr}
 8008538:	f000 fa18 	bl	800896c <raise>
 800853c:	2001      	movs	r0, #1
 800853e:	f7fa ff3e 	bl	80033be <_exit>

08008542 <_malloc_usable_size_r>:
 8008542:	1f0b      	subs	r3, r1, #4
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	1f18      	subs	r0, r3, #4
 8008548:	2b00      	cmp	r3, #0
 800854a:	da01      	bge.n	8008550 <_malloc_usable_size_r+0xe>
 800854c:	580b      	ldr	r3, [r1, r0]
 800854e:	18c0      	adds	r0, r0, r3
 8008550:	4770      	bx	lr

08008552 <__sfputc_r>:
 8008552:	6893      	ldr	r3, [r2, #8]
 8008554:	b510      	push	{r4, lr}
 8008556:	3b01      	subs	r3, #1
 8008558:	6093      	str	r3, [r2, #8]
 800855a:	2b00      	cmp	r3, #0
 800855c:	da04      	bge.n	8008568 <__sfputc_r+0x16>
 800855e:	6994      	ldr	r4, [r2, #24]
 8008560:	42a3      	cmp	r3, r4
 8008562:	db07      	blt.n	8008574 <__sfputc_r+0x22>
 8008564:	290a      	cmp	r1, #10
 8008566:	d005      	beq.n	8008574 <__sfputc_r+0x22>
 8008568:	6813      	ldr	r3, [r2, #0]
 800856a:	1c58      	adds	r0, r3, #1
 800856c:	6010      	str	r0, [r2, #0]
 800856e:	7019      	strb	r1, [r3, #0]
 8008570:	0008      	movs	r0, r1
 8008572:	bd10      	pop	{r4, pc}
 8008574:	f000 f930 	bl	80087d8 <__swbuf_r>
 8008578:	0001      	movs	r1, r0
 800857a:	e7f9      	b.n	8008570 <__sfputc_r+0x1e>

0800857c <__sfputs_r>:
 800857c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857e:	0006      	movs	r6, r0
 8008580:	000f      	movs	r7, r1
 8008582:	0014      	movs	r4, r2
 8008584:	18d5      	adds	r5, r2, r3
 8008586:	42ac      	cmp	r4, r5
 8008588:	d101      	bne.n	800858e <__sfputs_r+0x12>
 800858a:	2000      	movs	r0, #0
 800858c:	e007      	b.n	800859e <__sfputs_r+0x22>
 800858e:	7821      	ldrb	r1, [r4, #0]
 8008590:	003a      	movs	r2, r7
 8008592:	0030      	movs	r0, r6
 8008594:	f7ff ffdd 	bl	8008552 <__sfputc_r>
 8008598:	3401      	adds	r4, #1
 800859a:	1c43      	adds	r3, r0, #1
 800859c:	d1f3      	bne.n	8008586 <__sfputs_r+0xa>
 800859e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085a0 <_vfiprintf_r>:
 80085a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085a2:	b0a1      	sub	sp, #132	@ 0x84
 80085a4:	000f      	movs	r7, r1
 80085a6:	0015      	movs	r5, r2
 80085a8:	001e      	movs	r6, r3
 80085aa:	9003      	str	r0, [sp, #12]
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d004      	beq.n	80085ba <_vfiprintf_r+0x1a>
 80085b0:	6a03      	ldr	r3, [r0, #32]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d101      	bne.n	80085ba <_vfiprintf_r+0x1a>
 80085b6:	f7fe f889 	bl	80066cc <__sinit>
 80085ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085bc:	07db      	lsls	r3, r3, #31
 80085be:	d405      	bmi.n	80085cc <_vfiprintf_r+0x2c>
 80085c0:	89bb      	ldrh	r3, [r7, #12]
 80085c2:	059b      	lsls	r3, r3, #22
 80085c4:	d402      	bmi.n	80085cc <_vfiprintf_r+0x2c>
 80085c6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80085c8:	f7fe f9a7 	bl	800691a <__retarget_lock_acquire_recursive>
 80085cc:	89bb      	ldrh	r3, [r7, #12]
 80085ce:	071b      	lsls	r3, r3, #28
 80085d0:	d502      	bpl.n	80085d8 <_vfiprintf_r+0x38>
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d113      	bne.n	8008600 <_vfiprintf_r+0x60>
 80085d8:	0039      	movs	r1, r7
 80085da:	9803      	ldr	r0, [sp, #12]
 80085dc:	f000 f93e 	bl	800885c <__swsetup_r>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d00d      	beq.n	8008600 <_vfiprintf_r+0x60>
 80085e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085e6:	07db      	lsls	r3, r3, #31
 80085e8:	d503      	bpl.n	80085f2 <_vfiprintf_r+0x52>
 80085ea:	2001      	movs	r0, #1
 80085ec:	4240      	negs	r0, r0
 80085ee:	b021      	add	sp, #132	@ 0x84
 80085f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085f2:	89bb      	ldrh	r3, [r7, #12]
 80085f4:	059b      	lsls	r3, r3, #22
 80085f6:	d4f8      	bmi.n	80085ea <_vfiprintf_r+0x4a>
 80085f8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80085fa:	f7fe f98f 	bl	800691c <__retarget_lock_release_recursive>
 80085fe:	e7f4      	b.n	80085ea <_vfiprintf_r+0x4a>
 8008600:	2300      	movs	r3, #0
 8008602:	ac08      	add	r4, sp, #32
 8008604:	6163      	str	r3, [r4, #20]
 8008606:	3320      	adds	r3, #32
 8008608:	7663      	strb	r3, [r4, #25]
 800860a:	3310      	adds	r3, #16
 800860c:	76a3      	strb	r3, [r4, #26]
 800860e:	9607      	str	r6, [sp, #28]
 8008610:	002e      	movs	r6, r5
 8008612:	7833      	ldrb	r3, [r6, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <_vfiprintf_r+0x7c>
 8008618:	2b25      	cmp	r3, #37	@ 0x25
 800861a:	d148      	bne.n	80086ae <_vfiprintf_r+0x10e>
 800861c:	1b73      	subs	r3, r6, r5
 800861e:	9305      	str	r3, [sp, #20]
 8008620:	42ae      	cmp	r6, r5
 8008622:	d00b      	beq.n	800863c <_vfiprintf_r+0x9c>
 8008624:	002a      	movs	r2, r5
 8008626:	0039      	movs	r1, r7
 8008628:	9803      	ldr	r0, [sp, #12]
 800862a:	f7ff ffa7 	bl	800857c <__sfputs_r>
 800862e:	3001      	adds	r0, #1
 8008630:	d100      	bne.n	8008634 <_vfiprintf_r+0x94>
 8008632:	e0ae      	b.n	8008792 <_vfiprintf_r+0x1f2>
 8008634:	6963      	ldr	r3, [r4, #20]
 8008636:	9a05      	ldr	r2, [sp, #20]
 8008638:	189b      	adds	r3, r3, r2
 800863a:	6163      	str	r3, [r4, #20]
 800863c:	7833      	ldrb	r3, [r6, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d100      	bne.n	8008644 <_vfiprintf_r+0xa4>
 8008642:	e0a6      	b.n	8008792 <_vfiprintf_r+0x1f2>
 8008644:	2201      	movs	r2, #1
 8008646:	2300      	movs	r3, #0
 8008648:	4252      	negs	r2, r2
 800864a:	6062      	str	r2, [r4, #4]
 800864c:	a904      	add	r1, sp, #16
 800864e:	3254      	adds	r2, #84	@ 0x54
 8008650:	1852      	adds	r2, r2, r1
 8008652:	1c75      	adds	r5, r6, #1
 8008654:	6023      	str	r3, [r4, #0]
 8008656:	60e3      	str	r3, [r4, #12]
 8008658:	60a3      	str	r3, [r4, #8]
 800865a:	7013      	strb	r3, [r2, #0]
 800865c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800865e:	4b59      	ldr	r3, [pc, #356]	@ (80087c4 <_vfiprintf_r+0x224>)
 8008660:	2205      	movs	r2, #5
 8008662:	0018      	movs	r0, r3
 8008664:	7829      	ldrb	r1, [r5, #0]
 8008666:	9305      	str	r3, [sp, #20]
 8008668:	f7fe f959 	bl	800691e <memchr>
 800866c:	1c6e      	adds	r6, r5, #1
 800866e:	2800      	cmp	r0, #0
 8008670:	d11f      	bne.n	80086b2 <_vfiprintf_r+0x112>
 8008672:	6822      	ldr	r2, [r4, #0]
 8008674:	06d3      	lsls	r3, r2, #27
 8008676:	d504      	bpl.n	8008682 <_vfiprintf_r+0xe2>
 8008678:	2353      	movs	r3, #83	@ 0x53
 800867a:	a904      	add	r1, sp, #16
 800867c:	185b      	adds	r3, r3, r1
 800867e:	2120      	movs	r1, #32
 8008680:	7019      	strb	r1, [r3, #0]
 8008682:	0713      	lsls	r3, r2, #28
 8008684:	d504      	bpl.n	8008690 <_vfiprintf_r+0xf0>
 8008686:	2353      	movs	r3, #83	@ 0x53
 8008688:	a904      	add	r1, sp, #16
 800868a:	185b      	adds	r3, r3, r1
 800868c:	212b      	movs	r1, #43	@ 0x2b
 800868e:	7019      	strb	r1, [r3, #0]
 8008690:	782b      	ldrb	r3, [r5, #0]
 8008692:	2b2a      	cmp	r3, #42	@ 0x2a
 8008694:	d016      	beq.n	80086c4 <_vfiprintf_r+0x124>
 8008696:	002e      	movs	r6, r5
 8008698:	2100      	movs	r1, #0
 800869a:	200a      	movs	r0, #10
 800869c:	68e3      	ldr	r3, [r4, #12]
 800869e:	7832      	ldrb	r2, [r6, #0]
 80086a0:	1c75      	adds	r5, r6, #1
 80086a2:	3a30      	subs	r2, #48	@ 0x30
 80086a4:	2a09      	cmp	r2, #9
 80086a6:	d950      	bls.n	800874a <_vfiprintf_r+0x1aa>
 80086a8:	2900      	cmp	r1, #0
 80086aa:	d111      	bne.n	80086d0 <_vfiprintf_r+0x130>
 80086ac:	e017      	b.n	80086de <_vfiprintf_r+0x13e>
 80086ae:	3601      	adds	r6, #1
 80086b0:	e7af      	b.n	8008612 <_vfiprintf_r+0x72>
 80086b2:	9b05      	ldr	r3, [sp, #20]
 80086b4:	6822      	ldr	r2, [r4, #0]
 80086b6:	1ac0      	subs	r0, r0, r3
 80086b8:	2301      	movs	r3, #1
 80086ba:	4083      	lsls	r3, r0
 80086bc:	4313      	orrs	r3, r2
 80086be:	0035      	movs	r5, r6
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	e7cc      	b.n	800865e <_vfiprintf_r+0xbe>
 80086c4:	9b07      	ldr	r3, [sp, #28]
 80086c6:	1d19      	adds	r1, r3, #4
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	9107      	str	r1, [sp, #28]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	db01      	blt.n	80086d4 <_vfiprintf_r+0x134>
 80086d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086d2:	e004      	b.n	80086de <_vfiprintf_r+0x13e>
 80086d4:	425b      	negs	r3, r3
 80086d6:	60e3      	str	r3, [r4, #12]
 80086d8:	2302      	movs	r3, #2
 80086da:	4313      	orrs	r3, r2
 80086dc:	6023      	str	r3, [r4, #0]
 80086de:	7833      	ldrb	r3, [r6, #0]
 80086e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80086e2:	d10c      	bne.n	80086fe <_vfiprintf_r+0x15e>
 80086e4:	7873      	ldrb	r3, [r6, #1]
 80086e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80086e8:	d134      	bne.n	8008754 <_vfiprintf_r+0x1b4>
 80086ea:	9b07      	ldr	r3, [sp, #28]
 80086ec:	3602      	adds	r6, #2
 80086ee:	1d1a      	adds	r2, r3, #4
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	9207      	str	r2, [sp, #28]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	da01      	bge.n	80086fc <_vfiprintf_r+0x15c>
 80086f8:	2301      	movs	r3, #1
 80086fa:	425b      	negs	r3, r3
 80086fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80086fe:	4d32      	ldr	r5, [pc, #200]	@ (80087c8 <_vfiprintf_r+0x228>)
 8008700:	2203      	movs	r2, #3
 8008702:	0028      	movs	r0, r5
 8008704:	7831      	ldrb	r1, [r6, #0]
 8008706:	f7fe f90a 	bl	800691e <memchr>
 800870a:	2800      	cmp	r0, #0
 800870c:	d006      	beq.n	800871c <_vfiprintf_r+0x17c>
 800870e:	2340      	movs	r3, #64	@ 0x40
 8008710:	1b40      	subs	r0, r0, r5
 8008712:	4083      	lsls	r3, r0
 8008714:	6822      	ldr	r2, [r4, #0]
 8008716:	3601      	adds	r6, #1
 8008718:	4313      	orrs	r3, r2
 800871a:	6023      	str	r3, [r4, #0]
 800871c:	7831      	ldrb	r1, [r6, #0]
 800871e:	2206      	movs	r2, #6
 8008720:	482a      	ldr	r0, [pc, #168]	@ (80087cc <_vfiprintf_r+0x22c>)
 8008722:	1c75      	adds	r5, r6, #1
 8008724:	7621      	strb	r1, [r4, #24]
 8008726:	f7fe f8fa 	bl	800691e <memchr>
 800872a:	2800      	cmp	r0, #0
 800872c:	d040      	beq.n	80087b0 <_vfiprintf_r+0x210>
 800872e:	4b28      	ldr	r3, [pc, #160]	@ (80087d0 <_vfiprintf_r+0x230>)
 8008730:	2b00      	cmp	r3, #0
 8008732:	d122      	bne.n	800877a <_vfiprintf_r+0x1da>
 8008734:	2207      	movs	r2, #7
 8008736:	9b07      	ldr	r3, [sp, #28]
 8008738:	3307      	adds	r3, #7
 800873a:	4393      	bics	r3, r2
 800873c:	3308      	adds	r3, #8
 800873e:	9307      	str	r3, [sp, #28]
 8008740:	6963      	ldr	r3, [r4, #20]
 8008742:	9a04      	ldr	r2, [sp, #16]
 8008744:	189b      	adds	r3, r3, r2
 8008746:	6163      	str	r3, [r4, #20]
 8008748:	e762      	b.n	8008610 <_vfiprintf_r+0x70>
 800874a:	4343      	muls	r3, r0
 800874c:	002e      	movs	r6, r5
 800874e:	2101      	movs	r1, #1
 8008750:	189b      	adds	r3, r3, r2
 8008752:	e7a4      	b.n	800869e <_vfiprintf_r+0xfe>
 8008754:	2300      	movs	r3, #0
 8008756:	200a      	movs	r0, #10
 8008758:	0019      	movs	r1, r3
 800875a:	3601      	adds	r6, #1
 800875c:	6063      	str	r3, [r4, #4]
 800875e:	7832      	ldrb	r2, [r6, #0]
 8008760:	1c75      	adds	r5, r6, #1
 8008762:	3a30      	subs	r2, #48	@ 0x30
 8008764:	2a09      	cmp	r2, #9
 8008766:	d903      	bls.n	8008770 <_vfiprintf_r+0x1d0>
 8008768:	2b00      	cmp	r3, #0
 800876a:	d0c8      	beq.n	80086fe <_vfiprintf_r+0x15e>
 800876c:	9109      	str	r1, [sp, #36]	@ 0x24
 800876e:	e7c6      	b.n	80086fe <_vfiprintf_r+0x15e>
 8008770:	4341      	muls	r1, r0
 8008772:	002e      	movs	r6, r5
 8008774:	2301      	movs	r3, #1
 8008776:	1889      	adds	r1, r1, r2
 8008778:	e7f1      	b.n	800875e <_vfiprintf_r+0x1be>
 800877a:	aa07      	add	r2, sp, #28
 800877c:	9200      	str	r2, [sp, #0]
 800877e:	0021      	movs	r1, r4
 8008780:	003a      	movs	r2, r7
 8008782:	4b14      	ldr	r3, [pc, #80]	@ (80087d4 <_vfiprintf_r+0x234>)
 8008784:	9803      	ldr	r0, [sp, #12]
 8008786:	f7fd fb57 	bl	8005e38 <_printf_float>
 800878a:	9004      	str	r0, [sp, #16]
 800878c:	9b04      	ldr	r3, [sp, #16]
 800878e:	3301      	adds	r3, #1
 8008790:	d1d6      	bne.n	8008740 <_vfiprintf_r+0x1a0>
 8008792:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008794:	07db      	lsls	r3, r3, #31
 8008796:	d405      	bmi.n	80087a4 <_vfiprintf_r+0x204>
 8008798:	89bb      	ldrh	r3, [r7, #12]
 800879a:	059b      	lsls	r3, r3, #22
 800879c:	d402      	bmi.n	80087a4 <_vfiprintf_r+0x204>
 800879e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80087a0:	f7fe f8bc 	bl	800691c <__retarget_lock_release_recursive>
 80087a4:	89bb      	ldrh	r3, [r7, #12]
 80087a6:	065b      	lsls	r3, r3, #25
 80087a8:	d500      	bpl.n	80087ac <_vfiprintf_r+0x20c>
 80087aa:	e71e      	b.n	80085ea <_vfiprintf_r+0x4a>
 80087ac:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80087ae:	e71e      	b.n	80085ee <_vfiprintf_r+0x4e>
 80087b0:	aa07      	add	r2, sp, #28
 80087b2:	9200      	str	r2, [sp, #0]
 80087b4:	0021      	movs	r1, r4
 80087b6:	003a      	movs	r2, r7
 80087b8:	4b06      	ldr	r3, [pc, #24]	@ (80087d4 <_vfiprintf_r+0x234>)
 80087ba:	9803      	ldr	r0, [sp, #12]
 80087bc:	f7fd fdea 	bl	8006394 <_printf_i>
 80087c0:	e7e3      	b.n	800878a <_vfiprintf_r+0x1ea>
 80087c2:	46c0      	nop			@ (mov r8, r8)
 80087c4:	08009ec2 	.word	0x08009ec2
 80087c8:	08009ec8 	.word	0x08009ec8
 80087cc:	08009ecc 	.word	0x08009ecc
 80087d0:	08005e39 	.word	0x08005e39
 80087d4:	0800857d 	.word	0x0800857d

080087d8 <__swbuf_r>:
 80087d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087da:	0006      	movs	r6, r0
 80087dc:	000d      	movs	r5, r1
 80087de:	0014      	movs	r4, r2
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d004      	beq.n	80087ee <__swbuf_r+0x16>
 80087e4:	6a03      	ldr	r3, [r0, #32]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d101      	bne.n	80087ee <__swbuf_r+0x16>
 80087ea:	f7fd ff6f 	bl	80066cc <__sinit>
 80087ee:	69a3      	ldr	r3, [r4, #24]
 80087f0:	60a3      	str	r3, [r4, #8]
 80087f2:	89a3      	ldrh	r3, [r4, #12]
 80087f4:	071b      	lsls	r3, r3, #28
 80087f6:	d502      	bpl.n	80087fe <__swbuf_r+0x26>
 80087f8:	6923      	ldr	r3, [r4, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d109      	bne.n	8008812 <__swbuf_r+0x3a>
 80087fe:	0021      	movs	r1, r4
 8008800:	0030      	movs	r0, r6
 8008802:	f000 f82b 	bl	800885c <__swsetup_r>
 8008806:	2800      	cmp	r0, #0
 8008808:	d003      	beq.n	8008812 <__swbuf_r+0x3a>
 800880a:	2501      	movs	r5, #1
 800880c:	426d      	negs	r5, r5
 800880e:	0028      	movs	r0, r5
 8008810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008812:	6923      	ldr	r3, [r4, #16]
 8008814:	6820      	ldr	r0, [r4, #0]
 8008816:	b2ef      	uxtb	r7, r5
 8008818:	1ac0      	subs	r0, r0, r3
 800881a:	6963      	ldr	r3, [r4, #20]
 800881c:	b2ed      	uxtb	r5, r5
 800881e:	4283      	cmp	r3, r0
 8008820:	dc05      	bgt.n	800882e <__swbuf_r+0x56>
 8008822:	0021      	movs	r1, r4
 8008824:	0030      	movs	r0, r6
 8008826:	f7ff fd81 	bl	800832c <_fflush_r>
 800882a:	2800      	cmp	r0, #0
 800882c:	d1ed      	bne.n	800880a <__swbuf_r+0x32>
 800882e:	68a3      	ldr	r3, [r4, #8]
 8008830:	3001      	adds	r0, #1
 8008832:	3b01      	subs	r3, #1
 8008834:	60a3      	str	r3, [r4, #8]
 8008836:	6823      	ldr	r3, [r4, #0]
 8008838:	1c5a      	adds	r2, r3, #1
 800883a:	6022      	str	r2, [r4, #0]
 800883c:	701f      	strb	r7, [r3, #0]
 800883e:	6963      	ldr	r3, [r4, #20]
 8008840:	4283      	cmp	r3, r0
 8008842:	d004      	beq.n	800884e <__swbuf_r+0x76>
 8008844:	89a3      	ldrh	r3, [r4, #12]
 8008846:	07db      	lsls	r3, r3, #31
 8008848:	d5e1      	bpl.n	800880e <__swbuf_r+0x36>
 800884a:	2d0a      	cmp	r5, #10
 800884c:	d1df      	bne.n	800880e <__swbuf_r+0x36>
 800884e:	0021      	movs	r1, r4
 8008850:	0030      	movs	r0, r6
 8008852:	f7ff fd6b 	bl	800832c <_fflush_r>
 8008856:	2800      	cmp	r0, #0
 8008858:	d0d9      	beq.n	800880e <__swbuf_r+0x36>
 800885a:	e7d6      	b.n	800880a <__swbuf_r+0x32>

0800885c <__swsetup_r>:
 800885c:	4b2d      	ldr	r3, [pc, #180]	@ (8008914 <__swsetup_r+0xb8>)
 800885e:	b570      	push	{r4, r5, r6, lr}
 8008860:	0005      	movs	r5, r0
 8008862:	6818      	ldr	r0, [r3, #0]
 8008864:	000c      	movs	r4, r1
 8008866:	2800      	cmp	r0, #0
 8008868:	d004      	beq.n	8008874 <__swsetup_r+0x18>
 800886a:	6a03      	ldr	r3, [r0, #32]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d101      	bne.n	8008874 <__swsetup_r+0x18>
 8008870:	f7fd ff2c 	bl	80066cc <__sinit>
 8008874:	220c      	movs	r2, #12
 8008876:	5ea3      	ldrsh	r3, [r4, r2]
 8008878:	071a      	lsls	r2, r3, #28
 800887a:	d423      	bmi.n	80088c4 <__swsetup_r+0x68>
 800887c:	06da      	lsls	r2, r3, #27
 800887e:	d407      	bmi.n	8008890 <__swsetup_r+0x34>
 8008880:	2209      	movs	r2, #9
 8008882:	602a      	str	r2, [r5, #0]
 8008884:	2240      	movs	r2, #64	@ 0x40
 8008886:	2001      	movs	r0, #1
 8008888:	4313      	orrs	r3, r2
 800888a:	81a3      	strh	r3, [r4, #12]
 800888c:	4240      	negs	r0, r0
 800888e:	e03a      	b.n	8008906 <__swsetup_r+0xaa>
 8008890:	075b      	lsls	r3, r3, #29
 8008892:	d513      	bpl.n	80088bc <__swsetup_r+0x60>
 8008894:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008896:	2900      	cmp	r1, #0
 8008898:	d008      	beq.n	80088ac <__swsetup_r+0x50>
 800889a:	0023      	movs	r3, r4
 800889c:	3344      	adds	r3, #68	@ 0x44
 800889e:	4299      	cmp	r1, r3
 80088a0:	d002      	beq.n	80088a8 <__swsetup_r+0x4c>
 80088a2:	0028      	movs	r0, r5
 80088a4:	f7fe febc 	bl	8007620 <_free_r>
 80088a8:	2300      	movs	r3, #0
 80088aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80088ac:	2224      	movs	r2, #36	@ 0x24
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	4393      	bics	r3, r2
 80088b2:	81a3      	strh	r3, [r4, #12]
 80088b4:	2300      	movs	r3, #0
 80088b6:	6063      	str	r3, [r4, #4]
 80088b8:	6923      	ldr	r3, [r4, #16]
 80088ba:	6023      	str	r3, [r4, #0]
 80088bc:	2308      	movs	r3, #8
 80088be:	89a2      	ldrh	r2, [r4, #12]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	81a3      	strh	r3, [r4, #12]
 80088c4:	6923      	ldr	r3, [r4, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10b      	bne.n	80088e2 <__swsetup_r+0x86>
 80088ca:	21a0      	movs	r1, #160	@ 0xa0
 80088cc:	2280      	movs	r2, #128	@ 0x80
 80088ce:	89a3      	ldrh	r3, [r4, #12]
 80088d0:	0089      	lsls	r1, r1, #2
 80088d2:	0092      	lsls	r2, r2, #2
 80088d4:	400b      	ands	r3, r1
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d003      	beq.n	80088e2 <__swsetup_r+0x86>
 80088da:	0021      	movs	r1, r4
 80088dc:	0028      	movs	r0, r5
 80088de:	f000 f88f 	bl	8008a00 <__smakebuf_r>
 80088e2:	220c      	movs	r2, #12
 80088e4:	5ea3      	ldrsh	r3, [r4, r2]
 80088e6:	2101      	movs	r1, #1
 80088e8:	001a      	movs	r2, r3
 80088ea:	400a      	ands	r2, r1
 80088ec:	420b      	tst	r3, r1
 80088ee:	d00b      	beq.n	8008908 <__swsetup_r+0xac>
 80088f0:	2200      	movs	r2, #0
 80088f2:	60a2      	str	r2, [r4, #8]
 80088f4:	6962      	ldr	r2, [r4, #20]
 80088f6:	4252      	negs	r2, r2
 80088f8:	61a2      	str	r2, [r4, #24]
 80088fa:	2000      	movs	r0, #0
 80088fc:	6922      	ldr	r2, [r4, #16]
 80088fe:	4282      	cmp	r2, r0
 8008900:	d101      	bne.n	8008906 <__swsetup_r+0xaa>
 8008902:	061a      	lsls	r2, r3, #24
 8008904:	d4be      	bmi.n	8008884 <__swsetup_r+0x28>
 8008906:	bd70      	pop	{r4, r5, r6, pc}
 8008908:	0799      	lsls	r1, r3, #30
 800890a:	d400      	bmi.n	800890e <__swsetup_r+0xb2>
 800890c:	6962      	ldr	r2, [r4, #20]
 800890e:	60a2      	str	r2, [r4, #8]
 8008910:	e7f3      	b.n	80088fa <__swsetup_r+0x9e>
 8008912:	46c0      	nop			@ (mov r8, r8)
 8008914:	2000001c 	.word	0x2000001c

08008918 <_raise_r>:
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	0004      	movs	r4, r0
 800891c:	000d      	movs	r5, r1
 800891e:	291f      	cmp	r1, #31
 8008920:	d904      	bls.n	800892c <_raise_r+0x14>
 8008922:	2316      	movs	r3, #22
 8008924:	6003      	str	r3, [r0, #0]
 8008926:	2001      	movs	r0, #1
 8008928:	4240      	negs	r0, r0
 800892a:	bd70      	pop	{r4, r5, r6, pc}
 800892c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800892e:	2b00      	cmp	r3, #0
 8008930:	d004      	beq.n	800893c <_raise_r+0x24>
 8008932:	008a      	lsls	r2, r1, #2
 8008934:	189b      	adds	r3, r3, r2
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	2a00      	cmp	r2, #0
 800893a:	d108      	bne.n	800894e <_raise_r+0x36>
 800893c:	0020      	movs	r0, r4
 800893e:	f000 f831 	bl	80089a4 <_getpid_r>
 8008942:	002a      	movs	r2, r5
 8008944:	0001      	movs	r1, r0
 8008946:	0020      	movs	r0, r4
 8008948:	f000 f81a 	bl	8008980 <_kill_r>
 800894c:	e7ed      	b.n	800892a <_raise_r+0x12>
 800894e:	2a01      	cmp	r2, #1
 8008950:	d009      	beq.n	8008966 <_raise_r+0x4e>
 8008952:	1c51      	adds	r1, r2, #1
 8008954:	d103      	bne.n	800895e <_raise_r+0x46>
 8008956:	2316      	movs	r3, #22
 8008958:	6003      	str	r3, [r0, #0]
 800895a:	2001      	movs	r0, #1
 800895c:	e7e5      	b.n	800892a <_raise_r+0x12>
 800895e:	2100      	movs	r1, #0
 8008960:	0028      	movs	r0, r5
 8008962:	6019      	str	r1, [r3, #0]
 8008964:	4790      	blx	r2
 8008966:	2000      	movs	r0, #0
 8008968:	e7df      	b.n	800892a <_raise_r+0x12>
	...

0800896c <raise>:
 800896c:	b510      	push	{r4, lr}
 800896e:	4b03      	ldr	r3, [pc, #12]	@ (800897c <raise+0x10>)
 8008970:	0001      	movs	r1, r0
 8008972:	6818      	ldr	r0, [r3, #0]
 8008974:	f7ff ffd0 	bl	8008918 <_raise_r>
 8008978:	bd10      	pop	{r4, pc}
 800897a:	46c0      	nop			@ (mov r8, r8)
 800897c:	2000001c 	.word	0x2000001c

08008980 <_kill_r>:
 8008980:	2300      	movs	r3, #0
 8008982:	b570      	push	{r4, r5, r6, lr}
 8008984:	4d06      	ldr	r5, [pc, #24]	@ (80089a0 <_kill_r+0x20>)
 8008986:	0004      	movs	r4, r0
 8008988:	0008      	movs	r0, r1
 800898a:	0011      	movs	r1, r2
 800898c:	602b      	str	r3, [r5, #0]
 800898e:	f7fa fd06 	bl	800339e <_kill>
 8008992:	1c43      	adds	r3, r0, #1
 8008994:	d103      	bne.n	800899e <_kill_r+0x1e>
 8008996:	682b      	ldr	r3, [r5, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d000      	beq.n	800899e <_kill_r+0x1e>
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	bd70      	pop	{r4, r5, r6, pc}
 80089a0:	200004e4 	.word	0x200004e4

080089a4 <_getpid_r>:
 80089a4:	b510      	push	{r4, lr}
 80089a6:	f7fa fcf4 	bl	8003392 <_getpid>
 80089aa:	bd10      	pop	{r4, pc}

080089ac <__swhatbuf_r>:
 80089ac:	b570      	push	{r4, r5, r6, lr}
 80089ae:	000e      	movs	r6, r1
 80089b0:	001d      	movs	r5, r3
 80089b2:	230e      	movs	r3, #14
 80089b4:	5ec9      	ldrsh	r1, [r1, r3]
 80089b6:	0014      	movs	r4, r2
 80089b8:	b096      	sub	sp, #88	@ 0x58
 80089ba:	2900      	cmp	r1, #0
 80089bc:	da0c      	bge.n	80089d8 <__swhatbuf_r+0x2c>
 80089be:	89b2      	ldrh	r2, [r6, #12]
 80089c0:	2380      	movs	r3, #128	@ 0x80
 80089c2:	0011      	movs	r1, r2
 80089c4:	4019      	ands	r1, r3
 80089c6:	421a      	tst	r2, r3
 80089c8:	d114      	bne.n	80089f4 <__swhatbuf_r+0x48>
 80089ca:	2380      	movs	r3, #128	@ 0x80
 80089cc:	00db      	lsls	r3, r3, #3
 80089ce:	2000      	movs	r0, #0
 80089d0:	6029      	str	r1, [r5, #0]
 80089d2:	6023      	str	r3, [r4, #0]
 80089d4:	b016      	add	sp, #88	@ 0x58
 80089d6:	bd70      	pop	{r4, r5, r6, pc}
 80089d8:	466a      	mov	r2, sp
 80089da:	f000 f853 	bl	8008a84 <_fstat_r>
 80089de:	2800      	cmp	r0, #0
 80089e0:	dbed      	blt.n	80089be <__swhatbuf_r+0x12>
 80089e2:	23f0      	movs	r3, #240	@ 0xf0
 80089e4:	9901      	ldr	r1, [sp, #4]
 80089e6:	021b      	lsls	r3, r3, #8
 80089e8:	4019      	ands	r1, r3
 80089ea:	4b04      	ldr	r3, [pc, #16]	@ (80089fc <__swhatbuf_r+0x50>)
 80089ec:	18c9      	adds	r1, r1, r3
 80089ee:	424b      	negs	r3, r1
 80089f0:	4159      	adcs	r1, r3
 80089f2:	e7ea      	b.n	80089ca <__swhatbuf_r+0x1e>
 80089f4:	2100      	movs	r1, #0
 80089f6:	2340      	movs	r3, #64	@ 0x40
 80089f8:	e7e9      	b.n	80089ce <__swhatbuf_r+0x22>
 80089fa:	46c0      	nop			@ (mov r8, r8)
 80089fc:	ffffe000 	.word	0xffffe000

08008a00 <__smakebuf_r>:
 8008a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a02:	2602      	movs	r6, #2
 8008a04:	898b      	ldrh	r3, [r1, #12]
 8008a06:	0005      	movs	r5, r0
 8008a08:	000c      	movs	r4, r1
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	4233      	tst	r3, r6
 8008a0e:	d007      	beq.n	8008a20 <__smakebuf_r+0x20>
 8008a10:	0023      	movs	r3, r4
 8008a12:	3347      	adds	r3, #71	@ 0x47
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	6123      	str	r3, [r4, #16]
 8008a18:	2301      	movs	r3, #1
 8008a1a:	6163      	str	r3, [r4, #20]
 8008a1c:	b005      	add	sp, #20
 8008a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a20:	ab03      	add	r3, sp, #12
 8008a22:	aa02      	add	r2, sp, #8
 8008a24:	f7ff ffc2 	bl	80089ac <__swhatbuf_r>
 8008a28:	9f02      	ldr	r7, [sp, #8]
 8008a2a:	9001      	str	r0, [sp, #4]
 8008a2c:	0039      	movs	r1, r7
 8008a2e:	0028      	movs	r0, r5
 8008a30:	f7fe fe6c 	bl	800770c <_malloc_r>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d108      	bne.n	8008a4a <__smakebuf_r+0x4a>
 8008a38:	220c      	movs	r2, #12
 8008a3a:	5ea3      	ldrsh	r3, [r4, r2]
 8008a3c:	059a      	lsls	r2, r3, #22
 8008a3e:	d4ed      	bmi.n	8008a1c <__smakebuf_r+0x1c>
 8008a40:	2203      	movs	r2, #3
 8008a42:	4393      	bics	r3, r2
 8008a44:	431e      	orrs	r6, r3
 8008a46:	81a6      	strh	r6, [r4, #12]
 8008a48:	e7e2      	b.n	8008a10 <__smakebuf_r+0x10>
 8008a4a:	2380      	movs	r3, #128	@ 0x80
 8008a4c:	89a2      	ldrh	r2, [r4, #12]
 8008a4e:	6020      	str	r0, [r4, #0]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	81a3      	strh	r3, [r4, #12]
 8008a54:	9b03      	ldr	r3, [sp, #12]
 8008a56:	6120      	str	r0, [r4, #16]
 8008a58:	6167      	str	r7, [r4, #20]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00c      	beq.n	8008a78 <__smakebuf_r+0x78>
 8008a5e:	0028      	movs	r0, r5
 8008a60:	230e      	movs	r3, #14
 8008a62:	5ee1      	ldrsh	r1, [r4, r3]
 8008a64:	f000 f820 	bl	8008aa8 <_isatty_r>
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	d005      	beq.n	8008a78 <__smakebuf_r+0x78>
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	89a2      	ldrh	r2, [r4, #12]
 8008a70:	439a      	bics	r2, r3
 8008a72:	3b02      	subs	r3, #2
 8008a74:	4313      	orrs	r3, r2
 8008a76:	81a3      	strh	r3, [r4, #12]
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	9a01      	ldr	r2, [sp, #4]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	81a3      	strh	r3, [r4, #12]
 8008a80:	e7cc      	b.n	8008a1c <__smakebuf_r+0x1c>
	...

08008a84 <_fstat_r>:
 8008a84:	2300      	movs	r3, #0
 8008a86:	b570      	push	{r4, r5, r6, lr}
 8008a88:	4d06      	ldr	r5, [pc, #24]	@ (8008aa4 <_fstat_r+0x20>)
 8008a8a:	0004      	movs	r4, r0
 8008a8c:	0008      	movs	r0, r1
 8008a8e:	0011      	movs	r1, r2
 8008a90:	602b      	str	r3, [r5, #0]
 8008a92:	f7fa fce4 	bl	800345e <_fstat>
 8008a96:	1c43      	adds	r3, r0, #1
 8008a98:	d103      	bne.n	8008aa2 <_fstat_r+0x1e>
 8008a9a:	682b      	ldr	r3, [r5, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d000      	beq.n	8008aa2 <_fstat_r+0x1e>
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	bd70      	pop	{r4, r5, r6, pc}
 8008aa4:	200004e4 	.word	0x200004e4

08008aa8 <_isatty_r>:
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	b570      	push	{r4, r5, r6, lr}
 8008aac:	4d06      	ldr	r5, [pc, #24]	@ (8008ac8 <_isatty_r+0x20>)
 8008aae:	0004      	movs	r4, r0
 8008ab0:	0008      	movs	r0, r1
 8008ab2:	602b      	str	r3, [r5, #0]
 8008ab4:	f7fa fce1 	bl	800347a <_isatty>
 8008ab8:	1c43      	adds	r3, r0, #1
 8008aba:	d103      	bne.n	8008ac4 <_isatty_r+0x1c>
 8008abc:	682b      	ldr	r3, [r5, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d000      	beq.n	8008ac4 <_isatty_r+0x1c>
 8008ac2:	6023      	str	r3, [r4, #0]
 8008ac4:	bd70      	pop	{r4, r5, r6, pc}
 8008ac6:	46c0      	nop			@ (mov r8, r8)
 8008ac8:	200004e4 	.word	0x200004e4

08008acc <log>:
 8008acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ace:	0004      	movs	r4, r0
 8008ad0:	000d      	movs	r5, r1
 8008ad2:	f000 f8ad 	bl	8008c30 <__ieee754_log>
 8008ad6:	0022      	movs	r2, r4
 8008ad8:	0006      	movs	r6, r0
 8008ada:	000f      	movs	r7, r1
 8008adc:	002b      	movs	r3, r5
 8008ade:	0020      	movs	r0, r4
 8008ae0:	0029      	movs	r1, r5
 8008ae2:	f7f9 ff21 	bl	8002928 <__aeabi_dcmpun>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d115      	bne.n	8008b16 <log+0x4a>
 8008aea:	2200      	movs	r2, #0
 8008aec:	2300      	movs	r3, #0
 8008aee:	0020      	movs	r0, r4
 8008af0:	0029      	movs	r1, r5
 8008af2:	f7f7 fcc5 	bl	8000480 <__aeabi_dcmpgt>
 8008af6:	2800      	cmp	r0, #0
 8008af8:	d10d      	bne.n	8008b16 <log+0x4a>
 8008afa:	2200      	movs	r2, #0
 8008afc:	2300      	movs	r3, #0
 8008afe:	0020      	movs	r0, r4
 8008b00:	0029      	movs	r1, r5
 8008b02:	f7f7 fca3 	bl	800044c <__aeabi_dcmpeq>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d008      	beq.n	8008b1c <log+0x50>
 8008b0a:	f7fd fedb 	bl	80068c4 <__errno>
 8008b0e:	2322      	movs	r3, #34	@ 0x22
 8008b10:	2600      	movs	r6, #0
 8008b12:	4f07      	ldr	r7, [pc, #28]	@ (8008b30 <log+0x64>)
 8008b14:	6003      	str	r3, [r0, #0]
 8008b16:	0030      	movs	r0, r6
 8008b18:	0039      	movs	r1, r7
 8008b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b1c:	f7fd fed2 	bl	80068c4 <__errno>
 8008b20:	2321      	movs	r3, #33	@ 0x21
 8008b22:	6003      	str	r3, [r0, #0]
 8008b24:	4803      	ldr	r0, [pc, #12]	@ (8008b34 <log+0x68>)
 8008b26:	f000 f87d 	bl	8008c24 <nan>
 8008b2a:	0006      	movs	r6, r0
 8008b2c:	000f      	movs	r7, r1
 8008b2e:	e7f2      	b.n	8008b16 <log+0x4a>
 8008b30:	fff00000 	.word	0xfff00000
 8008b34:	08009f18 	.word	0x08009f18

08008b38 <pow>:
 8008b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b3a:	0014      	movs	r4, r2
 8008b3c:	001d      	movs	r5, r3
 8008b3e:	9000      	str	r0, [sp, #0]
 8008b40:	9101      	str	r1, [sp, #4]
 8008b42:	f000 fa27 	bl	8008f94 <__ieee754_pow>
 8008b46:	0022      	movs	r2, r4
 8008b48:	0006      	movs	r6, r0
 8008b4a:	000f      	movs	r7, r1
 8008b4c:	002b      	movs	r3, r5
 8008b4e:	0020      	movs	r0, r4
 8008b50:	0029      	movs	r1, r5
 8008b52:	f7f9 fee9 	bl	8002928 <__aeabi_dcmpun>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d13f      	bne.n	8008bda <pow+0xa2>
 8008b5a:	9800      	ldr	r0, [sp, #0]
 8008b5c:	9901      	ldr	r1, [sp, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	2300      	movs	r3, #0
 8008b62:	f7f7 fc73 	bl	800044c <__aeabi_dcmpeq>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d019      	beq.n	8008b9e <pow+0x66>
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	0020      	movs	r0, r4
 8008b70:	0029      	movs	r1, r5
 8008b72:	f7f7 fc6b 	bl	800044c <__aeabi_dcmpeq>
 8008b76:	2800      	cmp	r0, #0
 8008b78:	d146      	bne.n	8008c08 <pow+0xd0>
 8008b7a:	0020      	movs	r0, r4
 8008b7c:	0029      	movs	r1, r5
 8008b7e:	f000 f849 	bl	8008c14 <finite>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d029      	beq.n	8008bda <pow+0xa2>
 8008b86:	2200      	movs	r2, #0
 8008b88:	2300      	movs	r3, #0
 8008b8a:	0020      	movs	r0, r4
 8008b8c:	0029      	movs	r1, r5
 8008b8e:	f7f7 fc63 	bl	8000458 <__aeabi_dcmplt>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d021      	beq.n	8008bda <pow+0xa2>
 8008b96:	f7fd fe95 	bl	80068c4 <__errno>
 8008b9a:	2322      	movs	r3, #34	@ 0x22
 8008b9c:	e01c      	b.n	8008bd8 <pow+0xa0>
 8008b9e:	0030      	movs	r0, r6
 8008ba0:	0039      	movs	r1, r7
 8008ba2:	f000 f837 	bl	8008c14 <finite>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d11b      	bne.n	8008be2 <pow+0xaa>
 8008baa:	9800      	ldr	r0, [sp, #0]
 8008bac:	9901      	ldr	r1, [sp, #4]
 8008bae:	f000 f831 	bl	8008c14 <finite>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d015      	beq.n	8008be2 <pow+0xaa>
 8008bb6:	0020      	movs	r0, r4
 8008bb8:	0029      	movs	r1, r5
 8008bba:	f000 f82b 	bl	8008c14 <finite>
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d00f      	beq.n	8008be2 <pow+0xaa>
 8008bc2:	0032      	movs	r2, r6
 8008bc4:	003b      	movs	r3, r7
 8008bc6:	0030      	movs	r0, r6
 8008bc8:	0039      	movs	r1, r7
 8008bca:	f7f9 fead 	bl	8002928 <__aeabi_dcmpun>
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	d0e1      	beq.n	8008b96 <pow+0x5e>
 8008bd2:	f7fd fe77 	bl	80068c4 <__errno>
 8008bd6:	2321      	movs	r3, #33	@ 0x21
 8008bd8:	6003      	str	r3, [r0, #0]
 8008bda:	0030      	movs	r0, r6
 8008bdc:	0039      	movs	r1, r7
 8008bde:	b003      	add	sp, #12
 8008be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008be2:	2200      	movs	r2, #0
 8008be4:	2300      	movs	r3, #0
 8008be6:	0030      	movs	r0, r6
 8008be8:	0039      	movs	r1, r7
 8008bea:	f7f7 fc2f 	bl	800044c <__aeabi_dcmpeq>
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	d0f3      	beq.n	8008bda <pow+0xa2>
 8008bf2:	9800      	ldr	r0, [sp, #0]
 8008bf4:	9901      	ldr	r1, [sp, #4]
 8008bf6:	f000 f80d 	bl	8008c14 <finite>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d0ed      	beq.n	8008bda <pow+0xa2>
 8008bfe:	0020      	movs	r0, r4
 8008c00:	0029      	movs	r1, r5
 8008c02:	f000 f807 	bl	8008c14 <finite>
 8008c06:	e7c4      	b.n	8008b92 <pow+0x5a>
 8008c08:	2600      	movs	r6, #0
 8008c0a:	4f01      	ldr	r7, [pc, #4]	@ (8008c10 <pow+0xd8>)
 8008c0c:	e7e5      	b.n	8008bda <pow+0xa2>
 8008c0e:	46c0      	nop			@ (mov r8, r8)
 8008c10:	3ff00000 	.word	0x3ff00000

08008c14 <finite>:
 8008c14:	4b02      	ldr	r3, [pc, #8]	@ (8008c20 <finite+0xc>)
 8008c16:	0048      	lsls	r0, r1, #1
 8008c18:	0840      	lsrs	r0, r0, #1
 8008c1a:	18c0      	adds	r0, r0, r3
 8008c1c:	0fc0      	lsrs	r0, r0, #31
 8008c1e:	4770      	bx	lr
 8008c20:	80100000 	.word	0x80100000

08008c24 <nan>:
 8008c24:	2000      	movs	r0, #0
 8008c26:	4901      	ldr	r1, [pc, #4]	@ (8008c2c <nan+0x8>)
 8008c28:	4770      	bx	lr
 8008c2a:	46c0      	nop			@ (mov r8, r8)
 8008c2c:	7ff80000 	.word	0x7ff80000

08008c30 <__ieee754_log>:
 8008c30:	2380      	movs	r3, #128	@ 0x80
 8008c32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c34:	035b      	lsls	r3, r3, #13
 8008c36:	000e      	movs	r6, r1
 8008c38:	b08d      	sub	sp, #52	@ 0x34
 8008c3a:	4299      	cmp	r1, r3
 8008c3c:	da23      	bge.n	8008c86 <__ieee754_log+0x56>
 8008c3e:	004b      	lsls	r3, r1, #1
 8008c40:	085b      	lsrs	r3, r3, #1
 8008c42:	4303      	orrs	r3, r0
 8008c44:	d107      	bne.n	8008c56 <__ieee754_log+0x26>
 8008c46:	2200      	movs	r2, #0
 8008c48:	2300      	movs	r3, #0
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	49b4      	ldr	r1, [pc, #720]	@ (8008f20 <__ieee754_log+0x2f0>)
 8008c4e:	f7f8 fb41 	bl	80012d4 <__aeabi_ddiv>
 8008c52:	b00d      	add	sp, #52	@ 0x34
 8008c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c56:	2900      	cmp	r1, #0
 8008c58:	da06      	bge.n	8008c68 <__ieee754_log+0x38>
 8008c5a:	0002      	movs	r2, r0
 8008c5c:	000b      	movs	r3, r1
 8008c5e:	f7f9 fa59 	bl	8002114 <__aeabi_dsub>
 8008c62:	2200      	movs	r2, #0
 8008c64:	2300      	movs	r3, #0
 8008c66:	e7f2      	b.n	8008c4e <__ieee754_log+0x1e>
 8008c68:	4bae      	ldr	r3, [pc, #696]	@ (8008f24 <__ieee754_log+0x2f4>)
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f7f8 ff6c 	bl	8001b48 <__aeabi_dmul>
 8008c70:	2336      	movs	r3, #54	@ 0x36
 8008c72:	000e      	movs	r6, r1
 8008c74:	425b      	negs	r3, r3
 8008c76:	4aac      	ldr	r2, [pc, #688]	@ (8008f28 <__ieee754_log+0x2f8>)
 8008c78:	4296      	cmp	r6, r2
 8008c7a:	dd06      	ble.n	8008c8a <__ieee754_log+0x5a>
 8008c7c:	0002      	movs	r2, r0
 8008c7e:	000b      	movs	r3, r1
 8008c80:	f7f7 ff62 	bl	8000b48 <__aeabi_dadd>
 8008c84:	e7e5      	b.n	8008c52 <__ieee754_log+0x22>
 8008c86:	2300      	movs	r3, #0
 8008c88:	e7f5      	b.n	8008c76 <__ieee754_log+0x46>
 8008c8a:	4ca8      	ldr	r4, [pc, #672]	@ (8008f2c <__ieee754_log+0x2fc>)
 8008c8c:	1532      	asrs	r2, r6, #20
 8008c8e:	1912      	adds	r2, r2, r4
 8008c90:	0336      	lsls	r6, r6, #12
 8008c92:	4ca7      	ldr	r4, [pc, #668]	@ (8008f30 <__ieee754_log+0x300>)
 8008c94:	18d2      	adds	r2, r2, r3
 8008c96:	0b33      	lsrs	r3, r6, #12
 8008c98:	9302      	str	r3, [sp, #8]
 8008c9a:	191b      	adds	r3, r3, r4
 8008c9c:	2480      	movs	r4, #128	@ 0x80
 8008c9e:	0364      	lsls	r4, r4, #13
 8008ca0:	4023      	ands	r3, r4
 8008ca2:	4ca4      	ldr	r4, [pc, #656]	@ (8008f34 <__ieee754_log+0x304>)
 8008ca4:	9d02      	ldr	r5, [sp, #8]
 8008ca6:	405c      	eors	r4, r3
 8008ca8:	151b      	asrs	r3, r3, #20
 8008caa:	189b      	adds	r3, r3, r2
 8008cac:	4325      	orrs	r5, r4
 8008cae:	2200      	movs	r2, #0
 8008cb0:	9300      	str	r3, [sp, #0]
 8008cb2:	0029      	movs	r1, r5
 8008cb4:	4b9f      	ldr	r3, [pc, #636]	@ (8008f34 <__ieee754_log+0x304>)
 8008cb6:	f7f9 fa2d 	bl	8002114 <__aeabi_dsub>
 8008cba:	9b02      	ldr	r3, [sp, #8]
 8008cbc:	0006      	movs	r6, r0
 8008cbe:	3302      	adds	r3, #2
 8008cc0:	031b      	lsls	r3, r3, #12
 8008cc2:	000f      	movs	r7, r1
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	0b1b      	lsrs	r3, r3, #12
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	dc64      	bgt.n	8008d96 <__ieee754_log+0x166>
 8008ccc:	2300      	movs	r3, #0
 8008cce:	f7f7 fbbd 	bl	800044c <__aeabi_dcmpeq>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	d019      	beq.n	8008d0a <__ieee754_log+0xda>
 8008cd6:	9b00      	ldr	r3, [sp, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d100      	bne.n	8008cde <__ieee754_log+0xae>
 8008cdc:	e11c      	b.n	8008f18 <__ieee754_log+0x2e8>
 8008cde:	0018      	movs	r0, r3
 8008ce0:	f7f9 fe80 	bl	80029e4 <__aeabi_i2d>
 8008ce4:	4a94      	ldr	r2, [pc, #592]	@ (8008f38 <__ieee754_log+0x308>)
 8008ce6:	4b95      	ldr	r3, [pc, #596]	@ (8008f3c <__ieee754_log+0x30c>)
 8008ce8:	0004      	movs	r4, r0
 8008cea:	000d      	movs	r5, r1
 8008cec:	f7f8 ff2c 	bl	8001b48 <__aeabi_dmul>
 8008cf0:	4a93      	ldr	r2, [pc, #588]	@ (8008f40 <__ieee754_log+0x310>)
 8008cf2:	0006      	movs	r6, r0
 8008cf4:	000f      	movs	r7, r1
 8008cf6:	4b93      	ldr	r3, [pc, #588]	@ (8008f44 <__ieee754_log+0x314>)
 8008cf8:	0020      	movs	r0, r4
 8008cfa:	0029      	movs	r1, r5
 8008cfc:	f7f8 ff24 	bl	8001b48 <__aeabi_dmul>
 8008d00:	0002      	movs	r2, r0
 8008d02:	000b      	movs	r3, r1
 8008d04:	0030      	movs	r0, r6
 8008d06:	0039      	movs	r1, r7
 8008d08:	e7ba      	b.n	8008c80 <__ieee754_log+0x50>
 8008d0a:	4a8f      	ldr	r2, [pc, #572]	@ (8008f48 <__ieee754_log+0x318>)
 8008d0c:	4b8f      	ldr	r3, [pc, #572]	@ (8008f4c <__ieee754_log+0x31c>)
 8008d0e:	0030      	movs	r0, r6
 8008d10:	0039      	movs	r1, r7
 8008d12:	f7f8 ff19 	bl	8001b48 <__aeabi_dmul>
 8008d16:	0002      	movs	r2, r0
 8008d18:	000b      	movs	r3, r1
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	498c      	ldr	r1, [pc, #560]	@ (8008f50 <__ieee754_log+0x320>)
 8008d1e:	f7f9 f9f9 	bl	8002114 <__aeabi_dsub>
 8008d22:	0032      	movs	r2, r6
 8008d24:	0004      	movs	r4, r0
 8008d26:	000d      	movs	r5, r1
 8008d28:	003b      	movs	r3, r7
 8008d2a:	0030      	movs	r0, r6
 8008d2c:	0039      	movs	r1, r7
 8008d2e:	f7f8 ff0b 	bl	8001b48 <__aeabi_dmul>
 8008d32:	000b      	movs	r3, r1
 8008d34:	0002      	movs	r2, r0
 8008d36:	0029      	movs	r1, r5
 8008d38:	0020      	movs	r0, r4
 8008d3a:	f7f8 ff05 	bl	8001b48 <__aeabi_dmul>
 8008d3e:	9b00      	ldr	r3, [sp, #0]
 8008d40:	9002      	str	r0, [sp, #8]
 8008d42:	9103      	str	r1, [sp, #12]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d106      	bne.n	8008d56 <__ieee754_log+0x126>
 8008d48:	0002      	movs	r2, r0
 8008d4a:	000b      	movs	r3, r1
 8008d4c:	0030      	movs	r0, r6
 8008d4e:	0039      	movs	r1, r7
 8008d50:	f7f9 f9e0 	bl	8002114 <__aeabi_dsub>
 8008d54:	e77d      	b.n	8008c52 <__ieee754_log+0x22>
 8008d56:	9800      	ldr	r0, [sp, #0]
 8008d58:	f7f9 fe44 	bl	80029e4 <__aeabi_i2d>
 8008d5c:	4a76      	ldr	r2, [pc, #472]	@ (8008f38 <__ieee754_log+0x308>)
 8008d5e:	4b77      	ldr	r3, [pc, #476]	@ (8008f3c <__ieee754_log+0x30c>)
 8008d60:	0004      	movs	r4, r0
 8008d62:	000d      	movs	r5, r1
 8008d64:	f7f8 fef0 	bl	8001b48 <__aeabi_dmul>
 8008d68:	4a75      	ldr	r2, [pc, #468]	@ (8008f40 <__ieee754_log+0x310>)
 8008d6a:	9000      	str	r0, [sp, #0]
 8008d6c:	9101      	str	r1, [sp, #4]
 8008d6e:	4b75      	ldr	r3, [pc, #468]	@ (8008f44 <__ieee754_log+0x314>)
 8008d70:	0020      	movs	r0, r4
 8008d72:	0029      	movs	r1, r5
 8008d74:	f7f8 fee8 	bl	8001b48 <__aeabi_dmul>
 8008d78:	0002      	movs	r2, r0
 8008d7a:	000b      	movs	r3, r1
 8008d7c:	9802      	ldr	r0, [sp, #8]
 8008d7e:	9903      	ldr	r1, [sp, #12]
 8008d80:	f7f9 f9c8 	bl	8002114 <__aeabi_dsub>
 8008d84:	0032      	movs	r2, r6
 8008d86:	003b      	movs	r3, r7
 8008d88:	f7f9 f9c4 	bl	8002114 <__aeabi_dsub>
 8008d8c:	0002      	movs	r2, r0
 8008d8e:	000b      	movs	r3, r1
 8008d90:	9800      	ldr	r0, [sp, #0]
 8008d92:	9901      	ldr	r1, [sp, #4]
 8008d94:	e7dc      	b.n	8008d50 <__ieee754_log+0x120>
 8008d96:	2380      	movs	r3, #128	@ 0x80
 8008d98:	05db      	lsls	r3, r3, #23
 8008d9a:	f7f7 fed5 	bl	8000b48 <__aeabi_dadd>
 8008d9e:	0002      	movs	r2, r0
 8008da0:	000b      	movs	r3, r1
 8008da2:	0030      	movs	r0, r6
 8008da4:	0039      	movs	r1, r7
 8008da6:	f7f8 fa95 	bl	80012d4 <__aeabi_ddiv>
 8008daa:	9004      	str	r0, [sp, #16]
 8008dac:	9105      	str	r1, [sp, #20]
 8008dae:	9800      	ldr	r0, [sp, #0]
 8008db0:	f7f9 fe18 	bl	80029e4 <__aeabi_i2d>
 8008db4:	9a04      	ldr	r2, [sp, #16]
 8008db6:	9b05      	ldr	r3, [sp, #20]
 8008db8:	9006      	str	r0, [sp, #24]
 8008dba:	9107      	str	r1, [sp, #28]
 8008dbc:	0010      	movs	r0, r2
 8008dbe:	0019      	movs	r1, r3
 8008dc0:	f7f8 fec2 	bl	8001b48 <__aeabi_dmul>
 8008dc4:	4a63      	ldr	r2, [pc, #396]	@ (8008f54 <__ieee754_log+0x324>)
 8008dc6:	9b02      	ldr	r3, [sp, #8]
 8008dc8:	4694      	mov	ip, r2
 8008dca:	4463      	add	r3, ip
 8008dcc:	0002      	movs	r2, r0
 8008dce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dd0:	000b      	movs	r3, r1
 8008dd2:	9008      	str	r0, [sp, #32]
 8008dd4:	9109      	str	r1, [sp, #36]	@ 0x24
 8008dd6:	f7f8 feb7 	bl	8001b48 <__aeabi_dmul>
 8008dda:	0004      	movs	r4, r0
 8008ddc:	000d      	movs	r5, r1
 8008dde:	4a5e      	ldr	r2, [pc, #376]	@ (8008f58 <__ieee754_log+0x328>)
 8008de0:	4b5e      	ldr	r3, [pc, #376]	@ (8008f5c <__ieee754_log+0x32c>)
 8008de2:	f7f8 feb1 	bl	8001b48 <__aeabi_dmul>
 8008de6:	4a5e      	ldr	r2, [pc, #376]	@ (8008f60 <__ieee754_log+0x330>)
 8008de8:	4b5e      	ldr	r3, [pc, #376]	@ (8008f64 <__ieee754_log+0x334>)
 8008dea:	f7f7 fead 	bl	8000b48 <__aeabi_dadd>
 8008dee:	0022      	movs	r2, r4
 8008df0:	002b      	movs	r3, r5
 8008df2:	f7f8 fea9 	bl	8001b48 <__aeabi_dmul>
 8008df6:	4a5c      	ldr	r2, [pc, #368]	@ (8008f68 <__ieee754_log+0x338>)
 8008df8:	4b5c      	ldr	r3, [pc, #368]	@ (8008f6c <__ieee754_log+0x33c>)
 8008dfa:	f7f7 fea5 	bl	8000b48 <__aeabi_dadd>
 8008dfe:	0022      	movs	r2, r4
 8008e00:	002b      	movs	r3, r5
 8008e02:	f7f8 fea1 	bl	8001b48 <__aeabi_dmul>
 8008e06:	4a5a      	ldr	r2, [pc, #360]	@ (8008f70 <__ieee754_log+0x340>)
 8008e08:	4b5a      	ldr	r3, [pc, #360]	@ (8008f74 <__ieee754_log+0x344>)
 8008e0a:	f7f7 fe9d 	bl	8000b48 <__aeabi_dadd>
 8008e0e:	9a08      	ldr	r2, [sp, #32]
 8008e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e12:	f7f8 fe99 	bl	8001b48 <__aeabi_dmul>
 8008e16:	4a58      	ldr	r2, [pc, #352]	@ (8008f78 <__ieee754_log+0x348>)
 8008e18:	9008      	str	r0, [sp, #32]
 8008e1a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008e1c:	4b57      	ldr	r3, [pc, #348]	@ (8008f7c <__ieee754_log+0x34c>)
 8008e1e:	0020      	movs	r0, r4
 8008e20:	0029      	movs	r1, r5
 8008e22:	f7f8 fe91 	bl	8001b48 <__aeabi_dmul>
 8008e26:	4a56      	ldr	r2, [pc, #344]	@ (8008f80 <__ieee754_log+0x350>)
 8008e28:	4b56      	ldr	r3, [pc, #344]	@ (8008f84 <__ieee754_log+0x354>)
 8008e2a:	f7f7 fe8d 	bl	8000b48 <__aeabi_dadd>
 8008e2e:	0022      	movs	r2, r4
 8008e30:	002b      	movs	r3, r5
 8008e32:	f7f8 fe89 	bl	8001b48 <__aeabi_dmul>
 8008e36:	4a54      	ldr	r2, [pc, #336]	@ (8008f88 <__ieee754_log+0x358>)
 8008e38:	4b54      	ldr	r3, [pc, #336]	@ (8008f8c <__ieee754_log+0x35c>)
 8008e3a:	f7f7 fe85 	bl	8000b48 <__aeabi_dadd>
 8008e3e:	0022      	movs	r2, r4
 8008e40:	002b      	movs	r3, r5
 8008e42:	f7f8 fe81 	bl	8001b48 <__aeabi_dmul>
 8008e46:	0002      	movs	r2, r0
 8008e48:	000b      	movs	r3, r1
 8008e4a:	9808      	ldr	r0, [sp, #32]
 8008e4c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e4e:	f7f7 fe7b 	bl	8000b48 <__aeabi_dadd>
 8008e52:	9a02      	ldr	r2, [sp, #8]
 8008e54:	4b4e      	ldr	r3, [pc, #312]	@ (8008f90 <__ieee754_log+0x360>)
 8008e56:	0004      	movs	r4, r0
 8008e58:	1a9b      	subs	r3, r3, r2
 8008e5a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008e5c:	000d      	movs	r5, r1
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	dd34      	ble.n	8008ece <__ieee754_log+0x29e>
 8008e64:	2200      	movs	r2, #0
 8008e66:	4b3a      	ldr	r3, [pc, #232]	@ (8008f50 <__ieee754_log+0x320>)
 8008e68:	0030      	movs	r0, r6
 8008e6a:	0039      	movs	r1, r7
 8008e6c:	f7f8 fe6c 	bl	8001b48 <__aeabi_dmul>
 8008e70:	0032      	movs	r2, r6
 8008e72:	003b      	movs	r3, r7
 8008e74:	f7f8 fe68 	bl	8001b48 <__aeabi_dmul>
 8008e78:	0002      	movs	r2, r0
 8008e7a:	000b      	movs	r3, r1
 8008e7c:	9002      	str	r0, [sp, #8]
 8008e7e:	9103      	str	r1, [sp, #12]
 8008e80:	0020      	movs	r0, r4
 8008e82:	0029      	movs	r1, r5
 8008e84:	f7f7 fe60 	bl	8000b48 <__aeabi_dadd>
 8008e88:	9a04      	ldr	r2, [sp, #16]
 8008e8a:	9b05      	ldr	r3, [sp, #20]
 8008e8c:	f7f8 fe5c 	bl	8001b48 <__aeabi_dmul>
 8008e90:	9b00      	ldr	r3, [sp, #0]
 8008e92:	0004      	movs	r4, r0
 8008e94:	000d      	movs	r5, r1
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d106      	bne.n	8008ea8 <__ieee754_log+0x278>
 8008e9a:	0002      	movs	r2, r0
 8008e9c:	000b      	movs	r3, r1
 8008e9e:	9802      	ldr	r0, [sp, #8]
 8008ea0:	9903      	ldr	r1, [sp, #12]
 8008ea2:	f7f9 f937 	bl	8002114 <__aeabi_dsub>
 8008ea6:	e74f      	b.n	8008d48 <__ieee754_log+0x118>
 8008ea8:	4a23      	ldr	r2, [pc, #140]	@ (8008f38 <__ieee754_log+0x308>)
 8008eaa:	4b24      	ldr	r3, [pc, #144]	@ (8008f3c <__ieee754_log+0x30c>)
 8008eac:	9806      	ldr	r0, [sp, #24]
 8008eae:	9907      	ldr	r1, [sp, #28]
 8008eb0:	f7f8 fe4a 	bl	8001b48 <__aeabi_dmul>
 8008eb4:	4a22      	ldr	r2, [pc, #136]	@ (8008f40 <__ieee754_log+0x310>)
 8008eb6:	9000      	str	r0, [sp, #0]
 8008eb8:	9101      	str	r1, [sp, #4]
 8008eba:	9806      	ldr	r0, [sp, #24]
 8008ebc:	9907      	ldr	r1, [sp, #28]
 8008ebe:	4b21      	ldr	r3, [pc, #132]	@ (8008f44 <__ieee754_log+0x314>)
 8008ec0:	f7f8 fe42 	bl	8001b48 <__aeabi_dmul>
 8008ec4:	0022      	movs	r2, r4
 8008ec6:	002b      	movs	r3, r5
 8008ec8:	f7f7 fe3e 	bl	8000b48 <__aeabi_dadd>
 8008ecc:	e754      	b.n	8008d78 <__ieee754_log+0x148>
 8008ece:	0002      	movs	r2, r0
 8008ed0:	000b      	movs	r3, r1
 8008ed2:	0030      	movs	r0, r6
 8008ed4:	0039      	movs	r1, r7
 8008ed6:	f7f9 f91d 	bl	8002114 <__aeabi_dsub>
 8008eda:	9a04      	ldr	r2, [sp, #16]
 8008edc:	9b05      	ldr	r3, [sp, #20]
 8008ede:	f7f8 fe33 	bl	8001b48 <__aeabi_dmul>
 8008ee2:	9b00      	ldr	r3, [sp, #0]
 8008ee4:	0004      	movs	r4, r0
 8008ee6:	000d      	movs	r5, r1
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d102      	bne.n	8008ef2 <__ieee754_log+0x2c2>
 8008eec:	0002      	movs	r2, r0
 8008eee:	000b      	movs	r3, r1
 8008ef0:	e72c      	b.n	8008d4c <__ieee754_log+0x11c>
 8008ef2:	4a11      	ldr	r2, [pc, #68]	@ (8008f38 <__ieee754_log+0x308>)
 8008ef4:	4b11      	ldr	r3, [pc, #68]	@ (8008f3c <__ieee754_log+0x30c>)
 8008ef6:	9806      	ldr	r0, [sp, #24]
 8008ef8:	9907      	ldr	r1, [sp, #28]
 8008efa:	f7f8 fe25 	bl	8001b48 <__aeabi_dmul>
 8008efe:	4a10      	ldr	r2, [pc, #64]	@ (8008f40 <__ieee754_log+0x310>)
 8008f00:	9000      	str	r0, [sp, #0]
 8008f02:	9101      	str	r1, [sp, #4]
 8008f04:	9806      	ldr	r0, [sp, #24]
 8008f06:	9907      	ldr	r1, [sp, #28]
 8008f08:	4b0e      	ldr	r3, [pc, #56]	@ (8008f44 <__ieee754_log+0x314>)
 8008f0a:	f7f8 fe1d 	bl	8001b48 <__aeabi_dmul>
 8008f0e:	0002      	movs	r2, r0
 8008f10:	000b      	movs	r3, r1
 8008f12:	0020      	movs	r0, r4
 8008f14:	0029      	movs	r1, r5
 8008f16:	e733      	b.n	8008d80 <__ieee754_log+0x150>
 8008f18:	2000      	movs	r0, #0
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	e699      	b.n	8008c52 <__ieee754_log+0x22>
 8008f1e:	46c0      	nop			@ (mov r8, r8)
 8008f20:	c3500000 	.word	0xc3500000
 8008f24:	43500000 	.word	0x43500000
 8008f28:	7fefffff 	.word	0x7fefffff
 8008f2c:	fffffc01 	.word	0xfffffc01
 8008f30:	00095f64 	.word	0x00095f64
 8008f34:	3ff00000 	.word	0x3ff00000
 8008f38:	fee00000 	.word	0xfee00000
 8008f3c:	3fe62e42 	.word	0x3fe62e42
 8008f40:	35793c76 	.word	0x35793c76
 8008f44:	3dea39ef 	.word	0x3dea39ef
 8008f48:	55555555 	.word	0x55555555
 8008f4c:	3fd55555 	.word	0x3fd55555
 8008f50:	3fe00000 	.word	0x3fe00000
 8008f54:	fff9eb86 	.word	0xfff9eb86
 8008f58:	df3e5244 	.word	0xdf3e5244
 8008f5c:	3fc2f112 	.word	0x3fc2f112
 8008f60:	96cb03de 	.word	0x96cb03de
 8008f64:	3fc74664 	.word	0x3fc74664
 8008f68:	94229359 	.word	0x94229359
 8008f6c:	3fd24924 	.word	0x3fd24924
 8008f70:	55555593 	.word	0x55555593
 8008f74:	3fe55555 	.word	0x3fe55555
 8008f78:	d078c69f 	.word	0xd078c69f
 8008f7c:	3fc39a09 	.word	0x3fc39a09
 8008f80:	1d8e78af 	.word	0x1d8e78af
 8008f84:	3fcc71c5 	.word	0x3fcc71c5
 8008f88:	9997fa04 	.word	0x9997fa04
 8008f8c:	3fd99999 	.word	0x3fd99999
 8008f90:	0006b851 	.word	0x0006b851

08008f94 <__ieee754_pow>:
 8008f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f96:	b095      	sub	sp, #84	@ 0x54
 8008f98:	9204      	str	r2, [sp, #16]
 8008f9a:	9305      	str	r3, [sp, #20]
 8008f9c:	9b04      	ldr	r3, [sp, #16]
 8008f9e:	9f05      	ldr	r7, [sp, #20]
 8008fa0:	001a      	movs	r2, r3
 8008fa2:	007d      	lsls	r5, r7, #1
 8008fa4:	086d      	lsrs	r5, r5, #1
 8008fa6:	9002      	str	r0, [sp, #8]
 8008fa8:	9103      	str	r1, [sp, #12]
 8008faa:	432a      	orrs	r2, r5
 8008fac:	d11a      	bne.n	8008fe4 <__ieee754_pow+0x50>
 8008fae:	2180      	movs	r1, #128	@ 0x80
 8008fb0:	9a02      	ldr	r2, [sp, #8]
 8008fb2:	9803      	ldr	r0, [sp, #12]
 8008fb4:	0309      	lsls	r1, r1, #12
 8008fb6:	4048      	eors	r0, r1
 8008fb8:	0003      	movs	r3, r0
 8008fba:	1892      	adds	r2, r2, r2
 8008fbc:	415b      	adcs	r3, r3
 8008fbe:	4996      	ldr	r1, [pc, #600]	@ (8009218 <__ieee754_pow+0x284>)
 8008fc0:	428b      	cmp	r3, r1
 8008fc2:	d806      	bhi.n	8008fd2 <__ieee754_pow+0x3e>
 8008fc4:	d001      	beq.n	8008fca <__ieee754_pow+0x36>
 8008fc6:	f000 fcce 	bl	8009966 <__ieee754_pow+0x9d2>
 8008fca:	2a00      	cmp	r2, #0
 8008fcc:	d101      	bne.n	8008fd2 <__ieee754_pow+0x3e>
 8008fce:	f000 fcca 	bl	8009966 <__ieee754_pow+0x9d2>
 8008fd2:	9a04      	ldr	r2, [sp, #16]
 8008fd4:	9b05      	ldr	r3, [sp, #20]
 8008fd6:	9802      	ldr	r0, [sp, #8]
 8008fd8:	9903      	ldr	r1, [sp, #12]
 8008fda:	f7f7 fdb5 	bl	8000b48 <__aeabi_dadd>
 8008fde:	9000      	str	r0, [sp, #0]
 8008fe0:	9101      	str	r1, [sp, #4]
 8008fe2:	e08e      	b.n	8009102 <__ieee754_pow+0x16e>
 8008fe4:	9a03      	ldr	r2, [sp, #12]
 8008fe6:	9206      	str	r2, [sp, #24]
 8008fe8:	9a02      	ldr	r2, [sp, #8]
 8008fea:	920a      	str	r2, [sp, #40]	@ 0x28
 8008fec:	9a03      	ldr	r2, [sp, #12]
 8008fee:	0054      	lsls	r4, r2, #1
 8008ff0:	4a8a      	ldr	r2, [pc, #552]	@ (800921c <__ieee754_pow+0x288>)
 8008ff2:	0864      	lsrs	r4, r4, #1
 8008ff4:	4294      	cmp	r4, r2
 8008ff6:	d80e      	bhi.n	8009016 <__ieee754_pow+0x82>
 8008ff8:	d105      	bne.n	8009006 <__ieee754_pow+0x72>
 8008ffa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ffc:	2a00      	cmp	r2, #0
 8008ffe:	d1e8      	bne.n	8008fd2 <__ieee754_pow+0x3e>
 8009000:	42a5      	cmp	r5, r4
 8009002:	d8e6      	bhi.n	8008fd2 <__ieee754_pow+0x3e>
 8009004:	e002      	b.n	800900c <__ieee754_pow+0x78>
 8009006:	4a85      	ldr	r2, [pc, #532]	@ (800921c <__ieee754_pow+0x288>)
 8009008:	4295      	cmp	r5, r2
 800900a:	d804      	bhi.n	8009016 <__ieee754_pow+0x82>
 800900c:	4a83      	ldr	r2, [pc, #524]	@ (800921c <__ieee754_pow+0x288>)
 800900e:	4295      	cmp	r5, r2
 8009010:	d10c      	bne.n	800902c <__ieee754_pow+0x98>
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00a      	beq.n	800902c <__ieee754_pow+0x98>
 8009016:	4a82      	ldr	r2, [pc, #520]	@ (8009220 <__ieee754_pow+0x28c>)
 8009018:	9b03      	ldr	r3, [sp, #12]
 800901a:	189b      	adds	r3, r3, r2
 800901c:	9a02      	ldr	r2, [sp, #8]
 800901e:	4313      	orrs	r3, r2
 8009020:	d1d7      	bne.n	8008fd2 <__ieee754_pow+0x3e>
 8009022:	2180      	movs	r1, #128	@ 0x80
 8009024:	9a04      	ldr	r2, [sp, #16]
 8009026:	9805      	ldr	r0, [sp, #20]
 8009028:	0309      	lsls	r1, r1, #12
 800902a:	e7c4      	b.n	8008fb6 <__ieee754_pow+0x22>
 800902c:	2600      	movs	r6, #0
 800902e:	9a06      	ldr	r2, [sp, #24]
 8009030:	9408      	str	r4, [sp, #32]
 8009032:	42b2      	cmp	r2, r6
 8009034:	da42      	bge.n	80090bc <__ieee754_pow+0x128>
 8009036:	4a7b      	ldr	r2, [pc, #492]	@ (8009224 <__ieee754_pow+0x290>)
 8009038:	4295      	cmp	r5, r2
 800903a:	d83e      	bhi.n	80090ba <__ieee754_pow+0x126>
 800903c:	4a7a      	ldr	r2, [pc, #488]	@ (8009228 <__ieee754_pow+0x294>)
 800903e:	4295      	cmp	r5, r2
 8009040:	d910      	bls.n	8009064 <__ieee754_pow+0xd0>
 8009042:	497a      	ldr	r1, [pc, #488]	@ (800922c <__ieee754_pow+0x298>)
 8009044:	152a      	asrs	r2, r5, #20
 8009046:	1852      	adds	r2, r2, r1
 8009048:	2a14      	cmp	r2, #20
 800904a:	dd18      	ble.n	800907e <__ieee754_pow+0xea>
 800904c:	2134      	movs	r1, #52	@ 0x34
 800904e:	1a89      	subs	r1, r1, r2
 8009050:	9a04      	ldr	r2, [sp, #16]
 8009052:	40ca      	lsrs	r2, r1
 8009054:	0010      	movs	r0, r2
 8009056:	4088      	lsls	r0, r1
 8009058:	4298      	cmp	r0, r3
 800905a:	d103      	bne.n	8009064 <__ieee754_pow+0xd0>
 800905c:	2101      	movs	r1, #1
 800905e:	3602      	adds	r6, #2
 8009060:	400a      	ands	r2, r1
 8009062:	1ab6      	subs	r6, r6, r2
 8009064:	2b00      	cmp	r3, #0
 8009066:	d15b      	bne.n	8009120 <__ieee754_pow+0x18c>
 8009068:	2380      	movs	r3, #128	@ 0x80
 800906a:	05db      	lsls	r3, r3, #23
 800906c:	429f      	cmp	r7, r3
 800906e:	d14c      	bne.n	800910a <__ieee754_pow+0x176>
 8009070:	9a02      	ldr	r2, [sp, #8]
 8009072:	9b03      	ldr	r3, [sp, #12]
 8009074:	0010      	movs	r0, r2
 8009076:	0019      	movs	r1, r3
 8009078:	f7f8 fd66 	bl	8001b48 <__aeabi_dmul>
 800907c:	e7af      	b.n	8008fde <__ieee754_pow+0x4a>
 800907e:	2b00      	cmp	r3, #0
 8009080:	d14e      	bne.n	8009120 <__ieee754_pow+0x18c>
 8009082:	3314      	adds	r3, #20
 8009084:	1a9a      	subs	r2, r3, r2
 8009086:	002b      	movs	r3, r5
 8009088:	4113      	asrs	r3, r2
 800908a:	0019      	movs	r1, r3
 800908c:	4091      	lsls	r1, r2
 800908e:	42a9      	cmp	r1, r5
 8009090:	d103      	bne.n	800909a <__ieee754_pow+0x106>
 8009092:	2201      	movs	r2, #1
 8009094:	2602      	movs	r6, #2
 8009096:	4013      	ands	r3, r2
 8009098:	1af6      	subs	r6, r6, r3
 800909a:	4b65      	ldr	r3, [pc, #404]	@ (8009230 <__ieee754_pow+0x29c>)
 800909c:	429d      	cmp	r5, r3
 800909e:	d1e3      	bne.n	8009068 <__ieee754_pow+0xd4>
 80090a0:	9b02      	ldr	r3, [sp, #8]
 80090a2:	9c03      	ldr	r4, [sp, #12]
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	9401      	str	r4, [sp, #4]
 80090a8:	2f00      	cmp	r7, #0
 80090aa:	da2a      	bge.n	8009102 <__ieee754_pow+0x16e>
 80090ac:	001a      	movs	r2, r3
 80090ae:	2000      	movs	r0, #0
 80090b0:	0023      	movs	r3, r4
 80090b2:	495f      	ldr	r1, [pc, #380]	@ (8009230 <__ieee754_pow+0x29c>)
 80090b4:	f7f8 f90e 	bl	80012d4 <__aeabi_ddiv>
 80090b8:	e791      	b.n	8008fde <__ieee754_pow+0x4a>
 80090ba:	2602      	movs	r6, #2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d12f      	bne.n	8009120 <__ieee754_pow+0x18c>
 80090c0:	4b56      	ldr	r3, [pc, #344]	@ (800921c <__ieee754_pow+0x288>)
 80090c2:	429d      	cmp	r5, r3
 80090c4:	d1e9      	bne.n	800909a <__ieee754_pow+0x106>
 80090c6:	4b56      	ldr	r3, [pc, #344]	@ (8009220 <__ieee754_pow+0x28c>)
 80090c8:	9a02      	ldr	r2, [sp, #8]
 80090ca:	18e3      	adds	r3, r4, r3
 80090cc:	4313      	orrs	r3, r2
 80090ce:	d101      	bne.n	80090d4 <__ieee754_pow+0x140>
 80090d0:	f000 fc49 	bl	8009966 <__ieee754_pow+0x9d2>
 80090d4:	4b54      	ldr	r3, [pc, #336]	@ (8009228 <__ieee754_pow+0x294>)
 80090d6:	429c      	cmp	r4, r3
 80090d8:	d909      	bls.n	80090ee <__ieee754_pow+0x15a>
 80090da:	9b04      	ldr	r3, [sp, #16]
 80090dc:	9c05      	ldr	r4, [sp, #20]
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	9401      	str	r4, [sp, #4]
 80090e2:	2f00      	cmp	r7, #0
 80090e4:	da0d      	bge.n	8009102 <__ieee754_pow+0x16e>
 80090e6:	2300      	movs	r3, #0
 80090e8:	2400      	movs	r4, #0
 80090ea:	f000 fc3e 	bl	800996a <__ieee754_pow+0x9d6>
 80090ee:	2f00      	cmp	r7, #0
 80090f0:	daf9      	bge.n	80090e6 <__ieee754_pow+0x152>
 80090f2:	2280      	movs	r2, #128	@ 0x80
 80090f4:	0612      	lsls	r2, r2, #24
 80090f6:	4694      	mov	ip, r2
 80090f8:	9b04      	ldr	r3, [sp, #16]
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	9b05      	ldr	r3, [sp, #20]
 80090fe:	4463      	add	r3, ip
 8009100:	9301      	str	r3, [sp, #4]
 8009102:	9800      	ldr	r0, [sp, #0]
 8009104:	9901      	ldr	r1, [sp, #4]
 8009106:	b015      	add	sp, #84	@ 0x54
 8009108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800910a:	4b4a      	ldr	r3, [pc, #296]	@ (8009234 <__ieee754_pow+0x2a0>)
 800910c:	429f      	cmp	r7, r3
 800910e:	d107      	bne.n	8009120 <__ieee754_pow+0x18c>
 8009110:	9b06      	ldr	r3, [sp, #24]
 8009112:	2b00      	cmp	r3, #0
 8009114:	db04      	blt.n	8009120 <__ieee754_pow+0x18c>
 8009116:	9802      	ldr	r0, [sp, #8]
 8009118:	9903      	ldr	r1, [sp, #12]
 800911a:	f000 fcf1 	bl	8009b00 <__ieee754_sqrt>
 800911e:	e75e      	b.n	8008fde <__ieee754_pow+0x4a>
 8009120:	9802      	ldr	r0, [sp, #8]
 8009122:	9903      	ldr	r1, [sp, #12]
 8009124:	f000 fc4e 	bl	80099c4 <fabs>
 8009128:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800912a:	9000      	str	r0, [sp, #0]
 800912c:	9101      	str	r1, [sp, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d12c      	bne.n	800918c <__ieee754_pow+0x1f8>
 8009132:	9b03      	ldr	r3, [sp, #12]
 8009134:	4a3e      	ldr	r2, [pc, #248]	@ (8009230 <__ieee754_pow+0x29c>)
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	089b      	lsrs	r3, r3, #2
 800913a:	4293      	cmp	r3, r2
 800913c:	d001      	beq.n	8009142 <__ieee754_pow+0x1ae>
 800913e:	2c00      	cmp	r4, #0
 8009140:	d124      	bne.n	800918c <__ieee754_pow+0x1f8>
 8009142:	2f00      	cmp	r7, #0
 8009144:	da07      	bge.n	8009156 <__ieee754_pow+0x1c2>
 8009146:	9a00      	ldr	r2, [sp, #0]
 8009148:	9b01      	ldr	r3, [sp, #4]
 800914a:	2000      	movs	r0, #0
 800914c:	4938      	ldr	r1, [pc, #224]	@ (8009230 <__ieee754_pow+0x29c>)
 800914e:	f7f8 f8c1 	bl	80012d4 <__aeabi_ddiv>
 8009152:	9000      	str	r0, [sp, #0]
 8009154:	9101      	str	r1, [sp, #4]
 8009156:	9b06      	ldr	r3, [sp, #24]
 8009158:	2b00      	cmp	r3, #0
 800915a:	dad2      	bge.n	8009102 <__ieee754_pow+0x16e>
 800915c:	4b30      	ldr	r3, [pc, #192]	@ (8009220 <__ieee754_pow+0x28c>)
 800915e:	18e4      	adds	r4, r4, r3
 8009160:	4334      	orrs	r4, r6
 8009162:	d108      	bne.n	8009176 <__ieee754_pow+0x1e2>
 8009164:	9a00      	ldr	r2, [sp, #0]
 8009166:	9b01      	ldr	r3, [sp, #4]
 8009168:	0010      	movs	r0, r2
 800916a:	0019      	movs	r1, r3
 800916c:	f7f8 ffd2 	bl	8002114 <__aeabi_dsub>
 8009170:	0002      	movs	r2, r0
 8009172:	000b      	movs	r3, r1
 8009174:	e79e      	b.n	80090b4 <__ieee754_pow+0x120>
 8009176:	2e01      	cmp	r6, #1
 8009178:	d1c3      	bne.n	8009102 <__ieee754_pow+0x16e>
 800917a:	9800      	ldr	r0, [sp, #0]
 800917c:	2180      	movs	r1, #128	@ 0x80
 800917e:	0002      	movs	r2, r0
 8009180:	9801      	ldr	r0, [sp, #4]
 8009182:	0609      	lsls	r1, r1, #24
 8009184:	1843      	adds	r3, r0, r1
 8009186:	9200      	str	r2, [sp, #0]
 8009188:	9301      	str	r3, [sp, #4]
 800918a:	e7ba      	b.n	8009102 <__ieee754_pow+0x16e>
 800918c:	9b03      	ldr	r3, [sp, #12]
 800918e:	0fdb      	lsrs	r3, r3, #31
 8009190:	3b01      	subs	r3, #1
 8009192:	001a      	movs	r2, r3
 8009194:	4332      	orrs	r2, r6
 8009196:	d102      	bne.n	800919e <__ieee754_pow+0x20a>
 8009198:	9a02      	ldr	r2, [sp, #8]
 800919a:	9b03      	ldr	r3, [sp, #12]
 800919c:	e7e4      	b.n	8009168 <__ieee754_pow+0x1d4>
 800919e:	3e01      	subs	r6, #1
 80091a0:	2200      	movs	r2, #0
 80091a2:	431e      	orrs	r6, r3
 80091a4:	d013      	beq.n	80091ce <__ieee754_pow+0x23a>
 80091a6:	4b22      	ldr	r3, [pc, #136]	@ (8009230 <__ieee754_pow+0x29c>)
 80091a8:	9206      	str	r2, [sp, #24]
 80091aa:	9307      	str	r3, [sp, #28]
 80091ac:	2384      	movs	r3, #132	@ 0x84
 80091ae:	05db      	lsls	r3, r3, #23
 80091b0:	429d      	cmp	r5, r3
 80091b2:	d800      	bhi.n	80091b6 <__ieee754_pow+0x222>
 80091b4:	e0fa      	b.n	80093ac <__ieee754_pow+0x418>
 80091b6:	4b20      	ldr	r3, [pc, #128]	@ (8009238 <__ieee754_pow+0x2a4>)
 80091b8:	429d      	cmp	r5, r3
 80091ba:	d910      	bls.n	80091de <__ieee754_pow+0x24a>
 80091bc:	4b1a      	ldr	r3, [pc, #104]	@ (8009228 <__ieee754_pow+0x294>)
 80091be:	429c      	cmp	r4, r3
 80091c0:	d807      	bhi.n	80091d2 <__ieee754_pow+0x23e>
 80091c2:	2f00      	cmp	r7, #0
 80091c4:	da07      	bge.n	80091d6 <__ieee754_pow+0x242>
 80091c6:	2000      	movs	r0, #0
 80091c8:	f000 fc92 	bl	8009af0 <__math_oflow>
 80091cc:	e707      	b.n	8008fde <__ieee754_pow+0x4a>
 80091ce:	4b1b      	ldr	r3, [pc, #108]	@ (800923c <__ieee754_pow+0x2a8>)
 80091d0:	e7ea      	b.n	80091a8 <__ieee754_pow+0x214>
 80091d2:	2f00      	cmp	r7, #0
 80091d4:	dcf7      	bgt.n	80091c6 <__ieee754_pow+0x232>
 80091d6:	2000      	movs	r0, #0
 80091d8:	f000 fc83 	bl	8009ae2 <__math_uflow>
 80091dc:	e6ff      	b.n	8008fde <__ieee754_pow+0x4a>
 80091de:	4b18      	ldr	r3, [pc, #96]	@ (8009240 <__ieee754_pow+0x2ac>)
 80091e0:	429c      	cmp	r4, r3
 80091e2:	d80a      	bhi.n	80091fa <__ieee754_pow+0x266>
 80091e4:	9806      	ldr	r0, [sp, #24]
 80091e6:	9907      	ldr	r1, [sp, #28]
 80091e8:	2300      	movs	r3, #0
 80091ea:	2200      	movs	r2, #0
 80091ec:	f7f7 f934 	bl	8000458 <__aeabi_dcmplt>
 80091f0:	1e43      	subs	r3, r0, #1
 80091f2:	4198      	sbcs	r0, r3
 80091f4:	2f00      	cmp	r7, #0
 80091f6:	daef      	bge.n	80091d8 <__ieee754_pow+0x244>
 80091f8:	e7e6      	b.n	80091c8 <__ieee754_pow+0x234>
 80091fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009230 <__ieee754_pow+0x29c>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	429c      	cmp	r4, r3
 8009200:	d920      	bls.n	8009244 <__ieee754_pow+0x2b0>
 8009202:	9806      	ldr	r0, [sp, #24]
 8009204:	9907      	ldr	r1, [sp, #28]
 8009206:	2300      	movs	r3, #0
 8009208:	f7f7 f926 	bl	8000458 <__aeabi_dcmplt>
 800920c:	1e43      	subs	r3, r0, #1
 800920e:	4198      	sbcs	r0, r3
 8009210:	2f00      	cmp	r7, #0
 8009212:	dcd9      	bgt.n	80091c8 <__ieee754_pow+0x234>
 8009214:	e7e0      	b.n	80091d8 <__ieee754_pow+0x244>
 8009216:	46c0      	nop			@ (mov r8, r8)
 8009218:	fff00000 	.word	0xfff00000
 800921c:	7ff00000 	.word	0x7ff00000
 8009220:	c0100000 	.word	0xc0100000
 8009224:	433fffff 	.word	0x433fffff
 8009228:	3fefffff 	.word	0x3fefffff
 800922c:	fffffc01 	.word	0xfffffc01
 8009230:	3ff00000 	.word	0x3ff00000
 8009234:	3fe00000 	.word	0x3fe00000
 8009238:	43f00000 	.word	0x43f00000
 800923c:	bff00000 	.word	0xbff00000
 8009240:	3feffffe 	.word	0x3feffffe
 8009244:	9800      	ldr	r0, [sp, #0]
 8009246:	9901      	ldr	r1, [sp, #4]
 8009248:	4b4d      	ldr	r3, [pc, #308]	@ (8009380 <__ieee754_pow+0x3ec>)
 800924a:	f7f8 ff63 	bl	8002114 <__aeabi_dsub>
 800924e:	22c0      	movs	r2, #192	@ 0xc0
 8009250:	4b4c      	ldr	r3, [pc, #304]	@ (8009384 <__ieee754_pow+0x3f0>)
 8009252:	05d2      	lsls	r2, r2, #23
 8009254:	0006      	movs	r6, r0
 8009256:	000f      	movs	r7, r1
 8009258:	f7f8 fc76 	bl	8001b48 <__aeabi_dmul>
 800925c:	4a4a      	ldr	r2, [pc, #296]	@ (8009388 <__ieee754_pow+0x3f4>)
 800925e:	9002      	str	r0, [sp, #8]
 8009260:	9103      	str	r1, [sp, #12]
 8009262:	4b4a      	ldr	r3, [pc, #296]	@ (800938c <__ieee754_pow+0x3f8>)
 8009264:	0030      	movs	r0, r6
 8009266:	0039      	movs	r1, r7
 8009268:	f7f8 fc6e 	bl	8001b48 <__aeabi_dmul>
 800926c:	2200      	movs	r2, #0
 800926e:	9000      	str	r0, [sp, #0]
 8009270:	9101      	str	r1, [sp, #4]
 8009272:	4b47      	ldr	r3, [pc, #284]	@ (8009390 <__ieee754_pow+0x3fc>)
 8009274:	0030      	movs	r0, r6
 8009276:	0039      	movs	r1, r7
 8009278:	f7f8 fc66 	bl	8001b48 <__aeabi_dmul>
 800927c:	0002      	movs	r2, r0
 800927e:	000b      	movs	r3, r1
 8009280:	4844      	ldr	r0, [pc, #272]	@ (8009394 <__ieee754_pow+0x400>)
 8009282:	4945      	ldr	r1, [pc, #276]	@ (8009398 <__ieee754_pow+0x404>)
 8009284:	f7f8 ff46 	bl	8002114 <__aeabi_dsub>
 8009288:	0032      	movs	r2, r6
 800928a:	003b      	movs	r3, r7
 800928c:	f7f8 fc5c 	bl	8001b48 <__aeabi_dmul>
 8009290:	0002      	movs	r2, r0
 8009292:	000b      	movs	r3, r1
 8009294:	2000      	movs	r0, #0
 8009296:	4941      	ldr	r1, [pc, #260]	@ (800939c <__ieee754_pow+0x408>)
 8009298:	f7f8 ff3c 	bl	8002114 <__aeabi_dsub>
 800929c:	0032      	movs	r2, r6
 800929e:	0004      	movs	r4, r0
 80092a0:	000d      	movs	r5, r1
 80092a2:	003b      	movs	r3, r7
 80092a4:	0030      	movs	r0, r6
 80092a6:	0039      	movs	r1, r7
 80092a8:	f7f8 fc4e 	bl	8001b48 <__aeabi_dmul>
 80092ac:	0002      	movs	r2, r0
 80092ae:	000b      	movs	r3, r1
 80092b0:	0020      	movs	r0, r4
 80092b2:	0029      	movs	r1, r5
 80092b4:	f7f8 fc48 	bl	8001b48 <__aeabi_dmul>
 80092b8:	4a39      	ldr	r2, [pc, #228]	@ (80093a0 <__ieee754_pow+0x40c>)
 80092ba:	4b32      	ldr	r3, [pc, #200]	@ (8009384 <__ieee754_pow+0x3f0>)
 80092bc:	f7f8 fc44 	bl	8001b48 <__aeabi_dmul>
 80092c0:	0002      	movs	r2, r0
 80092c2:	000b      	movs	r3, r1
 80092c4:	9800      	ldr	r0, [sp, #0]
 80092c6:	9901      	ldr	r1, [sp, #4]
 80092c8:	f7f8 ff24 	bl	8002114 <__aeabi_dsub>
 80092cc:	0002      	movs	r2, r0
 80092ce:	000b      	movs	r3, r1
 80092d0:	0004      	movs	r4, r0
 80092d2:	000d      	movs	r5, r1
 80092d4:	9802      	ldr	r0, [sp, #8]
 80092d6:	9903      	ldr	r1, [sp, #12]
 80092d8:	f7f7 fc36 	bl	8000b48 <__aeabi_dadd>
 80092dc:	9a02      	ldr	r2, [sp, #8]
 80092de:	9b03      	ldr	r3, [sp, #12]
 80092e0:	2000      	movs	r0, #0
 80092e2:	9000      	str	r0, [sp, #0]
 80092e4:	9101      	str	r1, [sp, #4]
 80092e6:	f7f8 ff15 	bl	8002114 <__aeabi_dsub>
 80092ea:	0002      	movs	r2, r0
 80092ec:	000b      	movs	r3, r1
 80092ee:	0020      	movs	r0, r4
 80092f0:	0029      	movs	r1, r5
 80092f2:	f7f8 ff0f 	bl	8002114 <__aeabi_dsub>
 80092f6:	9c04      	ldr	r4, [sp, #16]
 80092f8:	9d05      	ldr	r5, [sp, #20]
 80092fa:	2400      	movs	r4, #0
 80092fc:	0006      	movs	r6, r0
 80092fe:	000f      	movs	r7, r1
 8009300:	9804      	ldr	r0, [sp, #16]
 8009302:	9905      	ldr	r1, [sp, #20]
 8009304:	0022      	movs	r2, r4
 8009306:	002b      	movs	r3, r5
 8009308:	9402      	str	r4, [sp, #8]
 800930a:	9503      	str	r5, [sp, #12]
 800930c:	f7f8 ff02 	bl	8002114 <__aeabi_dsub>
 8009310:	9a00      	ldr	r2, [sp, #0]
 8009312:	9b01      	ldr	r3, [sp, #4]
 8009314:	f7f8 fc18 	bl	8001b48 <__aeabi_dmul>
 8009318:	9a04      	ldr	r2, [sp, #16]
 800931a:	9b05      	ldr	r3, [sp, #20]
 800931c:	9008      	str	r0, [sp, #32]
 800931e:	9109      	str	r1, [sp, #36]	@ 0x24
 8009320:	0030      	movs	r0, r6
 8009322:	0039      	movs	r1, r7
 8009324:	f7f8 fc10 	bl	8001b48 <__aeabi_dmul>
 8009328:	0002      	movs	r2, r0
 800932a:	000b      	movs	r3, r1
 800932c:	9808      	ldr	r0, [sp, #32]
 800932e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009330:	f7f7 fc0a 	bl	8000b48 <__aeabi_dadd>
 8009334:	0022      	movs	r2, r4
 8009336:	002b      	movs	r3, r5
 8009338:	9004      	str	r0, [sp, #16]
 800933a:	9105      	str	r1, [sp, #20]
 800933c:	9800      	ldr	r0, [sp, #0]
 800933e:	9901      	ldr	r1, [sp, #4]
 8009340:	f7f8 fc02 	bl	8001b48 <__aeabi_dmul>
 8009344:	000b      	movs	r3, r1
 8009346:	0002      	movs	r2, r0
 8009348:	9000      	str	r0, [sp, #0]
 800934a:	9101      	str	r1, [sp, #4]
 800934c:	9804      	ldr	r0, [sp, #16]
 800934e:	9905      	ldr	r1, [sp, #20]
 8009350:	f7f7 fbfa 	bl	8000b48 <__aeabi_dadd>
 8009354:	4b13      	ldr	r3, [pc, #76]	@ (80093a4 <__ieee754_pow+0x410>)
 8009356:	0006      	movs	r6, r0
 8009358:	000f      	movs	r7, r1
 800935a:	9108      	str	r1, [sp, #32]
 800935c:	4299      	cmp	r1, r3
 800935e:	dc00      	bgt.n	8009362 <__ieee754_pow+0x3ce>
 8009360:	e1c0      	b.n	80096e4 <__ieee754_pow+0x750>
 8009362:	4b11      	ldr	r3, [pc, #68]	@ (80093a8 <__ieee754_pow+0x414>)
 8009364:	18cb      	adds	r3, r1, r3
 8009366:	4303      	orrs	r3, r0
 8009368:	42a3      	cmp	r3, r4
 800936a:	d100      	bne.n	800936e <__ieee754_pow+0x3da>
 800936c:	e1a1      	b.n	80096b2 <__ieee754_pow+0x71e>
 800936e:	9806      	ldr	r0, [sp, #24]
 8009370:	9907      	ldr	r1, [sp, #28]
 8009372:	2300      	movs	r3, #0
 8009374:	2200      	movs	r2, #0
 8009376:	f7f7 f86f 	bl	8000458 <__aeabi_dcmplt>
 800937a:	1e43      	subs	r3, r0, #1
 800937c:	4198      	sbcs	r0, r3
 800937e:	e723      	b.n	80091c8 <__ieee754_pow+0x234>
 8009380:	3ff00000 	.word	0x3ff00000
 8009384:	3ff71547 	.word	0x3ff71547
 8009388:	f85ddf44 	.word	0xf85ddf44
 800938c:	3e54ae0b 	.word	0x3e54ae0b
 8009390:	3fd00000 	.word	0x3fd00000
 8009394:	55555555 	.word	0x55555555
 8009398:	3fd55555 	.word	0x3fd55555
 800939c:	3fe00000 	.word	0x3fe00000
 80093a0:	652b82fe 	.word	0x652b82fe
 80093a4:	408fffff 	.word	0x408fffff
 80093a8:	bf700000 	.word	0xbf700000
 80093ac:	4bdc      	ldr	r3, [pc, #880]	@ (8009720 <__ieee754_pow+0x78c>)
 80093ae:	9903      	ldr	r1, [sp, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	420b      	tst	r3, r1
 80093b4:	d10b      	bne.n	80093ce <__ieee754_pow+0x43a>
 80093b6:	9800      	ldr	r0, [sp, #0]
 80093b8:	9901      	ldr	r1, [sp, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	4bd9      	ldr	r3, [pc, #868]	@ (8009724 <__ieee754_pow+0x790>)
 80093be:	f7f8 fbc3 	bl	8001b48 <__aeabi_dmul>
 80093c2:	2235      	movs	r2, #53	@ 0x35
 80093c4:	9000      	str	r0, [sp, #0]
 80093c6:	9101      	str	r1, [sp, #4]
 80093c8:	9b01      	ldr	r3, [sp, #4]
 80093ca:	4252      	negs	r2, r2
 80093cc:	9308      	str	r3, [sp, #32]
 80093ce:	9b08      	ldr	r3, [sp, #32]
 80093d0:	49d5      	ldr	r1, [pc, #852]	@ (8009728 <__ieee754_pow+0x794>)
 80093d2:	151b      	asrs	r3, r3, #20
 80093d4:	185b      	adds	r3, r3, r1
 80093d6:	189b      	adds	r3, r3, r2
 80093d8:	930e      	str	r3, [sp, #56]	@ 0x38
 80093da:	9b08      	ldr	r3, [sp, #32]
 80093dc:	4dd3      	ldr	r5, [pc, #844]	@ (800972c <__ieee754_pow+0x798>)
 80093de:	031b      	lsls	r3, r3, #12
 80093e0:	4ad3      	ldr	r2, [pc, #844]	@ (8009730 <__ieee754_pow+0x79c>)
 80093e2:	0b1b      	lsrs	r3, r3, #12
 80093e4:	2600      	movs	r6, #0
 80093e6:	431d      	orrs	r5, r3
 80093e8:	4293      	cmp	r3, r2
 80093ea:	dd09      	ble.n	8009400 <__ieee754_pow+0x46c>
 80093ec:	4ad1      	ldr	r2, [pc, #836]	@ (8009734 <__ieee754_pow+0x7a0>)
 80093ee:	3601      	adds	r6, #1
 80093f0:	4293      	cmp	r3, r2
 80093f2:	dd05      	ble.n	8009400 <__ieee754_pow+0x46c>
 80093f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093f6:	199b      	adds	r3, r3, r6
 80093f8:	2600      	movs	r6, #0
 80093fa:	930e      	str	r3, [sp, #56]	@ 0x38
 80093fc:	4bce      	ldr	r3, [pc, #824]	@ (8009738 <__ieee754_pow+0x7a4>)
 80093fe:	18ed      	adds	r5, r5, r3
 8009400:	9800      	ldr	r0, [sp, #0]
 8009402:	9901      	ldr	r1, [sp, #4]
 8009404:	0029      	movs	r1, r5
 8009406:	4bcd      	ldr	r3, [pc, #820]	@ (800973c <__ieee754_pow+0x7a8>)
 8009408:	00f2      	lsls	r2, r6, #3
 800940a:	189b      	adds	r3, r3, r2
 800940c:	685c      	ldr	r4, [r3, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009412:	930a      	str	r3, [sp, #40]	@ 0x28
 8009414:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009416:	001a      	movs	r2, r3
 8009418:	0023      	movs	r3, r4
 800941a:	900c      	str	r0, [sp, #48]	@ 0x30
 800941c:	910d      	str	r1, [sp, #52]	@ 0x34
 800941e:	f7f8 fe79 	bl	8002114 <__aeabi_dsub>
 8009422:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009424:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009426:	9010      	str	r0, [sp, #64]	@ 0x40
 8009428:	9111      	str	r1, [sp, #68]	@ 0x44
 800942a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800942c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800942e:	f7f7 fb8b 	bl	8000b48 <__aeabi_dadd>
 8009432:	0002      	movs	r2, r0
 8009434:	000b      	movs	r3, r1
 8009436:	2000      	movs	r0, #0
 8009438:	49bc      	ldr	r1, [pc, #752]	@ (800972c <__ieee754_pow+0x798>)
 800943a:	f7f7 ff4b 	bl	80012d4 <__aeabi_ddiv>
 800943e:	0002      	movs	r2, r0
 8009440:	000b      	movs	r3, r1
 8009442:	9012      	str	r0, [sp, #72]	@ 0x48
 8009444:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009446:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009448:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800944a:	f7f8 fb7d 	bl	8001b48 <__aeabi_dmul>
 800944e:	9008      	str	r0, [sp, #32]
 8009450:	9109      	str	r1, [sp, #36]	@ 0x24
 8009452:	9b08      	ldr	r3, [sp, #32]
 8009454:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8009456:	2180      	movs	r1, #128	@ 0x80
 8009458:	9302      	str	r3, [sp, #8]
 800945a:	9403      	str	r4, [sp, #12]
 800945c:	2080      	movs	r0, #128	@ 0x80
 800945e:	2300      	movs	r3, #0
 8009460:	2200      	movs	r2, #0
 8009462:	106d      	asrs	r5, r5, #1
 8009464:	0589      	lsls	r1, r1, #22
 8009466:	9302      	str	r3, [sp, #8]
 8009468:	4329      	orrs	r1, r5
 800946a:	0300      	lsls	r0, r0, #12
 800946c:	9b02      	ldr	r3, [sp, #8]
 800946e:	9c03      	ldr	r4, [sp, #12]
 8009470:	1809      	adds	r1, r1, r0
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	9401      	str	r4, [sp, #4]
 8009476:	04b6      	lsls	r6, r6, #18
 8009478:	198b      	adds	r3, r1, r6
 800947a:	9800      	ldr	r0, [sp, #0]
 800947c:	9901      	ldr	r1, [sp, #4]
 800947e:	0014      	movs	r4, r2
 8009480:	001d      	movs	r5, r3
 8009482:	f7f8 fb61 	bl	8001b48 <__aeabi_dmul>
 8009486:	0002      	movs	r2, r0
 8009488:	000b      	movs	r3, r1
 800948a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800948c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800948e:	f7f8 fe41 	bl	8002114 <__aeabi_dsub>
 8009492:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009494:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009496:	0006      	movs	r6, r0
 8009498:	000f      	movs	r7, r1
 800949a:	0020      	movs	r0, r4
 800949c:	0029      	movs	r1, r5
 800949e:	f7f8 fe39 	bl	8002114 <__aeabi_dsub>
 80094a2:	0002      	movs	r2, r0
 80094a4:	000b      	movs	r3, r1
 80094a6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80094a8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80094aa:	f7f8 fe33 	bl	8002114 <__aeabi_dsub>
 80094ae:	9a00      	ldr	r2, [sp, #0]
 80094b0:	9b01      	ldr	r3, [sp, #4]
 80094b2:	f7f8 fb49 	bl	8001b48 <__aeabi_dmul>
 80094b6:	0002      	movs	r2, r0
 80094b8:	000b      	movs	r3, r1
 80094ba:	0030      	movs	r0, r6
 80094bc:	0039      	movs	r1, r7
 80094be:	f7f8 fe29 	bl	8002114 <__aeabi_dsub>
 80094c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80094c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80094c6:	f7f8 fb3f 	bl	8001b48 <__aeabi_dmul>
 80094ca:	9a08      	ldr	r2, [sp, #32]
 80094cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ce:	900a      	str	r0, [sp, #40]	@ 0x28
 80094d0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80094d2:	0010      	movs	r0, r2
 80094d4:	0019      	movs	r1, r3
 80094d6:	f7f8 fb37 	bl	8001b48 <__aeabi_dmul>
 80094da:	0006      	movs	r6, r0
 80094dc:	000f      	movs	r7, r1
 80094de:	4a98      	ldr	r2, [pc, #608]	@ (8009740 <__ieee754_pow+0x7ac>)
 80094e0:	4b98      	ldr	r3, [pc, #608]	@ (8009744 <__ieee754_pow+0x7b0>)
 80094e2:	f7f8 fb31 	bl	8001b48 <__aeabi_dmul>
 80094e6:	4a98      	ldr	r2, [pc, #608]	@ (8009748 <__ieee754_pow+0x7b4>)
 80094e8:	4b98      	ldr	r3, [pc, #608]	@ (800974c <__ieee754_pow+0x7b8>)
 80094ea:	f7f7 fb2d 	bl	8000b48 <__aeabi_dadd>
 80094ee:	0032      	movs	r2, r6
 80094f0:	003b      	movs	r3, r7
 80094f2:	f7f8 fb29 	bl	8001b48 <__aeabi_dmul>
 80094f6:	4a96      	ldr	r2, [pc, #600]	@ (8009750 <__ieee754_pow+0x7bc>)
 80094f8:	4b96      	ldr	r3, [pc, #600]	@ (8009754 <__ieee754_pow+0x7c0>)
 80094fa:	f7f7 fb25 	bl	8000b48 <__aeabi_dadd>
 80094fe:	0032      	movs	r2, r6
 8009500:	003b      	movs	r3, r7
 8009502:	f7f8 fb21 	bl	8001b48 <__aeabi_dmul>
 8009506:	4a94      	ldr	r2, [pc, #592]	@ (8009758 <__ieee754_pow+0x7c4>)
 8009508:	4b94      	ldr	r3, [pc, #592]	@ (800975c <__ieee754_pow+0x7c8>)
 800950a:	f7f7 fb1d 	bl	8000b48 <__aeabi_dadd>
 800950e:	0032      	movs	r2, r6
 8009510:	003b      	movs	r3, r7
 8009512:	f7f8 fb19 	bl	8001b48 <__aeabi_dmul>
 8009516:	4a92      	ldr	r2, [pc, #584]	@ (8009760 <__ieee754_pow+0x7cc>)
 8009518:	4b92      	ldr	r3, [pc, #584]	@ (8009764 <__ieee754_pow+0x7d0>)
 800951a:	f7f7 fb15 	bl	8000b48 <__aeabi_dadd>
 800951e:	0032      	movs	r2, r6
 8009520:	003b      	movs	r3, r7
 8009522:	f7f8 fb11 	bl	8001b48 <__aeabi_dmul>
 8009526:	4a90      	ldr	r2, [pc, #576]	@ (8009768 <__ieee754_pow+0x7d4>)
 8009528:	4b90      	ldr	r3, [pc, #576]	@ (800976c <__ieee754_pow+0x7d8>)
 800952a:	f7f7 fb0d 	bl	8000b48 <__aeabi_dadd>
 800952e:	0032      	movs	r2, r6
 8009530:	0004      	movs	r4, r0
 8009532:	000d      	movs	r5, r1
 8009534:	003b      	movs	r3, r7
 8009536:	0030      	movs	r0, r6
 8009538:	0039      	movs	r1, r7
 800953a:	f7f8 fb05 	bl	8001b48 <__aeabi_dmul>
 800953e:	0002      	movs	r2, r0
 8009540:	000b      	movs	r3, r1
 8009542:	0020      	movs	r0, r4
 8009544:	0029      	movs	r1, r5
 8009546:	f7f8 faff 	bl	8001b48 <__aeabi_dmul>
 800954a:	9a00      	ldr	r2, [sp, #0]
 800954c:	9b01      	ldr	r3, [sp, #4]
 800954e:	0004      	movs	r4, r0
 8009550:	000d      	movs	r5, r1
 8009552:	9808      	ldr	r0, [sp, #32]
 8009554:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009556:	f7f7 faf7 	bl	8000b48 <__aeabi_dadd>
 800955a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800955c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800955e:	f7f8 faf3 	bl	8001b48 <__aeabi_dmul>
 8009562:	0022      	movs	r2, r4
 8009564:	002b      	movs	r3, r5
 8009566:	f7f7 faef 	bl	8000b48 <__aeabi_dadd>
 800956a:	9a00      	ldr	r2, [sp, #0]
 800956c:	9b01      	ldr	r3, [sp, #4]
 800956e:	900c      	str	r0, [sp, #48]	@ 0x30
 8009570:	910d      	str	r1, [sp, #52]	@ 0x34
 8009572:	0010      	movs	r0, r2
 8009574:	0019      	movs	r1, r3
 8009576:	f7f8 fae7 	bl	8001b48 <__aeabi_dmul>
 800957a:	2200      	movs	r2, #0
 800957c:	4b7c      	ldr	r3, [pc, #496]	@ (8009770 <__ieee754_pow+0x7dc>)
 800957e:	0004      	movs	r4, r0
 8009580:	000d      	movs	r5, r1
 8009582:	f7f7 fae1 	bl	8000b48 <__aeabi_dadd>
 8009586:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009588:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800958a:	f7f7 fadd 	bl	8000b48 <__aeabi_dadd>
 800958e:	2000      	movs	r0, #0
 8009590:	000f      	movs	r7, r1
 8009592:	0006      	movs	r6, r0
 8009594:	0002      	movs	r2, r0
 8009596:	000b      	movs	r3, r1
 8009598:	9800      	ldr	r0, [sp, #0]
 800959a:	9901      	ldr	r1, [sp, #4]
 800959c:	f7f8 fad4 	bl	8001b48 <__aeabi_dmul>
 80095a0:	2200      	movs	r2, #0
 80095a2:	9000      	str	r0, [sp, #0]
 80095a4:	9101      	str	r1, [sp, #4]
 80095a6:	4b72      	ldr	r3, [pc, #456]	@ (8009770 <__ieee754_pow+0x7dc>)
 80095a8:	0030      	movs	r0, r6
 80095aa:	0039      	movs	r1, r7
 80095ac:	f7f8 fdb2 	bl	8002114 <__aeabi_dsub>
 80095b0:	0022      	movs	r2, r4
 80095b2:	002b      	movs	r3, r5
 80095b4:	f7f8 fdae 	bl	8002114 <__aeabi_dsub>
 80095b8:	0002      	movs	r2, r0
 80095ba:	000b      	movs	r3, r1
 80095bc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80095be:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80095c0:	f7f8 fda8 	bl	8002114 <__aeabi_dsub>
 80095c4:	9a08      	ldr	r2, [sp, #32]
 80095c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095c8:	f7f8 fabe 	bl	8001b48 <__aeabi_dmul>
 80095cc:	0032      	movs	r2, r6
 80095ce:	0004      	movs	r4, r0
 80095d0:	000d      	movs	r5, r1
 80095d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80095d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80095d6:	003b      	movs	r3, r7
 80095d8:	f7f8 fab6 	bl	8001b48 <__aeabi_dmul>
 80095dc:	0002      	movs	r2, r0
 80095de:	000b      	movs	r3, r1
 80095e0:	0020      	movs	r0, r4
 80095e2:	0029      	movs	r1, r5
 80095e4:	f7f7 fab0 	bl	8000b48 <__aeabi_dadd>
 80095e8:	0004      	movs	r4, r0
 80095ea:	000d      	movs	r5, r1
 80095ec:	0002      	movs	r2, r0
 80095ee:	000b      	movs	r3, r1
 80095f0:	9800      	ldr	r0, [sp, #0]
 80095f2:	9901      	ldr	r1, [sp, #4]
 80095f4:	f7f7 faa8 	bl	8000b48 <__aeabi_dadd>
 80095f8:	22e0      	movs	r2, #224	@ 0xe0
 80095fa:	2000      	movs	r0, #0
 80095fc:	4b5d      	ldr	r3, [pc, #372]	@ (8009774 <__ieee754_pow+0x7e0>)
 80095fe:	0612      	lsls	r2, r2, #24
 8009600:	0006      	movs	r6, r0
 8009602:	000f      	movs	r7, r1
 8009604:	f7f8 faa0 	bl	8001b48 <__aeabi_dmul>
 8009608:	9008      	str	r0, [sp, #32]
 800960a:	9109      	str	r1, [sp, #36]	@ 0x24
 800960c:	9a00      	ldr	r2, [sp, #0]
 800960e:	9b01      	ldr	r3, [sp, #4]
 8009610:	0030      	movs	r0, r6
 8009612:	0039      	movs	r1, r7
 8009614:	f7f8 fd7e 	bl	8002114 <__aeabi_dsub>
 8009618:	0002      	movs	r2, r0
 800961a:	000b      	movs	r3, r1
 800961c:	0020      	movs	r0, r4
 800961e:	0029      	movs	r1, r5
 8009620:	f7f8 fd78 	bl	8002114 <__aeabi_dsub>
 8009624:	4a54      	ldr	r2, [pc, #336]	@ (8009778 <__ieee754_pow+0x7e4>)
 8009626:	4b53      	ldr	r3, [pc, #332]	@ (8009774 <__ieee754_pow+0x7e0>)
 8009628:	f7f8 fa8e 	bl	8001b48 <__aeabi_dmul>
 800962c:	4a53      	ldr	r2, [pc, #332]	@ (800977c <__ieee754_pow+0x7e8>)
 800962e:	0004      	movs	r4, r0
 8009630:	000d      	movs	r5, r1
 8009632:	0030      	movs	r0, r6
 8009634:	0039      	movs	r1, r7
 8009636:	4b52      	ldr	r3, [pc, #328]	@ (8009780 <__ieee754_pow+0x7ec>)
 8009638:	f7f8 fa86 	bl	8001b48 <__aeabi_dmul>
 800963c:	0002      	movs	r2, r0
 800963e:	000b      	movs	r3, r1
 8009640:	0020      	movs	r0, r4
 8009642:	0029      	movs	r1, r5
 8009644:	f7f7 fa80 	bl	8000b48 <__aeabi_dadd>
 8009648:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800964a:	4b4e      	ldr	r3, [pc, #312]	@ (8009784 <__ieee754_pow+0x7f0>)
 800964c:	189b      	adds	r3, r3, r2
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	f7f7 fa79 	bl	8000b48 <__aeabi_dadd>
 8009656:	900a      	str	r0, [sp, #40]	@ 0x28
 8009658:	910b      	str	r1, [sp, #44]	@ 0x2c
 800965a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800965c:	f7f9 f9c2 	bl	80029e4 <__aeabi_i2d>
 8009660:	0004      	movs	r4, r0
 8009662:	000d      	movs	r5, r1
 8009664:	9808      	ldr	r0, [sp, #32]
 8009666:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009668:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800966a:	4b47      	ldr	r3, [pc, #284]	@ (8009788 <__ieee754_pow+0x7f4>)
 800966c:	189b      	adds	r3, r3, r2
 800966e:	681e      	ldr	r6, [r3, #0]
 8009670:	685f      	ldr	r7, [r3, #4]
 8009672:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009674:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009676:	f7f7 fa67 	bl	8000b48 <__aeabi_dadd>
 800967a:	0032      	movs	r2, r6
 800967c:	003b      	movs	r3, r7
 800967e:	f7f7 fa63 	bl	8000b48 <__aeabi_dadd>
 8009682:	0022      	movs	r2, r4
 8009684:	002b      	movs	r3, r5
 8009686:	f7f7 fa5f 	bl	8000b48 <__aeabi_dadd>
 800968a:	2000      	movs	r0, #0
 800968c:	0022      	movs	r2, r4
 800968e:	002b      	movs	r3, r5
 8009690:	9000      	str	r0, [sp, #0]
 8009692:	9101      	str	r1, [sp, #4]
 8009694:	f7f8 fd3e 	bl	8002114 <__aeabi_dsub>
 8009698:	0032      	movs	r2, r6
 800969a:	003b      	movs	r3, r7
 800969c:	f7f8 fd3a 	bl	8002114 <__aeabi_dsub>
 80096a0:	9a08      	ldr	r2, [sp, #32]
 80096a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096a4:	f7f8 fd36 	bl	8002114 <__aeabi_dsub>
 80096a8:	0002      	movs	r2, r0
 80096aa:	000b      	movs	r3, r1
 80096ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80096ae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80096b0:	e61f      	b.n	80092f2 <__ieee754_pow+0x35e>
 80096b2:	4a36      	ldr	r2, [pc, #216]	@ (800978c <__ieee754_pow+0x7f8>)
 80096b4:	4b36      	ldr	r3, [pc, #216]	@ (8009790 <__ieee754_pow+0x7fc>)
 80096b6:	9804      	ldr	r0, [sp, #16]
 80096b8:	9905      	ldr	r1, [sp, #20]
 80096ba:	f7f7 fa45 	bl	8000b48 <__aeabi_dadd>
 80096be:	9a00      	ldr	r2, [sp, #0]
 80096c0:	9b01      	ldr	r3, [sp, #4]
 80096c2:	0004      	movs	r4, r0
 80096c4:	000d      	movs	r5, r1
 80096c6:	0030      	movs	r0, r6
 80096c8:	0039      	movs	r1, r7
 80096ca:	f7f8 fd23 	bl	8002114 <__aeabi_dsub>
 80096ce:	0002      	movs	r2, r0
 80096d0:	000b      	movs	r3, r1
 80096d2:	0020      	movs	r0, r4
 80096d4:	0029      	movs	r1, r5
 80096d6:	f7f6 fed3 	bl	8000480 <__aeabi_dcmpgt>
 80096da:	2800      	cmp	r0, #0
 80096dc:	d000      	beq.n	80096e0 <__ieee754_pow+0x74c>
 80096de:	e646      	b.n	800936e <__ieee754_pow+0x3da>
 80096e0:	4b2c      	ldr	r3, [pc, #176]	@ (8009794 <__ieee754_pow+0x800>)
 80096e2:	e063      	b.n	80097ac <__ieee754_pow+0x818>
 80096e4:	4a2c      	ldr	r2, [pc, #176]	@ (8009798 <__ieee754_pow+0x804>)
 80096e6:	004b      	lsls	r3, r1, #1
 80096e8:	085b      	lsrs	r3, r3, #1
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d95a      	bls.n	80097a4 <__ieee754_pow+0x810>
 80096ee:	4b2b      	ldr	r3, [pc, #172]	@ (800979c <__ieee754_pow+0x808>)
 80096f0:	18cb      	adds	r3, r1, r3
 80096f2:	4303      	orrs	r3, r0
 80096f4:	d008      	beq.n	8009708 <__ieee754_pow+0x774>
 80096f6:	9806      	ldr	r0, [sp, #24]
 80096f8:	9907      	ldr	r1, [sp, #28]
 80096fa:	2300      	movs	r3, #0
 80096fc:	2200      	movs	r2, #0
 80096fe:	f7f6 feab 	bl	8000458 <__aeabi_dcmplt>
 8009702:	1e43      	subs	r3, r0, #1
 8009704:	4198      	sbcs	r0, r3
 8009706:	e567      	b.n	80091d8 <__ieee754_pow+0x244>
 8009708:	9a00      	ldr	r2, [sp, #0]
 800970a:	9b01      	ldr	r3, [sp, #4]
 800970c:	f7f8 fd02 	bl	8002114 <__aeabi_dsub>
 8009710:	9a04      	ldr	r2, [sp, #16]
 8009712:	9b05      	ldr	r3, [sp, #20]
 8009714:	f7f6 febe 	bl	8000494 <__aeabi_dcmpge>
 8009718:	2800      	cmp	r0, #0
 800971a:	d1ec      	bne.n	80096f6 <__ieee754_pow+0x762>
 800971c:	4b20      	ldr	r3, [pc, #128]	@ (80097a0 <__ieee754_pow+0x80c>)
 800971e:	e045      	b.n	80097ac <__ieee754_pow+0x818>
 8009720:	7ff00000 	.word	0x7ff00000
 8009724:	43400000 	.word	0x43400000
 8009728:	fffffc01 	.word	0xfffffc01
 800972c:	3ff00000 	.word	0x3ff00000
 8009730:	0003988e 	.word	0x0003988e
 8009734:	000bb679 	.word	0x000bb679
 8009738:	fff00000 	.word	0xfff00000
 800973c:	0800a140 	.word	0x0800a140
 8009740:	4a454eef 	.word	0x4a454eef
 8009744:	3fca7e28 	.word	0x3fca7e28
 8009748:	93c9db65 	.word	0x93c9db65
 800974c:	3fcd864a 	.word	0x3fcd864a
 8009750:	a91d4101 	.word	0xa91d4101
 8009754:	3fd17460 	.word	0x3fd17460
 8009758:	518f264d 	.word	0x518f264d
 800975c:	3fd55555 	.word	0x3fd55555
 8009760:	db6fabff 	.word	0xdb6fabff
 8009764:	3fdb6db6 	.word	0x3fdb6db6
 8009768:	33333303 	.word	0x33333303
 800976c:	3fe33333 	.word	0x3fe33333
 8009770:	40080000 	.word	0x40080000
 8009774:	3feec709 	.word	0x3feec709
 8009778:	dc3a03fd 	.word	0xdc3a03fd
 800977c:	145b01f5 	.word	0x145b01f5
 8009780:	be3e2fe0 	.word	0xbe3e2fe0
 8009784:	0800a120 	.word	0x0800a120
 8009788:	0800a130 	.word	0x0800a130
 800978c:	652b82fe 	.word	0x652b82fe
 8009790:	3c971547 	.word	0x3c971547
 8009794:	40900000 	.word	0x40900000
 8009798:	4090cbff 	.word	0x4090cbff
 800979c:	3f6f3400 	.word	0x3f6f3400
 80097a0:	4090cc00 	.word	0x4090cc00
 80097a4:	4a73      	ldr	r2, [pc, #460]	@ (8009974 <__ieee754_pow+0x9e0>)
 80097a6:	9402      	str	r4, [sp, #8]
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d925      	bls.n	80097f8 <__ieee754_pow+0x864>
 80097ac:	4a72      	ldr	r2, [pc, #456]	@ (8009978 <__ieee754_pow+0x9e4>)
 80097ae:	151b      	asrs	r3, r3, #20
 80097b0:	189b      	adds	r3, r3, r2
 80097b2:	2280      	movs	r2, #128	@ 0x80
 80097b4:	0352      	lsls	r2, r2, #13
 80097b6:	0011      	movs	r1, r2
 80097b8:	4119      	asrs	r1, r3
 80097ba:	19cb      	adds	r3, r1, r7
 80097bc:	005c      	lsls	r4, r3, #1
 80097be:	496f      	ldr	r1, [pc, #444]	@ (800997c <__ieee754_pow+0x9e8>)
 80097c0:	4d6f      	ldr	r5, [pc, #444]	@ (8009980 <__ieee754_pow+0x9ec>)
 80097c2:	0d64      	lsrs	r4, r4, #21
 80097c4:	1864      	adds	r4, r4, r1
 80097c6:	4125      	asrs	r5, r4
 80097c8:	401d      	ands	r5, r3
 80097ca:	031b      	lsls	r3, r3, #12
 80097cc:	0b1b      	lsrs	r3, r3, #12
 80097ce:	4313      	orrs	r3, r2
 80097d0:	2214      	movs	r2, #20
 80097d2:	1b12      	subs	r2, r2, r4
 80097d4:	4113      	asrs	r3, r2
 80097d6:	9302      	str	r3, [sp, #8]
 80097d8:	9b08      	ldr	r3, [sp, #32]
 80097da:	2000      	movs	r0, #0
 80097dc:	0029      	movs	r1, r5
 80097de:	2b00      	cmp	r3, #0
 80097e0:	da02      	bge.n	80097e8 <__ieee754_pow+0x854>
 80097e2:	9b02      	ldr	r3, [sp, #8]
 80097e4:	425b      	negs	r3, r3
 80097e6:	9302      	str	r3, [sp, #8]
 80097e8:	0002      	movs	r2, r0
 80097ea:	000b      	movs	r3, r1
 80097ec:	9800      	ldr	r0, [sp, #0]
 80097ee:	9901      	ldr	r1, [sp, #4]
 80097f0:	f7f8 fc90 	bl	8002114 <__aeabi_dsub>
 80097f4:	9000      	str	r0, [sp, #0]
 80097f6:	9101      	str	r1, [sp, #4]
 80097f8:	9a04      	ldr	r2, [sp, #16]
 80097fa:	9b05      	ldr	r3, [sp, #20]
 80097fc:	9800      	ldr	r0, [sp, #0]
 80097fe:	9901      	ldr	r1, [sp, #4]
 8009800:	f7f7 f9a2 	bl	8000b48 <__aeabi_dadd>
 8009804:	2000      	movs	r0, #0
 8009806:	2200      	movs	r2, #0
 8009808:	4b5e      	ldr	r3, [pc, #376]	@ (8009984 <__ieee754_pow+0x9f0>)
 800980a:	0006      	movs	r6, r0
 800980c:	000f      	movs	r7, r1
 800980e:	f7f8 f99b 	bl	8001b48 <__aeabi_dmul>
 8009812:	9a00      	ldr	r2, [sp, #0]
 8009814:	9b01      	ldr	r3, [sp, #4]
 8009816:	9008      	str	r0, [sp, #32]
 8009818:	9109      	str	r1, [sp, #36]	@ 0x24
 800981a:	0030      	movs	r0, r6
 800981c:	0039      	movs	r1, r7
 800981e:	f7f8 fc79 	bl	8002114 <__aeabi_dsub>
 8009822:	0002      	movs	r2, r0
 8009824:	000b      	movs	r3, r1
 8009826:	9804      	ldr	r0, [sp, #16]
 8009828:	9905      	ldr	r1, [sp, #20]
 800982a:	f7f8 fc73 	bl	8002114 <__aeabi_dsub>
 800982e:	4a56      	ldr	r2, [pc, #344]	@ (8009988 <__ieee754_pow+0x9f4>)
 8009830:	4b56      	ldr	r3, [pc, #344]	@ (800998c <__ieee754_pow+0x9f8>)
 8009832:	f7f8 f989 	bl	8001b48 <__aeabi_dmul>
 8009836:	4a56      	ldr	r2, [pc, #344]	@ (8009990 <__ieee754_pow+0x9fc>)
 8009838:	0004      	movs	r4, r0
 800983a:	000d      	movs	r5, r1
 800983c:	0030      	movs	r0, r6
 800983e:	0039      	movs	r1, r7
 8009840:	4b54      	ldr	r3, [pc, #336]	@ (8009994 <__ieee754_pow+0xa00>)
 8009842:	f7f8 f981 	bl	8001b48 <__aeabi_dmul>
 8009846:	0002      	movs	r2, r0
 8009848:	000b      	movs	r3, r1
 800984a:	0020      	movs	r0, r4
 800984c:	0029      	movs	r1, r5
 800984e:	f7f7 f97b 	bl	8000b48 <__aeabi_dadd>
 8009852:	0004      	movs	r4, r0
 8009854:	000d      	movs	r5, r1
 8009856:	0002      	movs	r2, r0
 8009858:	000b      	movs	r3, r1
 800985a:	9808      	ldr	r0, [sp, #32]
 800985c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800985e:	f7f7 f973 	bl	8000b48 <__aeabi_dadd>
 8009862:	9a08      	ldr	r2, [sp, #32]
 8009864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009866:	0006      	movs	r6, r0
 8009868:	000f      	movs	r7, r1
 800986a:	f7f8 fc53 	bl	8002114 <__aeabi_dsub>
 800986e:	0002      	movs	r2, r0
 8009870:	000b      	movs	r3, r1
 8009872:	0020      	movs	r0, r4
 8009874:	0029      	movs	r1, r5
 8009876:	f7f8 fc4d 	bl	8002114 <__aeabi_dsub>
 800987a:	0032      	movs	r2, r6
 800987c:	9000      	str	r0, [sp, #0]
 800987e:	9101      	str	r1, [sp, #4]
 8009880:	003b      	movs	r3, r7
 8009882:	0030      	movs	r0, r6
 8009884:	0039      	movs	r1, r7
 8009886:	f7f8 f95f 	bl	8001b48 <__aeabi_dmul>
 800988a:	0004      	movs	r4, r0
 800988c:	000d      	movs	r5, r1
 800988e:	4a42      	ldr	r2, [pc, #264]	@ (8009998 <__ieee754_pow+0xa04>)
 8009890:	4b42      	ldr	r3, [pc, #264]	@ (800999c <__ieee754_pow+0xa08>)
 8009892:	f7f8 f959 	bl	8001b48 <__aeabi_dmul>
 8009896:	4a42      	ldr	r2, [pc, #264]	@ (80099a0 <__ieee754_pow+0xa0c>)
 8009898:	4b42      	ldr	r3, [pc, #264]	@ (80099a4 <__ieee754_pow+0xa10>)
 800989a:	f7f8 fc3b 	bl	8002114 <__aeabi_dsub>
 800989e:	0022      	movs	r2, r4
 80098a0:	002b      	movs	r3, r5
 80098a2:	f7f8 f951 	bl	8001b48 <__aeabi_dmul>
 80098a6:	4a40      	ldr	r2, [pc, #256]	@ (80099a8 <__ieee754_pow+0xa14>)
 80098a8:	4b40      	ldr	r3, [pc, #256]	@ (80099ac <__ieee754_pow+0xa18>)
 80098aa:	f7f7 f94d 	bl	8000b48 <__aeabi_dadd>
 80098ae:	0022      	movs	r2, r4
 80098b0:	002b      	movs	r3, r5
 80098b2:	f7f8 f949 	bl	8001b48 <__aeabi_dmul>
 80098b6:	4a3e      	ldr	r2, [pc, #248]	@ (80099b0 <__ieee754_pow+0xa1c>)
 80098b8:	4b3e      	ldr	r3, [pc, #248]	@ (80099b4 <__ieee754_pow+0xa20>)
 80098ba:	f7f8 fc2b 	bl	8002114 <__aeabi_dsub>
 80098be:	0022      	movs	r2, r4
 80098c0:	002b      	movs	r3, r5
 80098c2:	f7f8 f941 	bl	8001b48 <__aeabi_dmul>
 80098c6:	4a3c      	ldr	r2, [pc, #240]	@ (80099b8 <__ieee754_pow+0xa24>)
 80098c8:	4b3c      	ldr	r3, [pc, #240]	@ (80099bc <__ieee754_pow+0xa28>)
 80098ca:	f7f7 f93d 	bl	8000b48 <__aeabi_dadd>
 80098ce:	0022      	movs	r2, r4
 80098d0:	002b      	movs	r3, r5
 80098d2:	f7f8 f939 	bl	8001b48 <__aeabi_dmul>
 80098d6:	0002      	movs	r2, r0
 80098d8:	000b      	movs	r3, r1
 80098da:	0030      	movs	r0, r6
 80098dc:	0039      	movs	r1, r7
 80098de:	f7f8 fc19 	bl	8002114 <__aeabi_dsub>
 80098e2:	0004      	movs	r4, r0
 80098e4:	000d      	movs	r5, r1
 80098e6:	0002      	movs	r2, r0
 80098e8:	000b      	movs	r3, r1
 80098ea:	0030      	movs	r0, r6
 80098ec:	0039      	movs	r1, r7
 80098ee:	f7f8 f92b 	bl	8001b48 <__aeabi_dmul>
 80098f2:	2380      	movs	r3, #128	@ 0x80
 80098f4:	9004      	str	r0, [sp, #16]
 80098f6:	9105      	str	r1, [sp, #20]
 80098f8:	2200      	movs	r2, #0
 80098fa:	0020      	movs	r0, r4
 80098fc:	0029      	movs	r1, r5
 80098fe:	05db      	lsls	r3, r3, #23
 8009900:	f7f8 fc08 	bl	8002114 <__aeabi_dsub>
 8009904:	0002      	movs	r2, r0
 8009906:	000b      	movs	r3, r1
 8009908:	9804      	ldr	r0, [sp, #16]
 800990a:	9905      	ldr	r1, [sp, #20]
 800990c:	f7f7 fce2 	bl	80012d4 <__aeabi_ddiv>
 8009910:	9a00      	ldr	r2, [sp, #0]
 8009912:	9b01      	ldr	r3, [sp, #4]
 8009914:	0004      	movs	r4, r0
 8009916:	000d      	movs	r5, r1
 8009918:	0030      	movs	r0, r6
 800991a:	0039      	movs	r1, r7
 800991c:	f7f8 f914 	bl	8001b48 <__aeabi_dmul>
 8009920:	9a00      	ldr	r2, [sp, #0]
 8009922:	9b01      	ldr	r3, [sp, #4]
 8009924:	f7f7 f910 	bl	8000b48 <__aeabi_dadd>
 8009928:	0002      	movs	r2, r0
 800992a:	000b      	movs	r3, r1
 800992c:	0020      	movs	r0, r4
 800992e:	0029      	movs	r1, r5
 8009930:	f7f8 fbf0 	bl	8002114 <__aeabi_dsub>
 8009934:	0032      	movs	r2, r6
 8009936:	003b      	movs	r3, r7
 8009938:	f7f8 fbec 	bl	8002114 <__aeabi_dsub>
 800993c:	0002      	movs	r2, r0
 800993e:	000b      	movs	r3, r1
 8009940:	2000      	movs	r0, #0
 8009942:	491f      	ldr	r1, [pc, #124]	@ (80099c0 <__ieee754_pow+0xa2c>)
 8009944:	f7f8 fbe6 	bl	8002114 <__aeabi_dsub>
 8009948:	9b02      	ldr	r3, [sp, #8]
 800994a:	051b      	lsls	r3, r3, #20
 800994c:	185b      	adds	r3, r3, r1
 800994e:	151a      	asrs	r2, r3, #20
 8009950:	2a00      	cmp	r2, #0
 8009952:	dc06      	bgt.n	8009962 <__ieee754_pow+0x9ce>
 8009954:	9a02      	ldr	r2, [sp, #8]
 8009956:	f000 f839 	bl	80099cc <scalbn>
 800995a:	9a06      	ldr	r2, [sp, #24]
 800995c:	9b07      	ldr	r3, [sp, #28]
 800995e:	f7ff fb8b 	bl	8009078 <__ieee754_pow+0xe4>
 8009962:	0019      	movs	r1, r3
 8009964:	e7f9      	b.n	800995a <__ieee754_pow+0x9c6>
 8009966:	2300      	movs	r3, #0
 8009968:	4c15      	ldr	r4, [pc, #84]	@ (80099c0 <__ieee754_pow+0xa2c>)
 800996a:	9300      	str	r3, [sp, #0]
 800996c:	9401      	str	r4, [sp, #4]
 800996e:	f7ff fbc8 	bl	8009102 <__ieee754_pow+0x16e>
 8009972:	46c0      	nop			@ (mov r8, r8)
 8009974:	3fe00000 	.word	0x3fe00000
 8009978:	fffffc02 	.word	0xfffffc02
 800997c:	fffffc01 	.word	0xfffffc01
 8009980:	fff00000 	.word	0xfff00000
 8009984:	3fe62e43 	.word	0x3fe62e43
 8009988:	fefa39ef 	.word	0xfefa39ef
 800998c:	3fe62e42 	.word	0x3fe62e42
 8009990:	0ca86c39 	.word	0x0ca86c39
 8009994:	be205c61 	.word	0xbe205c61
 8009998:	72bea4d0 	.word	0x72bea4d0
 800999c:	3e663769 	.word	0x3e663769
 80099a0:	c5d26bf1 	.word	0xc5d26bf1
 80099a4:	3ebbbd41 	.word	0x3ebbbd41
 80099a8:	af25de2c 	.word	0xaf25de2c
 80099ac:	3f11566a 	.word	0x3f11566a
 80099b0:	16bebd93 	.word	0x16bebd93
 80099b4:	3f66c16c 	.word	0x3f66c16c
 80099b8:	5555553e 	.word	0x5555553e
 80099bc:	3fc55555 	.word	0x3fc55555
 80099c0:	3ff00000 	.word	0x3ff00000

080099c4 <fabs>:
 80099c4:	0049      	lsls	r1, r1, #1
 80099c6:	084b      	lsrs	r3, r1, #1
 80099c8:	0019      	movs	r1, r3
 80099ca:	4770      	bx	lr

080099cc <scalbn>:
 80099cc:	004b      	lsls	r3, r1, #1
 80099ce:	b570      	push	{r4, r5, r6, lr}
 80099d0:	0d5b      	lsrs	r3, r3, #21
 80099d2:	0014      	movs	r4, r2
 80099d4:	000d      	movs	r5, r1
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d10f      	bne.n	80099fa <scalbn+0x2e>
 80099da:	004b      	lsls	r3, r1, #1
 80099dc:	085b      	lsrs	r3, r3, #1
 80099de:	4303      	orrs	r3, r0
 80099e0:	d012      	beq.n	8009a08 <scalbn+0x3c>
 80099e2:	4b23      	ldr	r3, [pc, #140]	@ (8009a70 <scalbn+0xa4>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	f7f8 f8af 	bl	8001b48 <__aeabi_dmul>
 80099ea:	4b22      	ldr	r3, [pc, #136]	@ (8009a74 <scalbn+0xa8>)
 80099ec:	429c      	cmp	r4, r3
 80099ee:	da0c      	bge.n	8009a0a <scalbn+0x3e>
 80099f0:	4a21      	ldr	r2, [pc, #132]	@ (8009a78 <scalbn+0xac>)
 80099f2:	4b22      	ldr	r3, [pc, #136]	@ (8009a7c <scalbn+0xb0>)
 80099f4:	f7f8 f8a8 	bl	8001b48 <__aeabi_dmul>
 80099f8:	e006      	b.n	8009a08 <scalbn+0x3c>
 80099fa:	4a21      	ldr	r2, [pc, #132]	@ (8009a80 <scalbn+0xb4>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d108      	bne.n	8009a12 <scalbn+0x46>
 8009a00:	0002      	movs	r2, r0
 8009a02:	000b      	movs	r3, r1
 8009a04:	f7f7 f8a0 	bl	8000b48 <__aeabi_dadd>
 8009a08:	bd70      	pop	{r4, r5, r6, pc}
 8009a0a:	000d      	movs	r5, r1
 8009a0c:	004b      	lsls	r3, r1, #1
 8009a0e:	0d5b      	lsrs	r3, r3, #21
 8009a10:	3b36      	subs	r3, #54	@ 0x36
 8009a12:	4a1c      	ldr	r2, [pc, #112]	@ (8009a84 <scalbn+0xb8>)
 8009a14:	4294      	cmp	r4, r2
 8009a16:	dd0a      	ble.n	8009a2e <scalbn+0x62>
 8009a18:	4c1b      	ldr	r4, [pc, #108]	@ (8009a88 <scalbn+0xbc>)
 8009a1a:	4d1c      	ldr	r5, [pc, #112]	@ (8009a8c <scalbn+0xc0>)
 8009a1c:	2900      	cmp	r1, #0
 8009a1e:	da01      	bge.n	8009a24 <scalbn+0x58>
 8009a20:	4c19      	ldr	r4, [pc, #100]	@ (8009a88 <scalbn+0xbc>)
 8009a22:	4d1b      	ldr	r5, [pc, #108]	@ (8009a90 <scalbn+0xc4>)
 8009a24:	4a18      	ldr	r2, [pc, #96]	@ (8009a88 <scalbn+0xbc>)
 8009a26:	4b19      	ldr	r3, [pc, #100]	@ (8009a8c <scalbn+0xc0>)
 8009a28:	0020      	movs	r0, r4
 8009a2a:	0029      	movs	r1, r5
 8009a2c:	e7e2      	b.n	80099f4 <scalbn+0x28>
 8009a2e:	18e2      	adds	r2, r4, r3
 8009a30:	4b18      	ldr	r3, [pc, #96]	@ (8009a94 <scalbn+0xc8>)
 8009a32:	429a      	cmp	r2, r3
 8009a34:	dcf0      	bgt.n	8009a18 <scalbn+0x4c>
 8009a36:	2a00      	cmp	r2, #0
 8009a38:	dd05      	ble.n	8009a46 <scalbn+0x7a>
 8009a3a:	4b17      	ldr	r3, [pc, #92]	@ (8009a98 <scalbn+0xcc>)
 8009a3c:	0512      	lsls	r2, r2, #20
 8009a3e:	402b      	ands	r3, r5
 8009a40:	4313      	orrs	r3, r2
 8009a42:	0019      	movs	r1, r3
 8009a44:	e7e0      	b.n	8009a08 <scalbn+0x3c>
 8009a46:	0013      	movs	r3, r2
 8009a48:	3335      	adds	r3, #53	@ 0x35
 8009a4a:	da08      	bge.n	8009a5e <scalbn+0x92>
 8009a4c:	4c0a      	ldr	r4, [pc, #40]	@ (8009a78 <scalbn+0xac>)
 8009a4e:	4d0b      	ldr	r5, [pc, #44]	@ (8009a7c <scalbn+0xb0>)
 8009a50:	2900      	cmp	r1, #0
 8009a52:	da01      	bge.n	8009a58 <scalbn+0x8c>
 8009a54:	4c08      	ldr	r4, [pc, #32]	@ (8009a78 <scalbn+0xac>)
 8009a56:	4d11      	ldr	r5, [pc, #68]	@ (8009a9c <scalbn+0xd0>)
 8009a58:	4a07      	ldr	r2, [pc, #28]	@ (8009a78 <scalbn+0xac>)
 8009a5a:	4b08      	ldr	r3, [pc, #32]	@ (8009a7c <scalbn+0xb0>)
 8009a5c:	e7e4      	b.n	8009a28 <scalbn+0x5c>
 8009a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8009a98 <scalbn+0xcc>)
 8009a60:	3236      	adds	r2, #54	@ 0x36
 8009a62:	401d      	ands	r5, r3
 8009a64:	0512      	lsls	r2, r2, #20
 8009a66:	432a      	orrs	r2, r5
 8009a68:	0011      	movs	r1, r2
 8009a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009aa0 <scalbn+0xd4>)
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	e7c1      	b.n	80099f4 <scalbn+0x28>
 8009a70:	43500000 	.word	0x43500000
 8009a74:	ffff3cb0 	.word	0xffff3cb0
 8009a78:	c2f8f359 	.word	0xc2f8f359
 8009a7c:	01a56e1f 	.word	0x01a56e1f
 8009a80:	000007ff 	.word	0x000007ff
 8009a84:	0000c350 	.word	0x0000c350
 8009a88:	8800759c 	.word	0x8800759c
 8009a8c:	7e37e43c 	.word	0x7e37e43c
 8009a90:	fe37e43c 	.word	0xfe37e43c
 8009a94:	000007fe 	.word	0x000007fe
 8009a98:	800fffff 	.word	0x800fffff
 8009a9c:	81a56e1f 	.word	0x81a56e1f
 8009aa0:	3c900000 	.word	0x3c900000

08009aa4 <with_errno>:
 8009aa4:	b570      	push	{r4, r5, r6, lr}
 8009aa6:	000d      	movs	r5, r1
 8009aa8:	0016      	movs	r6, r2
 8009aaa:	0004      	movs	r4, r0
 8009aac:	f7fc ff0a 	bl	80068c4 <__errno>
 8009ab0:	0029      	movs	r1, r5
 8009ab2:	6006      	str	r6, [r0, #0]
 8009ab4:	0020      	movs	r0, r4
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}

08009ab8 <xflow>:
 8009ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009aba:	0014      	movs	r4, r2
 8009abc:	001d      	movs	r5, r3
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	d002      	beq.n	8009ac8 <xflow+0x10>
 8009ac2:	2180      	movs	r1, #128	@ 0x80
 8009ac4:	0609      	lsls	r1, r1, #24
 8009ac6:	185b      	adds	r3, r3, r1
 8009ac8:	9200      	str	r2, [sp, #0]
 8009aca:	9301      	str	r3, [sp, #4]
 8009acc:	9a00      	ldr	r2, [sp, #0]
 8009ace:	9b01      	ldr	r3, [sp, #4]
 8009ad0:	0020      	movs	r0, r4
 8009ad2:	0029      	movs	r1, r5
 8009ad4:	f7f8 f838 	bl	8001b48 <__aeabi_dmul>
 8009ad8:	2222      	movs	r2, #34	@ 0x22
 8009ada:	f7ff ffe3 	bl	8009aa4 <with_errno>
 8009ade:	b003      	add	sp, #12
 8009ae0:	bd30      	pop	{r4, r5, pc}

08009ae2 <__math_uflow>:
 8009ae2:	2380      	movs	r3, #128	@ 0x80
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	055b      	lsls	r3, r3, #21
 8009aea:	f7ff ffe5 	bl	8009ab8 <xflow>
 8009aee:	bd10      	pop	{r4, pc}

08009af0 <__math_oflow>:
 8009af0:	23e0      	movs	r3, #224	@ 0xe0
 8009af2:	b510      	push	{r4, lr}
 8009af4:	2200      	movs	r2, #0
 8009af6:	05db      	lsls	r3, r3, #23
 8009af8:	f7ff ffde 	bl	8009ab8 <xflow>
 8009afc:	bd10      	pop	{r4, pc}
	...

08009b00 <__ieee754_sqrt>:
 8009b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b02:	000a      	movs	r2, r1
 8009b04:	000d      	movs	r5, r1
 8009b06:	496b      	ldr	r1, [pc, #428]	@ (8009cb4 <__ieee754_sqrt+0x1b4>)
 8009b08:	0004      	movs	r4, r0
 8009b0a:	0003      	movs	r3, r0
 8009b0c:	0008      	movs	r0, r1
 8009b0e:	b087      	sub	sp, #28
 8009b10:	4028      	ands	r0, r5
 8009b12:	4288      	cmp	r0, r1
 8009b14:	d111      	bne.n	8009b3a <__ieee754_sqrt+0x3a>
 8009b16:	0022      	movs	r2, r4
 8009b18:	002b      	movs	r3, r5
 8009b1a:	0020      	movs	r0, r4
 8009b1c:	0029      	movs	r1, r5
 8009b1e:	f7f8 f813 	bl	8001b48 <__aeabi_dmul>
 8009b22:	0002      	movs	r2, r0
 8009b24:	000b      	movs	r3, r1
 8009b26:	0020      	movs	r0, r4
 8009b28:	0029      	movs	r1, r5
 8009b2a:	f7f7 f80d 	bl	8000b48 <__aeabi_dadd>
 8009b2e:	0004      	movs	r4, r0
 8009b30:	000d      	movs	r5, r1
 8009b32:	0020      	movs	r0, r4
 8009b34:	0029      	movs	r1, r5
 8009b36:	b007      	add	sp, #28
 8009b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b3a:	2d00      	cmp	r5, #0
 8009b3c:	dc11      	bgt.n	8009b62 <__ieee754_sqrt+0x62>
 8009b3e:	0069      	lsls	r1, r5, #1
 8009b40:	0849      	lsrs	r1, r1, #1
 8009b42:	4321      	orrs	r1, r4
 8009b44:	d0f5      	beq.n	8009b32 <__ieee754_sqrt+0x32>
 8009b46:	2000      	movs	r0, #0
 8009b48:	4285      	cmp	r5, r0
 8009b4a:	d010      	beq.n	8009b6e <__ieee754_sqrt+0x6e>
 8009b4c:	0022      	movs	r2, r4
 8009b4e:	002b      	movs	r3, r5
 8009b50:	0020      	movs	r0, r4
 8009b52:	0029      	movs	r1, r5
 8009b54:	f7f8 fade 	bl	8002114 <__aeabi_dsub>
 8009b58:	0002      	movs	r2, r0
 8009b5a:	000b      	movs	r3, r1
 8009b5c:	f7f7 fbba 	bl	80012d4 <__aeabi_ddiv>
 8009b60:	e7e5      	b.n	8009b2e <__ieee754_sqrt+0x2e>
 8009b62:	1528      	asrs	r0, r5, #20
 8009b64:	d115      	bne.n	8009b92 <__ieee754_sqrt+0x92>
 8009b66:	2480      	movs	r4, #128	@ 0x80
 8009b68:	2100      	movs	r1, #0
 8009b6a:	0364      	lsls	r4, r4, #13
 8009b6c:	e007      	b.n	8009b7e <__ieee754_sqrt+0x7e>
 8009b6e:	0ada      	lsrs	r2, r3, #11
 8009b70:	3815      	subs	r0, #21
 8009b72:	055b      	lsls	r3, r3, #21
 8009b74:	2a00      	cmp	r2, #0
 8009b76:	d0fa      	beq.n	8009b6e <__ieee754_sqrt+0x6e>
 8009b78:	e7f5      	b.n	8009b66 <__ieee754_sqrt+0x66>
 8009b7a:	0052      	lsls	r2, r2, #1
 8009b7c:	3101      	adds	r1, #1
 8009b7e:	4222      	tst	r2, r4
 8009b80:	d0fb      	beq.n	8009b7a <__ieee754_sqrt+0x7a>
 8009b82:	1e4c      	subs	r4, r1, #1
 8009b84:	1b00      	subs	r0, r0, r4
 8009b86:	2420      	movs	r4, #32
 8009b88:	001d      	movs	r5, r3
 8009b8a:	1a64      	subs	r4, r4, r1
 8009b8c:	40e5      	lsrs	r5, r4
 8009b8e:	408b      	lsls	r3, r1
 8009b90:	432a      	orrs	r2, r5
 8009b92:	4949      	ldr	r1, [pc, #292]	@ (8009cb8 <__ieee754_sqrt+0x1b8>)
 8009b94:	0312      	lsls	r2, r2, #12
 8009b96:	1844      	adds	r4, r0, r1
 8009b98:	2180      	movs	r1, #128	@ 0x80
 8009b9a:	0b12      	lsrs	r2, r2, #12
 8009b9c:	0349      	lsls	r1, r1, #13
 8009b9e:	4311      	orrs	r1, r2
 8009ba0:	07c0      	lsls	r0, r0, #31
 8009ba2:	d403      	bmi.n	8009bac <__ieee754_sqrt+0xac>
 8009ba4:	0fda      	lsrs	r2, r3, #31
 8009ba6:	0049      	lsls	r1, r1, #1
 8009ba8:	1851      	adds	r1, r2, r1
 8009baa:	005b      	lsls	r3, r3, #1
 8009bac:	2500      	movs	r5, #0
 8009bae:	1062      	asrs	r2, r4, #1
 8009bb0:	0049      	lsls	r1, r1, #1
 8009bb2:	2480      	movs	r4, #128	@ 0x80
 8009bb4:	9205      	str	r2, [sp, #20]
 8009bb6:	0fda      	lsrs	r2, r3, #31
 8009bb8:	1852      	adds	r2, r2, r1
 8009bba:	2016      	movs	r0, #22
 8009bbc:	0029      	movs	r1, r5
 8009bbe:	005b      	lsls	r3, r3, #1
 8009bc0:	03a4      	lsls	r4, r4, #14
 8009bc2:	190e      	adds	r6, r1, r4
 8009bc4:	4296      	cmp	r6, r2
 8009bc6:	dc02      	bgt.n	8009bce <__ieee754_sqrt+0xce>
 8009bc8:	1931      	adds	r1, r6, r4
 8009bca:	1b92      	subs	r2, r2, r6
 8009bcc:	192d      	adds	r5, r5, r4
 8009bce:	0fde      	lsrs	r6, r3, #31
 8009bd0:	0052      	lsls	r2, r2, #1
 8009bd2:	3801      	subs	r0, #1
 8009bd4:	1992      	adds	r2, r2, r6
 8009bd6:	005b      	lsls	r3, r3, #1
 8009bd8:	0864      	lsrs	r4, r4, #1
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	d1f1      	bne.n	8009bc2 <__ieee754_sqrt+0xc2>
 8009bde:	2620      	movs	r6, #32
 8009be0:	2780      	movs	r7, #128	@ 0x80
 8009be2:	0004      	movs	r4, r0
 8009be4:	9604      	str	r6, [sp, #16]
 8009be6:	063f      	lsls	r7, r7, #24
 8009be8:	183e      	adds	r6, r7, r0
 8009bea:	46b4      	mov	ip, r6
 8009bec:	428a      	cmp	r2, r1
 8009bee:	dc02      	bgt.n	8009bf6 <__ieee754_sqrt+0xf6>
 8009bf0:	d114      	bne.n	8009c1c <__ieee754_sqrt+0x11c>
 8009bf2:	429e      	cmp	r6, r3
 8009bf4:	d812      	bhi.n	8009c1c <__ieee754_sqrt+0x11c>
 8009bf6:	4660      	mov	r0, ip
 8009bf8:	4666      	mov	r6, ip
 8009bfa:	19c0      	adds	r0, r0, r7
 8009bfc:	9100      	str	r1, [sp, #0]
 8009bfe:	2e00      	cmp	r6, #0
 8009c00:	da03      	bge.n	8009c0a <__ieee754_sqrt+0x10a>
 8009c02:	43c6      	mvns	r6, r0
 8009c04:	0ff6      	lsrs	r6, r6, #31
 8009c06:	198e      	adds	r6, r1, r6
 8009c08:	9600      	str	r6, [sp, #0]
 8009c0a:	1a52      	subs	r2, r2, r1
 8009c0c:	4563      	cmp	r3, ip
 8009c0e:	4189      	sbcs	r1, r1
 8009c10:	4249      	negs	r1, r1
 8009c12:	1a52      	subs	r2, r2, r1
 8009c14:	4661      	mov	r1, ip
 8009c16:	1a5b      	subs	r3, r3, r1
 8009c18:	9900      	ldr	r1, [sp, #0]
 8009c1a:	19e4      	adds	r4, r4, r7
 8009c1c:	0fde      	lsrs	r6, r3, #31
 8009c1e:	0052      	lsls	r2, r2, #1
 8009c20:	1992      	adds	r2, r2, r6
 8009c22:	9e04      	ldr	r6, [sp, #16]
 8009c24:	005b      	lsls	r3, r3, #1
 8009c26:	3e01      	subs	r6, #1
 8009c28:	087f      	lsrs	r7, r7, #1
 8009c2a:	9604      	str	r6, [sp, #16]
 8009c2c:	2e00      	cmp	r6, #0
 8009c2e:	d1db      	bne.n	8009be8 <__ieee754_sqrt+0xe8>
 8009c30:	431a      	orrs	r2, r3
 8009c32:	d01f      	beq.n	8009c74 <__ieee754_sqrt+0x174>
 8009c34:	4e21      	ldr	r6, [pc, #132]	@ (8009cbc <__ieee754_sqrt+0x1bc>)
 8009c36:	4f22      	ldr	r7, [pc, #136]	@ (8009cc0 <__ieee754_sqrt+0x1c0>)
 8009c38:	6830      	ldr	r0, [r6, #0]
 8009c3a:	6871      	ldr	r1, [r6, #4]
 8009c3c:	683a      	ldr	r2, [r7, #0]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	9200      	str	r2, [sp, #0]
 8009c42:	9301      	str	r3, [sp, #4]
 8009c44:	6832      	ldr	r2, [r6, #0]
 8009c46:	6873      	ldr	r3, [r6, #4]
 8009c48:	9202      	str	r2, [sp, #8]
 8009c4a:	9303      	str	r3, [sp, #12]
 8009c4c:	9a00      	ldr	r2, [sp, #0]
 8009c4e:	9b01      	ldr	r3, [sp, #4]
 8009c50:	f7f8 fa60 	bl	8002114 <__aeabi_dsub>
 8009c54:	0002      	movs	r2, r0
 8009c56:	000b      	movs	r3, r1
 8009c58:	9802      	ldr	r0, [sp, #8]
 8009c5a:	9903      	ldr	r1, [sp, #12]
 8009c5c:	f7f6 fc06 	bl	800046c <__aeabi_dcmple>
 8009c60:	2800      	cmp	r0, #0
 8009c62:	d007      	beq.n	8009c74 <__ieee754_sqrt+0x174>
 8009c64:	6830      	ldr	r0, [r6, #0]
 8009c66:	6871      	ldr	r1, [r6, #4]
 8009c68:	683a      	ldr	r2, [r7, #0]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	1c67      	adds	r7, r4, #1
 8009c6e:	d10c      	bne.n	8009c8a <__ieee754_sqrt+0x18a>
 8009c70:	9c04      	ldr	r4, [sp, #16]
 8009c72:	3501      	adds	r5, #1
 8009c74:	4a13      	ldr	r2, [pc, #76]	@ (8009cc4 <__ieee754_sqrt+0x1c4>)
 8009c76:	106b      	asrs	r3, r5, #1
 8009c78:	189b      	adds	r3, r3, r2
 8009c7a:	9a05      	ldr	r2, [sp, #20]
 8009c7c:	07ed      	lsls	r5, r5, #31
 8009c7e:	0864      	lsrs	r4, r4, #1
 8009c80:	0512      	lsls	r2, r2, #20
 8009c82:	4325      	orrs	r5, r4
 8009c84:	0028      	movs	r0, r5
 8009c86:	18d1      	adds	r1, r2, r3
 8009c88:	e751      	b.n	8009b2e <__ieee754_sqrt+0x2e>
 8009c8a:	f7f6 ff5d 	bl	8000b48 <__aeabi_dadd>
 8009c8e:	6877      	ldr	r7, [r6, #4]
 8009c90:	6836      	ldr	r6, [r6, #0]
 8009c92:	0002      	movs	r2, r0
 8009c94:	000b      	movs	r3, r1
 8009c96:	0030      	movs	r0, r6
 8009c98:	0039      	movs	r1, r7
 8009c9a:	f7f6 fbdd 	bl	8000458 <__aeabi_dcmplt>
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	d004      	beq.n	8009cac <__ieee754_sqrt+0x1ac>
 8009ca2:	3402      	adds	r4, #2
 8009ca4:	4263      	negs	r3, r4
 8009ca6:	4163      	adcs	r3, r4
 8009ca8:	18ed      	adds	r5, r5, r3
 8009caa:	e7e3      	b.n	8009c74 <__ieee754_sqrt+0x174>
 8009cac:	2301      	movs	r3, #1
 8009cae:	3401      	adds	r4, #1
 8009cb0:	439c      	bics	r4, r3
 8009cb2:	e7df      	b.n	8009c74 <__ieee754_sqrt+0x174>
 8009cb4:	7ff00000 	.word	0x7ff00000
 8009cb8:	fffffc01 	.word	0xfffffc01
 8009cbc:	0800a158 	.word	0x0800a158
 8009cc0:	0800a150 	.word	0x0800a150
 8009cc4:	3fe00000 	.word	0x3fe00000

08009cc8 <_init>:
 8009cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cca:	46c0      	nop			@ (mov r8, r8)
 8009ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cce:	bc08      	pop	{r3}
 8009cd0:	469e      	mov	lr, r3
 8009cd2:	4770      	bx	lr

08009cd4 <_fini>:
 8009cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd6:	46c0      	nop			@ (mov r8, r8)
 8009cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cda:	bc08      	pop	{r3}
 8009cdc:	469e      	mov	lr, r3
 8009cde:	4770      	bx	lr
